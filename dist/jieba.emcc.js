

// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};



// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)

  if (!Module.expectedDataFileDownloads) {
    Module.expectedDataFileDownloads = 0;
  }
  Module.expectedDataFileDownloads++;
  (function() {
   var loadPackage = function(metadata) {
  
    function runWithFS() {
  
      function assert(check, msg) {
        if (!check) throw msg + new Error().stack;
      }
  var fileData0 = [];
Module['FS_createDataFile']('/', 'embed', fileData0, true, true, false);

    }
    if (Module['calledRun']) {
      runWithFS();
    } else {
      if (!Module['preRun']) Module['preRun'] = [];
      Module["preRun"].push(runWithFS); // FS is not initialized yet, wait for it
    }
  
   }
   loadPackage({"files": []});
  
  })();
  
/* eslint-disable */
module.exports = function() {
  var Module = {};
  (function() {
    var loadPackage = function(metadata) {
      function runWithFS() {
        function assert(check, msg) {
          if (!check) throw msg + new Error().stack;
        }
      }
      if (Module['calledRun']) {
        runWithFS();
      } else {
        if (!Module['preRun']) Module['preRun'] = [];
        Module["preRun"].push(runWithFS); // FS is not initialized yet, wait for it
      }
    }
    loadPackage({
      "files": []
    });
  })();
  var args = Array.prototype.slice.call(arguments)
  Module.preRun.push(function() {
    var JiebaDict = args[0] || 'default 1 n\n'
    var HMMModel = args[1] || '0 0 0 0\n0 0 0 0\n0 0 0 0\n0 0 0 0\n0 0 0 0\nb:0\ne:0\nm:0\ns:0\n'
    var UserDict = args[2] || ''
    var IDF = args[3] || 'default 1\n'
    var StopWords = args[4] || '\n'
    var createDataFile = Module.FS_createDataFile
    createDataFile('/', 'jieba.dict.utf8', JiebaDict, true)
    createDataFile('/', 'hmm_model.utf8', HMMModel, true)
    createDataFile('/', 'user.dict.utf8', UserDict, true)
    createDataFile('/', 'idf.utf8', IDF, true)
    createDataFile('/', 'stop_words.utf8', StopWords, true)
  })

  var _result = []
  var _array = []

/** ... */
// }
/** in post.js */



// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

var arguments_ = [];
var thisProgram = './this.program';
var quit_ = function(status, toThrow) {
  throw toThrow;
};

// Determine the runtime environment we are in. You can customize this by
// setting the ENVIRONMENT setting at compile time (see settings.js).

var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;
ENVIRONMENT_IS_WEB = typeof window === 'object';
ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
// N.b. Electron.js environment is simultaneously a NODE-environment, but
// also a web environment.
ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof process.versions === 'object' && typeof process.versions.node === 'string';
ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;




// `/` should be present at the end if `scriptDirectory` is not empty
var scriptDirectory = '';
function locateFile(path) {
  if (Module['locateFile']) {
    return Module['locateFile'](path, scriptDirectory);
  }
  return scriptDirectory + path;
}

// Hooks that are implemented differently in different runtime environments.
var read_,
    readAsync,
    readBinary,
    setWindowTitle;

var nodeFS;
var nodePath;

if (ENVIRONMENT_IS_NODE) {
  if (ENVIRONMENT_IS_WORKER) {
    scriptDirectory = require('path').dirname(scriptDirectory) + '/';
  } else {
    scriptDirectory = __dirname + '/';
  }




  read_ = function shell_read(filename, binary) {
    var ret = tryParseAsDataURI(filename);
    if (ret) {
      return binary ? ret : ret.toString();
    }
    if (!nodeFS) nodeFS = require('fs');
    if (!nodePath) nodePath = require('path');
    filename = nodePath['normalize'](filename);
    return nodeFS['readFileSync'](filename, binary ? null : 'utf8');
  };

  readBinary = function readBinary(filename) {
    var ret = read_(filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };




  if (process['argv'].length > 1) {
    thisProgram = process['argv'][1].replace(/\\/g, '/');
  }

  arguments_ = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  process['on']('unhandledRejection', abort);

  quit_ = function(status) {
    process['exit'](status);
  };

  Module['inspect'] = function () { return '[Emscripten Module object]'; };



} else
if (ENVIRONMENT_IS_SHELL) {


  if (typeof read != 'undefined') {
    read_ = function shell_read(f) {
      var data = tryParseAsDataURI(f);
      if (data) {
        return intArrayToString(data);
      }
      return read(f);
    };
  }

  readBinary = function readBinary(f) {
    var data;
    data = tryParseAsDataURI(f);
    if (data) {
      return data;
    }
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    arguments_ = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    arguments_ = arguments;
  }

  if (typeof quit === 'function') {
    quit_ = function(status) {
      quit(status);
    };
  }

  if (typeof print !== 'undefined') {
    // Prefer to use print/printErr where they exist, as they usually work better.
    if (typeof console === 'undefined') console = /** @type{!Console} */({});
    console.log = /** @type{!function(this:Console, ...*): undefined} */ (print);
    console.warn = console.error = /** @type{!function(this:Console, ...*): undefined} */ (typeof printErr !== 'undefined' ? printErr : print);
  }


} else

// Note that this includes Node.js workers when relevant (pthreads is enabled).
// Node.js workers are detected as a combination of ENVIRONMENT_IS_WORKER and
// ENVIRONMENT_IS_NODE.
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  if (ENVIRONMENT_IS_WORKER) { // Check worker, not web, since window could be polyfilled
    scriptDirectory = self.location.href;
  } else if (document.currentScript) { // web
    scriptDirectory = document.currentScript.src;
  }
  // blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.
  // otherwise, slice off the final part of the url to find the script directory.
  // if scriptDirectory does not contain a slash, lastIndexOf will return -1,
  // and scriptDirectory will correctly be replaced with an empty string.
  if (scriptDirectory.indexOf('blob:') !== 0) {
    scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf('/')+1);
  } else {
    scriptDirectory = '';
  }


  // Differentiate the Web Worker from the Node Worker case, as reading must
  // be done differently.
  {




  read_ = function shell_read(url) {
    try {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
    } catch (err) {
      var data = tryParseAsDataURI(url);
      if (data) {
        return intArrayToString(data);
      }
      throw err;
    }
  };

  if (ENVIRONMENT_IS_WORKER) {
    readBinary = function readBinary(url) {
      try {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(/** @type{!ArrayBuffer} */(xhr.response));
      } catch (err) {
        var data = tryParseAsDataURI(url);
        if (data) {
          return data;
        }
        throw err;
      }
    };
  }

  readAsync = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      var data = tryParseAsDataURI(url);
      if (data) {
        onload(data.buffer);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };




  }

  setWindowTitle = function(title) { document.title = title };
} else
{
}


// Set up the out() and err() hooks, which are how we can print to stdout or
// stderr, respectively.
var out = Module['print'] || console.log.bind(console);
var err = Module['printErr'] || console.warn.bind(console);

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = null;

// Emit code to handle expected values on the Module object. This applies Module.x
// to the proper local x. This has two benefits: first, we only emit it if it is
// expected to arrive, and second, by using a local everywhere else that can be
// minified.
if (Module['arguments']) arguments_ = Module['arguments'];
if (Module['thisProgram']) thisProgram = Module['thisProgram'];
if (Module['quit']) quit_ = Module['quit'];

// perform assertions in shell.js after we set up out() and err(), as otherwise if an assertion fails it cannot print the message





// {{PREAMBLE_ADDITIONS}}

var STACK_ALIGN = 16;

function dynamicAlloc(size) {
  var ret = HEAP32[DYNAMICTOP_PTR>>2];
  var end = (ret + size + 15) & -16;
  HEAP32[DYNAMICTOP_PTR>>2] = end;
  return ret;
}

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  return Math.ceil(size / factor) * factor;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = Number(type.substr(1));
        assert(bits % 8 === 0, 'getNativeTypeSize invalid bits ' + bits + ', type ' + type);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    err(text);
  }
}








// Wraps a JS function as a wasm function with a given signature.
function convertJsFunctionToWasm(func, sig) {
  return func;
}

var freeTableIndexes = [];

// Weak map of functions in the table to their indexes, created on first use.
var functionsInTableMap;

// Add a wasm function to the table.
function addFunctionWasm(func, sig) {
  var table = wasmTable;

  // Check if the function is already in the table, to ensure each function
  // gets a unique index. First, create the map if this is the first use.
  if (!functionsInTableMap) {
    functionsInTableMap = new WeakMap();
    for (var i = 0; i < table.length; i++) {
      var item = table.get(i);
      // Ignore null values.
      if (item) {
        functionsInTableMap.set(item, i);
      }
    }
  }
  if (functionsInTableMap.has(func)) {
    return functionsInTableMap.get(func);
  }

  // It's not in the table, add it now.


  var ret;
  // Reuse a free index if there is one, otherwise grow.
  if (freeTableIndexes.length) {
    ret = freeTableIndexes.pop();
  } else {
    ret = table.length;
    // Grow the table
    try {
      table.grow(1);
    } catch (err) {
      if (!(err instanceof RangeError)) {
        throw err;
      }
      throw 'Unable to grow wasm table. Set ALLOW_TABLE_GROWTH.';
    }
  }

  // Set the new value.
  try {
    // Attempting to call this with JS function will cause of table.set() to fail
    table.set(ret, func);
  } catch (err) {
    if (!(err instanceof TypeError)) {
      throw err;
    }
    var wrapped = convertJsFunctionToWasm(func, sig);
    table.set(ret, wrapped);
  }

  functionsInTableMap.set(func, ret);

  return ret;
}

function removeFunctionWasm(index) {
  functionsInTableMap.delete(wasmTable.get(index));
  freeTableIndexes.push(index);
}

// 'sig' parameter is required for the llvm backend but only when func is not
// already a WebAssembly function.
function addFunction(func, sig) {

  return addFunctionWasm(func, sig);
}

function removeFunction(index) {
  removeFunctionWasm(index);
}



var funcWrappers = {};

function getFuncWrapper(func, sig) {
  if (!func) return; // on null pointer, return undefined
  assert(sig);
  if (!funcWrappers[sig]) {
    funcWrappers[sig] = {};
  }
  var sigCache = funcWrappers[sig];
  if (!sigCache[func]) {
    // optimize away arguments usage in common cases
    if (sig.length === 1) {
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func);
      };
    } else if (sig.length === 2) {
      sigCache[func] = function dynCall_wrapper(arg) {
        return dynCall(sig, func, [arg]);
      };
    } else {
      // general case
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func, Array.prototype.slice.call(arguments));
      };
    }
  }
  return sigCache[func];
}







function makeBigInt(low, high, unsigned) {
  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}

/** @param {Array=} args */
function dynCall(sig, ptr, args) {
  if (args && args.length) {
    return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
  } else {
    return Module['dynCall_' + sig].call(null, ptr);
  }
}

var tempRet0 = 0;

var setTempRet0 = function(value) {
  tempRet0 = value;
};

var getTempRet0 = function() {
  return tempRet0;
};


// The address globals begin at. Very low in memory, for code size and optimization opportunities.
// Above 0 is static memory, starting with globals.
// Then the stack.
// Then 'dynamic' memory for sbrk.
var GLOBAL_BASE = 1024;





// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html


var wasmBinary;if (Module['wasmBinary']) wasmBinary = Module['wasmBinary'];
var noExitRuntime;if (Module['noExitRuntime']) noExitRuntime = Module['noExitRuntime'];




// wasm2js.js - enough of a polyfill for the WebAssembly object so that we can load
// wasm2js code that way.

// Emit "var WebAssembly" if definitely using wasm2js. Otherwise, in MAYBE_WASM2JS
// mode, we can't use a "var" since it would prevent normal wasm from working.
/** @suppress{const} */
var
WebAssembly = {
  Memory: /** @constructor */ function(opts) {
    return {
      buffer: new ArrayBuffer(opts['initial'] * 65536),
      grow: function(amount) {
        var ret = __growWasmMemory(amount);
        return ret;
      }
    };
  },

  Table: function(opts) {
    var ret = new Array(opts['initial']);
    ret.grow = function(by) {
      if (ret.length >= 410 + 0) {
        abort('Unable to grow wasm table. Use a higher value for RESERVED_FUNCTION_POINTERS or set ALLOW_TABLE_GROWTH.')
      }
      ret.push(null);
    };
    ret.set = function(i, func) {
      ret[i] = func;
    };
    ret.get = function(i) {
      return ret[i];
    };
    return ret;
  },

  Module: function(binary) {
    // TODO: use the binary and info somehow - right now the wasm2js output is embedded in
    // the main JS
    return {};
  },

  Instance: function(module, info) {
    // TODO: use the module and info somehow - right now the wasm2js output is embedded in
    // the main JS
    // This will be replaced by the actual wasm2js code.
    var exports = (
function instantiate(asmLibraryArg, wasmMemory, wasmTable) {


  var scratchBuffer = new ArrayBuffer(8);
  var i32ScratchView = new Int32Array(scratchBuffer);
  var f32ScratchView = new Float32Array(scratchBuffer);
  var f64ScratchView = new Float64Array(scratchBuffer);
  
  function wasm2js_scratch_load_i32(index) {
    return i32ScratchView[index];
  }
      
  function wasm2js_scratch_store_i32(index, value) {
    i32ScratchView[index] = value;
  }
      
  function wasm2js_scratch_load_f64() {
    return f64ScratchView[0];
  }
      
  function wasm2js_scratch_store_f64(value) {
    f64ScratchView[0] = value;
  }
      
  function legalimport$wasm2js_scratch_store_i64(low, high) {
    i32ScratchView[0] = low;
    i32ScratchView[1] = high;
  }
      
  function wasm2js_scratch_store_f32(value) {
    f32ScratchView[0] = value;
  }
      
  function wasm2js_scratch_load_f32() {
    return f32ScratchView[0];
  }
      
function asmFunc(global, env, buffer) {
 var memory = env.memory;
 var FUNCTION_TABLE = wasmTable;
 var HEAP8 = new global.Int8Array(buffer);
 var HEAP16 = new global.Int16Array(buffer);
 var HEAP32 = new global.Int32Array(buffer);
 var HEAPU8 = new global.Uint8Array(buffer);
 var HEAPU16 = new global.Uint16Array(buffer);
 var HEAPU32 = new global.Uint32Array(buffer);
 var HEAPF32 = new global.Float32Array(buffer);
 var HEAPF64 = new global.Float64Array(buffer);
 var Math_imul = global.Math.imul;
 var Math_fround = global.Math.fround;
 var Math_abs = global.Math.abs;
 var Math_clz32 = global.Math.clz32;
 var Math_min = global.Math.min;
 var Math_max = global.Math.max;
 var Math_floor = global.Math.floor;
 var Math_ceil = global.Math.ceil;
 var Math_sqrt = global.Math.sqrt;
 var abort = env.abort;
 var nan = global.NaN;
 var infinity = global.Infinity;
 var fimport$0 = env.result_push_word;
 var fimport$1 = env.result_push_word_offset;
 var fimport$2 = env.result_push_tag;
 var fimport$3 = env.array_push_size;
 var fimport$4 = env.result_push_keyword;
 var fimport$5 = env.__assert_fail;
 var fimport$6 = env.time;
 var fimport$7 = env.localtime;
 var fimport$8 = env.strftime;
 var fimport$9 = env.abort;
 var fimport$10 = env.__cxa_allocate_exception;
 var fimport$11 = env.__cxa_throw;
 var fimport$12 = env.__sys_open;
 var fimport$13 = env.__sys_fcntl64;
 var fimport$14 = env.__sys_ioctl;
 var fimport$15 = env.fd_write;
 var fimport$16 = env.fd_read;
 var fimport$17 = env.fd_close;
 var fimport$18 = env.environ_sizes_get;
 var fimport$19 = env.environ_get;
 var fimport$20 = env.__map_file;
 var fimport$21 = env.__sys_munmap;
 var fimport$22 = env.strftime_l;
 var fimport$23 = env.emscripten_resize_heap;
 var fimport$24 = env.emscripten_memcpy_big;
 var fimport$25 = env.setTempRet0;
 var fimport$26 = env.fd_seek;
 var global$0 = 5268512;
 var global$1 = 25464;
 var i64toi32_i32$HIGH_BITS = 0;
 // EMSCRIPTEN_START_FUNCS
;
 function $1() {
  $1791();
  __inlined_func$1739 : {
   if (HEAP8[22880] & 1) {
    break __inlined_func$1739
   }
   if (!$2540(22880)) {
    break __inlined_func$1739
   }
   $1741();
   $2546(22880);
  }
  $2();
 }
 
 function $2() {
  var $0 = 0, $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $0 = global$0 - 80 | 0;
  global$0 = $0;
  $1_1 = $3($0 - -64 | 0, 1024);
  $2_1 = $3($0 + 48 | 0, 1041);
  $3_1 = $3($0 + 32 | 0, 1057);
  $4_1 = $3($0 + 16 | 0, 1073);
  $5_1 = $3($0, 1083);
  $4($1_1, $2_1, $3_1, $4_1, $5_1);
  $2512($5_1);
  $2512($4_1);
  $2512($3_1);
  $2512($2_1);
  $2512($1_1);
  global$0 = $0 + 80 | 0;
 }
 
 function $3($0, $1_1) {
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $2510($0, $1_1, $2597($1_1));
  global$0 = $2_1 + 16 | 0;
  return $0;
 }
 
 function $4($0, $1_1, $2_1, $3_1, $4_1) {
  $26(18832);
  $160();
  $161(18912);
  $148($0, $2_1);
  $0 = $9($1_1);
  $10(19200, 18832);
  $11(19232, $0);
  $12(19264, 18832, $0);
  $13(18832);
  $154(19388);
  HEAP32[4847] = 3808;
  $12(19412, 18832, $0);
  HEAP32[4876] = 18832;
  $12(19512, 18832, $0);
  $149(19604);
  $161(19632);
  $157($3_1);
  $158($4_1);
 }
 
 function $5($0) {
  $0 = $0 | 0;
  $16();
 }
 
 function $9($0) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $3_1 = $149(19104);
  $4_1 = $149(19124);
  $5_1 = $149(19144);
  $6 = $149(19164);
  $2_1 = $26(19184);
  $2592(18944, 0, 160);
  HEAP32[4734] = 1397572930;
  HEAP32[$1_1 + 12 >> 2] = $3_1;
  $151($2_1, $1_1 + 12 | 0);
  HEAP32[$1_1 + 12 >> 2] = $4_1;
  $151($2_1, $1_1 + 12 | 0);
  HEAP32[$1_1 + 12 >> 2] = $5_1;
  $151($2_1, $1_1 + 12 | 0);
  HEAP32[$1_1 + 12 >> 2] = $6;
  $151($2_1, $1_1 + 12 | 0);
  $152($0);
  global$0 = $1_1 + 16 | 0;
  return 18936;
 }
 
 function $10($0, $1_1) {
  $153($0);
  HEAP8[$0 + 28 | 0] = 0;
  HEAP32[$0 + 24 >> 2] = $1_1;
  HEAP32[$0 >> 2] = 2800;
  if (!HEAP32[$0 + 24 >> 2]) {
   fimport$5(2820, 2830, 21, 2872);
   abort();
  }
 }
 
 function $11($0, $1_1) {
  $154($0);
  HEAP8[$0 + 28 | 0] = 0;
  HEAP32[$0 + 24 >> 2] = $1_1;
  HEAP32[$0 >> 2] = 3472;
 }
 
 function $12($0, $1_1, $2_1) {
  $153($0);
  HEAP32[$0 >> 2] = 3528;
  $10($0 + 24 | 0, $1_1);
  $11($0 + 56 | 0, $2_1);
 }
 
 function $13($0) {
  $154(19356);
  HEAP8[19384] = 0;
  HEAP32[4845] = $0;
  HEAP32[4839] = 3664;
  if (!$0) {
   fimport$5(2820, 3676, 21, 3720);
   abort();
  }
 }
 
 function $16() {
  $1379(HEAP32[4910]);
  $858(19632);
  $1382(HEAP32[4903]);
  $858(19604);
  $20(19512);
  $18(19388);
  $19(19356);
  $20(19264);
  $21(19232);
  $22(19200);
  $23(18936);
  $24(18832);
 }
 
 function $18($0) {
  $0 = $0 | 0;
  HEAP32[$0 >> 2] = 3808;
  $20($0 + 24 | 0);
  $844($0);
  return $0 | 0;
 }
 
 function $19($0) {
  $0 = $0 | 0;
  var $1_1 = 0;
  HEAP32[$0 >> 2] = 3664;
  label$1 : {
   if (!HEAPU8[$0 + 28 | 0]) {
    break label$1
   }
   $1_1 = HEAP32[$0 + 24 >> 2];
   if (!$1_1) {
    break label$1
   }
   $2583($24($1_1));
  }
  $844($0);
  return $0 | 0;
 }
 
 function $20($0) {
  $0 = $0 | 0;
  HEAP32[$0 >> 2] = 3528;
  $21($0 + 56 | 0);
  $22($0 + 24 | 0);
  $844($0);
  return $0 | 0;
 }
 
 function $21($0) {
  $0 = $0 | 0;
  var $1_1 = 0;
  HEAP32[$0 >> 2] = 3472;
  label$1 : {
   if (!HEAPU8[$0 + 28 | 0]) {
    break label$1
   }
   $1_1 = HEAP32[$0 + 24 >> 2];
   if (!$1_1) {
    break label$1
   }
   $2583($23($1_1));
  }
  $844($0);
  return $0 | 0;
 }
 
 function $22($0) {
  $0 = $0 | 0;
  var $1_1 = 0;
  HEAP32[$0 >> 2] = 2800;
  label$1 : {
   if (!HEAPU8[$0 + 28 | 0]) {
    break label$1
   }
   $1_1 = HEAP32[$0 + 24 >> 2];
   if (!$1_1) {
    break label$1
   }
   $2583($24($1_1));
  }
  $844($0);
  return $0 | 0;
 }
 
 function $23($0) {
  $92($0 + 248 | 0);
  $857($0 + 228 | 0);
  $857($0 + 208 | 0);
  $857($0 + 188 | 0);
  $857($0 + 168 | 0);
  return $0;
 }
 
 function $24($0) {
  var $1_1 = 0;
  $1_1 = HEAP32[$0 + 36 >> 2];
  if ($1_1) {
   $862($1_1, HEAP32[$1_1 >> 2]);
   $2583($1_1);
  }
  $857($0 + 80 | 0);
  $861($0 + 12 | 0);
  $206($0);
  return $0;
 }
 
 function $25($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $2_1 = global$0 - 48 | 0;
  global$0 = $2_1;
  $3_1 = $26($2_1 + 32 | 0);
  $0 = $27($2_1 + 16 | 0, $0, $2597($0));
  $37(19264, $0, $3_1, $1_1);
  (wasm2js_i32$0 = $2_1, wasm2js_i32$1 = $29($3_1)), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $2_1, wasm2js_i32$1 = $30($3_1)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  if ($31($2_1 + 8 | 0, $2_1)) {
   while (1) {
    fimport$0($320(HEAP32[$2_1 + 8 >> 2]) | 0);
    $42($2_1 + 8 | 0);
    (wasm2js_i32$0 = $2_1, wasm2js_i32$1 = $30($3_1)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    if ($31($2_1 + 8 | 0, $2_1)) {
     continue
    }
    break;
   }
  }
  $2512($0);
  $35($3_1);
  global$0 = $2_1 + 48 | 0;
  return 0;
 }
 
 function $26($0) {
  $36($0);
  return $0;
 }
 
 function $27($0, $1_1, $2_1) {
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $2510($0, $1_1, $2_1);
  global$0 = $3_1 + 16 | 0;
  return $0;
 }
 
 function $29($0) {
  return $38(HEAP32[$0 >> 2]);
 }
 
 function $30($0) {
  return $38(HEAP32[$0 + 4 >> 2]);
 }
 
 function $31($0, $1_1) {
  return HEAP32[$0 >> 2] == HEAP32[$1_1 >> 2] ^ 1;
 }
 
 function $35($0) {
  var $1_1 = 0;
  $43($0);
  if (HEAP32[$0 >> 2]) {
   $379($0);
   $130($0);
   $1_1 = HEAP32[$0 >> 2];
   $393($0);
   $2583($1_1);
  }
 }
 
 function $36($0) {
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$1_1 + 12 >> 2] = 0;
  $169($0 + 8 | 0, $1_1 + 12 | 0, $1_1 + 8 | 0);
  global$0 = $1_1 + 16 | 0;
 }
 
 function $37($0, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $5_1 = $0;
  $0 = $26($4_1);
  $1256($5_1, $1_1, $0, $3_1);
  $897($0, $2_1);
  $58($0);
  global$0 = $4_1 + 16 | 0;
 }
 
 function $38($0) {
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $0 = HEAP32[$431($1_1 + 8 | 0, $0) >> 2];
  global$0 = $1_1 + 16 | 0;
  return $0;
 }
 
 function $40($0) {
  $0 = $0 | 0;
  return $0 | 0;
 }
 
 function $42($0) {
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 12;
 }
 
 function $43($0) {
  $393($0);
  $98($0);
  $393($0);
 }
 
 function $45($0) {
  $0 = $0 | 0;
  var $1_1 = 0, $2_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $1_1 = global$0 - 48 | 0;
  global$0 = $1_1;
  $2_1 = $26($1_1 + 32 | 0);
  $0 = $27($1_1 + 16 | 0, $0, $2597($0));
  $47(19356, $0, $2_1);
  (wasm2js_i32$0 = $1_1, wasm2js_i32$1 = $29($2_1)), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $1_1, wasm2js_i32$1 = $30($2_1)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  if ($31($1_1 + 8 | 0, $1_1)) {
   while (1) {
    fimport$0($320(HEAP32[$1_1 + 8 >> 2]) | 0);
    $42($1_1 + 8 | 0);
    (wasm2js_i32$0 = $1_1, wasm2js_i32$1 = $30($2_1)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    if ($31($1_1 + 8 | 0, $1_1)) {
     continue
    }
    break;
   }
  }
  $2512($0);
  $35($2_1);
  global$0 = $1_1 + 48 | 0;
  return 0;
 }
 
 function $47($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = $0;
  $0 = $26($3_1);
  $1263($4_1, $1_1, $0);
  $897($0, $2_1);
  $58($0);
  global$0 = $3_1 + 16 | 0;
 }
 
 function $48($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $2_1 = global$0 - 48 | 0;
  global$0 = $2_1;
  $3_1 = $26($2_1 + 32 | 0);
  $0 = $27($2_1 + 16 | 0, $0, $2597($0));
  $50(19388, $0, $3_1, $1_1);
  (wasm2js_i32$0 = $2_1, wasm2js_i32$1 = $29($3_1)), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $2_1, wasm2js_i32$1 = $30($3_1)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  if ($31($2_1 + 8 | 0, $2_1)) {
   while (1) {
    fimport$0($320(HEAP32[$2_1 + 8 >> 2]) | 0);
    $42($2_1 + 8 | 0);
    (wasm2js_i32$0 = $2_1, wasm2js_i32$1 = $30($3_1)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    if ($31($2_1 + 8 | 0, $2_1)) {
     continue
    }
    break;
   }
  }
  $2512($0);
  $35($3_1);
  global$0 = $2_1 + 48 | 0;
  return 0;
 }
 
 function $50($0, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $5_1 = $0;
  $0 = $26($4_1);
  $60($5_1, $1_1, $0, $3_1);
  $897($0, $2_1);
  $58($0);
  global$0 = $4_1 + 16 | 0;
 }
 
 function $51($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $2_1 = global$0 - 48 | 0;
  global$0 = $2_1;
  $3_1 = $26($2_1 + 32 | 0);
  $0 = $27($2_1 + 16 | 0, $0, $2597($0));
  $60(19388, $0, $3_1, $1_1);
  (wasm2js_i32$0 = $2_1, wasm2js_i32$1 = $29($3_1)), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $2_1, wasm2js_i32$1 = $30($3_1)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  if ($31($2_1 + 8 | 0, $2_1)) {
   while (1) {
    fimport$1($320(HEAP32[$2_1 + 8 >> 2]) | 0, HEAP32[HEAP32[$2_1 + 8 >> 2] + 12 >> 2], HEAP32[HEAP32[$2_1 + 8 >> 2] + 16 >> 2]);
    $61($2_1 + 8 | 0);
    (wasm2js_i32$0 = $2_1, wasm2js_i32$1 = $30($3_1)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    if ($31($2_1 + 8 | 0, $2_1)) {
     continue
    }
    break;
   }
  }
  $2512($0);
  $58($3_1);
  global$0 = $2_1 + 48 | 0;
  return 0;
 }
 
 function $58($0) {
  var $1_1 = 0;
  $62($0);
  if (HEAP32[$0 >> 2]) {
   $927($0);
   $130($0);
   $1_1 = HEAP32[$0 >> 2];
   $1064($0);
   $2583($1_1);
  }
 }
 
 function $60($0, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = 0, $6 = 0;
  $4_1 = global$0 - 368 | 0;
  global$0 = $4_1;
  $6 = $898($4_1 + 24 | 0, $0 + 4 | 0, $1_1);
  $5_1 = $26($4_1 + 8 | 0);
  $900($5_1, $100($1_1) >>> 1 | 0);
  if ($901($6)) {
   while (1) {
    $902($4_1, $6);
    $1268($0, HEAP32[$4_1 >> 2], HEAP32[$4_1 + 4 >> 2], $5_1, $3_1);
    if ($901($6)) {
     continue
    }
    break;
   }
  }
  $904($2_1);
  $906($2_1, $905($5_1));
  $907($1_1, $5_1, $2_1);
  $908($5_1);
  $909($6);
  global$0 = $4_1 + 368 | 0;
 }
 
 function $61($0) {
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 24;
 }
 
 function $62($0) {
  $1064($0);
  $910($0);
  $1064($0);
 }
 
 function $64($0) {
  $0 = $0 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 32 | 0;
  global$0 = $1_1;
  $0 = $3($1_1 + 16 | 0, $0);
  $2_1 = $3($1_1, 1100);
  $66($0, $2_1);
  $2512($2_1);
  $2512($0);
  global$0 = $1_1 + 32 | 0;
  return 0;
 }
 
 function $66($0, $1_1) {
  var $2_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 112 | 0;
  global$0 = $3_1;
  $2_1 = $190($3_1 + 8 | 0);
  if ($194($2_1, $0, HEAPF64[2363], $1_1)) {
   $1385($2_1);
   $660(HEAP32[4717], $2_1, $1386());
  }
  $196($2_1);
  global$0 = $3_1 + 112 | 0;
 }
 
 function $67($0) {
  $0 = $0 | 0;
  var $1_1 = 0, $2_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $1_1 = global$0 - 48 | 0;
  global$0 = $1_1;
  $2_1 = $26($1_1 + 32 | 0);
  $0 = $27($1_1 + 16 | 0, $0, $2597($0));
  $75(19264, $0, $2_1);
  (wasm2js_i32$0 = $1_1, wasm2js_i32$1 = $29($2_1)), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $1_1, wasm2js_i32$1 = $30($2_1)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  if ($31($1_1 + 8 | 0, $1_1)) {
   while (1) {
    fimport$2($320(HEAP32[$1_1 + 8 >> 2]) | 0, $320(HEAP32[$1_1 + 8 >> 2] + 12 | 0) | 0);
    $61($1_1 + 8 | 0);
    (wasm2js_i32$0 = $1_1, wasm2js_i32$1 = $30($2_1)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    if ($31($1_1 + 8 | 0, $1_1)) {
     continue
    }
    break;
   }
  }
  $2512($0);
  $62($2_1);
  $77($2_1);
  global$0 = $1_1 + 48 | 0;
  return 0;
 }
 
 function $75($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $849($1_1, $2_1, $0) | 0;
 }
 
 function $77($0) {
  var $1_1 = 0;
  if (HEAP32[$0 >> 2]) {
   $1569($0, HEAP32[$0 >> 2]);
   $130($0);
   $1_1 = HEAP32[$0 >> 2];
   $1064($0);
   $2583($1_1);
  }
 }
 
 function $78($0) {
  var $1_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  (wasm2js_i32$0 = $1_1, wasm2js_i32$1 = $29($0)), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $1_1, wasm2js_i32$1 = $30($0)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  if ($31($1_1 + 8 | 0, $1_1)) {
   while (1) {
    fimport$3(HEAP32[HEAP32[$1_1 + 8 >> 2] >> 2]);
    $84($1_1 + 8 | 0);
    (wasm2js_i32$0 = $1_1, wasm2js_i32$1 = $30($0)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    if ($31($1_1 + 8 | 0, $1_1)) {
     continue
    }
    break;
   }
  }
  global$0 = $1_1 + 16 | 0;
 }
 
 function $84($0) {
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 4;
 }
 
 function $85($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $2_1 = global$0 + -64 | 0;
  global$0 = $2_1;
  $3_1 = $27($2_1 + 48 | 0, $0, $2597($0));
  $0 = $26($2_1 + 32 | 0);
  $87($3_1, $0, $1_1);
  (wasm2js_i32$0 = $2_1, wasm2js_i32$1 = $29($0)), HEAP32[wasm2js_i32$0 + 24 >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $2_1, wasm2js_i32$1 = $30($0)), HEAP32[wasm2js_i32$0 + 16 >> 2] = wasm2js_i32$1;
  if ($31($2_1 + 24 | 0, $2_1 + 16 | 0)) {
   while (1) {
    $1_1 = $91($2_1, HEAP32[$2_1 + 24 >> 2] + 12 | 0);
    $78($1_1);
    $92($1_1);
    fimport$4($320(HEAP32[$2_1 + 24 >> 2]) | 0, +HEAPF64[HEAP32[$2_1 + 24 >> 2] + 24 >> 3]);
    $138($2_1 + 24 | 0);
    (wasm2js_i32$0 = $2_1, wasm2js_i32$1 = $30($0)), HEAP32[wasm2js_i32$0 + 16 >> 2] = wasm2js_i32$1;
    if ($31($2_1 + 24 | 0, $2_1 + 16 | 0)) {
     continue
    }
    break;
   }
  }
  $139($0);
  $140($0);
  $2512($3_1);
  global$0 = $2_1 - -64 | 0;
  return 0;
 }
 
 function $87($0, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6 = 0, $7 = 0, $8 = 0, $9_1 = 0.0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3_1 = global$0 - 192 | 0;
  global$0 = $3_1;
  HEAP32[$3_1 + 188 >> 2] = $2_1;
  $4_1 = $26($3_1 + 176 | 0);
  $96(19512, $0, $4_1);
  $5_1 = $97($3_1 + 160 | 0);
  if ($98($4_1)) {
   $2_1 = 0;
   while (1) {
    HEAP32[$3_1 >> 2] = $6;
    $8 = $100($99($4_1, $2_1));
    label$4 : {
     if ($101($99($4_1, $2_1))) {
      break label$4
     }
     (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = $1427($99($4_1, $2_1))), HEAP32[wasm2js_i32$0 + 152 >> 2] = wasm2js_i32$1;
     (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = $674()), HEAP32[wasm2js_i32$0 + 144 >> 2] = wasm2js_i32$1;
     if ($104($3_1 + 152 | 0, $3_1 + 144 | 0)) {
      break label$4
     }
     $106($105($5_1, $99($4_1, $2_1)) + 12 | 0, $3_1);
     $7 = $105($5_1, $99($4_1, $2_1));
     HEAPF64[$7 + 24 >> 3] = HEAPF64[$7 + 24 >> 3] + 1.0;
    }
    $6 = $6 + $8 | 0;
    $2_1 = $2_1 + 1 | 0;
    if ($2_1 >>> 0 < $98($4_1) >>> 0) {
     continue
    }
    break;
   };
  }
  label$5 : {
   if (($100($0) | 0) != ($6 | 0)) {
    $0 = $107($3_1, 3, 3860, 74);
    $108($0, 4025);
    $109($0);
    break label$5;
   }
   $0 = $123($1_1);
   $1432($1_1);
   $1433($1_1, $0);
   $112($1_1, HEAP32[$130($5_1) >> 2]);
   (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = $113($5_1)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
   (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = $114($5_1)), HEAP32[wasm2js_i32$0 + 152 >> 2] = wasm2js_i32$1;
   if ($115($3_1, $3_1 + 152 | 0)) {
    while (1) {
     (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = $117($1429($3_1))), HEAP32[wasm2js_i32$0 + 152 >> 2] = wasm2js_i32$1;
     (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = $118()), HEAP32[wasm2js_i32$0 + 144 >> 2] = wasm2js_i32$1;
     if ($115($3_1 + 152 | 0, $3_1 + 144 | 0)) {
      $0 = $678($3_1 + 152 | 0) + 16 | 0
     } else {
      $0 = 19624
     }
     $9_1 = HEAPF64[$0 >> 3];
     $0 = $1429($3_1) + 40 | 0;
     HEAPF64[$0 >> 3] = $9_1 * HEAPF64[$0 >> 3];
     $0 = $1429($3_1);
     $2513($1429($3_1) + 16 | 0, $0);
     $121($1_1, $1429($3_1) + 16 | 0);
     (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = $1539(HEAP32[$3_1 >> 2])), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
     (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = $114($5_1)), HEAP32[wasm2js_i32$0 + 152 >> 2] = wasm2js_i32$1;
     if ($115($3_1, $3_1 + 152 | 0)) {
      continue
     }
     break;
    }
   }
   (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = $123($1_1)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
   (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = HEAP32[$124($3_1 + 188 | 0, $3_1) >> 2]), HEAP32[wasm2js_i32$0 + 188 >> 2] = wasm2js_i32$1;
   $0 = $29($1_1);
   (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = $29($1_1)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
   $127($0, $125($3_1, HEAP32[$3_1 + 188 >> 2]), $30($1_1));
   $128($1_1, HEAP32[$3_1 + 188 >> 2]);
  }
  $1562($5_1, $528($5_1));
  $35($4_1);
  global$0 = $3_1 + 192 | 0;
 }
 
 function $91($0, $1_1) {
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $130($1_1);
  $132($0, $2_1 + 8 | 0);
  $3_1 = $133($1_1);
  if ($3_1) {
   $134($0, $3_1);
   $135($0, HEAP32[$1_1 >> 2], HEAP32[$1_1 + 4 >> 2], $3_1);
  }
  global$0 = $2_1 + 16 | 0;
  return $0;
 }
 
 function $92($0) {
  var $1_1 = 0;
  $136($0);
  if (HEAP32[$0 >> 2]) {
   $726($0);
   $130($0);
   $1_1 = HEAP32[$0 >> 2];
   $651($0);
   $2583($1_1);
  }
 }
 
 function $96($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $37($0, $1_1, $2_1, 1);
 }
 
 function $97($0) {
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $1426($0, $1_1 + 8 | 0);
  global$0 = $1_1 + 16 | 0;
  return $0;
 }
 
 function $98($0) {
  return (HEAP32[$0 + 4 >> 2] - HEAP32[$0 >> 2] | 0) / 12 | 0;
 }
 
 function $99($0, $1_1) {
  return HEAP32[$0 >> 2] + Math_imul($1_1, 12) | 0;
 }
 
 function $100($0) {
  if ($207($0)) {
   return HEAP32[$0 + 4 >> 2]
  }
  return HEAPU8[$0 + 11 | 0];
 }
 
 function $101($0) {
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $455($1_1 + 8 | 0, $320($0), $100($0));
  $2_1 = HEAP32[$1_1 + 12 >> 2];
  $0 = $100($0);
  global$0 = $1_1 + 16 | 0;
  return ($0 | 0) == ($2_1 | 0);
 }
 
 function $104($0, $1_1) {
  return $673($0, $1_1) ^ 1;
 }
 
 function $105($0, $1_1) {
  var $2_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  (wasm2js_i32$0 = $2_1, wasm2js_i32$1 = $804($1_1)), HEAP32[wasm2js_i32$0 + 16 >> 2] = wasm2js_i32$1;
  $1428($2_1 + 24 | 0, $0, $1_1, $2_1 + 16 | 0, $2_1 + 8 | 0);
  $0 = $1429($2_1 + 24 | 0);
  global$0 = $2_1 + 32 | 0;
  return $0 + 16 | 0;
 }
 
 function $106($0, $1_1) {
  if (HEAP32[$0 + 4 >> 2] != HEAP32[$130($0) >> 2]) {
   $586($0, $1_1);
   return;
  }
  $587($0, $1_1);
 }
 
 function $107($0, $1_1, $2_1, $3_1) {
  var $4_1 = 0;
  $4_1 = global$0 - 48 | 0;
  global$0 = $4_1;
  $228($0);
  HEAP32[$0 + 136 >> 2] = $1_1;
  if ($1_1 >>> 0 >= 6) {
   fimport$5(1640, 1699, 42, 1734);
   abort();
  }
  fimport$6($4_1 + 12 | 0) | 0;
  fimport$8($4_1 + 16 | 0, 32, 2088, fimport$7($4_1 + 12 | 0) | 0) | 0;
  $108($108($108($1722($108($108($108($108($0, $4_1 + 16 | 0), 1187), $2_1), 1741), $3_1), 1187), HEAP32[(HEAP32[$0 + 136 >> 2] << 2) + 1744 >> 2]), 1187);
  global$0 = $4_1 + 48 | 0;
  return $0;
 }
 
 function $108($0, $1_1) {
  return $227($0, $1_1, $2597($1_1));
 }
 
 function $109($0) {
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $364($1_1, $0 + 4 | 0);
  FUNCTION_TABLE[3]($188(22184, $1_1)) | 0;
  $2512($1_1);
  if (HEAP32[$0 + 136 >> 2] == 4) {
   fimport$9();
   abort();
  }
  $232($0);
  global$0 = $1_1 + 16 | 0;
 }
 
 function $112($0, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  if ($1508($0) >>> 0 < $1_1 >>> 0) {
   $3_1 = $130($0);
   $4_1 = $0;
   $0 = $1436($2_1 + 8 | 0, $1_1, $123($0), $3_1);
   $1437($4_1, $0);
   $1438($0);
  }
  global$0 = $2_1 + 32 | 0;
 }
 
 function $113($0) {
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $0 = HEAP32[$431($1_1 + 8 | 0, $1440($0)) >> 2];
  global$0 = $1_1 + 16 | 0;
  return $0;
 }
 
 function $114($0) {
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $0 = HEAP32[$431($1_1 + 8 | 0, $1441($0)) >> 2];
  global$0 = $1_1 + 16 | 0;
  return $0;
 }
 
 function $115($0, $1_1) {
  return $104($0, $1_1);
 }
 
 function $117($0) {
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $0 = HEAP32[$431($1_1 + 8 | 0, $1442($0)) >> 2];
  global$0 = $1_1 + 16 | 0;
  return $0;
 }
 
 function $118() {
  var $0 = 0, $1_1 = 0;
  $0 = global$0 - 16 | 0;
  global$0 = $0;
  $1_1 = HEAP32[$431($0 + 8 | 0, $674()) >> 2];
  global$0 = $0 + 16 | 0;
  return $1_1;
 }
 
 function $121($0, $1_1) {
  if (HEAP32[$0 + 4 >> 2] != HEAP32[$130($0) >> 2]) {
   $1445($0, $1_1);
   return;
  }
  $1446($0, $1_1);
 }
 
 function $123($0) {
  return HEAP32[$0 + 4 >> 2] - HEAP32[$0 >> 2] >> 5;
 }
 
 function $124($0, $1_1) {
  return $308($0, $1_1);
 }
 
 function $125($0, $1_1) {
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 + 8 >> 2] = HEAP32[$0 >> 2];
  $0 = $2_1 + 8 | 0;
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + ($1_1 << 5);
  global$0 = $2_1 + 16 | 0;
  return HEAP32[$2_1 + 8 >> 2];
 }
 
 function $126($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  return HEAPF64[$0 + 24 >> 3] > HEAPF64[$1_1 + 24 >> 3] | 0;
 }
 
 function $127($0, $1_1, $2_1) {
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[$3_1 + 12 >> 2] = 2;
  $1448($0, $1_1, $2_1, $3_1 + 12 | 0);
  global$0 = $3_1 + 16 | 0;
 }
 
 function $128($0, $1_1) {
  var $2_1 = 0;
  $2_1 = $123($0);
  if ($2_1 >>> 0 < $1_1 >>> 0) {
   $1450($0, $1_1 - $2_1 | 0);
   return;
  }
  if ($2_1 >>> 0 > $1_1 >>> 0) {
   $1_1 = HEAP32[$0 >> 2] + ($1_1 << 5) | 0;
   $2_1 = $123($0);
   $1504($0, $1_1);
   $1433($0, $2_1);
  }
 }
 
 function $130($0) {
  return $0 + 8 | 0;
 }
 
 function $132($0, $1_1) {
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$1_1 + 12 >> 2] = 0;
  $170($0 + 8 | 0, $1_1 + 12 | 0);
  global$0 = $1_1 + 16 | 0;
  return $0;
 }
 
 function $133($0) {
  return HEAP32[$0 + 4 >> 2] - HEAP32[$0 >> 2] >> 2;
 }
 
 function $134($0, $1_1) {
  var $2_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  if ($639($0) >>> 0 < $1_1 >>> 0) {
   $2538();
   abort();
  }
  $130($0);
  $2_1 = $566($1_1);
  HEAP32[$0 >> 2] = $2_1;
  HEAP32[$0 + 4 >> 2] = $2_1;
  (wasm2js_i32$0 = $130($0), wasm2js_i32$1 = ($1_1 << 2) + $2_1 | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  $646($0, 0);
 }
 
 function $135($0, $1_1, $2_1, $3_1) {
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $3_1 = $631($4_1, $0, $3_1);
  $1570($130($0), $1_1, $2_1, $3_1 + 4 | 0);
  $406($3_1);
  global$0 = $4_1 + 16 | 0;
 }
 
 function $136($0) {
  $651($0);
  $133($0);
  $651($0);
 }
 
 function $138($0) {
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 32;
 }
 
 function $139($0) {
  $1508($0);
  $123($0);
  $1508($0);
 }
 
 function $140($0) {
  var $1_1 = 0;
  if (HEAP32[$0 >> 2]) {
   $1432($0);
   $130($0);
   $1_1 = HEAP32[$0 >> 2];
   $1508($0);
   $2583($1_1);
  }
 }
 
 function $141($0) {
  $0 = $0 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 32 | 0;
  global$0 = $1_1;
  $0 = $27($1_1 + 16 | 0, $0, $2597($0));
  $1104($1_1, $0, 19264);
  fimport$0($320($1_1) | 0);
  $2512($1_1);
  $2512($0);
  global$0 = $1_1 + 32 | 0;
  return 0;
 }
 
 function $144($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  return 0;
 }
 
 function $148($0, $1_1) {
  var $2_1 = 0.0;
  $162($0);
  $2_1 = $163();
  HEAPF64[2359] = $2_1;
  $164($2_1);
  $165();
  if ($100($1_1)) {
   $166($1_1)
  }
  $167();
  $168();
 }
 
 function $149($0) {
  $161($0);
  return $0;
 }
 
 function $151($0, $1_1) {
  if (HEAPU32[$0 + 4 >> 2] < HEAPU32[$130($0) >> 2]) {
   $586($0, $1_1);
   return;
  }
  $587($0, $1_1);
 }
 
 function $152($0) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6 = 0, wasm2js_i32$0 = 0, wasm2js_f64$0 = 0.0;
  $1_1 = global$0 - 384 | 0;
  global$0 = $1_1;
  $4_1 = $186($1_1 + 192 | 0, $320($0));
  if (!$187($4_1)) {
   $2_1 = $107($1_1 + 48 | 0, 4, 2484, 36);
   $108($188($108($108($108($2_1, 2525), 1162), 1172), $0), 2315);
   $109($2_1);
  }
  $2_1 = $189($1_1 + 32 | 0);
  $3_1 = $26($1_1 + 16 | 0);
  $6 = $26($1_1);
  if (!$735($4_1, $2_1)) {
   $0 = $107($1_1 + 48 | 0, 4, 2484, 41);
   $108($108($0, 2547), 1162);
   $109($0);
  }
  $0 = $3($1_1 + 48 | 0, 1187);
  $193($2_1, $3_1, $0);
  $2512($0);
  if (($98($3_1) | 0) != 4) {
   $0 = $107($1_1 + 48 | 0, 4, 2484, 43);
   $108($108($0, 2574), 1162);
   $109($0);
  }
  if ($98($3_1)) {
   $0 = 0;
   while (1) {
    (wasm2js_i32$0 = ($0 << 3) + 18936 | 0, wasm2js_f64$0 = $1595($320($99($3_1, $0)))), HEAPF64[wasm2js_i32$0 + 8 >> 3] = wasm2js_f64$0;
    $0 = $0 + 1 | 0;
    if ($0 >>> 0 < $98($3_1) >>> 0) {
     continue
    }
    break;
   };
  }
  $0 = $735($4_1, $2_1);
  while (1) {
   if (!($0 & 1)) {
    $0 = $107($1_1 + 48 | 0, 4, 2484, 50);
    $108($108($0, 2547), 1162);
    $109($0);
   }
   $0 = $3($1_1 + 48 | 0, 1187);
   $193($2_1, $3_1, $0);
   $2512($0);
   if (($98($3_1) | 0) != 4) {
    $0 = $107($1_1 + 48 | 0, 4, 2484, 52);
    $108($108($0, 2574), 1162);
    $109($0);
   }
   $0 = 0;
   while (1) {
    (wasm2js_i32$0 = (($5_1 << 5) + 18936 | 0) + ($0 << 3) | 0, wasm2js_f64$0 = $1595($320($99($3_1, $0)))), HEAPF64[wasm2js_i32$0 + 40 >> 3] = wasm2js_f64$0;
    $0 = $0 + 1 | 0;
    if (($0 | 0) != 4) {
     continue
    }
    break;
   };
   $0 = $735($4_1, $2_1);
   $5_1 = $5_1 + 1 | 0;
   if (($5_1 | 0) != 4) {
    continue
   }
   break;
  };
  if (!$0) {
   $0 = $107($1_1 + 48 | 0, 4, 2484, 59);
   $108($108($0, 2547), 1162);
   $109($0);
  }
  if (!$736($2_1, 19104)) {
   $0 = $107($1_1 + 48 | 0, 4, 2484, 60);
   $108($108($0, 2605), 1162);
   $109($0);
  }
  if (!$735($4_1, $2_1)) {
   $0 = $107($1_1 + 48 | 0, 4, 2484, 63);
   $108($108($0, 2547), 1162);
   $109($0);
  }
  if (!$736($2_1, 19124)) {
   $0 = $107($1_1 + 48 | 0, 4, 2484, 64);
   $108($108($0, 2641), 1162);
   $109($0);
  }
  if (!$735($4_1, $2_1)) {
   $0 = $107($1_1 + 48 | 0, 4, 2484, 67);
   $108($108($0, 2547), 1162);
   $109($0);
  }
  if (!$736($2_1, 19144)) {
   $0 = $107($1_1 + 48 | 0, 4, 2484, 68);
   $108($108($0, 2677), 1162);
   $109($0);
  }
  if (!$735($4_1, $2_1)) {
   $0 = $107($1_1 + 48 | 0, 4, 2484, 71);
   $108($108($0, 2547), 1162);
   $109($0);
  }
  if (!$736($2_1, 19164)) {
   $0 = $107($1_1 + 48 | 0, 4, 2484, 72);
   $108($108($0, 2713), 1162);
   $109($0);
  }
  $35($6);
  $35($3_1);
  $2512($2_1);
  $197($4_1);
  global$0 = $1_1 + 384 | 0;
 }
 
 function $153($0) {
  $154($0);
  HEAP32[$0 >> 2] = 2996;
 }
 
 function $154($0) {
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 144 | 0;
  global$0 = $1_1;
  HEAP32[$0 >> 2] = 3024;
  $161($0 + 4 | 0);
  $2_1 = $0;
  $0 = $3($1_1, 3036);
  $2_1 = $850($2_1, $0);
  $2512($0);
  if (!$2_1) {
   $0 = $107($1_1, 4, 3046, 18);
   $108($108($0, 3090), 1162);
   $109($0);
  }
  global$0 = $1_1 + 144 | 0;
 }
 
 function $157($0) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0.0, $6 = 0, $7 = 0.0, wasm2js_i32$0 = 0, wasm2js_f64$0 = 0.0;
  $2_1 = global$0 - 368 | 0;
  global$0 = $2_1;
  $6 = $186($2_1 + 176 | 0, $320($0));
  if (!$187($6)) {
   $3_1 = $107($2_1 + 32 | 0, 4, 3860, 97);
   $108($188($108($108($108($3_1, 1142), 1162), 1172), $0), 2315);
   $109($3_1);
  }
  $3_1 = $189($2_1 + 16 | 0);
  $4_1 = $26($2_1);
  $0 = $191($6, $3_1);
  label$2 : {
   if (!$192(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0)) {
    $0 = 0;
    break label$2;
   }
   $0 = 0;
   while (1) {
    $238($4_1);
    label$5 : {
     if ($772($3_1)) {
      $1_1 = $107($2_1 + 32 | 0, 3, 3860, 106);
      $108($1723($108($1_1, 3909), $0), 3918);
      $109($1_1);
      break label$5;
     }
     $1_1 = $3($2_1 + 32 | 0, 1187);
     $193($3_1, $4_1, $1_1);
     $2512($1_1);
     if (($98($4_1) | 0) != 2) {
      $1_1 = $107($2_1 + 32 | 0, 3, 3860, 111);
      $108($1723($108($188($108($1_1, 3935), $3_1), 3942), $0), 3918);
      $109($1_1);
      break label$5;
     }
     $5_1 = $1595($320($99($4_1, 1)));
     (wasm2js_i32$0 = $1277($99($4_1, 0)), wasm2js_f64$0 = $5_1), HEAPF64[wasm2js_i32$0 >> 3] = wasm2js_f64$0;
     $7 = $7 + $5_1;
    }
    $0 = $0 + 1 | 0;
    $1_1 = $191($6, $3_1);
    if ($192(HEAP32[HEAP32[$1_1 >> 2] + -12 >> 2] + $1_1 | 0)) {
     continue
    }
    break;
   };
  }
  label$8 : {
   if ($0) {
    $5_1 = $7 / +($0 >>> 0);
    HEAPF64[2453] = $5_1;
    if (!($5_1 > 0.0)) {
     break label$8
    }
    $35($4_1);
    $2512($3_1);
    $197($6);
    global$0 = $2_1 + 368 | 0;
    return;
   }
   fimport$5(3953, 3860, 120, 3960);
   abort();
  }
  fimport$5(3972, 3860, 122, 3960);
  abort();
 }
 
 function $158($0) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 352 | 0;
  global$0 = $2_1;
  $3_1 = $186($2_1 + 160 | 0, $320($0));
  if (!$187($3_1)) {
   $1_1 = $107($2_1 + 16 | 0, 4, 3860, 126);
   $108($188($108($108($108($1_1, 1142), 1162), 1172), $0), 2315);
   $109($1_1);
  }
  $0 = $189($2_1 + 16 | 0);
  $1_1 = $191($3_1, $0);
  if ($192(HEAP32[HEAP32[$1_1 >> 2] + -12 >> 2] + $1_1 | 0)) {
   while (1) {
    $1278($2_1 + 8 | 0, $0);
    $1_1 = $191($3_1, $0);
    if ($192(HEAP32[HEAP32[$1_1 >> 2] + -12 >> 2] + $1_1 | 0)) {
     continue
    }
    break;
   }
  }
  if (!HEAP32[4911]) {
   fimport$5(3990, 3860, 131, 4008);
   abort();
  }
  $2512($0);
  $197($3_1);
  global$0 = $2_1 + 352 | 0;
 }
 
 function $160() {
  var $0 = 0;
  $0 = global$0 - 16 | 0;
  global$0 = $0;
  $172();
  HEAP32[4715] = 0;
  HEAP32[$0 + 12 >> 2] = 0;
  $173(18864, $0 + 12 | 0, $0 + 8 | 0);
  global$0 = $0 + 16 | 0;
 }
 
 function $161($0) {
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $176($0);
  $177($0 + 8 | 0);
  HEAP32[$1_1 + 12 >> 2] = 0;
  $173($0 + 12 | 0, $1_1 + 12 | 0, $1_1 + 8 | 0);
  HEAP32[$1_1 + 4 >> 2] = 1065353216;
  $173($0 + 16 | 0, $1_1 + 4 | 0, $1_1);
  global$0 = $1_1 + 16 | 0;
 }
 
 function $162($0) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $2_1 = global$0 - 480 | 0;
  global$0 = $2_1;
  $4_1 = $186($2_1 + 288 | 0, $320($0));
  if (!$187($4_1)) {
   $3_1 = $107($2_1 + 144 | 0, 4, 1101, 203);
   $108($188($108($108($108($3_1, 1142), 1162), 1172), $0), 1178);
   $109($3_1);
  }
  $3_1 = $189($2_1 + 128 | 0);
  $0 = $26($2_1 + 112 | 0);
  $5_1 = $190($2_1 + 8 | 0);
  $1_1 = $191($4_1, $3_1);
  if ($192(HEAP32[HEAP32[$1_1 >> 2] + -12 >> 2] + $1_1 | 0)) {
   while (1) {
    $1_1 = $3($2_1 + 144 | 0, 1187);
    $193($3_1, $0, $1_1);
    $2512($1_1);
    if (($98($0) | 0) != 3) {
     $1_1 = $107($2_1 + 144 | 0, 4, 1101, 210);
     $188($108($108($108($1_1, 1189), 1162), 1225), $3_1);
     $109($1_1);
    }
    $194($5_1, $99($0, 0), $1595($320($99($0, 1))), $99($0, 2));
    $195($5_1);
    $1_1 = $191($4_1, $3_1);
    if ($192(HEAP32[HEAP32[$1_1 >> 2] + -12 >> 2] + $1_1 | 0)) {
     continue
    }
    break;
   }
  }
  $196($5_1);
  $35($0);
  $2512($3_1);
  $197($4_1);
  global$0 = $2_1 + 480 | 0;
 }
 
 function $163() {
  var $0 = 0, $1_1 = 0.0;
  if ($198(18832)) {
   while (1) {
    $1_1 = $1_1 + HEAPF64[$199(18832, $0) + 80 >> 3];
    $0 = $0 + 1 | 0;
    if ($0 >>> 0 < $198(18832) >>> 0) {
     continue
    }
    break;
   }
  }
  return $1_1;
 }
 
 function $164($0) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0.0, wasm2js_i32$0 = 0, wasm2js_f64$0 = 0.0;
  if (!!($0 > 0.0)) {
   label$2 : {
    if ($198(18832)) {
     while (1) {
      $2_1 = $199(18832, $1_1);
      $3_1 = HEAPF64[$2_1 + 80 >> 3];
      if (!($3_1 > 0.0)) {
       break label$2
      }
      (wasm2js_i32$0 = $2_1, wasm2js_f64$0 = $1638($3_1 / $0)), HEAPF64[wasm2js_i32$0 + 80 >> 3] = wasm2js_f64$0;
      $1_1 = $1_1 + 1 | 0;
      if ($1_1 >>> 0 < $198(18832) >>> 0) {
       continue
      }
      break;
     }
    }
    return;
   }
   fimport$5(2255, 1101, 255, 2239);
   abort();
  }
  fimport$5(2229, 1101, 252, 2239);
  abort();
 }
 
 function $165() {
  var $0 = 0, $1_1 = 0, $2_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 144 | 0;
  global$0 = $3_1;
  if ($200(18832)) {
   $0 = $107($3_1, 4, 1101, 224);
   $108($108($0, 2278), 1162);
   $109($0);
  }
  $0 = $201($3_1);
  $205($29($0), $30($0));
  $2_1 = $199($0, 0);
  $1_1 = HEAP32[$2_1 + 84 >> 2];
  HEAP32[4720] = HEAP32[$2_1 + 80 >> 2];
  HEAP32[4721] = $1_1;
  $2_1 = $199($0, $198($0) + -1 | 0);
  $1_1 = HEAP32[$2_1 + 84 >> 2];
  HEAP32[4722] = HEAP32[$2_1 + 80 >> 2];
  HEAP32[4723] = $1_1;
  $1_1 = $199($0, $198($0) >>> 1 | 0);
  $2_1 = HEAP32[$1_1 + 84 >> 2];
  $1_1 = HEAP32[$1_1 + 80 >> 2];
  HEAP32[4724] = $1_1;
  HEAP32[4725] = $2_1;
  HEAP32[4726] = $1_1;
  HEAP32[4727] = $2_1;
  $206($0);
  global$0 = $3_1 + 144 | 0;
 }
 
 function $166($0) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $1_1 = global$0 - 352 | 0;
  global$0 = $1_1;
  $2_1 = $3($1_1 + 144 | 0, 2312);
  $193($0, $26($1_1 + 336 | 0), $2_1);
  $2512($2_1);
  if ($98($1_1 + 336 | 0)) {
   $0 = 0;
   while (1) {
    $4_1 = $186($1_1 + 144 | 0, $320($99($1_1 + 336 | 0, $0)));
    if (!$187($4_1)) {
     $2_1 = $107($1_1, 4, 1101, 146);
     $108($188($108($108($108($2_1, 1142), 1162), 1172), $99($1_1 + 336 | 0, $0)), 2315);
     $109($2_1);
    }
    $2_1 = $189($1_1);
    $3_1 = $191($1_1 + 144 | 0, $2_1);
    if ($192(HEAP32[HEAP32[$3_1 >> 2] + -12 >> 2] + $3_1 | 0)) {
     while (1) {
      if ($100($2_1)) {
       $211($2_1)
      }
      $3_1 = $191($1_1 + 144 | 0, $2_1);
      if ($192(HEAP32[HEAP32[$3_1 >> 2] + -12 >> 2] + $3_1 | 0)) {
       continue
      }
      break;
     }
    }
    $2512($2_1);
    $197($4_1);
    $0 = $0 + 1 | 0;
    if ($0 >>> 0 < $98($1_1 + 336 | 0) >>> 0) {
     continue
    }
    break;
   };
  }
  $35($1_1 + 336 | 0);
  global$0 = $1_1 + 352 | 0;
 }
 
 function $167() {
  var $0 = 0, $1_1 = 0;
  $0 = global$0 - 16 | 0;
  global$0 = $0;
  $1_1 = $212($0, $29(18832), $30(18832));
  $213($1_1);
  $206($1_1);
  global$0 = $0 + 16 | 0;
 }
 
 function $168() {
  var $0 = 0, $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $1_1 = global$0 - 48 | 0;
  global$0 = $1_1;
  if ($198(18832)) {
   $2_1 = $26($1_1 + 32 | 0);
   $3_1 = $26($1_1 + 16 | 0);
   if ($198(18832)) {
    while (1) {
     $216($2_1, $199(18832, $0));
     (wasm2js_i32$0 = $1_1, wasm2js_i32$1 = $199(18832, $0)), HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
     $151($3_1, $1_1 + 12 | 0);
     $0 = $0 + 1 | 0;
     if ($0 >>> 0 < $198(18832) >>> 0) {
      continue
     }
     break;
    }
   }
   $0 = $2497(4);
   $4_1 = $2497(8);
   $588($4_1);
   HEAP32[$0 >> 2] = $4_1;
   $589($0, $2_1, $3_1);
   HEAP32[4717] = $0;
   $92($3_1);
   $592($2_1);
   $593($2_1);
   global$0 = $1_1 + 48 | 0;
   return;
  }
  fimport$5(2357, 1101, 174, 2374);
  abort();
 }
 
 function $169($0, $1_1, $2_1) {
  $170($0, $1_1);
 }
 
 function $170($0, $1_1) {
  HEAP32[$0 >> 2] = 0;
 }
 
 function $172() {
  var $0 = 0;
  $0 = global$0 - 16 | 0;
  global$0 = $0;
  HEAP32[4713] = 0;
  HEAP32[4711] = 0;
  HEAP32[4712] = 0;
  HEAP32[$0 + 12 >> 2] = 0;
  $169(18856, $0 + 12 | 0, $0 + 8 | 0);
  global$0 = $0 + 16 | 0;
 }
 
 function $173($0, $1_1, $2_1) {
  $175($0, $1_1);
 }
 
 function $175($0, $1_1) {
  HEAP32[$0 >> 2] = HEAP32[$1_1 >> 2];
 }
 
 function $176($0) {
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[$1_1 + 12 >> 2] = 0;
  $175($0, $1_1 + 12 | 0);
  $183($0 + 4 | 0);
  global$0 = $1_1 + 16 | 0;
 }
 
 function $177($0) {
  $181($0);
 }
 
 function $181($0) {
  HEAP32[$0 >> 2] = 0;
  return $0;
 }
 
 function $183($0) {
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[$1_1 + 12 >> 2] = 0;
  $173($0, $1_1 + 12 | 0, $1_1 + 8 | 0);
  global$0 = $1_1 + 16 | 0;
 }
 
 function $186($0, $1_1) {
  var $2_1 = 0, $3_1 = 0;
  $2_1 = $221($0 + 108 | 0);
  HEAP32[$0 >> 2] = 1268;
  HEAP32[$2_1 >> 2] = 1288;
  $3_1 = $0 + 8 | 0;
  $222($0, $3_1);
  HEAP32[$0 >> 2] = 1268;
  HEAP32[$2_1 >> 2] = 1288;
  if (!$224($223($3_1), $1_1)) {
   $225(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0, 4)
  }
  return $0;
 }
 
 function $187($0) {
  return HEAP32[($0 + 8 | 0) + 64 >> 2] != 0;
 }
 
 function $188($0, $1_1) {
  return $227($0, $320($1_1), $100($1_1));
 }
 
 function $189($0) {
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $233($0);
  global$0 = $1_1 + 16 | 0;
  return $0;
 }
 
 function $190($0) {
  $234($0);
  $189($0 + 88 | 0);
  return $0;
 }
 
 function $191($0, $1_1) {
  return $236($0, $1_1, $235(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0, 10));
 }
 
 function $192($0) {
  return (HEAPU8[$0 + 16 | 0] & 5) != 0 ^ 1;
 }
 
 function $193($0, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  $238($1_1);
  $4_1 = $189($3_1 + 16 | 0);
  label$1 : {
   if (!$100($0)) {
    break label$1
   }
   while (1) {
    label$3 : {
     $6 = $381($320($0), $100($0), $320($2_1), $5_1, $100($2_1));
     if (($6 | 0) != -1) {
      if ($98($1_1) >>> 0 < 4294967295) {
       break label$3
      }
     }
     $240($3_1, $0, $5_1, -1);
     $241($4_1, $3_1);
     $2512($3_1);
     $242($1_1, $4_1);
     break label$1;
    }
    $240($3_1, $0, $5_1, $6 - $5_1 | 0);
    $241($4_1, $3_1);
    $2512($3_1);
    $242($1_1, $4_1);
    $5_1 = $6 + 1 | 0;
    if ($5_1 >>> 0 < $100($0) >>> 0) {
     continue
    }
    break;
   };
  }
  $2512($4_1);
  global$0 = $3_1 + 32 | 0;
 }
 
 function $194($0, $1_1, $2_1, $3_1) {
  var $4_1 = 0;
  $4_1 = global$0 - 144 | 0;
  global$0 = $4_1;
  label$1 : {
   if (!$243($1_1, $0)) {
    $0 = $107($4_1, 3, 1101, 193);
    $108($188($108($0, 2134), $1_1), 1178);
    $109($0);
    $0 = 0;
    break label$1;
   }
   HEAPF64[$0 + 80 >> 3] = $2_1;
   $2513($0 + 88 | 0, $3_1);
   $0 = 1;
  }
  global$0 = $4_1 + 144 | 0;
  return $0;
 }
 
 function $195($0) {
  if (HEAP32[4709] != HEAP32[$130(18832) >> 2]) {
   $245($0);
   return;
  }
  $246($0);
 }
 
 function $196($0) {
  $2512($0 + 88 | 0);
  $247($0);
 }
 
 function $197($0) {
  $0 = $0 | 0;
  $0 = $248($0);
  $1653($0 + 108 | 0);
  return $0 | 0;
 }
 
 function $198($0) {
  return (HEAP32[$0 + 4 >> 2] - HEAP32[$0 >> 2] | 0) / 104 | 0;
 }
 
 function $199($0, $1_1) {
  return HEAP32[$0 >> 2] + Math_imul($1_1, 104) | 0;
 }
 
 function $200($0) {
  return HEAP32[$0 >> 2] == HEAP32[$0 + 4 >> 2];
 }
 
 function $201($0) {
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $130(18832);
  $132($0, $1_1 + 8 | 0);
  $2_1 = $198(18832);
  if ($2_1) {
   $500($0, $2_1);
   $501($0, HEAP32[4708], HEAP32[4709], $2_1);
  }
  global$0 = $1_1 + 16 | 0;
  return $0;
 }
 
 function $204($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  return HEAPF64[$0 + 80 >> 3] < HEAPF64[$1_1 + 80 >> 3] | 0;
 }
 
 function $205($0, $1_1) {
  var $2_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 + 16 >> 2] = $1_1;
  HEAP32[$2_1 + 24 >> 2] = $0;
  HEAP32[$2_1 + 12 >> 2] = 4;
  $508(HEAP32[$2_1 + 24 >> 2], HEAP32[$2_1 + 16 >> 2], $2_1 + 12 | 0);
  global$0 = $2_1 + 32 | 0;
 }
 
 function $206($0) {
  var $1_1 = 0;
  $479($0);
  if (HEAP32[$0 >> 2]) {
   $519($0, HEAP32[$0 >> 2]);
   $130($0);
   $1_1 = HEAP32[$0 >> 2];
   $487($0);
   $2583($1_1);
  }
 }
 
 function $207($0) {
  return HEAP8[$0 + 11 | 0] < 0;
 }
 
 function $211($0) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0.0, $5_1 = 0;
  $2_1 = global$0 - 144 | 0;
  global$0 = $2_1;
  $1_1 = $26($2_1 + 128 | 0);
  $3_1 = $190($2_1 + 24 | 0);
  $5_1 = $0;
  $0 = $3($2_1 + 8 | 0, 1187);
  $193($5_1, $1_1, $0);
  $2512($0);
  label$1 : {
   label$2 : {
    if (($98($1_1) | 0) == 1) {
     $5_1 = $99($1_1, 0);
     $4_1 = HEAPF64[2363];
     $0 = $3($2_1 + 8 | 0, 1100);
     $194($3_1, $5_1, $4_1, $0);
     $2512($0);
     break label$2;
    }
    if (($98($1_1) | 0) == 2) {
     $194($3_1, $99($1_1, 0), HEAPF64[2363], $99($1_1, 1));
     break label$2;
    }
    if (($98($1_1) | 0) != 3) {
     break label$2
    }
    $0 = $320($99($1_1, 1));
    $4_1 = HEAPF64[2359];
    if (!($4_1 > 0.0)) {
     break label$1
    }
    $4_1 = $1638(+($1598($0) | 0) / $4_1);
    $194($3_1, $99($1_1, 0), $4_1, $99($1_1, 2));
   }
   $195($3_1);
   if (HEAP32[$3_1 + 68 >> 2] == 1) {
    $521($2_1 + 8 | 0, 18912, HEAP32[$3_1 + 64 >> 2])
   }
   $196($3_1);
   $35($1_1);
   global$0 = $2_1 + 144 | 0;
   return;
  }
  fimport$5(2323, 1101, 118, 2339);
  abort();
 }
 
 function $212($0, $1_1, $2_1) {
  var $3_1 = 0;
  $36($0);
  $3_1 = $575($1_1, $2_1);
  if ($3_1) {
   $500($0, $3_1);
   $574($0, $1_1, $2_1, $3_1);
  }
  return $0;
 }
 
 function $213($0) {
  $420($0, 18832);
  $420($0 + 4 | 0, 18836);
  $420($130($0), $130(18832));
  $130($0);
  $130(18832);
 }
 
 function $216($0, $1_1) {
  if (HEAP32[$0 + 4 >> 2] != HEAP32[$130($0) >> 2]) {
   $583($0, $1_1);
   return;
  }
  $584($0, $1_1);
 }
 
 function $221($0) {
  $249($0);
  HEAP32[$0 >> 2] = 4940;
  return $0;
 }
 
 function $222($0, $1_1) {
  var $2_1 = 0;
  $2_1 = HEAP32[325];
  HEAP32[$0 >> 2] = $2_1;
  HEAP32[HEAP32[$2_1 + -12 >> 2] + $0 >> 2] = HEAP32[326];
  HEAP32[$0 + 4 >> 2] = 0;
  $250(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0, $1_1);
 }
 
 function $223($0) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = $1659($0);
  HEAP32[$0 + 52 >> 2] = 0;
  HEAP32[$0 + 56 >> 2] = 0;
  HEAP32[$0 + 40 >> 2] = 0;
  HEAP32[$0 + 32 >> 2] = 0;
  HEAP32[$0 + 36 >> 2] = 0;
  HEAP32[$0 >> 2] = 1420;
  HEAP32[$0 + 60 >> 2] = 0;
  HEAP32[$0 + 64 >> 2] = 0;
  HEAP32[$0 + 68 >> 2] = 0;
  HEAP32[$0 + 72 >> 2] = 0;
  HEAP32[$0 + 76 >> 2] = 0;
  HEAP32[$0 + 80 >> 2] = 0;
  HEAP32[$0 + 84 >> 2] = 0;
  HEAP32[$0 + 88 >> 2] = 0;
  HEAP8[$0 + 91 | 0] = 0;
  HEAP8[$0 + 92 | 0] = 0;
  HEAP8[$0 + 93 | 0] = 0;
  HEAP8[$0 + 94 | 0] = 0;
  HEAP8[$0 + 95 | 0] = 0;
  HEAP8[$0 + 96 | 0] = 0;
  HEAP8[$0 + 97 | 0] = 0;
  HEAP8[$0 + 98 | 0] = 0;
  $251($1_1 + 8 | 0, $2_1);
  $3_1 = $2280(HEAP32[$1_1 + 8 >> 2], $2231(23120));
  $1855($1_1 + 8 | 0);
  if ($3_1) {
   $251($1_1, $2_1);
   (wasm2js_i32$0 = $0, wasm2js_i32$1 = $253($1_1)), HEAP32[wasm2js_i32$0 + 68 >> 2] = wasm2js_i32$1;
   $1855($1_1);
   (wasm2js_i32$0 = $0, wasm2js_i32$1 = $254(HEAP32[$0 + 68 >> 2])), HEAP8[wasm2js_i32$0 + 98 | 0] = wasm2js_i32$1;
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0, 0, 4096) | 0;
  global$0 = $1_1 + 16 | 0;
  return $0;
 }
 
 function $224($0, $1_1) {
  label$1 : {
   if (HEAP32[$0 + 64 >> 2]) {
    break label$1
   }
   $1_1 = $1584($1_1, 1540);
   HEAP32[$0 + 64 >> 2] = $1_1;
   if (!$1_1) {
    break label$1
   }
   HEAP32[$0 + 88 >> 2] = 8;
   return $0;
  }
  return 0;
 }
 
 function $225($0, $1_1) {
  $1698($0, HEAP32[$0 + 16 >> 2] | $1_1);
 }
 
 function $227($0, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6 = 0, $7 = 0, $8 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  $4_1 = $1694($3_1 + 24 | 0, $0);
  label$1 : {
   if (!HEAPU8[$4_1 | 0]) {
    break label$1
   }
   $6 = $311($3_1 + 8 | 0, $0);
   $7 = HEAP32[(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0) + 4 >> 2];
   $5_1 = HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0;
   $8 = $313($5_1);
   $2_1 = $1_1 + $2_1 | 0;
   (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = $314(HEAP32[$6 >> 2], $1_1, ($7 & 176) == 32 ? $2_1 : $1_1, $2_1, $5_1, $8)), HEAP32[wasm2js_i32$0 + 16 >> 2] = wasm2js_i32$1;
   if (!$315($3_1 + 16 | 0)) {
    break label$1
   }
   $225(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0, 5);
  }
  $1695($4_1);
  global$0 = $3_1 + 32 | 0;
  return $0;
 }
 
 function $228($0) {
  var $1_1 = 0, $2_1 = 0;
  $1_1 = $221($0 + 56 | 0);
  HEAP32[$0 >> 2] = 1776;
  HEAP32[$1_1 >> 2] = 1796;
  $2_1 = $0 + 4 | 0;
  $345($0, $2_1);
  HEAP32[$0 >> 2] = 1776;
  HEAP32[$1_1 >> 2] = 1796;
  $346($2_1);
 }
 
 function $230($0) {
  $0 = $0 | 0;
  $1725($0, $235(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0, 10));
  $1686($0);
  return $0 | 0;
 }
 
 function $232($0) {
  $0 = $0 | 0;
  $0 = $347($0);
  $1653($0 + 56 | 0);
  return $0 | 0;
 }
 
 function $233($0) {
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = 0;
 }
 
 function $234($0) {
  $373($0);
  return $0;
 }
 
 function $235($0, $1_1) {
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $1687($2_1 + 8 | 0, $0);
  $0 = $344($343($2_1 + 8 | 0), $1_1);
  $1855($2_1 + 8 | 0);
  global$0 = $2_1 + 16 | 0;
  return $0;
 }
 
 function $236($0, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6 = 0, $7 = 0;
  $6 = global$0 - 16 | 0;
  global$0 = $6;
  if (HEAPU8[$1684($6 + 8 | 0, $0) | 0]) {
   $374($1_1);
   while (1) {
    $3_1 = $375(HEAP32[(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0) + 24 >> 2]);
    label$3 : {
     if ($290($3_1, -1)) {
      $4_1 = $4_1 | 2;
      $5_1 = 3;
      break label$3;
     }
     $7 = $7 + 1 | 0;
     $3_1 = $293($3_1);
     $5_1 = 3;
     if ($290($3_1, $2_1)) {
      break label$3
     }
     $2522($1_1, $3_1);
     $3_1 = ($100($1_1) | 0) == -17;
     $4_1 = $3_1 ? $4_1 | 4 : $4_1;
     $5_1 = $3_1 ? 3 : 0;
    }
    if (!$5_1) {
     continue
    }
    break;
   };
   $225(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0, $7 ? $4_1 : $4_1 | 4);
  }
  global$0 = $6 + 16 | 0;
  return $0;
 }
 
 function $238($0) {
  var $1_1 = 0;
  $1_1 = $98($0);
  $379($0);
  $380($0, $1_1);
 }
 
 function $240($0, $1_1, $2_1, $3_1) {
  $2511($0, $1_1, $2_1, $3_1, $1_1);
 }
 
 function $241($0, $1_1) {
  $382($0, $1_1);
 }
 
 function $242($0, $1_1) {
  if (HEAP32[$0 + 4 >> 2] != HEAP32[$130($0) >> 2]) {
   $384($0, $1_1);
   return;
  }
  $385($0, $1_1);
 }
 
 function $243($0, $1_1) {
  return $442($320($0), $100($0), $1_1);
 }
 
 function $245($0) {
  var $1_1 = 0, $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $1_1 = $459($2_1, 18832, 1);
  $461($130(18832), HEAP32[$1_1 + 4 >> 2], $0);
  HEAP32[$1_1 + 4 >> 2] = HEAP32[$1_1 + 4 >> 2] + 104;
  $406($1_1);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $246($0) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  $1_1 = $130(18832);
  $3_1 = $1_1;
  $1_1 = $463($2_1 + 8 | 0, $462($198(18832) + 1 | 0), $198(18832), $1_1);
  $461($3_1, HEAP32[$1_1 + 8 >> 2], $0);
  HEAP32[$1_1 + 8 >> 2] = HEAP32[$1_1 + 8 >> 2] + 104;
  $464($1_1);
  $0 = $1_1;
  $495($1_1, HEAP32[$1_1 + 4 >> 2]);
  if (HEAP32[$1_1 >> 2]) {
   $416($0);
   $1_1 = HEAP32[$0 >> 2];
   HEAP32[$418($0) >> 2];
   $2583($1_1);
  }
  global$0 = $2_1 + 32 | 0;
 }
 
 function $247($0) {
  var $1_1 = 0;
  $1_1 = $0;
  $0 = HEAP32[$0 + 64 >> 2];
  if (($1_1 | 0) != ($0 | 0)) {
   $2583($0)
  }
 }
 
 function $248($0) {
  var $1_1 = 0;
  $1_1 = HEAP32[324];
  HEAP32[$0 >> 2] = $1_1;
  HEAP32[HEAP32[$1_1 + -12 >> 2] + $0 >> 2] = HEAP32[327];
  $261($0 + 8 | 0);
  return $0;
 }
 
 function $249($0) {
  HEAP32[$0 >> 2] = 4880;
 }
 
 function $250($0, $1_1) {
  $1732($0, $1_1);
  HEAP32[$0 + 72 >> 2] = 0;
  HEAP32[$0 + 76 >> 2] = -1;
 }
 
 function $251($0, $1_1) {
  $2283($0, $1_1 + 4 | 0);
 }
 
 function $253($0) {
  return $1860($0, 23120);
 }
 
 function $254($0) {
  return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0) | 0;
 }
 
 function $257($0) {
  $0 = $0 | 0;
  $2583($197($0));
 }
 
 function $258($0) {
  $0 = $0 | 0;
  return $197(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0) | 0;
 }
 
 function $259($0) {
  $0 = $0 | 0;
  $257(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0);
 }
 
 function $261($0) {
  $0 = $0 | 0;
  var $1_1 = 0;
  HEAP32[$0 >> 2] = 1420;
  $262($0);
  label$1 : {
   if (!HEAPU8[$0 + 96 | 0]) {
    break label$1
   }
   $1_1 = HEAP32[$0 + 32 >> 2];
   if (!$1_1) {
    break label$1
   }
   $2583($1_1);
  }
  label$2 : {
   if (!HEAPU8[$0 + 97 | 0]) {
    break label$2
   }
   $1_1 = HEAP32[$0 + 56 >> 2];
   if (!$1_1) {
    break label$2
   }
   $2583($1_1);
  }
  $1657($0);
  return $0 | 0;
 }
 
 function $262($0) {
  var $1_1 = 0, $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $1_1 = HEAP32[$0 + 64 >> 2];
  if ($1_1) {
   HEAP32[$2_1 + 4 >> 2] = 5;
   $1_1 = $299($2_1 + 8 | 0, $1_1, $2_1 + 4 | 0);
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0) | 0;
   $1573($300($1_1));
   HEAP32[$0 + 64 >> 2] = 0;
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0, 0, 0) | 0;
   $0 = $1_1;
   $1_1 = HEAP32[$0 >> 2];
   HEAP32[$0 >> 2] = 0;
   if ($1_1) {
    FUNCTION_TABLE[HEAP32[$305($0) >> 2]]($1_1) | 0
   }
  }
  global$0 = $2_1 + 16 | 0;
 }
 
 function $263($0) {
  $0 = $0 | 0;
  $2583($261($0));
 }
 
 function $264($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0) | 0;
  $1_1 = $253($1_1);
  HEAP32[$0 + 68 >> 2] = $1_1;
  $2_1 = HEAPU8[$0 + 98 | 0];
  $1_1 = $254($1_1);
  HEAP8[$0 + 98 | 0] = $1_1;
  if (($1_1 | 0) != ($2_1 | 0)) {
   $265($0, 0, 0, 0);
   $266($0, 0, 0);
   $1_1 = HEAPU8[$0 + 96 | 0];
   if (HEAPU8[$0 + 98 | 0]) {
    label$3 : {
     if (!$1_1) {
      break label$3
     }
     $1_1 = HEAP32[$0 + 32 >> 2];
     if (!$1_1) {
      break label$3
     }
     $2583($1_1);
    }
    HEAP8[$0 + 96 | 0] = HEAPU8[$0 + 97 | 0];
    HEAP32[$0 + 52 >> 2] = HEAP32[$0 + 60 >> 2];
    $1_1 = HEAP32[$0 + 56 >> 2];
    HEAP32[$0 + 56 >> 2] = 0;
    HEAP32[$0 + 60 >> 2] = 0;
    HEAP32[$0 + 32 >> 2] = $1_1;
    HEAP8[$0 + 97 | 0] = 0;
    return;
   }
   if (!(HEAP32[$0 + 32 >> 2] == ($0 + 44 | 0) | $1_1)) {
    HEAP8[$0 + 97 | 0] = 0;
    $1_1 = HEAP32[$0 + 52 >> 2];
    HEAP32[$0 + 60 >> 2] = $1_1;
    HEAP32[$0 + 56 >> 2] = HEAP32[$0 + 32 >> 2];
    $1_1 = $2497($1_1);
    HEAP8[$0 + 96 | 0] = 1;
    HEAP32[$0 + 32 >> 2] = $1_1;
    return;
   }
   $1_1 = HEAP32[$0 + 52 >> 2];
   HEAP32[$0 + 60 >> 2] = $1_1;
   $1_1 = $2497($1_1);
   HEAP8[$0 + 97 | 0] = 1;
   HEAP32[$0 + 56 >> 2] = $1_1;
  }
 }
 
 function $265($0, $1_1, $2_1, $3_1) {
  HEAP32[$0 + 16 >> 2] = $3_1;
  HEAP32[$0 + 12 >> 2] = $2_1;
  HEAP32[$0 + 8 >> 2] = $1_1;
 }
 
 function $266($0, $1_1, $2_1) {
  HEAP32[$0 + 28 >> 2] = $2_1;
  HEAP32[$0 + 20 >> 2] = $1_1;
  HEAP32[$0 + 24 >> 2] = $1_1;
 }
 
 function $267($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[$3_1 + 12 >> 2] = $2_1;
  $265($0, 0, 0, 0);
  $266($0, 0, 0);
  label$1 : {
   if (!HEAPU8[$0 + 96 | 0]) {
    break label$1
   }
   $2_1 = HEAP32[$0 + 32 >> 2];
   if (!$2_1) {
    break label$1
   }
   $2583($2_1);
  }
  label$2 : {
   if (!HEAPU8[$0 + 97 | 0]) {
    break label$2
   }
   $2_1 = HEAP32[$0 + 56 >> 2];
   if (!$2_1) {
    break label$2
   }
   $2583($2_1);
  }
  $2_1 = HEAP32[$3_1 + 12 >> 2];
  HEAP32[$0 + 52 >> 2] = $2_1;
  $5_1 = $0;
  label$3 : {
   label$4 : {
    if ($2_1 >>> 0 >= 9) {
     if (!(!$1_1 | !HEAPU8[$0 + 98 | 0])) {
      HEAP32[$0 + 32 >> 2] = $1_1;
      break label$4;
     }
     (wasm2js_i32$0 = $0, wasm2js_i32$1 = $2497($2_1)), HEAP32[wasm2js_i32$0 + 32 >> 2] = wasm2js_i32$1;
     $2_1 = 1;
     break label$3;
    }
    HEAP32[$0 + 52 >> 2] = 8;
    HEAP32[$0 + 32 >> 2] = $0 + 44;
   }
   $2_1 = 0;
  }
  HEAP8[$5_1 + 96 | 0] = $2_1;
  $5_1 = $0;
  label$7 : {
   if (!HEAPU8[$0 + 98 | 0]) {
    HEAP32[$3_1 + 8 >> 2] = 8;
    $2_1 = HEAP32[$268($3_1 + 12 | 0, $3_1 + 8 | 0) >> 2];
    HEAP32[$0 + 60 >> 2] = $2_1;
    if ($1_1) {
     $4_1 = 0;
     if ($2_1 >>> 0 > 7) {
      break label$7
     }
    }
    $1_1 = $2497($2_1);
    $4_1 = 1;
    break label$7;
   }
   $1_1 = 0;
   HEAP32[$0 + 60 >> 2] = 0;
   $4_1 = 0;
  }
  HEAP8[$5_1 + 97 | 0] = $4_1;
  HEAP32[$0 + 56 >> 2] = $1_1;
  global$0 = $3_1 + 16 | 0;
  return $0 | 0;
 }
 
 function $268($0, $1_1) {
  return $306($0, $1_1);
 }
 
 function $269($0, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6 = 0, $7 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  $6 = HEAP32[$1_1 + 68 >> 2];
  if ($6) {
   $6 = $270($6);
   label$2 : {
    label$3 : {
     if (!(!HEAP32[$1_1 + 64 >> 2] | (($6 | 0) < 1 ? !!($2_1 | $3_1) : 0))) {
      if (!FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 24 >> 2]]($1_1)) {
       break label$3
      }
     }
     $271($0, -1, -1);
     break label$2;
    }
    if ($4_1 >>> 0 >= 3) {
     $271($0, -1, -1);
     break label$2;
    }
    $7 = HEAP32[$1_1 + 64 >> 2];
    $3_1 = __wasm_i64_mul($6, $6 >> 31, $2_1, $3_1);
    $2_1 = ($6 | 0) > 0;
    if ($1588($7, $2_1 ? $3_1 : 0, $2_1 ? i64toi32_i32$HIGH_BITS : 0, $4_1)) {
     $271($0, -1, -1);
     break label$2;
    }
    $3_1 = $5_1 + 16 | 0;
    $2_1 = HEAP32[$1_1 + 64 >> 2];
    __inlined_func$1591 : {
     if (HEAP32[$2_1 + 76 >> 2] <= -1) {
      $2_1 = $1590($2_1);
      break __inlined_func$1591;
     }
     $2_1 = $1590($2_1);
    }
    $4_1 = $271($3_1, $2_1, i64toi32_i32$HIGH_BITS);
    $3_1 = HEAP32[$1_1 + 76 >> 2];
    $2_1 = $5_1;
    $1_1 = HEAP32[$1_1 + 72 >> 2];
    HEAP32[$2_1 >> 2] = $1_1;
    HEAP32[$2_1 + 4 >> 2] = $3_1;
    HEAP32[$2_1 + 8 >> 2] = $1_1;
    HEAP32[$2_1 + 12 >> 2] = $3_1;
    $272($4_1, $2_1);
    $1_1 = HEAP32[$2_1 + 28 >> 2];
    HEAP32[$0 + 8 >> 2] = HEAP32[$2_1 + 24 >> 2];
    HEAP32[$0 + 12 >> 2] = $1_1;
    $1_1 = HEAP32[$2_1 + 20 >> 2];
    HEAP32[$0 >> 2] = HEAP32[$2_1 + 16 >> 2];
    HEAP32[$0 + 4 >> 2] = $1_1;
   }
   global$0 = $5_1 + 32 | 0;
   return;
  }
  $273();
  abort();
 }
 
 function $270($0) {
  return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0) | 0;
 }
 
 function $271($0, $1_1, $2_1) {
  HEAP32[$0 + 8 >> 2] = $1_1;
  HEAP32[$0 + 12 >> 2] = $2_1;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  return $0;
 }
 
 function $272($0, $1_1) {
  var $2_1 = 0;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$0 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0 + 4 >> 2] = $2_1;
 }
 
 function $273() {
  var $0 = 0;
  $0 = fimport$10(4) | 0;
  $2500($0);
  HEAP32[$0 >> 2] = 17764;
  fimport$11($0 | 0, 17824, 6);
  abort();
 }
 
 function $274($0, $1_1, $2_1, $3_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    if (HEAP32[$1_1 + 64 >> 2]) {
     if (!FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 24 >> 2]]($1_1)) {
      break label$2
     }
    }
    $271($0, -1, -1);
    break label$1;
   }
   if ($1588(HEAP32[$1_1 + 64 >> 2], $275($2_1), i64toi32_i32$HIGH_BITS, 0)) {
    $271($0, -1, -1);
    break label$1;
   }
   $272($3_1 + 8 | 0, $2_1);
   $4_1 = HEAP32[$3_1 + 12 >> 2];
   HEAP32[$1_1 + 72 >> 2] = HEAP32[$3_1 + 8 >> 2];
   HEAP32[$1_1 + 76 >> 2] = $4_1;
   $1_1 = HEAP32[$2_1 + 12 >> 2];
   HEAP32[$0 + 8 >> 2] = HEAP32[$2_1 + 8 >> 2];
   HEAP32[$0 + 12 >> 2] = $1_1;
   $1_1 = HEAP32[$2_1 + 4 >> 2];
   HEAP32[$0 >> 2] = HEAP32[$2_1 >> 2];
   HEAP32[$0 + 4 >> 2] = $1_1;
  }
  global$0 = $3_1 + 16 | 0;
 }
 
 function $275($0) {
  i64toi32_i32$HIGH_BITS = HEAP32[$0 + 12 >> 2];
  return HEAP32[$0 + 8 >> 2];
 }
 
 function $277($0) {
  $0 = $0 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  label$1 : {
   if (!HEAP32[$0 + 64 >> 2]) {
    break label$1
   }
   label$2 : {
    $2_1 = HEAP32[$0 + 68 >> 2];
    if ($2_1) {
     $1_1 = HEAP32[$0 + 92 >> 2];
     label$4 : {
      if ($1_1 & 16) {
       if (HEAP32[$0 + 24 >> 2] != HEAP32[$0 + 20 >> 2]) {
        $2_1 = -1;
        if ((FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 52 >> 2]]($0, -1) | 0) == -1) {
         break label$1
        }
       }
       $5_1 = $0 + 72 | 0;
       while (1) {
        $2_1 = HEAP32[$0 + 32 >> 2];
        $1_1 = $280(HEAP32[$0 + 68 >> 2], $5_1, $2_1, $2_1 + HEAP32[$0 + 52 >> 2] | 0, $4_1 + 12 | 0);
        $2_1 = -1;
        $6 = HEAP32[$0 + 32 >> 2];
        $3_1 = HEAP32[$4_1 + 12 >> 2] - $6 | 0;
        if (($2596($6, 1, $3_1, HEAP32[$0 + 64 >> 2]) | 0) != ($3_1 | 0)) {
         break label$1
        }
        if (($1_1 | 0) == 1) {
         continue
        }
        break;
       };
       if (($1_1 | 0) == 2) {
        break label$1
       }
       if (!$1574(HEAP32[$0 + 64 >> 2])) {
        break label$4
       }
       break label$1;
      }
      if (!($1_1 & 8)) {
       break label$4
      }
      $1_1 = HEAP32[$0 + 84 >> 2];
      HEAP32[$4_1 >> 2] = HEAP32[$0 + 80 >> 2];
      HEAP32[$4_1 + 4 >> 2] = $1_1;
      label$8 : {
       if (HEAPU8[$0 + 98 | 0]) {
        $1_1 = HEAP32[$0 + 16 >> 2] - HEAP32[$0 + 12 >> 2] | 0;
        $2_1 = $1_1;
        $3_1 = $1_1 >> 31;
        $1_1 = 0;
        break label$8;
       }
       $1_1 = $270($2_1);
       $3_1 = HEAP32[$0 + 40 >> 2] - HEAP32[$0 + 36 >> 2] | 0;
       $2_1 = $3_1;
       $3_1 = $2_1 >> 31;
       if (($1_1 | 0) >= 1) {
        $5_1 = Math_imul($1_1, HEAP32[$0 + 16 >> 2] - HEAP32[$0 + 12 >> 2] | 0);
        $1_1 = $2_1 + $5_1 | 0;
        $3_1 = $3_1 + ($5_1 >> 31) | 0;
        $3_1 = $1_1 >>> 0 < $2_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
        $2_1 = $1_1;
        $1_1 = 0;
        break label$8;
       }
       $1_1 = 0;
       if (HEAP32[$0 + 12 >> 2] == HEAP32[$0 + 16 >> 2]) {
        break label$8
       }
       $1_1 = HEAP32[$0 + 68 >> 2];
       $1_1 = FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 32 >> 2]]($1_1, $4_1, HEAP32[$0 + 32 >> 2], HEAP32[$0 + 36 >> 2], HEAP32[$0 + 12 >> 2] - HEAP32[$0 + 8 >> 2] | 0) | 0;
       $5_1 = (HEAP32[$0 + 36 >> 2] - $1_1 | 0) - HEAP32[$0 + 32 >> 2] | 0;
       $1_1 = $2_1 + $5_1 | 0;
       $3_1 = ($5_1 >> 31) + $3_1 | 0;
       $3_1 = $1_1 >>> 0 < $2_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
       $2_1 = $1_1;
       $1_1 = 1;
      }
      if ($1588(HEAP32[$0 + 64 >> 2], 0 - $2_1 | 0, 0 - ($3_1 + (0 < $2_1 >>> 0) | 0) | 0, 1)) {
       break label$2
      }
      if ($1_1) {
       $2_1 = HEAP32[$4_1 + 4 >> 2];
       HEAP32[$0 + 72 >> 2] = HEAP32[$4_1 >> 2];
       HEAP32[$0 + 76 >> 2] = $2_1;
      }
      $2_1 = HEAP32[$0 + 32 >> 2];
      HEAP32[$0 + 40 >> 2] = $2_1;
      HEAP32[$0 + 36 >> 2] = $2_1;
      $265($0, 0, 0, 0);
      HEAP32[$0 + 92 >> 2] = 0;
     }
     $2_1 = 0;
     break label$1;
    }
    $273();
    abort();
   }
   $2_1 = -1;
  }
  global$0 = $4_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $278($0) {
  $0 = $0 | 0;
  return HEAP32[$0 + 24 >> 2];
 }
 
 function $280($0, $1_1, $2_1, $3_1, $4_1) {
  return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, $1_1, $2_1, $3_1, $4_1) | 0;
 }
 
 function $282($0) {
  $0 = $0 | 0;
  return HEAP32[$0 + 12 >> 2];
 }
 
 function $283($0) {
  $0 = $0 | 0;
  return HEAP32[$0 + 8 >> 2];
 }
 
 function $285($0) {
  $0 = $0 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    if (!HEAP32[$0 + 64 >> 2]) {
     $4_1 = -1;
     break label$2;
    }
    $4_1 = $286($0);
    if (!HEAP32[$0 + 12 >> 2]) {
     $1_1 = $3_1 + 16 | 0;
     $265($0, $3_1 + 15 | 0, $1_1, $1_1);
    }
    $1_1 = 0;
    if (!$4_1) {
     $1_1 = HEAP32[$0 + 16 >> 2];
     $4_1 = HEAP32[$0 + 8 >> 2];
     HEAP32[$3_1 + 4 >> 2] = 4;
     HEAP32[$3_1 + 8 >> 2] = ($1_1 - $4_1 | 0) / 2;
     $1_1 = HEAP32[$124($3_1 + 8 | 0, $3_1 + 4 | 0) >> 2];
    }
    $4_1 = -1;
    label$6 : {
     if (HEAP32[$0 + 12 >> 2] == HEAP32[$0 + 16 >> 2]) {
      $2593(HEAP32[$0 + 8 >> 2], HEAP32[$0 + 16 >> 2] - $1_1 | 0, $1_1);
      if (HEAPU8[$0 + 98 | 0]) {
       $2_1 = $1586($1_1 + HEAP32[$0 + 8 >> 2] | 0, (HEAP32[$0 + 16 >> 2] - $1_1 | 0) - HEAP32[$0 + 8 >> 2] | 0, HEAP32[$0 + 64 >> 2]);
       if (!$2_1) {
        break label$6
       }
       $265($0, HEAP32[$0 + 8 >> 2], $1_1 + HEAP32[$0 + 8 >> 2] | 0, $2_1 + ($1_1 + HEAP32[$0 + 8 >> 2] | 0) | 0);
       $4_1 = $287(HEAP8[HEAP32[$0 + 12 >> 2]]);
       break label$6;
      }
      $5_1 = HEAP32[$0 + 40 >> 2];
      $2_1 = HEAP32[$0 + 36 >> 2];
      if (($5_1 | 0) != ($2_1 | 0)) {
       $2593(HEAP32[$0 + 32 >> 2], $2_1, $5_1 - $2_1 | 0)
      }
      $2_1 = HEAP32[$0 + 32 >> 2];
      HEAP32[$0 + 36 >> 2] = $2_1 + (HEAP32[$0 + 40 >> 2] - HEAP32[$0 + 36 >> 2] | 0);
      HEAP32[$0 + 40 >> 2] = $2_1 + (($2_1 | 0) == ($0 + 44 | 0) ? 8 : HEAP32[$0 + 52 >> 2]);
      HEAP32[$3_1 + 8 >> 2] = HEAP32[$0 + 60 >> 2] - $1_1;
      HEAP32[$3_1 + 4 >> 2] = HEAP32[$0 + 40 >> 2] - HEAP32[$0 + 36 >> 2];
      $2_1 = HEAP32[$124($3_1 + 8 | 0, $3_1 + 4 | 0) >> 2];
      $5_1 = HEAP32[$0 + 76 >> 2];
      HEAP32[$0 + 80 >> 2] = HEAP32[$0 + 72 >> 2];
      HEAP32[$0 + 84 >> 2] = $5_1;
      $2_1 = $1586(HEAP32[$0 + 36 >> 2], $2_1, HEAP32[$0 + 64 >> 2]);
      if (!$2_1) {
       break label$6
      }
      $5_1 = HEAP32[$0 + 68 >> 2];
      if (!$5_1) {
       break label$1
      }
      $2_1 = $2_1 + HEAP32[$0 + 36 >> 2] | 0;
      HEAP32[$0 + 40 >> 2] = $2_1;
      label$12 : {
       if (($288($5_1, $0 + 72 | 0, HEAP32[$0 + 32 >> 2], $2_1, $0 + 36 | 0, $1_1 + HEAP32[$0 + 8 >> 2] | 0, HEAP32[$0 + 8 >> 2] + HEAP32[$0 + 60 >> 2] | 0, $3_1 + 8 | 0) | 0) == 3) {
        $1_1 = HEAP32[$0 + 32 >> 2];
        $265($0, $1_1, $1_1, HEAP32[$0 + 40 >> 2]);
        break label$12;
       }
       if (HEAP32[$3_1 + 8 >> 2] == ($1_1 + HEAP32[$0 + 8 >> 2] | 0)) {
        break label$6
       }
       $265($0, HEAP32[$0 + 8 >> 2], $1_1 + HEAP32[$0 + 8 >> 2] | 0, HEAP32[$3_1 + 8 >> 2]);
      }
      $4_1 = $287(HEAP8[HEAP32[$0 + 12 >> 2]]);
      break label$6;
     }
     $4_1 = $287(HEAP8[HEAP32[$0 + 12 >> 2]]);
    }
    if (HEAP32[$0 + 8 >> 2] != ($3_1 + 15 | 0)) {
     break label$2
    }
    $265($0, 0, 0, 0);
   }
   global$0 = $3_1 + 16 | 0;
   return $4_1 | 0;
  }
  $273();
  abort();
 }
 
 function $286($0) {
  var $1_1 = 0, $2_1 = 0;
  if (HEAPU8[$0 + 92 | 0] & 8) {
   $0 = 0
  } else {
   $266($0, 0, 0);
   label$3 : {
    if (HEAPU8[$0 + 98 | 0]) {
     $1_1 = HEAP32[$0 + 32 >> 2];
     $2_1 = $1_1 + HEAP32[$0 + 52 >> 2] | 0;
     break label$3;
    }
    $1_1 = HEAP32[$0 + 56 >> 2];
    $2_1 = $1_1 + HEAP32[$0 + 60 >> 2] | 0;
   }
   $265($0, $1_1, $2_1, $2_1);
   HEAP32[$0 + 92 >> 2] = 8;
   $0 = 1;
  }
  return $0;
 }
 
 function $287($0) {
  return $0 & 255;
 }
 
 function $288($0, $1_1, $2_1, $3_1, $4_1, $5_1, $6, $7) {
  return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $1_1, $2_1, $3_1, $4_1, $5_1, $6, $7) | 0;
 }
 
 function $289($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   if (!HEAP32[$0 + 64 >> 2] | HEAPU32[$0 + 8 >> 2] >= HEAPU32[$0 + 12 >> 2]) {
    break label$1
   }
   if ($290($1_1, -1)) {
    $291($0, -1);
    return $292($1_1) | 0;
   }
   if (!(HEAPU8[$0 + 88 | 0] & 16)) {
    if (!$290($293($1_1), HEAP8[HEAP32[$0 + 12 >> 2] + -1 | 0])) {
     break label$1
    }
   }
   $291($0, -1);
   $2_1 = $293($1_1);
   HEAP8[HEAP32[$0 + 12 >> 2]] = $2_1;
   return $1_1 | 0;
  }
  return -1;
 }
 
 function $290($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  return ($0 | 0) == ($1_1 | 0) | 0;
 }
 
 function $291($0, $1_1) {
  HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] + $1_1;
 }
 
 function $292($0) {
  if ($290($0, -1)) {
   $0 = 0
  }
  return $0;
 }
 
 function $293($0) {
  return $0 << 24 >> 24;
 }
 
 function $294($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6 = 0, $7 = 0, $8 = 0, $9_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   if (!HEAP32[$0 + 64 >> 2]) {
    $6 = -1;
    break label$1;
   }
   $295($0);
   $7 = HEAP32[$0 + 20 >> 2];
   $8 = HEAP32[$0 + 28 >> 2];
   if (!$290($1_1, -1)) {
    if (!HEAP32[$0 + 24 >> 2]) {
     $266($0, $3_1 + 15 | 0, $3_1 + 16 | 0)
    }
    $2_1 = $293($1_1);
    HEAP8[HEAP32[$0 + 24 >> 2]] = $2_1;
    $297($0, 1);
   }
   if (HEAP32[$0 + 24 >> 2] != HEAP32[$0 + 20 >> 2]) {
    label$6 : {
     if (HEAPU8[$0 + 98 | 0]) {
      $2_1 = HEAP32[$0 + 24 >> 2] - HEAP32[$0 + 20 >> 2] | 0;
      if (($2596(HEAP32[$0 + 20 >> 2], 1, $2_1, HEAP32[$0 + 64 >> 2]) | 0) != ($2_1 | 0)) {
       $6 = -1;
       $5_1 = 0;
      } else {
       $5_1 = 1
      }
      if ($5_1) {
       break label$6
      }
      break label$1;
     }
     HEAP32[$3_1 + 8 >> 2] = HEAP32[$0 + 32 >> 2];
     $9_1 = $0 + 72 | 0;
     while (1) {
      label$11 : {
       label$12 : {
        $2_1 = HEAP32[$0 + 68 >> 2];
        if ($2_1) {
         $5_1 = $2_1;
         $2_1 = HEAP32[$0 + 32 >> 2];
         $5_1 = $298($5_1, $9_1, HEAP32[$0 + 20 >> 2], HEAP32[$0 + 24 >> 2], $3_1 + 4 | 0, $2_1, $2_1 + HEAP32[$0 + 52 >> 2] | 0, $3_1 + 8 | 0);
         if (HEAP32[$0 + 20 >> 2] == HEAP32[$3_1 + 4 >> 2]) {
          break label$12
         }
         label$14 : {
          if (($5_1 | 0) == 3) {
           $2_1 = 1;
           $4_1 = HEAP32[$0 + 24 >> 2] - HEAP32[$0 + 20 >> 2] | 0;
           if (($2596(HEAP32[$0 + 20 >> 2], 1, $4_1, HEAP32[$0 + 64 >> 2]) | 0) != ($4_1 | 0)) {
            $2_1 = 0;
            $6 = -1;
           }
           $4_1 = 0;
           if ($2_1) {
            break label$14
           }
           break label$11;
          }
          if ($5_1 >>> 0 > 1) {
           break label$12
          }
          $4_1 = HEAP32[$0 + 32 >> 2];
          $2_1 = HEAP32[$3_1 + 8 >> 2] - $4_1 | 0;
          label$17 : {
           if (($2596($4_1, 1, $2_1, HEAP32[$0 + 64 >> 2]) | 0) != ($2_1 | 0)) {
            $2_1 = 0;
            $6 = -1;
            break label$17;
           }
           $2_1 = 1;
           if (($5_1 | 0) != 1) {
            break label$17
           }
           $266($0, HEAP32[$3_1 + 4 >> 2], HEAP32[$0 + 24 >> 2]);
           $297($0, HEAP32[$0 + 28 >> 2] - HEAP32[$0 + 20 >> 2] | 0);
          }
          $4_1 = 0;
          if (!$2_1) {
           break label$11
          }
         }
         $4_1 = 1;
         break label$11;
        }
        $273();
        abort();
       }
       $4_1 = 0;
       $6 = -1;
      }
      if (!$4_1) {
       break label$1
      }
      if (($5_1 | 0) == 1) {
       continue
      }
      break;
     };
    }
    $266($0, $7, $8);
   }
   $6 = $292($1_1);
  }
  global$0 = $3_1 + 16 | 0;
  return $6 | 0;
 }
 
 function $295($0) {
  var $1_1 = 0, $2_1 = 0;
  if (!(HEAPU8[$0 + 92 | 0] & 16)) {
   $265($0, 0, 0, 0);
   $1_1 = HEAP32[$0 + 52 >> 2];
   label$2 : {
    if ($1_1 >>> 0 >= 9) {
     if (HEAPU8[$0 + 98 | 0]) {
      $2_1 = HEAP32[$0 + 32 >> 2];
      $266($0, $2_1, ($1_1 + $2_1 | 0) + -1 | 0);
      break label$2;
     }
     $1_1 = HEAP32[$0 + 56 >> 2];
     $266($0, $1_1, ($1_1 + HEAP32[$0 + 60 >> 2] | 0) + -1 | 0);
     break label$2;
    }
    $266($0, 0, 0);
   }
   HEAP32[$0 + 92 >> 2] = 16;
  }
 }
 
 function $297($0, $1_1) {
  HEAP32[$0 + 24 >> 2] = HEAP32[$0 + 24 >> 2] + $1_1;
 }
 
 function $298($0, $1_1, $2_1, $3_1, $4_1, $5_1, $6, $7) {
  return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0, $1_1, $2_1, $3_1, $4_1, $5_1, $6, $7) | 0;
 }
 
 function $299($0, $1_1, $2_1) {
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[$3_1 + 12 >> 2] = $1_1;
  $175($0, $3_1 + 12 | 0);
  $175($0 + 4 | 0, $2_1);
  global$0 = $3_1 + 16 | 0;
  return $0;
 }
 
 function $300($0) {
  var $1_1 = 0;
  $1_1 = HEAP32[$0 >> 2];
  HEAP32[$0 >> 2] = 0;
  return $1_1;
 }
 
 function $305($0) {
  return $0 + 4 | 0;
 }
 
 function $306($0, $1_1) {
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = $307($0, $1_1);
  global$0 = $2_1 + 16 | 0;
  return $3_1 ? $1_1 : $0;
 }
 
 function $307($0, $1_1) {
  return HEAP32[$0 >> 2] < HEAP32[$1_1 >> 2];
 }
 
 function $308($0, $1_1) {
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = $309($1_1, $0);
  global$0 = $2_1 + 16 | 0;
  return $3_1 ? $1_1 : $0;
 }
 
 function $309($0, $1_1) {
  return HEAPU32[$0 >> 2] < HEAPU32[$1_1 >> 2];
 }
 
 function $311($0, $1_1) {
  HEAP32[$0 >> 2] = HEAP32[(HEAP32[HEAP32[$1_1 >> 2] + -12 >> 2] + $1_1 | 0) + 24 >> 2];
  return $0;
 }
 
 function $313($0) {
  var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  if ($290(-1, HEAP32[$0 + 76 >> 2])) {
   (wasm2js_i32$0 = $0, wasm2js_i32$1 = $235($0, 32)), HEAP32[wasm2js_i32$0 + 76 >> 2] = wasm2js_i32$1
  }
  return HEAP8[$0 + 76 | 0];
 }
 
 function $314($0, $1_1, $2_1, $3_1, $4_1, $5_1) {
  var $6 = 0, $7 = 0, $8 = 0, $9_1 = 0;
  $7 = global$0 - 16 | 0;
  global$0 = $7;
  label$1 : {
   if (!$0) {
    break label$1
   }
   $9_1 = HEAP32[$4_1 + 12 >> 2];
   $8 = $2_1 - $1_1 | 0;
   if (($8 | 0) >= 1) {
    if (($316($0, $1_1, $8) | 0) != ($8 | 0)) {
     break label$1
    }
   }
   $1_1 = $3_1 - $1_1 | 0;
   $1_1 = ($9_1 | 0) > ($1_1 | 0) ? $9_1 - $1_1 | 0 : 0;
   if (($1_1 | 0) >= 1) {
    $6 = $317($7, $1_1, $5_1);
    $5_1 = $316($0, $320($6), $1_1);
    $2512($6);
    $6 = 0;
    if (($1_1 | 0) != ($5_1 | 0)) {
     break label$1
    }
    $0 = ($1_1 | 0) == ($5_1 | 0) ? $0 : 0;
   }
   $1_1 = $3_1 - $2_1 | 0;
   if (($1_1 | 0) >= 1) {
    if (($316($0, $2_1, $1_1) | 0) != ($1_1 | 0)) {
     break label$1
    }
   }
   $318($4_1);
   $6 = $0;
  }
  global$0 = $7 + 16 | 0;
  return $6;
 }
 
 function $315($0) {
  return !HEAP32[$0 >> 2];
 }
 
 function $316($0, $1_1, $2_1) {
  return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0, $1_1, $2_1) | 0;
 }
 
 function $317($0, $1_1, $2_1) {
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $2526($0, $1_1, $2_1);
  global$0 = $3_1 + 16 | 0;
  return $0;
 }
 
 function $318($0) {
  HEAP32[$0 + 12 >> 2] = 0;
 }
 
 function $320($0) {
  if ($207($0)) {
   return HEAP32[$0 >> 2]
  }
  return $0;
 }
 
 function $324($0, $1_1) {
  HEAP8[$0 + 11 | 0] = $1_1;
 }
 
 function $326($0) {
  var $1_1 = 0;
  if ($0 >>> 0 >= 11) {
   $1_1 = $0 + 16 & -16;
   $0 = $1_1 + -1 | 0;
   $0 = ($0 | 0) == 11 ? $1_1 : $0;
  } else {
   $0 = 10
  }
  return $0;
 }
 
 function $328($0, $1_1) {
  if (4294967295 < $1_1 >>> 0) {
   $338(1572);
   abort();
  }
  return $2497($1_1);
 }
 
 function $331($0, $1_1) {
  HEAP32[$0 >> 2] = $1_1;
 }
 
 function $332($0, $1_1) {
  HEAP32[$0 + 8 >> 2] = $1_1 | -2147483648;
 }
 
 function $333($0, $1_1) {
  HEAP32[$0 + 4 >> 2] = $1_1;
 }
 
 function $334($0, $1_1, $2_1) {
  if ($1_1) {
   $2592($0, $287($2_1), $1_1)
  }
 }
 
 function $335($0, $1_1) {
  HEAP8[$0 | 0] = HEAPU8[$1_1 | 0];
 }
 
 function $338($0) {
  var $1_1 = 0;
  $1_1 = fimport$10(8) | 0;
  $2500($1_1);
  HEAP32[$1_1 >> 2] = 17664;
  $2501($1_1 + 4 | 0, $0);
  HEAP32[$1_1 >> 2] = 17712;
  fimport$11($1_1 | 0, 17744, 7);
  abort();
 }
 
 function $343($0) {
  return $1860($0, 23112);
 }
 
 function $344($0, $1_1) {
  return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0, $1_1) | 0;
 }
 
 function $345($0, $1_1) {
  var $2_1 = 0;
  $2_1 = HEAP32[452];
  HEAP32[$0 >> 2] = $2_1;
  HEAP32[HEAP32[$2_1 + -12 >> 2] + $0 >> 2] = HEAP32[453];
  $250(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0, $1_1);
 }
 
 function $346($0) {
  $1659($0);
  HEAP32[$0 >> 2] = 1952;
  $189($0 + 32 | 0);
  HEAP32[$0 + 48 >> 2] = 16;
  HEAP32[$0 + 44 >> 2] = 0;
 }
 
 function $347($0) {
  var $1_1 = 0;
  $1_1 = HEAP32[451];
  HEAP32[$0 >> 2] = $1_1;
  HEAP32[HEAP32[$1_1 + -12 >> 2] + $0 >> 2] = HEAP32[454];
  $351($0 + 4 | 0);
  return $0;
 }
 
 function $348($0) {
  $0 = $0 | 0;
  $2583($232($0));
 }
 
 function $349($0) {
  $0 = $0 | 0;
  return $232(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0) | 0;
 }
 
 function $350($0) {
  $0 = $0 | 0;
  $348(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0);
 }
 
 function $351($0) {
  $0 = $0 | 0;
  HEAP32[$0 >> 2] = 1952;
  $2512($0 + 32 | 0);
  $1657($0);
  return $0 | 0;
 }
 
 function $352($0) {
  $0 = $0 | 0;
  $2583($351($0));
 }
 
 function $353($0, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6 = 0, $7 = 0, $8 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0;
  if (HEAPU32[$1_1 + 44 >> 2] < HEAPU32[$1_1 + 24 >> 2]) {
   HEAP32[$1_1 + 44 >> 2] = HEAP32[$1_1 + 24 >> 2]
  }
  $9_1 = -1;
  $10_1 = -1;
  $6 = $5_1 & 24;
  label$2 : {
   if (!$6 | (($6 | 0) == 24 ? ($4_1 | 0) == 1 : 0)) {
    break label$2
   }
   $6 = 0;
   $11_1 = HEAP32[$1_1 + 44 >> 2];
   if ($11_1) {
    $7 = $11_1 - $320($1_1 + 32 | 0) | 0;
    $12_1 = $7;
    $7 = $7 >> 31;
   }
   label$4 : {
    label$5 : {
     switch ($4_1 | 0) {
     case 1:
      if ($5_1 & 8) {
       $4_1 = HEAP32[$1_1 + 12 >> 2] - HEAP32[$1_1 + 8 >> 2] | 0;
       $6 = $4_1;
       $8 = $4_1 >> 31;
       break label$4;
      }
      $4_1 = HEAP32[$1_1 + 24 >> 2] - HEAP32[$1_1 + 20 >> 2] | 0;
      $6 = $4_1;
      $8 = $4_1 >> 31;
      break label$4;
     case 0:
      break label$4;
     case 2:
      break label$5;
     default:
      break label$2;
     };
    }
    $6 = $12_1;
    $8 = $7;
   }
   $3_1 = $3_1 + $8 | 0;
   $2_1 = $2_1 + $6 | 0;
   if ($2_1 >>> 0 < $6 >>> 0) {
    $3_1 = $3_1 + 1 | 0
   }
   if ((($3_1 | 0) < 0 ? 1 : ($3_1 | 0) <= 0 ? ($2_1 >>> 0 >= 0 ? 0 : 1) : 0) | (($7 | 0) < ($3_1 | 0) ? 1 : ($7 | 0) <= ($3_1 | 0) ? ($12_1 >>> 0 >= $2_1 >>> 0 ? 0 : 1) : 0)) {
    break label$2
   }
   label$8 : {
    if (!($2_1 | $3_1)) {
     break label$8
    }
    if (HEAP32[$1_1 + 12 >> 2] ? 0 : $5_1 & 8) {
     break label$2
    }
    if (!($5_1 & 16)) {
     break label$8
    }
    if (!HEAP32[$1_1 + 24 >> 2]) {
     break label$2
    }
   }
   if ($5_1 & 8) {
    $265($1_1, HEAP32[$1_1 + 8 >> 2], $2_1 + HEAP32[$1_1 + 8 >> 2] | 0, HEAP32[$1_1 + 44 >> 2])
   }
   if ($5_1 & 16) {
    $266($1_1, HEAP32[$1_1 + 20 >> 2], HEAP32[$1_1 + 28 >> 2]);
    $297($1_1, $2_1);
   }
   $9_1 = $2_1;
   $10_1 = $3_1;
  }
  $271($0, $9_1, $10_1);
 }
 
 function $354($0, $1_1, $2_1, $3_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0, wasm2js_i32$6 = 0;
  ((((((wasm2js_i32$1 = $0, wasm2js_i32$2 = $1_1), wasm2js_i32$3 = $275($2_1)), wasm2js_i32$4 = i64toi32_i32$HIGH_BITS), wasm2js_i32$5 = 0), wasm2js_i32$6 = $3_1), wasm2js_i32$0 = HEAP32[HEAP32[$1_1 >> 2] + 16 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0, wasm2js_i32$3 | 0, wasm2js_i32$4 | 0, wasm2js_i32$5 | 0, wasm2js_i32$6 | 0);
 }
 
 function $355($0) {
  $0 = $0 | 0;
  if (HEAPU32[$0 + 44 >> 2] < HEAPU32[$0 + 24 >> 2]) {
   HEAP32[$0 + 44 >> 2] = HEAP32[$0 + 24 >> 2]
  }
  label$2 : {
   if (!(HEAPU8[$0 + 48 | 0] & 8)) {
    break label$2
   }
   if (HEAPU32[$0 + 16 >> 2] < HEAPU32[$0 + 44 >> 2]) {
    $265($0, HEAP32[$0 + 8 >> 2], HEAP32[$0 + 12 >> 2], HEAP32[$0 + 44 >> 2])
   }
   if (HEAPU32[$0 + 12 >> 2] >= HEAPU32[$0 + 16 >> 2]) {
    break label$2
   }
   return $287(HEAP8[HEAP32[$0 + 12 >> 2]]) | 0;
  }
  return -1;
 }
 
 function $356($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  if (HEAPU32[$0 + 44 >> 2] < HEAPU32[$0 + 24 >> 2]) {
   HEAP32[$0 + 44 >> 2] = HEAP32[$0 + 24 >> 2]
  }
  label$2 : {
   if (HEAPU32[$0 + 8 >> 2] >= HEAPU32[$0 + 12 >> 2]) {
    break label$2
   }
   if ($290($1_1, -1)) {
    $265($0, HEAP32[$0 + 8 >> 2], HEAP32[$0 + 12 >> 2] + -1 | 0, HEAP32[$0 + 44 >> 2]);
    return $292($1_1) | 0;
   }
   if (!(HEAPU8[$0 + 48 | 0] & 16)) {
    if (!$290($293($1_1), HEAP8[HEAP32[$0 + 12 >> 2] + -1 | 0])) {
     break label$2
    }
   }
   $265($0, HEAP32[$0 + 8 >> 2], HEAP32[$0 + 12 >> 2] + -1 | 0, HEAP32[$0 + 44 >> 2]);
   $2_1 = $293($1_1);
   HEAP8[HEAP32[$0 + 12 >> 2]] = $2_1;
   return $1_1 | 0;
  }
  return -1;
 }
 
 function $357($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6 = 0, $7 = 0, $8 = 0, $9_1 = 0, $10_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   if (!$290($1_1, -1)) {
    $5_1 = HEAP32[$0 + 12 >> 2];
    $6 = HEAP32[$0 + 8 >> 2];
    if (HEAP32[$0 + 24 >> 2] == HEAP32[$0 + 28 >> 2]) {
     $2_1 = -1;
     if (!(HEAPU8[$0 + 48 | 0] & 16)) {
      break label$1
     }
     $7 = HEAP32[$0 + 24 >> 2];
     $8 = HEAP32[$0 + 20 >> 2];
     $9_1 = HEAP32[$0 + 44 >> 2];
     $10_1 = HEAP32[$0 + 20 >> 2];
     $2_1 = $0 + 32 | 0;
     $2522($2_1, 0);
     $359($2_1, $358($2_1));
     $4_1 = $320($2_1);
     $266($0, $4_1, $100($2_1) + $4_1 | 0);
     $297($0, $7 - $8 | 0);
     HEAP32[$0 + 44 >> 2] = HEAP32[$0 + 20 >> 2] + ($9_1 - $10_1 | 0);
    }
    HEAP32[$3_1 + 12 >> 2] = HEAP32[$0 + 24 >> 2] + 1;
    (wasm2js_i32$0 = $0, wasm2js_i32$1 = HEAP32[$360($3_1 + 12 | 0, $0 + 44 | 0) >> 2]), HEAP32[wasm2js_i32$0 + 44 >> 2] = wasm2js_i32$1;
    if (HEAPU8[$0 + 48 | 0] & 8) {
     $2_1 = $320($0 + 32 | 0);
     $265($0, $2_1, $2_1 + ($5_1 - $6 | 0) | 0, HEAP32[$0 + 44 >> 2]);
    }
    $2_1 = $361($0, $293($1_1));
    break label$1;
   }
   $2_1 = $292($1_1);
  }
  $0 = $2_1;
  global$0 = $3_1 + 16 | 0;
  return $0 | 0;
 }
 
 function $358($0) {
  if ($207($0)) {
   $0 = $362($0) + -1 | 0
  } else {
   $0 = 10
  }
  return $0;
 }
 
 function $359($0, $1_1) {
  $2517($0, $1_1);
 }
 
 function $360($0, $1_1) {
  return $363($0, $1_1);
 }
 
 function $361($0, $1_1) {
  var $2_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $2_1 = HEAP32[$0 + 24 >> 2];
  if (($2_1 | 0) == HEAP32[$0 + 28 >> 2]) {
   return ((wasm2js_i32$1 = $0, wasm2js_i32$2 = $287($1_1)), wasm2js_i32$0 = HEAP32[HEAP32[$0 >> 2] + 52 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0
  }
  HEAP32[$0 + 24 >> 2] = $2_1 + 1;
  HEAP8[$2_1 | 0] = $1_1;
  return $287($1_1);
 }
 
 function $362($0) {
  return HEAP32[$0 + 8 >> 2] & 2147483647;
 }
 
 function $363($0, $1_1) {
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = $309($0, $1_1);
  global$0 = $2_1 + 16 | 0;
  return $3_1 ? $1_1 : $0;
 }
 
 function $364($0, $1_1) {
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  $3_1 = HEAP32[$1_1 + 48 >> 2];
  label$1 : {
   if ($3_1 & 16) {
    if (HEAPU32[$1_1 + 44 >> 2] < HEAPU32[$1_1 + 24 >> 2]) {
     HEAP32[$1_1 + 44 >> 2] = HEAP32[$1_1 + 24 >> 2]
    }
    $366($0, HEAP32[$1_1 + 20 >> 2], HEAP32[$1_1 + 44 >> 2], $2_1 + 24 | 0);
    break label$1;
   }
   if ($3_1 & 8) {
    $366($0, HEAP32[$1_1 + 8 >> 2], HEAP32[$1_1 + 16 >> 2], $2_1 + 16 | 0);
    break label$1;
   }
   $1_1 = global$0 - 16 | 0;
   global$0 = $1_1;
   $233($0);
   global$0 = $1_1 + 16 | 0;
  }
  global$0 = $2_1 + 32 | 0;
 }
 
 function $366($0, $1_1, $2_1, $3_1) {
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $369($0, $1_1, $2_1);
  global$0 = $3_1 + 16 | 0;
  return $0;
 }
 
 function $369($0, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  $4_1 = $371($1_1, $2_1);
  if ($4_1 >>> 0 <= 4294967279) {
   label$2 : {
    if ($4_1 >>> 0 <= 10) {
     $324($0, $4_1);
     $3_1 = $0;
     break label$2;
    }
    $6 = $326($4_1) + 1 | 0;
    $3_1 = $328($0, $6);
    $331($0, $3_1);
    $332($0, $6);
    $333($0, $4_1);
   }
   if (($1_1 | 0) != ($2_1 | 0)) {
    while (1) {
     $335($3_1, $1_1);
     $3_1 = $3_1 + 1 | 0;
     $1_1 = $1_1 + 1 | 0;
     if (($2_1 | 0) != ($1_1 | 0)) {
      continue
     }
     break;
    }
   }
   HEAP8[$5_1 + 15 | 0] = 0;
   $335($3_1, $5_1 + 15 | 0);
   global$0 = $5_1 + 16 | 0;
   return;
  }
  $2506();
  abort();
 }
 
 function $371($0, $1_1) {
  return $372($0, $1_1);
 }
 
 function $372($0, $1_1) {
  return $1_1 - $0 | 0;
 }
 
 function $373($0) {
  HEAP32[$0 + 68 >> 2] = 0;
  HEAP32[$0 + 72 >> 2] = 16;
  HEAP32[$0 + 64 >> 2] = $0;
 }
 
 function $374($0) {
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  label$1 : {
   if ($207($0)) {
    $2_1 = HEAP32[$0 >> 2];
    HEAP8[$1_1 + 15 | 0] = 0;
    $335($2_1, $1_1 + 15 | 0);
    $333($0, 0);
    break label$1;
   }
   HEAP8[$1_1 + 14 | 0] = 0;
   $335($0, $1_1 + 14 | 0);
   $324($0, 0);
  }
  global$0 = $1_1 + 16 | 0;
 }
 
 function $375($0) {
  var $1_1 = 0;
  $1_1 = HEAP32[$0 + 12 >> 2];
  if (($1_1 | 0) == HEAP32[$0 + 16 >> 2]) {
   return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 40 >> 2]]($0) | 0
  }
  HEAP32[$0 + 12 >> 2] = $1_1 + 1;
  return $287(HEAP8[$1_1 | 0]);
 }
 
 function $376($0) {
  $0 = $0 | 0;
 }
 
 function $379($0) {
  $386($0, HEAP32[$0 >> 2]);
 }
 
 function $380($0, $1_1) {
  $393($0);
  $98($0);
 }
 
 function $381($0, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = 0;
  $5_1 = -1;
  if (!(!$4_1 | $3_1 >>> 0 >= $1_1 >>> 0)) {
   $1_1 = $0 + $1_1 | 0;
   $2_1 = $395($0 + $3_1 | 0, $1_1, $2_1, $2_1 + $4_1 | 0);
   $5_1 = ($1_1 | 0) == ($2_1 | 0) ? -1 : $2_1 - $0 | 0;
  }
  return $5_1;
 }
 
 function $382($0, $1_1) {
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  if ($207($0)) {
   $3_1 = HEAP32[$0 >> 2];
   $362($0);
   $2583($3_1);
  }
  HEAP32[$0 + 8 >> 2] = HEAP32[$1_1 + 8 >> 2];
  $3_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$0 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0 + 4 >> 2] = $3_1;
  $324($1_1, 0);
  HEAP8[$2_1 + 15 | 0] = 0;
  $335($1_1, $2_1 + 15 | 0);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $384($0, $1_1) {
  var $2_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $2_1 = $404($3_1, $0, 1);
  $405($130($0), HEAP32[$2_1 + 4 >> 2], $1_1);
  HEAP32[$2_1 + 4 >> 2] = HEAP32[$2_1 + 4 >> 2] + 12;
  $406($2_1);
  global$0 = $3_1 + 16 | 0;
 }
 
 function $385($0, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  $2_1 = $130($0);
  $4_1 = $2_1;
  $2_1 = $408($3_1 + 8 | 0, $407($0, $98($0) + 1 | 0), $98($0), $2_1);
  $405($4_1, HEAP32[$2_1 + 8 >> 2], $1_1);
  HEAP32[$2_1 + 8 >> 2] = HEAP32[$2_1 + 8 >> 2] + 12;
  $409($0, $2_1);
  $410($2_1);
  global$0 = $3_1 + 32 | 0;
 }
 
 function $386($0, $1_1) {
  var $2_1 = 0;
  $2_1 = HEAP32[$0 + 4 >> 2];
  if (($2_1 | 0) != ($1_1 | 0)) {
   while (1) {
    $130($0);
    $2_1 = $2_1 + -12 | 0;
    $391($2_1);
    if (($1_1 | 0) != ($2_1 | 0)) {
     continue
    }
    break;
   }
  }
  HEAP32[$0 + 4 >> 2] = $1_1;
 }
 
 function $391($0) {
  $2512($0);
 }
 
 function $393($0) {
  return (HEAP32[$130($0) >> 2] - HEAP32[$0 >> 2] | 0) / 12 | 0;
 }
 
 function $395($0, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = 0, $6 = 0;
  label$1 : {
   if (($0 | 0) == ($1_1 | 0)) {
    break label$1
   }
   while (1) {
    $4_1 = $2_1;
    $5_1 = 1;
    label$3 : {
     if (($4_1 | 0) == ($3_1 | 0)) {
      break label$3
     }
     label$4 : {
      while (1) {
       if (FUNCTION_TABLE[8](HEAP8[$0 | 0], HEAP8[$4_1 | 0])) {
        break label$4
       }
       $4_1 = $4_1 + 1 | 0;
       if (($4_1 | 0) != ($3_1 | 0)) {
        continue
       }
       break;
      };
      $5_1 = 1;
      break label$3;
     }
     $6 = $0;
     $5_1 = 0;
    }
    if ($5_1) {
     $0 = $0 + 1 | 0;
     if (($1_1 | 0) == ($0 | 0)) {
      break label$1
     }
     continue;
    }
    break;
   };
   $1_1 = $6;
  }
  return $1_1;
 }
 
 function $403($0) {
  $0 = $0 | 0;
  $2583($0);
 }
 
 function $404($0, $1_1, $2_1) {
  HEAP32[$0 >> 2] = $1_1;
  HEAP32[$0 + 4 >> 2] = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$0 + 8 >> 2] = HEAP32[$1_1 + 4 >> 2] + Math_imul($2_1, 12);
  return $0;
 }
 
 function $405($0, $1_1, $2_1) {
  $2508($1_1, $2_1);
 }
 
 function $406($0) {
  HEAP32[HEAP32[$0 >> 2] + 4 >> 2] = HEAP32[$0 + 4 >> 2];
 }
 
 function $407($0, $1_1) {
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 + 12 >> 2] = $1_1;
  $1_1 = $413($0);
  if (HEAPU32[$2_1 + 12 >> 2] <= $1_1 >>> 0) {
   $0 = $393($0);
   if ($0 >>> 0 < $1_1 >>> 1 >>> 0) {
    HEAP32[$2_1 + 8 >> 2] = $0 << 1;
    $1_1 = HEAP32[$360($2_1 + 8 | 0, $2_1 + 12 | 0) >> 2];
   }
   global$0 = $2_1 + 16 | 0;
   return $1_1;
  }
  $2538();
  abort();
 }
 
 function $408($0, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[$4_1 + 12 >> 2] = 0;
  $415($0 + 12 | 0, $4_1 + 12 | 0, $3_1);
  if ($1_1) {
   $416($0);
   $5_1 = $432($1_1);
  }
  HEAP32[$0 >> 2] = $5_1;
  $2_1 = Math_imul($2_1, 12) + $5_1 | 0;
  HEAP32[$0 + 8 >> 2] = $2_1;
  HEAP32[$0 + 4 >> 2] = $2_1;
  (wasm2js_i32$0 = $418($0), wasm2js_i32$1 = Math_imul($1_1, 12) + $5_1 | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  global$0 = $4_1 + 16 | 0;
  return $0;
 }
 
 function $409($0, $1_1) {
  var $2_1 = 0;
  $43($0);
  $2_1 = $1_1 + 4 | 0;
  $419($130($0), HEAP32[$0 >> 2], HEAP32[$0 + 4 >> 2], $2_1);
  $420($0, $2_1);
  $420($0 + 4 | 0, $1_1 + 8 | 0);
  $420($130($0), $418($1_1));
  HEAP32[$1_1 >> 2] = HEAP32[$1_1 + 4 >> 2];
  $98($0);
  $393($0);
  $393($0);
 }
 
 function $410($0) {
  var $1_1 = 0;
  $441($0, HEAP32[$0 + 4 >> 2]);
  if (HEAP32[$0 >> 2]) {
   $416($0);
   $1_1 = HEAP32[$0 >> 2];
   HEAP32[$418($0) >> 2];
   $2583($1_1);
  }
 }
 
 function $413($0) {
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $130($0);
  HEAP32[$1_1 + 12 >> 2] = 357913941;
  HEAP32[$1_1 + 8 >> 2] = 2147483647;
  $0 = HEAP32[$124($1_1 + 12 | 0, $1_1 + 8 | 0) >> 2];
  global$0 = $1_1 + 16 | 0;
  return $0;
 }
 
 function $415($0, $1_1, $2_1) {
  $170($0, $1_1);
  $431($0 + 4 | 0, $2_1);
 }
 
 function $416($0) {
  return $433($0 + 12 | 0);
 }
 
 function $418($0) {
  return $0 + 12 | 0;
 }
 
 function $419($0, $1_1, $2_1, $3_1) {
  if (($1_1 | 0) != ($2_1 | 0)) {
   while (1) {
    $2_1 = $2_1 + -12 | 0;
    $437(HEAP32[$3_1 >> 2] + -12 | 0, $2_1);
    HEAP32[$3_1 >> 2] = HEAP32[$3_1 >> 2] + -12;
    if (($1_1 | 0) != ($2_1 | 0)) {
     continue
    }
    break;
   }
  }
 }
 
 function $420($0, $1_1) {
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 + 12 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$0 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$1_1 >> 2] = HEAP32[$2_1 + 12 >> 2];
  global$0 = $2_1 + 16 | 0;
 }
 
 function $431($0, $1_1) {
  HEAP32[$0 >> 2] = $1_1;
  return $0;
 }
 
 function $432($0) {
  if (357913941 < $0 >>> 0) {
   $338(1572);
   abort();
  }
  return $2497(Math_imul($0, 12));
 }
 
 function $433($0) {
  $0 = $0 | 0;
  return HEAP32[$0 + 4 >> 2];
 }
 
 function $437($0, $1_1) {
  var $2_1 = 0;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$0 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0 + 4 >> 2] = $2_1;
  HEAP32[$0 + 8 >> 2] = HEAP32[$1_1 + 8 >> 2];
  $233($1_1);
 }
 
 function $441($0, $1_1) {
  var $2_1 = 0;
  if (HEAP32[$0 + 8 >> 2] != ($1_1 | 0)) {
   while (1) {
    $416($0);
    $2_1 = HEAP32[$0 + 8 >> 2] + -12 | 0;
    HEAP32[$0 + 8 >> 2] = $2_1;
    $391($2_1);
    if (HEAP32[$0 + 8 >> 2] != ($1_1 | 0)) {
     continue
    }
    break;
   }
  }
 }
 
 function $442($0, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 336 | 0;
  global$0 = $3_1;
  $443($2_1);
  $5_1 = $1_1;
  $1_1 = $444($3_1);
  label$1 : {
   if (!$445($0, $5_1, $1_1)) {
    break label$1
   }
   $447($2_1, HEAP32[$1_1 + 324 >> 2]);
   if (!HEAP32[$1_1 + 324 >> 2]) {
    $4_1 = 1;
    break label$1;
   }
   $0 = 0;
   while (1) {
    $449($2_1, $448($1_1, $0));
    $4_1 = 1;
    $0 = $0 + 1 | 0;
    if ($0 >>> 0 < HEAPU32[$1_1 + 324 >> 2]) {
     continue
    }
    break;
   };
  }
  $450($1_1);
  global$0 = $3_1 + 336 | 0;
  return $4_1;
 }
 
 function $443($0) {
  var $1_1 = 0;
  $1_1 = HEAP32[$0 + 64 >> 2];
  if (($1_1 | 0) != ($0 | 0)) {
   $2583($1_1)
  }
  $373($0);
 }
 
 function $444($0) {
  var $1_1 = 0, $2_1 = 0;
  $2_1 = $0 + 320 | 0;
  $1_1 = $0;
  while (1) {
   $1_1 = $451($1_1) + 20 | 0;
   if (($2_1 | 0) != ($1_1 | 0)) {
    continue
   }
   break;
  };
  $452($0);
  return $0;
 }
 
 function $445($0, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6 = 0, $7 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  $453($2_1);
  $6 = 1;
  $454($2_1, $1_1 >>> 1 | 0);
  label$1 : {
   while (1) {
    if ($4_1 >>> 0 >= $1_1 >>> 0) {
     break label$1
    }
    $455($3_1 + 24 | 0, $0 + $4_1 | 0, $1_1 - $4_1 | 0);
    $5_1 = HEAP32[$3_1 + 28 >> 2];
    label$3 : {
     if (!$5_1) {
      $453($2_1);
      $5_1 = 0;
      break label$3;
     }
     $457($2_1, $456($3_1, HEAP32[$3_1 + 24 >> 2], $4_1, $5_1, $7));
     $7 = $7 + 1 | 0;
     $4_1 = HEAP32[$3_1 + 28 >> 2] + $4_1 | 0;
     $5_1 = 1;
    }
    if ($5_1) {
     continue
    }
    break;
   };
   $6 = 0;
  }
  global$0 = $3_1 + 32 | 0;
  return $6;
 }
 
 function $447($0, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  label$1 : {
   $4_1 = HEAP32[$0 + 72 >> 2];
   label$2 : {
    if ($4_1 >>> 0 >= $1_1 >>> 0) {
     break label$2
    }
    $2_1 = $2582($1_1 << 2);
    if (!$2_1) {
     break label$1
    }
    $3_1 = HEAP32[$0 + 64 >> 2];
    HEAP32[$0 + 64 >> 2] = $2_1;
    $2591($2_1, $3_1, $4_1 << 2);
    HEAP32[$0 + 72 >> 2] = $1_1;
    if (($0 | 0) == ($3_1 | 0)) {
     break label$2
    }
    $2583($3_1);
   }
   return;
  }
  fimport$5(2142, 2147, 92, 2186);
  abort();
 }
 
 function $448($0, $1_1) {
  return HEAP32[$0 + 320 >> 2] + Math_imul($1_1, 20) | 0;
 }
 
 function $449($0, $1_1) {
  var $2_1 = 0;
  label$1 : {
   $2_1 = HEAP32[$0 + 72 >> 2];
   if (($2_1 | 0) == HEAP32[$0 + 68 >> 2]) {
    if (!$2_1) {
     break label$1
    }
    $447($0, $2_1 << 1);
   }
   $1_1 = HEAP32[$1_1 >> 2];
   $2_1 = HEAP32[$0 + 68 >> 2];
   HEAP32[$0 + 68 >> 2] = $2_1 + 1;
   HEAP32[HEAP32[$0 + 64 >> 2] + ($2_1 << 2) >> 2] = $1_1;
   return;
  }
  fimport$5(2194, 2147, 82, 2204);
  abort();
 }
 
 function $450($0) {
  var $1_1 = 0;
  $1_1 = $0;
  $0 = HEAP32[$0 + 320 >> 2];
  if (($1_1 | 0) != ($0 | 0)) {
   $2583($0)
  }
 }
 
 function $451($0) {
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 + 12 >> 2] = 0;
  return $0;
 }
 
 function $452($0) {
  HEAP32[$0 + 324 >> 2] = 0;
  HEAP32[$0 + 328 >> 2] = 16;
  HEAP32[$0 + 320 >> 2] = $0;
 }
 
 function $453($0) {
  var $1_1 = 0;
  $1_1 = HEAP32[$0 + 320 >> 2];
  if (($1_1 | 0) != ($0 | 0)) {
   $2583($1_1)
  }
  $452($0);
 }
 
 function $454($0, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  label$1 : {
   $4_1 = HEAP32[$0 + 328 >> 2];
   label$2 : {
    if ($4_1 >>> 0 >= $1_1 >>> 0) {
     break label$2
    }
    $2_1 = $2582(Math_imul($1_1, 20));
    if (!$2_1) {
     break label$1
    }
    $3_1 = HEAP32[$0 + 320 >> 2];
    HEAP32[$0 + 320 >> 2] = $2_1;
    $2591($2_1, $3_1, Math_imul($4_1, 20));
    HEAP32[$0 + 328 >> 2] = $1_1;
    if (($0 | 0) == ($3_1 | 0)) {
     break label$2
    }
    $2583($3_1);
   }
   return;
  }
  fimport$5(2142, 2147, 92, 2186);
  abort();
 }
 
 function $455($0, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0;
  $0 = $458($0, 0, 0);
  if (!(!$1_1 | !$2_1)) {
   $4_1 = $0;
   $3_1 = HEAPU8[$1_1 | 0];
   label$2 : {
    if ($3_1 << 24 >> 24 >= 0) {
     HEAP32[$0 >> 2] = $3_1 & 127;
     $0 = 1;
     break label$2;
    }
    if (!($2_1 >>> 0 < 2 | $3_1 >>> 0 > 223)) {
     $2_1 = $3_1 << 6 & 1984;
     HEAP32[$0 >> 2] = $2_1;
     HEAP32[$0 >> 2] = $2_1 | HEAPU8[$1_1 + 1 | 0] & 63;
     $0 = 2;
     break label$2;
    }
    if (!($2_1 >>> 0 < 3 | $3_1 >>> 0 > 239)) {
     $2_1 = $3_1 << 6 & 960;
     HEAP32[$0 >> 2] = $2_1;
     $2_1 = ($2_1 | HEAPU8[$1_1 + 1 | 0] & 63) << 6;
     HEAP32[$0 >> 2] = $2_1;
     HEAP32[$0 >> 2] = $2_1 | HEAPU8[$1_1 + 2 | 0] & 63;
     $0 = 3;
     break label$2;
    }
    if (!($2_1 >>> 0 < 4 | $3_1 >>> 0 > 247)) {
     $2_1 = $3_1 << 6 & 448;
     HEAP32[$0 >> 2] = $2_1;
     $2_1 = ($2_1 | HEAPU8[$1_1 + 1 | 0] & 63) << 6;
     HEAP32[$0 >> 2] = $2_1;
     $2_1 = ($2_1 | HEAPU8[$1_1 + 2 | 0] & 63) << 6;
     HEAP32[$0 >> 2] = $2_1;
     HEAP32[$0 >> 2] = $2_1 | HEAPU8[$1_1 + 3 | 0] & 63;
     $0 = 4;
     break label$2;
    }
    HEAP32[$0 >> 2] = 0;
    $0 = 0;
   }
   HEAP32[$4_1 + 4 >> 2] = $0;
  }
 }
 
 function $456($0, $1_1, $2_1, $3_1, $4_1) {
  HEAP32[$0 + 16 >> 2] = 1;
  HEAP32[$0 + 12 >> 2] = $4_1;
  HEAP32[$0 + 8 >> 2] = $3_1;
  HEAP32[$0 + 4 >> 2] = $2_1;
  HEAP32[$0 >> 2] = $1_1;
  return $0;
 }
 
 function $457($0, $1_1) {
  var $2_1 = 0;
  label$1 : {
   $2_1 = HEAP32[$0 + 328 >> 2];
   if (($2_1 | 0) == HEAP32[$0 + 324 >> 2]) {
    if (!$2_1) {
     break label$1
    }
    $454($0, $2_1 << 1);
   }
   $2_1 = HEAP32[$0 + 324 >> 2];
   HEAP32[$0 + 324 >> 2] = $2_1 + 1;
   $0 = HEAP32[$0 + 320 >> 2] + Math_imul($2_1, 20) | 0;
   HEAP32[$0 + 16 >> 2] = HEAP32[$1_1 + 16 >> 2];
   $2_1 = HEAP32[$1_1 + 12 >> 2];
   HEAP32[$0 + 8 >> 2] = HEAP32[$1_1 + 8 >> 2];
   HEAP32[$0 + 12 >> 2] = $2_1;
   $2_1 = HEAP32[$1_1 + 4 >> 2];
   HEAP32[$0 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$0 + 4 >> 2] = $2_1;
   return;
  }
  fimport$5(2194, 2147, 82, 2204);
  abort();
 }
 
 function $458($0, $1_1, $2_1) {
  HEAP32[$0 + 4 >> 2] = $2_1;
  HEAP32[$0 >> 2] = $1_1;
  return $0;
 }
 
 function $459($0, $1_1, $2_1) {
  HEAP32[$0 >> 2] = $1_1;
  HEAP32[$0 + 4 >> 2] = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$0 + 8 >> 2] = HEAP32[$1_1 + 4 >> 2] + Math_imul($2_1, 104);
  return $0;
 }
 
 function $461($0, $1_1, $2_1) {
  $468($1_1, $2_1);
 }
 
 function $462($0) {
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[$1_1 + 12 >> 2] = $0;
  $0 = $473(18832);
  if (HEAPU32[$1_1 + 12 >> 2] <= $0 >>> 0) {
   $2_1 = $487(18832);
   if ($2_1 >>> 0 < $0 >>> 1 >>> 0) {
    HEAP32[$1_1 + 8 >> 2] = $2_1 << 1;
    $0 = HEAP32[$360($1_1 + 8 | 0, $1_1 + 12 | 0) >> 2];
   }
   global$0 = $1_1 + 16 | 0;
   return $0;
  }
  $2538();
  abort();
 }
 
 function $463($0, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[$4_1 + 12 >> 2] = 0;
  $415($0 + 12 | 0, $4_1 + 12 | 0, $3_1);
  if ($1_1) {
   $416($0);
   $5_1 = $491($1_1);
  }
  HEAP32[$0 >> 2] = $5_1;
  $2_1 = Math_imul($2_1, 104) + $5_1 | 0;
  HEAP32[$0 + 8 >> 2] = $2_1;
  HEAP32[$0 + 4 >> 2] = $2_1;
  (wasm2js_i32$0 = $418($0), wasm2js_i32$1 = Math_imul($1_1, 104) + $5_1 | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  global$0 = $4_1 + 16 | 0;
  return $0;
 }
 
 function $464($0) {
  var $1_1 = 0;
  $479(18832);
  $1_1 = $0 + 4 | 0;
  $480($130(18832), HEAP32[4708], HEAP32[4709], $1_1);
  $420(18832, $1_1);
  $420(18836, $0 + 8 | 0);
  $420($130(18832), $418($0));
  HEAP32[$0 >> 2] = HEAP32[$0 + 4 >> 2];
  $481(18832, $198(18832));
 }
 
 function $468($0, $1_1) {
  var $2_1 = 0;
  $469($0, $1_1);
  $2_1 = HEAP32[$1_1 + 84 >> 2];
  HEAP32[$0 + 80 >> 2] = HEAP32[$1_1 + 80 >> 2];
  HEAP32[$0 + 84 >> 2] = $2_1;
  $2508($0 + 88 | 0, $1_1 + 88 | 0);
 }
 
 function $469($0, $1_1) {
  $373($0);
  $470($0, $1_1);
 }
 
 function $470($0, $1_1) {
  var $2_1 = 0;
  $443($0);
  HEAP32[$0 + 68 >> 2] = HEAP32[$1_1 + 68 >> 2];
  HEAP32[$0 + 72 >> 2] = HEAP32[$1_1 + 72 >> 2];
  if (HEAP32[$1_1 + 64 >> 2] == ($1_1 | 0)) {
   $0 = $2591($0, $1_1, HEAP32[$0 + 68 >> 2] << 2);
   HEAP32[$0 + 64 >> 2] = $0;
   return;
  }
  $2_1 = $0;
  $0 = $2582(HEAP32[$1_1 + 72 >> 2] << 2);
  HEAP32[$2_1 + 64 >> 2] = $0;
  if ($0) {
   $2591($0, HEAP32[$1_1 + 64 >> 2], HEAP32[$1_1 + 68 >> 2] << 2);
   return;
  }
  fimport$5(2214, 2147, 62, 2219);
  abort();
 }
 
 function $473($0) {
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $130($0);
  HEAP32[$1_1 + 12 >> 2] = 41297762;
  HEAP32[$1_1 + 8 >> 2] = 2147483647;
  $0 = HEAP32[$124($1_1 + 12 | 0, $1_1 + 8 | 0) >> 2];
  global$0 = $1_1 + 16 | 0;
  return $0;
 }
 
 function $479($0) {
  $487($0);
  $198($0);
  $487($0);
 }
 
 function $480($0, $1_1, $2_1, $3_1) {
  if (($1_1 | 0) != ($2_1 | 0)) {
   while (1) {
    $2_1 = $2_1 + -104 | 0;
    $461($0, HEAP32[$3_1 >> 2] + -104 | 0, $2_1);
    HEAP32[$3_1 >> 2] = HEAP32[$3_1 >> 2] + -104;
    if (($1_1 | 0) != ($2_1 | 0)) {
     continue
    }
    break;
   }
  }
 }
 
 function $481($0, $1_1) {
  $487($0);
  $487($0);
 }
 
 function $487($0) {
  return (HEAP32[$130($0) >> 2] - HEAP32[$0 >> 2] | 0) / 104 | 0;
 }
 
 function $491($0) {
  if (41297762 < $0 >>> 0) {
   $338(1572);
   abort();
  }
  return $2497(Math_imul($0, 104));
 }
 
 function $495($0, $1_1) {
  var $2_1 = 0;
  if (HEAP32[$0 + 8 >> 2] != ($1_1 | 0)) {
   while (1) {
    $416($0);
    $2_1 = HEAP32[$0 + 8 >> 2] + -104 | 0;
    HEAP32[$0 + 8 >> 2] = $2_1;
    $196($2_1);
    if (HEAP32[$0 + 8 >> 2] != ($1_1 | 0)) {
     continue
    }
    break;
   }
  }
 }
 
 function $500($0, $1_1) {
  var $2_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  if ($473($0) >>> 0 < $1_1 >>> 0) {
   $2538();
   abort();
  }
  $130($0);
  $2_1 = $491($1_1);
  HEAP32[$0 >> 2] = $2_1;
  HEAP32[$0 + 4 >> 2] = $2_1;
  (wasm2js_i32$0 = $130($0), wasm2js_i32$1 = Math_imul($1_1, 104) + $2_1 | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  $481($0, 0);
 }
 
 function $501($0, $1_1, $2_1, $3_1) {
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $3_1 = $459($4_1, $0, $3_1);
  $505($130($0), $1_1, $2_1, $3_1 + 4 | 0);
  $406($3_1);
  global$0 = $4_1 + 16 | 0;
 }
 
 function $505($0, $1_1, $2_1, $3_1) {
  if (($1_1 | 0) != ($2_1 | 0)) {
   while (1) {
    $461($0, HEAP32[$3_1 >> 2], $1_1);
    HEAP32[$3_1 >> 2] = HEAP32[$3_1 >> 2] + 104;
    $1_1 = $1_1 + 104 | 0;
    if (($2_1 | 0) != ($1_1 | 0)) {
     continue
    }
    break;
   }
  }
 }
 
 function $508($0, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6 = 0, $7 = 0;
  while (1) {
   $3_1 = 1;
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         $4_1 = $1_1 - $0 | 0;
         switch (($4_1 | 0) / 104 | 0) {
         case 0:
         case 1:
          break label$2;
         case 5:
          break label$4;
         case 4:
          break label$5;
         case 3:
          break label$6;
         case 2:
          break label$7;
         default:
          break label$3;
         };
        }
        $1_1 = $1_1 + -104 | 0;
        if (!FUNCTION_TABLE[HEAP32[$2_1 >> 2]]($1_1, $0)) {
         break label$2
        }
        $509($0, $1_1);
        break label$2;
       }
       $1_1 = $1_1 + -104 | 0;
       $510($0, $0 + 104 | 0, $1_1, $2_1);
       break label$2;
      }
      $1_1 = $1_1 + -104 | 0;
      $511($0, $0 + 104 | 0, $0 + 208 | 0, $1_1, $2_1);
      break label$2;
     }
     $1_1 = $1_1 + -104 | 0;
     $512($0, $0 + 104 | 0, $0 + 208 | 0, $0 + 312 | 0, $1_1, $2_1);
     break label$2;
    }
    if (($4_1 | 0) <= 727) {
     $513($0, $1_1, $2_1);
     break label$2;
    }
    $5_1 = $1_1 + -104 | 0;
    $3_1 = Math_imul(($4_1 | 0) / 208 | 0, 104) + $0 | 0;
    label$10 : {
     if (($4_1 | 0) >= 103897) {
      $4_1 = Math_imul(($4_1 | 0) / 416 | 0, 104);
      $7 = $512($0, $4_1 + $0 | 0, $3_1, $3_1 + $4_1 | 0, $5_1, $2_1);
      break label$10;
     }
     $7 = $510($0, $3_1, $5_1, $2_1);
    }
    $6 = $5_1;
    label$12 : {
     label$13 : {
      if (FUNCTION_TABLE[HEAP32[$2_1 >> 2]]($0, $3_1)) {
       break label$13
      }
      while (1) {
       $6 = $6 + -104 | 0;
       if (($6 | 0) == ($0 | 0)) {
        $3_1 = $0 + 104 | 0;
        if (FUNCTION_TABLE[HEAP32[$2_1 >> 2]]($0, $5_1)) {
         break label$12
        }
        if (($3_1 | 0) == ($5_1 | 0)) {
         $3_1 = 1;
         break label$2;
        }
        while (1) {
         if (FUNCTION_TABLE[HEAP32[$2_1 >> 2]]($0, $3_1)) {
          $509($3_1, $5_1);
          $3_1 = $3_1 + 104 | 0;
          break label$12;
         }
         $3_1 = $3_1 + 104 | 0;
         if (($5_1 | 0) != ($3_1 | 0)) {
          continue
         }
         break;
        };
        $3_1 = 1;
        break label$2;
       }
       if (!FUNCTION_TABLE[HEAP32[$2_1 >> 2]]($6, $3_1)) {
        continue
       }
       break;
      };
      $509($0, $6);
      $7 = $7 + 1 | 0;
     }
     $4_1 = $0 + 104 | 0;
     if ($4_1 >>> 0 < $6 >>> 0) {
      while (1) {
       $5_1 = $4_1;
       $4_1 = $4_1 + 104 | 0;
       if (FUNCTION_TABLE[HEAP32[$2_1 >> 2]]($5_1, $3_1)) {
        continue
       }
       while (1) {
        $6 = $6 + -104 | 0;
        if (!FUNCTION_TABLE[HEAP32[$2_1 >> 2]]($6, $3_1)) {
         continue
        }
        break;
       };
       if ($5_1 >>> 0 > $6 >>> 0) {
        $4_1 = $5_1
       } else {
        $509($5_1, $6);
        $3_1 = ($3_1 | 0) == ($5_1 | 0) ? $6 : $3_1;
        $4_1 = $5_1 + 104 | 0;
        $7 = $7 + 1 | 0;
        continue;
       }
       break;
      }
     }
     label$25 : {
      if (($3_1 | 0) == ($4_1 | 0)) {
       break label$25
      }
      if (!FUNCTION_TABLE[HEAP32[$2_1 >> 2]]($3_1, $4_1)) {
       break label$25
      }
      $509($4_1, $3_1);
      $7 = $7 + 1 | 0;
     }
     if (!$7) {
      $6 = $514($0, $4_1, $2_1);
      $5_1 = $4_1 + 104 | 0;
      label$27 : {
       if ($514($5_1, $1_1, $2_1)) {
        $3_1 = $6 ? 1 : 2;
        $1_1 = $6 ? $1_1 : $4_1;
        $5_1 = 0;
        break label$27;
       }
       $0 = $6 ? $5_1 : $0;
       $4_1 = $6 ? $5_1 : $4_1;
       $3_1 = $6 ? 2 : 0;
       $5_1 = $6 ^ 1;
      }
      if (!$5_1) {
       break label$2
      }
     }
     if ((($4_1 - $0 | 0) / 104 | 0) < (($1_1 - $4_1 | 0) / 104 | 0)) {
      $508($0, $4_1, $2_1);
      $0 = $4_1 + 104 | 0;
      $3_1 = 0;
      break label$2;
     }
     $508($4_1 + 104 | 0, $1_1, $2_1);
     $3_1 = 0;
     $1_1 = $4_1;
     break label$2;
    }
    if (($3_1 | 0) == ($5_1 | 0)) {
     $3_1 = 1;
     break label$2;
    }
    while (1) {
     $4_1 = $3_1;
     $3_1 = $4_1 + 104 | 0;
     if (!FUNCTION_TABLE[HEAP32[$2_1 >> 2]]($0, $4_1)) {
      continue
     }
     while (1) {
      $5_1 = $5_1 + -104 | 0;
      if (FUNCTION_TABLE[HEAP32[$2_1 >> 2]]($0, $5_1)) {
       continue
      }
      break;
     };
     if ($4_1 >>> 0 < $5_1 >>> 0) {
      $509($4_1, $5_1);
      $3_1 = $4_1 + 104 | 0;
      continue;
     }
     break;
    };
    $3_1 = 4;
    $0 = $4_1;
   }
   if (1 << $3_1 & 21 ? $3_1 >>> 0 <= 4 : 0) {
    continue
   }
   break;
  };
 }
 
 function $509($0, $1_1) {
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 112 | 0;
  global$0 = $2_1;
  $3_1 = $515($2_1 + 8 | 0, $0);
  $516($0, $1_1);
  $516($1_1, $3_1);
  $196($3_1);
  global$0 = $2_1 + 112 | 0;
 }
 
 function $510($0, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = 0;
  $4_1 = FUNCTION_TABLE[HEAP32[$3_1 >> 2]]($1_1, $0) | 0;
  $5_1 = FUNCTION_TABLE[HEAP32[$3_1 >> 2]]($2_1, $1_1) | 0;
  label$1 : {
   label$2 : {
    if (!$4_1) {
     $4_1 = 0;
     if (!$5_1) {
      break label$1
     }
     $509($1_1, $2_1);
     $4_1 = 1;
     if (!FUNCTION_TABLE[HEAP32[$3_1 >> 2]]($1_1, $0)) {
      break label$1
     }
     $509($0, $1_1);
     break label$2;
    }
    if ($5_1) {
     $509($0, $2_1);
     return 1;
    }
    $509($0, $1_1);
    $4_1 = 1;
    if (!FUNCTION_TABLE[HEAP32[$3_1 >> 2]]($2_1, $1_1)) {
     break label$1
    }
    $509($1_1, $2_1);
   }
   $4_1 = 2;
  }
  return $4_1;
 }
 
 function $511($0, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = 0;
  $5_1 = $510($0, $1_1, $2_1, $4_1);
  if (FUNCTION_TABLE[HEAP32[$4_1 >> 2]]($3_1, $2_1)) {
   $509($2_1, $3_1);
   if (!FUNCTION_TABLE[HEAP32[$4_1 >> 2]]($2_1, $1_1)) {
    return $5_1 + 1 | 0
   }
   $509($1_1, $2_1);
   if (!FUNCTION_TABLE[HEAP32[$4_1 >> 2]]($1_1, $0)) {
    return $5_1 + 2 | 0
   }
   $509($0, $1_1);
   $5_1 = $5_1 + 3 | 0;
  }
  return $5_1;
 }
 
 function $512($0, $1_1, $2_1, $3_1, $4_1, $5_1) {
  var $6 = 0;
  $6 = $511($0, $1_1, $2_1, $3_1, $5_1);
  if (FUNCTION_TABLE[HEAP32[$5_1 >> 2]]($4_1, $3_1)) {
   $509($3_1, $4_1);
   if (!FUNCTION_TABLE[HEAP32[$5_1 >> 2]]($3_1, $2_1)) {
    return $6 + 1 | 0
   }
   $509($2_1, $3_1);
   if (!FUNCTION_TABLE[HEAP32[$5_1 >> 2]]($2_1, $1_1)) {
    return $6 + 2 | 0
   }
   $509($1_1, $2_1);
   if (!FUNCTION_TABLE[HEAP32[$5_1 >> 2]]($1_1, $0)) {
    return $6 + 3 | 0
   }
   $509($0, $1_1);
   $6 = $6 + 4 | 0;
  }
  return $6;
 }
 
 function $513($0, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6 = 0, $7 = 0, $8 = 0;
  $5_1 = global$0 - 112 | 0;
  global$0 = $5_1;
  $3_1 = $0 + 208 | 0;
  $510($0, $0 + 104 | 0, $3_1, $2_1);
  $4_1 = $0 + 312 | 0;
  if (($4_1 | 0) != ($1_1 | 0)) {
   while (1) {
    if (FUNCTION_TABLE[HEAP32[$2_1 >> 2]]($4_1, $3_1)) {
     $6 = $515($5_1 + 8 | 0, $4_1);
     $8 = $4_1;
     while (1) {
      label$5 : {
       $7 = $3_1;
       $516($8, $3_1);
       if (($0 | 0) == ($3_1 | 0)) {
        break label$5
       }
       $8 = $7;
       $3_1 = $7 + -104 | 0;
       if (FUNCTION_TABLE[HEAP32[$2_1 >> 2]]($6, $3_1)) {
        continue
       }
      }
      break;
     };
     $516($7, $6);
     $196($6);
    }
    $3_1 = $4_1;
    $4_1 = $3_1 + 104 | 0;
    if (($4_1 | 0) != ($1_1 | 0)) {
     continue
    }
    break;
   }
  }
  global$0 = $5_1 + 112 | 0;
 }
 
 function $514($0, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6 = 0, $7 = 0, $8 = 0, $9_1 = 0, $10_1 = 0;
  $7 = global$0 - 112 | 0;
  global$0 = $7;
  $4_1 = 1;
  label$1 : {
   label$2 : {
    switch (($1_1 - $0 | 0) / 104 | 0) {
    case 2:
     $1_1 = $1_1 + -104 | 0;
     if (!FUNCTION_TABLE[HEAP32[$2_1 >> 2]]($1_1, $0)) {
      break label$1
     }
     $509($0, $1_1);
     break label$1;
    case 3:
     $510($0, $0 + 104 | 0, $1_1 + -104 | 0, $2_1);
     break label$1;
    case 4:
     $511($0, $0 + 104 | 0, $0 + 208 | 0, $1_1 + -104 | 0, $2_1);
     break label$1;
    case 5:
     $512($0, $0 + 104 | 0, $0 + 208 | 0, $0 + 312 | 0, $1_1 + -104 | 0, $2_1);
     break label$1;
    case 0:
    case 1:
     break label$1;
    default:
     break label$2;
    };
   }
   $6 = $0 + 208 | 0;
   $510($0, $0 + 104 | 0, $6, $2_1);
   $4_1 = $0 + 312 | 0;
   $3_1 = 1;
   label$7 : {
    if (($4_1 | 0) == ($1_1 | 0)) {
     break label$7
    }
    label$8 : {
     while (1) {
      $3_1 = $4_1;
      label$10 : {
       if (!FUNCTION_TABLE[HEAP32[$2_1 >> 2]]($4_1, $6)) {
        break label$10
       }
       $8 = $515($7 + 8 | 0, $4_1);
       $3_1 = $4_1;
       while (1) {
        label$12 : {
         $5_1 = $6;
         $516($3_1, $5_1);
         if (($0 | 0) == ($5_1 | 0)) {
          break label$12
         }
         $3_1 = $5_1;
         $6 = $5_1 + -104 | 0;
         if (FUNCTION_TABLE[HEAP32[$2_1 >> 2]]($8, $6)) {
          continue
         }
        }
        break;
       };
       $516($5_1, $8);
       $196($8);
       $3_1 = $4_1 + 104 | 0;
       $9_1 = $9_1 + 1 | 0;
       $5_1 = ($9_1 | 0) == 8;
       $10_1 = $5_1 ? ($3_1 | 0) == ($1_1 | 0) : $10_1;
       if ($5_1) {
        break label$8
       }
       $3_1 = $5_1 ? $3_1 : $4_1;
      }
      $6 = $3_1;
      $4_1 = $6 + 104 | 0;
      if (($4_1 | 0) != ($1_1 | 0)) {
       continue
      }
      break;
     };
     $3_1 = 1;
     break label$7;
    }
    $3_1 = 0;
   }
   $0 = $3_1;
   $4_1 = $0 | $10_1;
  }
  global$0 = $7 + 112 | 0;
  return $4_1 & 1;
 }
 
 function $515($0, $1_1) {
  var $2_1 = 0;
  $469($0, $1_1);
  $2_1 = HEAP32[$1_1 + 84 >> 2];
  HEAP32[$0 + 80 >> 2] = HEAP32[$1_1 + 80 >> 2];
  HEAP32[$0 + 84 >> 2] = $2_1;
  $437($0 + 88 | 0, $1_1 + 88 | 0);
  return $0;
 }
 
 function $516($0, $1_1) {
  var $2_1 = 0;
  $470($0, $1_1);
  $2_1 = HEAP32[$1_1 + 84 >> 2];
  HEAP32[$0 + 80 >> 2] = HEAP32[$1_1 + 80 >> 2];
  HEAP32[$0 + 84 >> 2] = $2_1;
  $241($0 + 88 | 0, $1_1 + 88 | 0);
 }
 
 function $519($0, $1_1) {
  var $2_1 = 0;
  $2_1 = HEAP32[$0 + 4 >> 2];
  if (($2_1 | 0) != ($1_1 | 0)) {
   while (1) {
    $130($0);
    $2_1 = $2_1 + -104 | 0;
    $196($2_1);
    if (($1_1 | 0) != ($2_1 | 0)) {
     continue
    }
    break;
   }
  }
  HEAP32[$0 + 4 >> 2] = $1_1;
 }
 
 function $521($0, $1_1, $2_1) {
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $524($3_1 + 8 | 0, $1_1, $2_1, $2_1);
  $523($0, $3_1 + 8 | 0);
  global$0 = $3_1 + 16 | 0;
 }
 
 function $523($0, $1_1) {
  $175($0, $1_1);
  HEAP8[$0 + 4 | 0] = HEAPU8[$1_1 + 4 | 0];
 }
 
 function $524($0, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = 0, $6 = 0, $7 = 0, $8 = 0, $9_1 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  $418($1_1);
  $8 = HEAP32[$2_1 >> 2];
  $5_1 = $528($1_1);
  HEAP8[$4_1 + 31 | 0] = 0;
  label$1 : {
   label$2 : {
    if (!$5_1) {
     break label$2
    }
    $7 = $529($8, $5_1);
    $6 = HEAP32[$530($1_1, $7) >> 2];
    if (!$6) {
     break label$2
    }
    while (1) {
     $6 = HEAP32[$6 >> 2];
     if (!$6) {
      break label$2
     }
     if (($8 | 0) != HEAP32[$6 + 4 >> 2]) {
      if (($529(HEAP32[$6 + 4 >> 2], $5_1) | 0) != ($7 | 0)) {
       break label$2
      }
     }
     if (!$533($531($1_1), $6 + 8 | 0, $2_1)) {
      continue
     }
     break;
    };
    break label$1;
   }
   $534($4_1 + 16 | 0, $1_1, $8, $3_1);
   $2_1 = HEAP32[$418($1_1) >> 2];
   $3_1 = $1_1;
   if (!(Math_fround(HEAPF32[$531($1_1) >> 2] * Math_fround($5_1 >>> 0)) < Math_fround($2_1 + 1 >>> 0) ^ 1 ? $5_1 : 0)) {
    (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $537($5_1) ^ 1 | $5_1 << 1), HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
    $2_1 = $4_1;
    $9_1 = Math_fround(Math_ceil(Math_fround(Math_fround(HEAP32[$418($1_1) >> 2] + 1 >>> 0) / HEAPF32[$531($1_1) >> 2])));
    label$7 : {
     if ($9_1 < Math_fround(4294967296.0) & $9_1 >= Math_fround(0.0)) {
      $5_1 = ~~$9_1 >>> 0;
      break label$7;
     }
     $5_1 = 0;
    }
    HEAP32[$2_1 + 8 >> 2] = $5_1;
    $539($1_1, HEAP32[$360($4_1 + 12 | 0, $4_1 + 8 | 0) >> 2]);
    $5_1 = $528($1_1);
    $7 = $529($8, $5_1);
   }
   $2_1 = HEAP32[$530($3_1, $7) >> 2];
   label$9 : {
    if (!$2_1) {
     $2_1 = $1_1 + 8 | 0;
     HEAP32[HEAP32[$4_1 + 16 >> 2] >> 2] = HEAP32[$2_1 >> 2];
     HEAP32[$2_1 >> 2] = HEAP32[$4_1 + 16 >> 2];
     (wasm2js_i32$0 = $530($1_1, $7), wasm2js_i32$1 = $2_1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
     if (!HEAP32[HEAP32[$4_1 + 16 >> 2] >> 2]) {
      break label$9
     }
     $2_1 = HEAP32[$4_1 + 16 >> 2];
     (wasm2js_i32$0 = $530($1_1, $529(HEAP32[HEAP32[HEAP32[$4_1 + 16 >> 2] >> 2] + 4 >> 2], $5_1)), wasm2js_i32$1 = $2_1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
     break label$9;
    }
    HEAP32[HEAP32[$4_1 + 16 >> 2] >> 2] = HEAP32[$2_1 >> 2];
    HEAP32[$2_1 >> 2] = HEAP32[$4_1 + 16 >> 2];
   }
   $6 = $300($4_1 + 16 | 0);
   $1_1 = $418($1_1);
   HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] + 1;
   HEAP8[$4_1 + 31 | 0] = 1;
   $2_1 = $4_1 + 16 | 0;
   $1_1 = HEAP32[$2_1 >> 2];
   HEAP32[$2_1 >> 2] = 0;
   if ($1_1) {
    $305($2_1);
    if ($1_1) {
     $2583($1_1)
    }
   }
  }
  $543($0, $431($4_1 + 16 | 0, $6), $4_1 + 31 | 0);
  global$0 = $4_1 + 32 | 0;
 }
 
 function $527($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  return $1_1 | 0;
 }
 
 function $528($0) {
  return HEAP32[$305($0) >> 2];
 }
 
 function $529($0, $1_1) {
  var $2_1 = 0;
  $2_1 = $1_1 + -1 | 0;
  if (!($2_1 & $1_1)) {
   return $0 & $2_1
  }
  if ($0 >>> 0 >= $1_1 >>> 0) {
   $0 = ($0 >>> 0) % ($1_1 >>> 0) | 0
  }
  return $0;
 }
 
 function $530($0, $1_1) {
  return HEAP32[$0 >> 2] + ($1_1 << 2) | 0;
 }
 
 function $531($0) {
  return $0 + 16 | 0;
 }
 
 function $533($0, $1_1, $2_1) {
  return HEAP32[$1_1 >> 2] == HEAP32[$2_1 >> 2];
 }
 
 function $534($0, $1_1, $2_1, $3_1) {
  var $4_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $1_1 = $130($1_1);
  $0 = $549($0, $432(1), $548($4_1 + 8 | 0, $1_1));
  $550($1_1, HEAP32[$0 >> 2] + 8 | 0, $3_1);
  (wasm2js_i32$0 = $305($0), wasm2js_i32$1 = 1), HEAP8[wasm2js_i32$0 + 4 | 0] = wasm2js_i32$1;
  HEAP32[HEAP32[$0 >> 2] + 4 >> 2] = $2_1;
  HEAP32[HEAP32[$0 >> 2] >> 2] = 0;
  global$0 = $4_1 + 16 | 0;
 }
 
 function $537($0) {
  return !($0 + -1 & $0) & $0 >>> 0 > 2;
 }
 
 function $539($0, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = Math_fround(0), $5_1 = 0, $6 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[$3_1 + 12 >> 2] = $1_1;
  label$1 : {
   if (($1_1 | 0) == 1) {
    HEAP32[$3_1 + 12 >> 2] = 2;
    break label$1;
   }
   if (!($1_1 + -1 & $1_1)) {
    break label$1
   }
   (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = $1639($1_1)), HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
  }
  $1_1 = $528($0);
  $2_1 = HEAP32[$3_1 + 12 >> 2];
  label$3 : {
   if ($2_1 >>> 0 > $1_1 >>> 0) {
    $552($0, $2_1);
    break label$3;
   }
   if ($2_1 >>> 0 >= $1_1 >>> 0) {
    break label$3
   }
   $5_1 = $537($1_1);
   $4_1 = Math_fround(Math_ceil(Math_fround(Math_fround(HEAPU32[$418($0) >> 2]) / HEAPF32[$531($0) >> 2])));
   label$5 : {
    if ($4_1 < Math_fround(4294967296.0) & $4_1 >= Math_fround(0.0)) {
     $2_1 = ~~$4_1 >>> 0;
     break label$5;
    }
    $2_1 = 0;
   }
   $6 = $3_1;
   label$7 : {
    if ($5_1) {
     $2_1 = $553($2_1);
     break label$7;
    }
    $2_1 = $1639($2_1);
   }
   HEAP32[$6 + 8 >> 2] = $2_1;
   $2_1 = HEAP32[$360($3_1 + 12 | 0, $3_1 + 8 | 0) >> 2];
   HEAP32[$3_1 + 12 >> 2] = $2_1;
   if ($2_1 >>> 0 >= $1_1 >>> 0) {
    break label$3
   }
   $552($0, $2_1);
  }
  global$0 = $3_1 + 16 | 0;
 }
 
 function $543($0, $1_1, $2_1) {
  HEAP32[$0 >> 2] = HEAP32[$1_1 >> 2];
  HEAP8[$0 + 4 | 0] = HEAPU8[$2_1 | 0];
 }
 
 function $548($0, $1_1) {
  HEAP8[$0 + 4 | 0] = 0;
  HEAP32[$0 >> 2] = $1_1;
  return $0;
 }
 
 function $549($0, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[$3_1 + 12 >> 2] = $1_1;
  $175($0, $3_1 + 12 | 0);
  $1_1 = HEAP32[$2_1 + 4 >> 2];
  $4_1 = $0 + 4 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $1_1;
  global$0 = $3_1 + 16 | 0;
  return $0;
 }
 
 function $550($0, $1_1, $2_1) {
  HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
 }
 
 function $552($0, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $305($0);
  label$1 : {
   if ($1_1) {
    $562($0, $566($1_1));
    (wasm2js_i32$0 = $305($0), wasm2js_i32$1 = $1_1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    while (1) {
     (wasm2js_i32$0 = $530($0, $3_1), wasm2js_i32$1 = 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
     $3_1 = $3_1 + 1 | 0;
     if (($3_1 | 0) != ($1_1 | 0)) {
      continue
     }
     break;
    };
    $2_1 = $0 + 8 | 0;
    $4_1 = HEAP32[$2_1 >> 2];
    if (!$4_1) {
     break label$1
    }
    $6 = $529(HEAP32[$4_1 + 4 >> 2], $1_1);
    (wasm2js_i32$0 = $530($0, $6), wasm2js_i32$1 = $2_1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    $2_1 = HEAP32[$4_1 >> 2];
    if (!$2_1) {
     break label$1
    }
    while (1) {
     $5_1 = $529(HEAP32[$2_1 + 4 >> 2], $1_1);
     label$5 : {
      if (($6 | 0) == ($5_1 | 0)) {
       $4_1 = $2_1;
       break label$5;
      }
      label$7 : {
       label$8 : {
        if (HEAP32[$530($0, $5_1) >> 2]) {
         $3_1 = $2_1;
         if (!HEAP32[$2_1 >> 2]) {
          break label$7
         }
         if ($533($531($0), $2_1 + 8 | 0, HEAP32[$2_1 >> 2] + 8 | 0)) {
          break label$8
         }
         break label$7;
        }
        (wasm2js_i32$0 = $530($0, $5_1), wasm2js_i32$1 = $4_1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
        $4_1 = $2_1;
        $6 = $5_1;
        break label$5;
       }
       while (1) {
        $3_1 = HEAP32[$3_1 >> 2];
        if (!HEAP32[$3_1 >> 2]) {
         break label$7
        }
        if ($533($531($0), $2_1 + 8 | 0, HEAP32[$3_1 >> 2] + 8 | 0)) {
         continue
        }
        break;
       };
      }
      HEAP32[$4_1 >> 2] = HEAP32[$3_1 >> 2];
      (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = HEAP32[HEAP32[$530($0, $5_1) >> 2] >> 2]), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
      (wasm2js_i32$0 = HEAP32[$530($0, $5_1) >> 2], wasm2js_i32$1 = $2_1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
     }
     $2_1 = HEAP32[$4_1 >> 2];
     if ($2_1) {
      continue
     }
     break;
    };
    break label$1;
   }
   $562($0, 0);
   (wasm2js_i32$0 = $305($0), wasm2js_i32$1 = $1_1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  }
 }
 
 function $553($0) {
  return $0 >>> 0 >= 2 ? 1 << 32 - Math_clz32($0 + -1 | 0) : $0;
 }
 
 function $562($0, $1_1) {
  var $2_1 = 0;
  $2_1 = HEAP32[$0 >> 2];
  HEAP32[$0 >> 2] = $1_1;
  if ($2_1) {
   $305($0);
   $2583($2_1);
  }
 }
 
 function $566($0) {
  if (1073741823 < $0 >>> 0) {
   $338(1572);
   abort();
  }
  return $2497($0 << 2);
 }
 
 function $572($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
 }
 
 function $574($0, $1_1, $2_1, $3_1) {
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $3_1 = $459($4_1, $0, $3_1);
  $576($130($0), $1_1, $2_1, $3_1 + 4 | 0);
  $406($3_1);
  global$0 = $4_1 + 16 | 0;
 }
 
 function $575($0, $1_1) {
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 >> 2] = $1_1;
  HEAP32[$2_1 + 8 >> 2] = $0;
  global$0 = $2_1 + 16 | 0;
  return (HEAP32[$2_1 >> 2] - HEAP32[$2_1 + 8 >> 2] | 0) / 104 | 0;
 }
 
 function $576($0, $1_1, $2_1, $3_1) {
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[$4_1 >> 2] = $2_1;
  HEAP32[$4_1 + 8 >> 2] = $1_1;
  if ($31($4_1 + 8 | 0, $4_1)) {
   while (1) {
    $461($0, HEAP32[$3_1 >> 2], HEAP32[$4_1 + 8 >> 2]);
    $1_1 = $4_1 + 8 | 0;
    HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] + 104;
    HEAP32[$3_1 >> 2] = HEAP32[$3_1 >> 2] + 104;
    if ($31($4_1 + 8 | 0, $4_1)) {
     continue
    }
    break;
   }
  }
  global$0 = $4_1 + 16 | 0;
 }
 
 function $583($0, $1_1) {
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 >> 2] = $0;
  HEAP32[$2_1 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
  HEAP32[$2_1 + 8 >> 2] = HEAP32[$0 + 4 >> 2] + 76;
  $598($130($0), HEAP32[$2_1 + 4 >> 2], $1_1);
  HEAP32[$2_1 + 4 >> 2] = HEAP32[$2_1 + 4 >> 2] + 76;
  $406($2_1);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $584($0, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  $2_1 = $130($0);
  $4_1 = $2_1;
  $2_1 = $601($3_1 + 8 | 0, $600($0, $599($0) + 1 | 0), $599($0), $2_1);
  $598($4_1, HEAP32[$2_1 + 8 >> 2], $1_1);
  HEAP32[$2_1 + 8 >> 2] = HEAP32[$2_1 + 8 >> 2] + 76;
  $602($0, $2_1);
  $627($2_1, HEAP32[$2_1 + 4 >> 2]);
  if (HEAP32[$2_1 >> 2]) {
   $416($2_1);
   $0 = HEAP32[$2_1 >> 2];
   HEAP32[$418($2_1) >> 2];
   $2583($0);
  }
  global$0 = $3_1 + 32 | 0;
 }
 
 function $586($0, $1_1) {
  var $2_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $2_1 = $631($3_1, $0, 1);
  $550($130($0), HEAP32[$2_1 + 4 >> 2], $1_1);
  HEAP32[$2_1 + 4 >> 2] = HEAP32[$2_1 + 4 >> 2] + 4;
  $406($2_1);
  global$0 = $3_1 + 16 | 0;
 }
 
 function $587($0, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  $2_1 = $130($0);
  $4_1 = $2_1;
  $2_1 = $635($3_1 + 8 | 0, $634($0, $133($0) + 1 | 0), $133($0), $2_1);
  $550($4_1, HEAP32[$2_1 + 8 >> 2], $1_1);
  HEAP32[$2_1 + 8 >> 2] = HEAP32[$2_1 + 8 >> 2] + 4;
  $636($0, $2_1);
  $637($2_1);
  global$0 = $3_1 + 32 | 0;
 }
 
 function $588($0) {
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  return $0;
 }
 
 function $589($0, $1_1, $2_1) {
  var $3_1 = 0;
  label$1 : {
   label$2 : {
    if ($200($2_1)) {
     break label$2
    }
    if ($200($1_1)) {
     break label$2
    }
    if (($599($1_1) | 0) != ($133($2_1) | 0)) {
     break label$1
    }
    if (!$599($1_1)) {
     break label$2
    }
    while (1) {
     $660($0, HEAP32[$1_1 >> 2] + Math_imul($3_1, 76) | 0, HEAP32[$530($2_1, $3_1) >> 2]);
     $3_1 = $3_1 + 1 | 0;
     if ($3_1 >>> 0 < $599($1_1) >>> 0) {
      continue
     }
     break;
    };
   }
   return;
  }
  fimport$5(2385, 2421, 150, 2374);
  abort();
 }
 
 function $592($0) {
  $619($0);
  $599($0);
  $619($0);
 }
 
 function $593($0) {
  var $1_1 = 0;
  if (HEAP32[$0 >> 2]) {
   $729($0, HEAP32[$0 >> 2]);
   $130($0);
   $1_1 = HEAP32[$0 >> 2];
   $619($0);
   $2583($1_1);
  }
 }
 
 function $598($0, $1_1, $2_1) {
  $469($1_1, $2_1);
 }
 
 function $599($0) {
  return (HEAP32[$0 + 4 >> 2] - HEAP32[$0 >> 2] | 0) / 76 | 0;
 }
 
 function $600($0, $1_1) {
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 + 12 >> 2] = $1_1;
  $1_1 = $606($0);
  if (HEAPU32[$2_1 + 12 >> 2] <= $1_1 >>> 0) {
   $0 = $619($0);
   if ($0 >>> 0 < $1_1 >>> 1 >>> 0) {
    HEAP32[$2_1 + 8 >> 2] = $0 << 1;
    $1_1 = HEAP32[$360($2_1 + 8 | 0, $2_1 + 12 | 0) >> 2];
   }
   global$0 = $2_1 + 16 | 0;
   return $1_1;
  }
  $2538();
  abort();
 }
 
 function $601($0, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[$4_1 + 12 >> 2] = 0;
  $415($0 + 12 | 0, $4_1 + 12 | 0, $3_1);
  if ($1_1) {
   $416($0);
   $3_1 = $1_1;
   if (56512727 < $1_1 >>> 0) {
    $338(1572);
    abort();
   }
   $5_1 = $2497(Math_imul($3_1, 76));
  }
  HEAP32[$0 >> 2] = $5_1;
  $2_1 = Math_imul($2_1, 76) + $5_1 | 0;
  HEAP32[$0 + 8 >> 2] = $2_1;
  HEAP32[$0 + 4 >> 2] = $2_1;
  (wasm2js_i32$0 = $418($0), wasm2js_i32$1 = Math_imul($1_1, 76) + $5_1 | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  global$0 = $4_1 + 16 | 0;
  return $0;
 }
 
 function $602($0, $1_1) {
  var $2_1 = 0;
  $592($0);
  $2_1 = $1_1 + 4 | 0;
  $612($130($0), HEAP32[$0 >> 2], HEAP32[$0 + 4 >> 2], $2_1);
  $420($0, $2_1);
  $420($0 + 4 | 0, $1_1 + 8 | 0);
  $420($130($0), $418($1_1));
  HEAP32[$1_1 >> 2] = HEAP32[$1_1 + 4 >> 2];
  $599($0);
  $619($0);
  $619($0);
 }
 
 function $606($0) {
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $130($0);
  HEAP32[$1_1 + 12 >> 2] = 56512727;
  HEAP32[$1_1 + 8 >> 2] = 2147483647;
  $0 = HEAP32[$124($1_1 + 12 | 0, $1_1 + 8 | 0) >> 2];
  global$0 = $1_1 + 16 | 0;
  return $0;
 }
 
 function $612($0, $1_1, $2_1, $3_1) {
  if (($1_1 | 0) != ($2_1 | 0)) {
   while (1) {
    $2_1 = $2_1 + -76 | 0;
    $598($0, HEAP32[$3_1 >> 2] + -76 | 0, $2_1);
    HEAP32[$3_1 >> 2] = HEAP32[$3_1 >> 2] + -76;
    if (($1_1 | 0) != ($2_1 | 0)) {
     continue
    }
    break;
   }
  }
 }
 
 function $619($0) {
  return (HEAP32[$130($0) >> 2] - HEAP32[$0 >> 2] | 0) / 76 | 0;
 }
 
 function $627($0, $1_1) {
  var $2_1 = 0;
  if (HEAP32[$0 + 8 >> 2] != ($1_1 | 0)) {
   while (1) {
    $416($0);
    $2_1 = HEAP32[$0 + 8 >> 2] + -76 | 0;
    HEAP32[$0 + 8 >> 2] = $2_1;
    $247($2_1);
    if (HEAP32[$0 + 8 >> 2] != ($1_1 | 0)) {
     continue
    }
    break;
   }
  }
 }
 
 function $631($0, $1_1, $2_1) {
  HEAP32[$0 >> 2] = $1_1;
  HEAP32[$0 + 4 >> 2] = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$0 + 8 >> 2] = HEAP32[$1_1 + 4 >> 2] + ($2_1 << 2);
  return $0;
 }
 
 function $634($0, $1_1) {
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 + 12 >> 2] = $1_1;
  $1_1 = $639($0);
  if (HEAPU32[$2_1 + 12 >> 2] <= $1_1 >>> 0) {
   $0 = $651($0);
   if ($0 >>> 0 < $1_1 >>> 1 >>> 0) {
    HEAP32[$2_1 + 8 >> 2] = $0 << 1;
    $1_1 = HEAP32[$360($2_1 + 8 | 0, $2_1 + 12 | 0) >> 2];
   }
   global$0 = $2_1 + 16 | 0;
   return $1_1;
  }
  $2538();
  abort();
 }
 
 function $635($0, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[$4_1 + 12 >> 2] = 0;
  $415($0 + 12 | 0, $4_1 + 12 | 0, $3_1);
  if ($1_1) {
   $416($0);
   $5_1 = $566($1_1);
  }
  HEAP32[$0 >> 2] = $5_1;
  $2_1 = ($2_1 << 2) + $5_1 | 0;
  HEAP32[$0 + 8 >> 2] = $2_1;
  HEAP32[$0 + 4 >> 2] = $2_1;
  (wasm2js_i32$0 = $418($0), wasm2js_i32$1 = ($1_1 << 2) + $5_1 | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  global$0 = $4_1 + 16 | 0;
  return $0;
 }
 
 function $636($0, $1_1) {
  var $2_1 = 0;
  $136($0);
  $2_1 = $1_1 + 4 | 0;
  $645($130($0), HEAP32[$0 >> 2], HEAP32[$0 + 4 >> 2], $2_1);
  $420($0, $2_1);
  $420($0 + 4 | 0, $1_1 + 8 | 0);
  $420($130($0), $418($1_1));
  HEAP32[$1_1 >> 2] = HEAP32[$1_1 + 4 >> 2];
  $646($0, $133($0));
 }
 
 function $637($0) {
  var $1_1 = 0;
  $656($0, HEAP32[$0 + 4 >> 2]);
  if (HEAP32[$0 >> 2]) {
   $416($0);
   $1_1 = HEAP32[$0 >> 2];
   $648($0);
   $2583($1_1);
  }
 }
 
 function $639($0) {
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $130($0);
  HEAP32[$1_1 + 12 >> 2] = 1073741823;
  HEAP32[$1_1 + 8 >> 2] = 2147483647;
  $0 = HEAP32[$124($1_1 + 12 | 0, $1_1 + 8 | 0) >> 2];
  global$0 = $1_1 + 16 | 0;
  return $0;
 }
 
 function $645($0, $1_1, $2_1, $3_1) {
  $2_1 = $2_1 - $1_1 | 0;
  $0 = HEAP32[$3_1 >> 2] - $2_1 | 0;
  HEAP32[$3_1 >> 2] = $0;
  if (($2_1 | 0) >= 1) {
   $2591($0, $1_1, $2_1)
  }
 }
 
 function $646($0, $1_1) {
  $651($0);
  $651($0);
 }
 
 function $648($0) {
  return HEAP32[$418($0) >> 2] - HEAP32[$0 >> 2] >> 2;
 }
 
 function $651($0) {
  return HEAP32[$130($0) >> 2] - HEAP32[$0 >> 2] >> 2;
 }
 
 function $656($0, $1_1) {
  if (HEAP32[$0 + 8 >> 2] != ($1_1 | 0)) {
   while (1) {
    $416($0);
    HEAP32[$0 + 8 >> 2] = HEAP32[$0 + 8 >> 2] + -4;
    if (HEAP32[$0 + 8 >> 2] != ($1_1 | 0)) {
     continue
    }
    break;
   }
  }
 }
 
 function $660($0, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  label$1 : {
   if (HEAP32[$1_1 + 64 >> 2] != ($662($1_1) | 0)) {
    $6 = $181($3_1 + 24 | 0);
    $0 = HEAP32[$0 >> 2];
    $4_1 = HEAP32[$1_1 + 64 >> 2];
    if (($4_1 | 0) != ($662($1_1) | 0)) {
     while (1) {
      if (!HEAP32[$0 >> 2]) {
       $5_1 = $2497(20);
       $149($5_1);
       HEAP32[$0 >> 2] = $5_1;
      }
      $665($3_1 + 8 | 0, $664(HEAP32[$0 >> 2], $4_1));
      HEAP32[$6 >> 2] = HEAP32[$3_1 + 8 >> 2];
      label$6 : {
       if ($667($665($3_1 + 8 | 0, $118()), $6)) {
        $5_1 = $2497(8);
        $588($5_1);
        HEAP32[$3_1 + 20 >> 2] = $5_1;
        $0 = HEAP32[$0 >> 2];
        $677($3_1 + 8 | 0, $4_1, $3_1 + 20 | 0);
        $669($3_1, $0, $3_1 + 8 | 0);
        $0 = HEAP32[$3_1 + 20 >> 2];
        break label$6;
       }
       $0 = HEAP32[$678($6) + 4 >> 2];
      }
      $4_1 = $4_1 + 4 | 0;
      if (($662($1_1) | 0) != ($4_1 | 0)) {
       continue
      }
      break;
     }
    }
    if (!$0) {
     break label$1
    }
    HEAP32[$0 + 4 >> 2] = $2_1;
   }
   global$0 = $3_1 + 32 | 0;
   return;
  }
  fimport$5(2458, 2421, 141, 2473);
  abort();
 }
 
 function $662($0) {
  return HEAP32[$0 + 64 >> 2] + (HEAP32[$0 + 68 >> 2] << 2) | 0;
 }
 
 function $664($0, $1_1) {
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $0 = HEAP32[$431($2_1 + 8 | 0, $672($0, $1_1)) >> 2];
  global$0 = $2_1 + 16 | 0;
  return $0;
 }
 
 function $665($0, $1_1) {
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 + 8 >> 2] = $1_1;
  $175($0, $2_1 + 8 | 0);
  global$0 = $2_1 + 16 | 0;
  return $0;
 }
 
 function $667($0, $1_1) {
  return $673($0, $1_1);
 }
 
 function $669($0, $1_1, $2_1) {
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $697($3_1 + 8 | 0, $1_1, $2_1, $2_1);
  $1_1 = $3_1 + 8 | 0;
  $431($0, HEAP32[$1_1 >> 2]);
  HEAP8[$0 + 4 | 0] = HEAPU8[$1_1 + 4 | 0];
  global$0 = $3_1 + 16 | 0;
 }
 
 function $672($0, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $418($0);
  $4_1 = HEAP32[$1_1 >> 2];
  $5_1 = $528($0);
  label$1 : {
   label$2 : {
    if (!$5_1) {
     break label$2
    }
    $6 = $529($4_1, $5_1);
    $2_1 = HEAP32[$530($0, $6) >> 2];
    if (!$2_1) {
     break label$2
    }
    $2_1 = HEAP32[$2_1 >> 2];
    if (!$2_1) {
     break label$2
    }
    while (1) {
     if (($4_1 | 0) != HEAP32[$2_1 + 4 >> 2]) {
      if (($529(HEAP32[$2_1 + 4 >> 2], $5_1) | 0) != ($6 | 0)) {
       break label$2
      }
     }
     label$5 : {
      if (($4_1 | 0) != HEAP32[$2_1 + 4 >> 2]) {
       break label$5
      }
      if (!$693($531($0), $2_1 + 8 | 0, $1_1)) {
       break label$5
      }
      $431($3_1 + 8 | 0, $2_1);
      break label$1;
     }
     $2_1 = HEAP32[$2_1 >> 2];
     if ($2_1) {
      continue
     }
     break;
    };
   }
   (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = $674()), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
  }
  global$0 = $3_1 + 16 | 0;
  return HEAP32[$3_1 + 8 >> 2];
 }
 
 function $673($0, $1_1) {
  return HEAP32[$0 >> 2] == HEAP32[$1_1 >> 2];
 }
 
 function $674() {
  var $0 = 0, $1_1 = 0;
  $0 = global$0 - 16 | 0;
  global$0 = $0;
  $1_1 = $431($0 + 8 | 0, 0);
  global$0 = $0 + 16 | 0;
  return HEAP32[$1_1 >> 2];
 }
 
 function $677($0, $1_1, $2_1) {
  HEAP32[$0 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0 + 4 >> 2] = HEAP32[$2_1 >> 2];
  return $0;
 }
 
 function $678($0) {
  return HEAP32[$0 >> 2] + 8 | 0;
 }
 
 function $693($0, $1_1, $2_1) {
  return $533($0, $1_1, $2_1);
 }
 
 function $697($0, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = 0, $6 = 0, $7 = 0, $8 = 0, $9_1 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  $418($1_1);
  $8 = HEAP32[$2_1 >> 2];
  $5_1 = $528($1_1);
  HEAP8[$4_1 + 31 | 0] = 0;
  label$1 : {
   label$2 : {
    if (!$5_1) {
     break label$2
    }
    $7 = $529($8, $5_1);
    $6 = HEAP32[$530($1_1, $7) >> 2];
    if (!$6) {
     break label$2
    }
    while (1) {
     $6 = HEAP32[$6 >> 2];
     if (!$6) {
      break label$2
     }
     if (($8 | 0) != HEAP32[$6 + 4 >> 2]) {
      if (($529(HEAP32[$6 + 4 >> 2], $5_1) | 0) != ($7 | 0)) {
       break label$2
      }
     }
     if (!$693($531($1_1), $6 + 8 | 0, $2_1)) {
      continue
     }
     break;
    };
    break label$1;
   }
   $698($4_1 + 16 | 0, $1_1, $8, $3_1);
   $2_1 = HEAP32[$418($1_1) >> 2];
   $3_1 = $1_1;
   if (!(Math_fround(HEAPF32[$531($1_1) >> 2] * Math_fround($5_1 >>> 0)) < Math_fround($2_1 + 1 >>> 0) ^ 1 ? $5_1 : 0)) {
    (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $537($5_1) ^ 1 | $5_1 << 1), HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
    $2_1 = $4_1;
    $9_1 = Math_fround(Math_ceil(Math_fround(Math_fround(HEAP32[$418($1_1) >> 2] + 1 >>> 0) / HEAPF32[$531($1_1) >> 2])));
    label$7 : {
     if ($9_1 < Math_fround(4294967296.0) & $9_1 >= Math_fround(0.0)) {
      $5_1 = ~~$9_1 >>> 0;
      break label$7;
     }
     $5_1 = 0;
    }
    HEAP32[$2_1 + 8 >> 2] = $5_1;
    $699($1_1, HEAP32[$360($4_1 + 12 | 0, $4_1 + 8 | 0) >> 2]);
    $5_1 = $528($1_1);
    $7 = $529($8, $5_1);
   }
   $2_1 = HEAP32[$530($3_1, $7) >> 2];
   label$9 : {
    if (!$2_1) {
     $2_1 = $1_1 + 8 | 0;
     HEAP32[HEAP32[$4_1 + 16 >> 2] >> 2] = HEAP32[$2_1 >> 2];
     HEAP32[$2_1 >> 2] = HEAP32[$4_1 + 16 >> 2];
     (wasm2js_i32$0 = $530($1_1, $7), wasm2js_i32$1 = $2_1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
     if (!HEAP32[HEAP32[$4_1 + 16 >> 2] >> 2]) {
      break label$9
     }
     $2_1 = HEAP32[$4_1 + 16 >> 2];
     (wasm2js_i32$0 = $530($1_1, $529(HEAP32[HEAP32[HEAP32[$4_1 + 16 >> 2] >> 2] + 4 >> 2], $5_1)), wasm2js_i32$1 = $2_1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
     break label$9;
    }
    HEAP32[HEAP32[$4_1 + 16 >> 2] >> 2] = HEAP32[$2_1 >> 2];
    HEAP32[$2_1 >> 2] = HEAP32[$4_1 + 16 >> 2];
   }
   $6 = $300($4_1 + 16 | 0);
   $1_1 = $418($1_1);
   HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] + 1;
   HEAP8[$4_1 + 31 | 0] = 1;
   $710($4_1 + 16 | 0);
  }
  $543($0, $431($4_1 + 16 | 0, $6), $4_1 + 31 | 0);
  global$0 = $4_1 + 32 | 0;
 }
 
 function $698($0, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $5_1 = $0;
  $0 = $130($1_1);
  $0 = $549($5_1, $2497(16), $548($4_1 + 8 | 0, $0));
  $1_1 = HEAP32[$0 >> 2] + 8 | 0;
  HEAP32[$1_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = HEAP32[$3_1 + 4 >> 2];
  (wasm2js_i32$0 = $305($0), wasm2js_i32$1 = 1), HEAP8[wasm2js_i32$0 + 4 | 0] = wasm2js_i32$1;
  HEAP32[HEAP32[$0 >> 2] + 4 >> 2] = $2_1;
  HEAP32[HEAP32[$0 >> 2] >> 2] = 0;
  global$0 = $4_1 + 16 | 0;
 }
 
 function $699($0, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = Math_fround(0), $5_1 = 0, $6 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[$3_1 + 12 >> 2] = $1_1;
  label$1 : {
   if (($1_1 | 0) == 1) {
    HEAP32[$3_1 + 12 >> 2] = 2;
    break label$1;
   }
   if (!($1_1 + -1 & $1_1)) {
    break label$1
   }
   (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = $1639($1_1)), HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
  }
  $1_1 = $528($0);
  $2_1 = HEAP32[$3_1 + 12 >> 2];
  label$3 : {
   if ($2_1 >>> 0 > $1_1 >>> 0) {
    $709($0, $2_1);
    break label$3;
   }
   if ($2_1 >>> 0 >= $1_1 >>> 0) {
    break label$3
   }
   $5_1 = $537($1_1);
   $4_1 = Math_fround(Math_ceil(Math_fround(Math_fround(HEAPU32[$418($0) >> 2]) / HEAPF32[$531($0) >> 2])));
   label$5 : {
    if ($4_1 < Math_fround(4294967296.0) & $4_1 >= Math_fround(0.0)) {
     $2_1 = ~~$4_1 >>> 0;
     break label$5;
    }
    $2_1 = 0;
   }
   $6 = $3_1;
   label$7 : {
    if ($5_1) {
     $2_1 = $553($2_1);
     break label$7;
    }
    $2_1 = $1639($2_1);
   }
   HEAP32[$6 + 8 >> 2] = $2_1;
   $2_1 = HEAP32[$360($3_1 + 12 | 0, $3_1 + 8 | 0) >> 2];
   HEAP32[$3_1 + 12 >> 2] = $2_1;
   if ($2_1 >>> 0 >= $1_1 >>> 0) {
    break label$3
   }
   $709($0, $2_1);
  }
  global$0 = $3_1 + 16 | 0;
 }
 
 function $709($0, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $305($0);
  label$1 : {
   if ($1_1) {
    $562($0, $566($1_1));
    (wasm2js_i32$0 = $305($0), wasm2js_i32$1 = $1_1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    while (1) {
     (wasm2js_i32$0 = $530($0, $3_1), wasm2js_i32$1 = 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
     $3_1 = $3_1 + 1 | 0;
     if (($3_1 | 0) != ($1_1 | 0)) {
      continue
     }
     break;
    };
    $2_1 = $0 + 8 | 0;
    $4_1 = HEAP32[$2_1 >> 2];
    if (!$4_1) {
     break label$1
    }
    $6 = $529(HEAP32[$4_1 + 4 >> 2], $1_1);
    (wasm2js_i32$0 = $530($0, $6), wasm2js_i32$1 = $2_1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    $2_1 = HEAP32[$4_1 >> 2];
    if (!$2_1) {
     break label$1
    }
    while (1) {
     $5_1 = $529(HEAP32[$2_1 + 4 >> 2], $1_1);
     label$5 : {
      if (($6 | 0) == ($5_1 | 0)) {
       $4_1 = $2_1;
       break label$5;
      }
      label$7 : {
       label$8 : {
        if (HEAP32[$530($0, $5_1) >> 2]) {
         $3_1 = $2_1;
         if (!HEAP32[$2_1 >> 2]) {
          break label$7
         }
         if ($693($531($0), $2_1 + 8 | 0, HEAP32[$2_1 >> 2] + 8 | 0)) {
          break label$8
         }
         break label$7;
        }
        (wasm2js_i32$0 = $530($0, $5_1), wasm2js_i32$1 = $4_1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
        $4_1 = $2_1;
        $6 = $5_1;
        break label$5;
       }
       while (1) {
        $3_1 = HEAP32[$3_1 >> 2];
        if (!HEAP32[$3_1 >> 2]) {
         break label$7
        }
        if ($693($531($0), $2_1 + 8 | 0, HEAP32[$3_1 >> 2] + 8 | 0)) {
         continue
        }
        break;
       };
      }
      HEAP32[$4_1 >> 2] = HEAP32[$3_1 >> 2];
      (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = HEAP32[HEAP32[$530($0, $5_1) >> 2] >> 2]), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
      (wasm2js_i32$0 = HEAP32[$530($0, $5_1) >> 2], wasm2js_i32$1 = $2_1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
     }
     $2_1 = HEAP32[$4_1 >> 2];
     if ($2_1) {
      continue
     }
     break;
    };
    break label$1;
   }
   $562($0, 0);
   (wasm2js_i32$0 = $305($0), wasm2js_i32$1 = $1_1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  }
 }
 
 function $710($0) {
  var $1_1 = 0;
  $1_1 = HEAP32[$0 >> 2];
  HEAP32[$0 >> 2] = 0;
  if ($1_1) {
   HEAPU8[$305($0) + 4 | 0];
   if ($1_1) {
    $2583($1_1)
   }
  }
 }
 
 function $726($0) {
  $727($0, HEAP32[$0 >> 2]);
 }
 
 function $727($0, $1_1) {
  var $2_1 = 0;
  $2_1 = HEAP32[$0 + 4 >> 2];
  if (($2_1 | 0) != ($1_1 | 0)) {
   while (1) {
    $130($0);
    $2_1 = $2_1 + -4 | 0;
    if (($2_1 | 0) != ($1_1 | 0)) {
     continue
    }
    break;
   }
  }
  HEAP32[$0 + 4 >> 2] = $1_1;
 }
 
 function $729($0, $1_1) {
  var $2_1 = 0;
  $2_1 = HEAP32[$0 + 4 >> 2];
  if (($2_1 | 0) != ($1_1 | 0)) {
   while (1) {
    $130($0);
    $2_1 = $2_1 + -76 | 0;
    $247($2_1);
    if (($1_1 | 0) != ($2_1 | 0)) {
     continue
    }
    break;
   }
  }
  HEAP32[$0 + 4 >> 2] = $1_1;
 }
 
 function $735($0, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $2_1 = $191($0, $1_1);
  label$1 : {
   if (!$192(HEAP32[HEAP32[$2_1 >> 2] + -12 >> 2] + $2_1 | 0)) {
    break label$1
   }
   while (1) {
    $776($775($1_1));
    label$3 : {
     if ($772($1_1)) {
      break label$3
     }
     $5_1 = $3($4_1, 2749);
     $3_1 = $5_1;
     $2_1 = $1_1;
     if ($100($3_1) >>> 0 <= $100($2_1) >>> 0) {
      $2_1 = !$2525($2_1, $100($3_1), $320($3_1), $100($3_1))
     } else {
      $2_1 = 0
     }
     $2512($5_1);
     if ($2_1) {
      break label$3
     }
     $6 = 1;
     break label$1;
    }
    $2_1 = $191($0, $1_1);
    if ($192(HEAP32[HEAP32[$2_1 >> 2] + -12 >> 2] + $2_1 | 0)) {
     continue
    }
    break;
   };
  }
  global$0 = $4_1 + 16 | 0;
  return $6;
 }
 
 function $736($0, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6 = 0, $7 = 0, $8 = 0.0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_f64$0 = 0.0;
  $2_1 = global$0 - 256 | 0;
  global$0 = $2_1;
  if (!$772($0)) {
   $4_1 = $26($2_1 + 240 | 0);
   $5_1 = $26($2_1 + 224 | 0);
   $6 = $234($2_1 + 144 | 0);
   $3_1 = $0;
   $0 = $3($2_1, 2751);
   $193($3_1, $4_1, $0);
   $2512($0);
   label$2 : {
    if (!$98($4_1)) {
     $3_1 = 1;
     break label$2;
    }
    $0 = 0;
    while (1) {
     $7 = $99($4_1, $0);
     $3_1 = $3($2_1, 1741);
     $193($7, $5_1, $3_1);
     $2512($3_1);
     if (($98($5_1) | 0) != 2) {
      $0 = $107($2_1, 3, 2484, 105);
      $108($0, 2753);
      $109($0);
      $3_1 = 0;
      break label$2;
     }
     if (!(wasm2js_i32$0 = $243($99($5_1, 0), $6), wasm2js_i32$1 = 0, wasm2js_i32$2 = HEAP32[$6 + 68 >> 2] == 1, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1)) {
      $0 = $107($2_1, 3, 2484, 109);
      $108($0, 2771);
      $109($0);
      $3_1 = 0;
      break label$2;
     }
     $3_1 = 1;
     $8 = $1595($320($99($5_1, 1)));
     (wasm2js_i32$0 = $774($1_1, HEAP32[$6 + 64 >> 2]), wasm2js_f64$0 = $8), HEAPF64[wasm2js_i32$0 >> 3] = wasm2js_f64$0;
     $0 = $0 + 1 | 0;
     if ($0 >>> 0 < $98($4_1) >>> 0) {
      continue
     }
     break;
    };
   }
   $247($6);
   $35($5_1);
   $35($4_1);
  }
  global$0 = $2_1 + 256 | 0;
  return $3_1;
 }
 
 function $772($0) {
  return !$100($0);
 }
 
 function $774($0, $1_1) {
  var $2_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  (wasm2js_i32$0 = $2_1, wasm2js_i32$1 = $804($1_1)), HEAP32[wasm2js_i32$0 + 16 >> 2] = wasm2js_i32$1;
  $806($2_1 + 24 | 0, $0, $1_1, $2_1 + 16 | 0, $2_1 + 8 | 0);
  $0 = $678($2_1 + 24 | 0);
  global$0 = $2_1 + 32 | 0;
  return $0 + 8 | 0;
 }
 
 function $775($0) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $1_1 = global$0 - 96 | 0;
  global$0 = $1_1;
  $802($1_1 - -64 | 0, $781($0));
  $802($1_1 + 56 | 0, $779($0));
  (wasm2js_i32$0 = $1_1, wasm2js_i32$1 = $783()), HEAP32[wasm2js_i32$0 + 40 >> 2] = wasm2js_i32$1;
  $784($1_1 + 48 | 0, $1_1 + 40 | 0);
  $2_1 = HEAP32[$1_1 + 68 >> 2];
  HEAP32[$1_1 + 16 >> 2] = HEAP32[$1_1 + 64 >> 2];
  HEAP32[$1_1 + 20 >> 2] = $2_1;
  $2_1 = HEAP32[$1_1 + 60 >> 2];
  HEAP32[$1_1 + 8 >> 2] = HEAP32[$1_1 + 56 >> 2];
  HEAP32[$1_1 + 12 >> 2] = $2_1;
  $2_1 = HEAP32[$1_1 + 52 >> 2];
  HEAP32[$1_1 >> 2] = HEAP32[$1_1 + 48 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $2_1;
  $789($1_1 + 72 | 0, $1_1 + 16 | 0, $1_1 + 8 | 0, $1_1);
  HEAP32[$1_1 + 80 >> 2] = HEAP32[($1_1 + 72 | 0) + 4 >> 2];
  $2_1 = $780($1_1 + 88 | 0, $1_1 + 80 | 0);
  (wasm2js_i32$0 = $1_1, wasm2js_i32$1 = $781($0)), HEAP32[wasm2js_i32$0 + 24 >> 2] = wasm2js_i32$1;
  $3_1 = $780($1_1 + 32 | 0, $1_1 + 24 | 0);
  $786($0, HEAP32[$2_1 >> 2], HEAP32[$3_1 >> 2]);
  global$0 = $1_1 + 96 | 0;
  return $0;
 }
 
 function $776($0) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $1_1 = global$0 + -64 | 0;
  global$0 = $1_1;
  (wasm2js_i32$0 = $1_1, wasm2js_i32$1 = $779($0)), HEAP32[wasm2js_i32$0 + 48 >> 2] = wasm2js_i32$1;
  $3_1 = $780($1_1 + 56 | 0, $1_1 + 48 | 0);
  $2_1 = $779($0);
  $4_1 = $781($0);
  (wasm2js_i32$0 = $1_1, wasm2js_i32$1 = $783()), HEAP32[wasm2js_i32$0 + 16 >> 2] = wasm2js_i32$1;
  $784($1_1 + 24 | 0, $1_1 + 16 | 0);
  $5_1 = HEAP32[$1_1 + 28 >> 2];
  HEAP32[$1_1 + 8 >> 2] = HEAP32[$1_1 + 24 >> 2];
  HEAP32[$1_1 + 12 >> 2] = $5_1;
  (wasm2js_i32$0 = $1_1, wasm2js_i32$1 = $785($2_1, $4_1, $1_1 + 8 | 0)), HEAP32[wasm2js_i32$0 + 32 >> 2] = wasm2js_i32$1;
  $2_1 = $780($1_1 + 40 | 0, $1_1 + 32 | 0);
  $786($0, HEAP32[$3_1 >> 2], HEAP32[$2_1 >> 2]);
  global$0 = $1_1 - -64 | 0;
 }
 
 function $779($0) {
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $0 = HEAP32[$431($1_1 + 8 | 0, $320($0)) >> 2];
  global$0 = $1_1 + 16 | 0;
  return $0;
 }
 
 function $780($0, $1_1) {
  HEAP32[$0 >> 2] = HEAP32[$1_1 >> 2];
  return $0;
 }
 
 function $781($0) {
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $0 = HEAP32[$431($1_1 + 8 | 0, $320($0) + $100($0) | 0) >> 2];
  global$0 = $1_1 + 16 | 0;
  return $0;
 }
 
 function $782($0) {
  $0 = $0 | 0;
  if ($0 >>> 0 <= 255) {
   $0 = ($1572($0 & 255) | 0) != 0
  } else {
   $0 = 0
  }
  return $0 | 0;
 }
 
 function $783() {
  var $0 = 0, $1_1 = 0;
  $0 = global$0 - 16 | 0;
  global$0 = $0;
  $1_1 = HEAP32[$431($0 + 8 | 0, 9) >> 2];
  global$0 = $0 + 16 | 0;
  return $1_1;
 }
 
 function $784($0, $1_1) {
  HEAP32[$0 + 4 >> 2] = HEAP32[$1_1 >> 2];
 }
 
 function $785($0, $1_1, $2_1) {
  var $3_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  HEAP32[$3_1 + 16 >> 2] = $1_1;
  HEAP32[$3_1 + 24 >> 2] = $0;
  label$1 : {
   if (!$31($3_1 + 24 | 0, $3_1 + 16 | 0)) {
    break label$1
   }
   while (1) {
    HEAP32[$3_1 + 12 >> 2] = HEAP8[HEAP32[$3_1 + 24 >> 2]];
    if ($794($2_1, $3_1 + 12 | 0)) {
     break label$1
    }
    $795($3_1 + 24 | 0);
    if ($31($3_1 + 24 | 0, $3_1 + 16 | 0)) {
     continue
    }
    break;
   };
  }
  global$0 = $3_1 + 32 | 0;
  return HEAP32[$3_1 + 24 >> 2];
 }
 
 function $786($0, $1_1, $2_1) {
  var $3_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  HEAP32[$3_1 + 16 >> 2] = $2_1;
  HEAP32[$3_1 + 24 >> 2] = $1_1;
  (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = $779($0)), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
  $1_1 = $0;
  $0 = $790($3_1 + 24 | 0, $3_1 + 8 | 0);
  $2524($1_1, $0, $790($3_1 + 16 | 0, $3_1 + 24 | 0));
  $791($3_1 + 8 | 0, $0);
  global$0 = $3_1 + 32 | 0;
 }
 
 function $789($0, $1_1, $2_1, $3_1) {
  var $4_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  label$1 : {
   if (!$799($1_1, $2_1)) {
    break label$1
   }
   while (1) {
    (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = HEAP8[$800($1_1) | 0]), HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
    if ($794($3_1, $4_1 + 12 | 0)) {
     break label$1
    }
    $803($1_1 + 4 | 0);
    if ($799($1_1, $2_1)) {
     continue
    }
    break;
   };
  }
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$0 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0 + 4 >> 2] = $2_1;
  global$0 = $4_1 + 16 | 0;
 }
 
 function $790($0, $1_1) {
  return HEAP32[$0 >> 2] - HEAP32[$1_1 >> 2] | 0;
 }
 
 function $791($0, $1_1) {
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 + 8 >> 2] = HEAP32[$0 >> 2];
  $0 = $2_1 + 8 | 0;
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + $1_1;
  global$0 = $2_1 + 16 | 0;
  return HEAP32[$2_1 + 8 >> 2];
 }
 
 function $794($0, $1_1) {
  return FUNCTION_TABLE[HEAP32[$0 + 4 >> 2]](HEAP32[$1_1 >> 2]) ^ 1;
 }
 
 function $795($0) {
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
 }
 
 function $799($0, $1_1) {
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 + 8 >> 2] = HEAP32[$0 + 4 >> 2];
  HEAP32[$2_1 >> 2] = HEAP32[$1_1 + 4 >> 2];
  $0 = $31($2_1 + 8 | 0, $2_1);
  global$0 = $2_1 + 16 | 0;
  return $0;
 }
 
 function $800($0) {
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[$1_1 + 8 >> 2] = HEAP32[$0 + 4 >> 2];
  $0 = HEAP32[$803($1_1 + 8 | 0) >> 2];
  global$0 = $1_1 + 16 | 0;
  return $0;
 }
 
 function $802($0, $1_1) {
  HEAP32[$0 + 4 >> 2] = $1_1;
  HEAP32[$0 >> 2] = $1_1;
 }
 
 function $803($0) {
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + -1;
  return $0;
 }
 
 function $804($0) {
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = $1_1 + 8 | 0;
  $431($2_1, $0);
  global$0 = $1_1 + 16 | 0;
  return HEAP32[$2_1 >> 2];
 }
 
 function $806($0, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = 0, $6 = 0, $7 = 0, $8 = 0, $9_1 = 0, $10_1 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  $418($1_1);
  $9_1 = HEAP32[$2_1 >> 2];
  $6 = $528($1_1);
  HEAP8[$5_1 + 31 | 0] = 0;
  label$1 : {
   label$2 : {
    if (!$6) {
     break label$2
    }
    $8 = $529($9_1, $6);
    $7 = HEAP32[$530($1_1, $8) >> 2];
    if (!$7) {
     break label$2
    }
    while (1) {
     $7 = HEAP32[$7 >> 2];
     if (!$7) {
      break label$2
     }
     if (($9_1 | 0) != HEAP32[$7 + 4 >> 2]) {
      if (($529(HEAP32[$7 + 4 >> 2], $6) | 0) != ($8 | 0)) {
       break label$2
      }
     }
     if (!$693($531($1_1), $7 + 8 | 0, $2_1)) {
      continue
     }
     break;
    };
    break label$1;
   }
   $813($5_1 + 16 | 0, $1_1, $9_1, 2789, $3_1, $4_1);
   $2_1 = HEAP32[$418($1_1) >> 2];
   $3_1 = $1_1;
   if (!(Math_fround(HEAPF32[$531($1_1) >> 2] * Math_fround($6 >>> 0)) < Math_fround($2_1 + 1 >>> 0) ^ 1 ? $6 : 0)) {
    (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $537($6) ^ 1 | $6 << 1), HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
    $2_1 = $5_1;
    $10_1 = Math_fround(Math_ceil(Math_fround(Math_fround(HEAP32[$418($1_1) >> 2] + 1 >>> 0) / HEAPF32[$531($1_1) >> 2])));
    label$7 : {
     if ($10_1 < Math_fround(4294967296.0) & $10_1 >= Math_fround(0.0)) {
      $4_1 = ~~$10_1 >>> 0;
      break label$7;
     }
     $4_1 = 0;
    }
    HEAP32[$2_1 + 8 >> 2] = $4_1;
    $699($1_1, HEAP32[$360($5_1 + 12 | 0, $5_1 + 8 | 0) >> 2]);
    $6 = $528($1_1);
    $8 = $529($9_1, $6);
   }
   $2_1 = HEAP32[$530($3_1, $8) >> 2];
   label$9 : {
    if (!$2_1) {
     $2_1 = $1_1 + 8 | 0;
     HEAP32[HEAP32[$5_1 + 16 >> 2] >> 2] = HEAP32[$2_1 >> 2];
     HEAP32[$2_1 >> 2] = HEAP32[$5_1 + 16 >> 2];
     (wasm2js_i32$0 = $530($1_1, $8), wasm2js_i32$1 = $2_1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
     if (!HEAP32[HEAP32[$5_1 + 16 >> 2] >> 2]) {
      break label$9
     }
     $2_1 = HEAP32[$5_1 + 16 >> 2];
     (wasm2js_i32$0 = $530($1_1, $529(HEAP32[HEAP32[HEAP32[$5_1 + 16 >> 2] >> 2] + 4 >> 2], $6)), wasm2js_i32$1 = $2_1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
     break label$9;
    }
    HEAP32[HEAP32[$5_1 + 16 >> 2] >> 2] = HEAP32[$2_1 >> 2];
    HEAP32[$2_1 >> 2] = HEAP32[$5_1 + 16 >> 2];
   }
   $7 = $300($5_1 + 16 | 0);
   $1_1 = $418($1_1);
   HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] + 1;
   HEAP8[$5_1 + 31 | 0] = 1;
   $710($5_1 + 16 | 0);
  }
  $543($0, $431($5_1 + 16 | 0, $7), $5_1 + 31 | 0);
  global$0 = $5_1 + 32 | 0;
 }
 
 function $813($0, $1_1, $2_1, $3_1, $4_1, $5_1) {
  var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $5_1 = $0;
  $0 = $130($1_1);
  $0 = $549($5_1, $2497(24), $548($3_1 + 8 | 0, $0));
  $832(HEAP32[$0 >> 2] + 8 | 0, HEAP32[$4_1 >> 2]);
  (wasm2js_i32$0 = $305($0), wasm2js_i32$1 = 1), HEAP8[wasm2js_i32$0 + 4 | 0] = wasm2js_i32$1;
  HEAP32[HEAP32[$0 >> 2] + 4 >> 2] = $2_1;
  HEAP32[HEAP32[$0 >> 2] >> 2] = 0;
  global$0 = $3_1 + 16 | 0;
 }
 
 function $832($0, $1_1) {
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 + 8 >> 2] = $1_1;
  $1_1 = HEAP32[HEAP32[$2_1 + 8 >> 2] >> 2];
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 + 12 >> 2] = 0;
  HEAP32[$0 >> 2] = $1_1;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $844($0) {
  $0 = $0 | 0;
  HEAP32[$0 >> 2] = 3024;
  $857($0 + 4 | 0);
  return $0 | 0;
 }
 
 function $845($0) {
  $0 = $0 | 0;
  $2583($22($0));
 }
 
 function $846($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $847($0, $1_1, $2_1);
 }
 
 function $847($0, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = $0;
  $0 = $26($3_1);
  $896($4_1, $1_1, $0);
  $897($0, $2_1);
  $58($0);
  global$0 = $3_1 + 16 | 0;
 }
 
 function $849($0, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3_1 = global$0 + -64 | 0;
  global$0 = $3_1;
  $4_1 = $0;
  $0 = $26($3_1 + 48 | 0);
  FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 8 >> 2]]($2_1, $4_1, $0);
  (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = $29($0)), HEAP32[wasm2js_i32$0 + 40 >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = $30($0)), HEAP32[wasm2js_i32$0 + 16 >> 2] = wasm2js_i32$1;
  if ($31($3_1 + 40 | 0, $3_1 + 16 | 0)) {
   while (1) {
    $5_1 = HEAP32[$3_1 + 40 >> 2];
    $1104($3_1, HEAP32[$3_1 + 40 >> 2], $2_1);
    $4_1 = $3_1 + 16 | 0;
    $2508($4_1, $5_1);
    $437($4_1 + 12 | 0, $3_1);
    $1106($1_1, $3_1 + 16 | 0);
    $1107($3_1 + 16 | 0);
    $2512($3_1);
    $42($3_1 + 40 | 0);
    (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = $30($0)), HEAP32[wasm2js_i32$0 + 16 >> 2] = wasm2js_i32$1;
    if ($31($3_1 + 40 | 0, $3_1 + 16 | 0)) {
     continue
    }
    break;
   }
  }
  $1_1 = $200($1_1);
  $35($0);
  global$0 = $3_1 - -64 | 0;
  return $1_1 ^ 1;
 }
 
 function $850($0, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $2_1 = global$0 - 496 | 0;
  global$0 = $2_1;
  $5_1 = $0 + 4 | 0;
  $855($5_1);
  label$1 : {
   label$2 : {
    $3_1 = $444($2_1 + 160 | 0);
    if ($854($1_1, $3_1)) {
     if (HEAP32[$3_1 + 324 >> 2]) {
      break label$2
     }
     $4_1 = 1;
     break label$1;
    }
    $0 = $107($2_1 + 16 | 0, 3, 3046, 29);
    $108($188($108($0, 3132), $1_1), 2315);
    $109($0);
    break label$1;
   }
   $0 = 0;
   while (1) {
    $521($2_1 + 16 | 0, $5_1, $448($3_1, $0));
    if (!HEAPU8[$2_1 + 20 | 0]) {
     $4_1 = $107($2_1 + 16 | 0, 3, 3046, 34);
     $240($2_1, $1_1, HEAP32[$448($3_1, $0) + 4 >> 2], HEAP32[$448($3_1, $0) + 8 >> 2]);
     $108($188($4_1, $2_1), 3140);
     $2512($2_1);
     $109($4_1);
     $4_1 = 0;
     break label$1;
    }
    $4_1 = 1;
    $0 = $0 + 1 | 0;
    if ($0 >>> 0 < HEAPU32[$3_1 + 324 >> 2]) {
     continue
    }
    break;
   };
  }
  $450($3_1);
  global$0 = $2_1 + 496 | 0;
  return $4_1;
 }
 
 function $852($0) {
  $0 = $0 | 0;
  abort();
 }
 
 function $854($0, $1_1) {
  return $445($320($0), $100($0), $1_1);
 }
 
 function $855($0) {
  var $1_1 = 0, $2_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  if (HEAP32[$418($0) >> 2]) {
   $1_1 = $0 + 8 | 0;
   $856($0, HEAP32[$1_1 >> 2]);
   HEAP32[$1_1 >> 2] = 0;
   $2_1 = $528($0);
   if ($2_1) {
    $1_1 = 0;
    while (1) {
     (wasm2js_i32$0 = $530($0, $1_1), wasm2js_i32$1 = 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
     $1_1 = $1_1 + 1 | 0;
     if (($2_1 | 0) != ($1_1 | 0)) {
      continue
     }
     break;
    };
   }
   (wasm2js_i32$0 = $418($0), wasm2js_i32$1 = 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  }
 }
 
 function $856($0, $1_1) {
  $130($0);
  if ($1_1) {
   while (1) {
    $0 = HEAP32[$1_1 >> 2];
    $2583($1_1);
    $1_1 = $0;
    if ($1_1) {
     continue
    }
    break;
   }
  }
 }
 
 function $857($0) {
  $856($0, HEAP32[$0 + 8 >> 2]);
  $859($0);
 }
 
 function $858($0) {
  $859($0);
 }
 
 function $859($0) {
  var $1_1 = 0;
  $1_1 = HEAP32[$0 >> 2];
  HEAP32[$0 >> 2] = 0;
  if ($1_1) {
   $305($0);
   $2583($1_1);
  }
 }
 
 function $861($0) {
  var $1_1 = 0, $2_1 = 0;
  $863($0);
  $1_1 = HEAP32[$0 + 4 >> 2];
  $2_1 = HEAP32[$0 + 8 >> 2];
  if (($1_1 | 0) != ($2_1 | 0)) {
   while (1) {
    $864($0);
    $2583(HEAP32[$1_1 >> 2]);
    $1_1 = $1_1 + 4 | 0;
    if (($2_1 | 0) != ($1_1 | 0)) {
     continue
    }
    break;
   }
  }
  $1_1 = $0;
  $894($0, HEAP32[$0 + 4 >> 2]);
  if (HEAP32[$0 >> 2]) {
   $418($1_1);
   $0 = HEAP32[$1_1 >> 2];
   $648($1_1);
   $2583($0);
  }
 }
 
 function $862($0, $1_1) {
  var $2_1 = 0, $3_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  if ($1_1) {
   $3_1 = HEAP32[$1_1 >> 2];
   label$2 : {
    if (!$3_1) {
     break label$2
    }
    (wasm2js_i32$0 = $2_1, wasm2js_i32$1 = $866($3_1)), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
    (wasm2js_i32$0 = $2_1, wasm2js_i32$1 = $118()), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    if ($115($2_1 + 8 | 0, $2_1)) {
     while (1) {
      $862($0, HEAP32[$678($2_1 + 8 | 0) + 4 >> 2]);
      $3_1 = $2_1 + 8 | 0;
      HEAP32[$3_1 >> 2] = HEAP32[HEAP32[$3_1 >> 2] >> 2];
      (wasm2js_i32$0 = $2_1, wasm2js_i32$1 = $118()), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
      if ($115($2_1 + 8 | 0, $2_1)) {
       continue
      }
      break;
     }
    }
    $0 = HEAP32[$1_1 >> 2];
    if (!$0) {
     break label$2
    }
    $856($0, HEAP32[$0 + 8 >> 2]);
    $859($0);
    $2583($0);
   }
   $2583($1_1);
  }
  global$0 = $2_1 + 16 | 0;
 }
 
 function $863($0) {
  var $1_1 = 0, $2_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $864($0);
  $878($1_1 + 8 | 0, $0);
  $879($1_1, $0);
  if ($880($1_1 + 8 | 0, $1_1)) {
   while (1) {
    $196(HEAP32[($1_1 + 8 | 0) + 4 >> 2]);
    $881($1_1 + 8 | 0);
    if ($880($1_1 + 8 | 0, $1_1)) {
     continue
    }
    break;
   }
  }
  (wasm2js_i32$0 = $864($0), wasm2js_i32$1 = 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  if ($883($0) >>> 0 > 2) {
   while (1) {
    $2583(HEAP32[HEAP32[$0 + 4 >> 2] >> 2]);
    $884($0);
    if ($883($0) >>> 0 > 2) {
     continue
    }
    break;
   }
  }
  $2_1 = 19;
  label$5 : {
   switch ($883($0) + -1 | 0) {
   case 1:
    $2_1 = 39;
   case 0:
    HEAP32[$0 + 16 >> 2] = $2_1;
    break;
   default:
    break label$5;
   };
  }
  global$0 = $1_1 + 16 | 0;
 }
 
 function $864($0) {
  return $0 + 20 | 0;
 }
 
 function $866($0) {
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $0 = HEAP32[$431($1_1 + 8 | 0, $871($0)) >> 2];
  global$0 = $1_1 + 16 | 0;
  return $0;
 }
 
 function $871($0) {
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $0 = HEAP32[$431($1_1 + 8 | 0, HEAP32[$0 + 8 >> 2]) >> 2];
  global$0 = $1_1 + 16 | 0;
  return $0;
 }
 
 function $878($0, $1_1) {
  var $2_1 = 0, $3_1 = 0;
  $2_1 = $0;
  $0 = HEAP32[$1_1 + 4 >> 2] + (HEAPU32[$1_1 + 16 >> 2] / 39 << 2) | 0;
  $3_1 = $0;
  if ($888($1_1)) {
   $0 = 0
  } else {
   $0 = HEAP32[$0 >> 2] + Math_imul(HEAPU32[$1_1 + 16 >> 2] % 39 | 0, 104) | 0
  }
  $458($2_1, $3_1, $0);
 }
 
 function $879($0, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $2_1 = HEAP32[$864($1_1) >> 2] + HEAP32[$1_1 + 16 >> 2] | 0;
  $3_1 = ($2_1 >>> 0) / 39 | 0;
  $4_1 = $0;
  $0 = HEAP32[$1_1 + 4 >> 2] + ($3_1 << 2) | 0;
  $5_1 = $0;
  if ($888($1_1)) {
   $0 = 0
  } else {
   $0 = HEAP32[$0 >> 2] + Math_imul($2_1 - Math_imul($3_1, 39) | 0, 104) | 0
  }
  $458($4_1, $5_1, $0);
 }
 
 function $880($0, $1_1) {
  return $889($0, $1_1) ^ 1;
 }
 
 function $881($0) {
  var $1_1 = 0, $2_1 = 0;
  $1_1 = HEAP32[$0 + 4 >> 2] + 104 | 0;
  HEAP32[$0 + 4 >> 2] = $1_1;
  $2_1 = $1_1;
  $1_1 = HEAP32[$0 >> 2];
  if (($2_1 - HEAP32[$1_1 >> 2] | 0) == 4056) {
   HEAP32[$0 >> 2] = $1_1 + 4;
   HEAP32[$0 + 4 >> 2] = HEAP32[$1_1 + 4 >> 2];
  }
 }
 
 function $883($0) {
  return HEAP32[$0 + 8 >> 2] - HEAP32[$0 + 4 >> 2] >> 2;
 }
 
 function $884($0) {
  HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + 4;
 }
 
 function $888($0) {
  return HEAP32[$0 + 8 >> 2] == HEAP32[$0 + 4 >> 2];
 }
 
 function $889($0, $1_1) {
  return HEAP32[$0 + 4 >> 2] == HEAP32[$1_1 + 4 >> 2];
 }
 
 function $894($0, $1_1) {
  if (HEAP32[$0 + 8 >> 2] != ($1_1 | 0)) {
   while (1) {
    $418($0);
    HEAP32[$0 + 8 >> 2] = HEAP32[$0 + 8 >> 2] + -4;
    if (HEAP32[$0 + 8 >> 2] != ($1_1 | 0)) {
     continue
    }
    break;
   }
  }
 }
 
 function $896($0, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 368 | 0;
  global$0 = $3_1;
  $5_1 = $898($3_1 + 24 | 0, $0 + 4 | 0, $1_1);
  $4_1 = $26($3_1 + 8 | 0);
  $900($4_1, $100($1_1) >>> 1 | 0);
  if ($901($5_1)) {
   while (1) {
    $902($3_1, $5_1);
    $903($0, HEAP32[$3_1 >> 2], HEAP32[$3_1 + 4 >> 2], $4_1);
    if ($901($5_1)) {
     continue
    }
    break;
   }
  }
  $904($2_1);
  $906($2_1, $905($4_1));
  $907($1_1, $4_1, $2_1);
  $908($4_1);
  $909($5_1);
  global$0 = $3_1 + 368 | 0;
 }
 
 function $897($0, $1_1) {
  var $2_1 = 0, $3_1 = 0;
  $911($1_1, $910($0));
  if ($910($0)) {
   while (1) {
    $3_1 = HEAP32[$0 >> 2] + Math_imul($2_1, 24) | 0;
    $2513($99($1_1, $2_1), $3_1);
    $2_1 = $2_1 + 1 | 0;
    if ($2_1 >>> 0 < $910($0) >>> 0) {
     continue
    }
    break;
   }
  }
 }
 
 function $898($0, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 144 | 0;
  global$0 = $3_1;
  $4_1 = $444($0 + 4 | 0);
  HEAP32[$0 + 336 >> 2] = $1_1;
  if (!$854($2_1, $4_1)) {
   $1_1 = $107($3_1, 3, 3156, 21);
   $108($1_1, 3198);
   $109($1_1);
  }
  HEAP32[$0 >> 2] = HEAP32[$4_1 + 320 >> 2];
  global$0 = $3_1 + 144 | 0;
  return $0;
 }
 
 function $900($0, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  if ($941($0) >>> 0 < $1_1 >>> 0) {
   $3_1 = $130($0);
   $4_1 = $0;
   $0 = $917($2_1 + 8 | 0, $1_1, $905($0), $3_1);
   $918($4_1, $0);
   $919($0);
  }
  global$0 = $2_1 + 32 | 0;
 }
 
 function $901($0) {
  return HEAP32[$0 >> 2] != ($920($0 + 4 | 0) | 0);
 }
 
 function $902($0, $1_1) {
  var $2_1 = 0, $3_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3_1 = HEAP32[$1_1 >> 2];
  HEAP32[$0 >> 2] = $3_1;
  $2_1 = $1_1 + 4 | 0;
  if (($920($2_1) | 0) != ($3_1 | 0)) {
   while (1) {
    if ($921(HEAP32[$1_1 + 336 >> 2], HEAP32[$1_1 >> 2])) {
     $2_1 = HEAP32[$1_1 >> 2];
     if (($2_1 | 0) == HEAP32[$0 >> 2]) {
      HEAP32[$1_1 >> 2] = $2_1 + 20
     }
     HEAP32[$0 + 4 >> 2] = HEAP32[$1_1 >> 2];
     return;
    }
    $3_1 = HEAP32[$1_1 >> 2] + 20 | 0;
    HEAP32[$1_1 >> 2] = $3_1;
    if (($920($2_1) | 0) != ($3_1 | 0)) {
     continue
    }
    break;
   }
  }
  (wasm2js_i32$0 = $0, wasm2js_i32$1 = $920($2_1)), HEAP32[wasm2js_i32$0 + 4 >> 2] = wasm2js_i32$1;
 }
 
 function $903($0, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  $4_1 = $26($5_1);
  $923(HEAP32[$0 + 24 >> 2], $1_1, $2_1, $4_1);
  $924($0, $4_1);
  $925($1_1, $4_1, $3_1);
  $926($4_1);
  global$0 = $5_1 + 16 | 0;
 }
 
 function $904($0) {
  $910($0);
  $927($0);
  $1064($0);
  $910($0);
 }
 
 function $905($0) {
  return HEAP32[$0 + 4 >> 2] - HEAP32[$0 >> 2] >> 3;
 }
 
 function $906($0, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  if ($1064($0) >>> 0 < $1_1 >>> 0) {
   $3_1 = $130($0);
   $4_1 = $0;
   $0 = $931($2_1 + 8 | 0, $1_1, $910($0), $3_1);
   $932($4_1, $0);
   $933($0);
  }
  global$0 = $2_1 + 32 | 0;
 }
 
 function $907($0, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  if ($905($1_1)) {
   while (1) {
    $935($3_1 + 8 | 0, $0, HEAP32[$934($1_1, $4_1) >> 2], HEAP32[$934($1_1, $4_1) + 4 >> 2]);
    $936($2_1, $3_1 + 8 | 0);
    $391($3_1 + 8 | 0);
    $4_1 = $4_1 + 1 | 0;
    if ($4_1 >>> 0 < $905($1_1) >>> 0) {
     continue
    }
    break;
   }
  }
  global$0 = $3_1 + 32 | 0;
 }
 
 function $908($0) {
  var $1_1 = 0;
  $938($0);
  if (HEAP32[$0 >> 2]) {
   $1094($0);
   $130($0);
   $1_1 = HEAP32[$0 >> 2];
   $941($0);
   $2583($1_1);
  }
 }
 
 function $909($0) {
  $450($0 + 4 | 0);
 }
 
 function $910($0) {
  return (HEAP32[$0 + 4 >> 2] - HEAP32[$0 >> 2] | 0) / 24 | 0;
 }
 
 function $911($0, $1_1) {
  var $2_1 = 0;
  $2_1 = $98($0);
  if ($2_1 >>> 0 < $1_1 >>> 0) {
   $1096($0, $1_1 - $2_1 | 0);
   return;
  }
  if ($2_1 >>> 0 > $1_1 >>> 0) {
   $1_1 = HEAP32[$0 >> 2] + Math_imul($1_1, 12) | 0;
   $2_1 = $98($0);
   $386($0, $1_1);
   $380($0, $2_1);
  }
 }
 
 function $917($0, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[$4_1 + 12 >> 2] = 0;
  $415($0 + 12 | 0, $4_1 + 12 | 0, $3_1);
  if ($1_1) {
   $416($0);
   $3_1 = $1_1;
   if (536870911 < $1_1 >>> 0) {
    $338(1572);
    abort();
   }
   $5_1 = $2497($3_1 << 3);
  }
  HEAP32[$0 >> 2] = $5_1;
  $2_1 = ($2_1 << 3) + $5_1 | 0;
  HEAP32[$0 + 8 >> 2] = $2_1;
  HEAP32[$0 + 4 >> 2] = $2_1;
  (wasm2js_i32$0 = $418($0), wasm2js_i32$1 = ($1_1 << 3) + $5_1 | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  global$0 = $4_1 + 16 | 0;
  return $0;
 }
 
 function $918($0, $1_1) {
  var $2_1 = 0;
  $938($0);
  $2_1 = $1_1 + 4 | 0;
  $645($130($0), HEAP32[$0 >> 2], HEAP32[$0 + 4 >> 2], $2_1);
  $420($0, $2_1);
  $420($0 + 4 | 0, $1_1 + 8 | 0);
  $420($130($0), $418($1_1));
  HEAP32[$1_1 >> 2] = HEAP32[$1_1 + 4 >> 2];
  $947($0, $905($0));
 }
 
 function $919($0) {
  var $1_1 = 0;
  $957($0, HEAP32[$0 + 4 >> 2]);
  if (HEAP32[$0 >> 2]) {
   $416($0);
   $1_1 = HEAP32[$0 >> 2];
   HEAP32[$418($0) >> 2];
   $2583($1_1);
  }
 }
 
 function $920($0) {
  return HEAP32[$0 + 320 >> 2] + Math_imul(HEAP32[$0 + 324 >> 2], 20) | 0;
 }
 
 function $921($0, $1_1) {
  var $2_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  (wasm2js_i32$0 = $2_1, wasm2js_i32$1 = $674()), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $2_1, wasm2js_i32$1 = $961($0, $1_1)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  $0 = $104($2_1 + 8 | 0, $2_1);
  global$0 = $2_1 + 16 | 0;
  return $0;
 }
 
 function $923($0, $1_1, $2_1, $3_1) {
  $965(HEAP32[$0 + 36 >> 2], $1_1, $2_1, $3_1);
 }
 
 function $924($0, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0.0, $5_1 = 0, $6 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_f64$0 = 0.0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $802($2_1 + 8 | 0, $30($1_1));
  $967($2_1, $1_1);
  if ($799($2_1 + 8 | 0, $2_1)) {
   while (1) {
    (wasm2js_i32$0 = $1046($2_1 + 8 | 0), wasm2js_i32$1 = 0), HEAP32[wasm2js_i32$0 + 160 >> 2] = wasm2js_i32$1;
    $3_1 = $1046($2_1 + 8 | 0);
    HEAP32[$3_1 + 168 >> 2] = 1548240741;
    HEAP32[$3_1 + 172 >> 2] = -724781509;
    label$3 : {
     if (HEAP32[($1046($2_1 + 8 | 0) + 20 | 0) + 132 >> 2]) {
      $3_1 = HEAP32[($1046($2_1 + 8 | 0) + 20 | 0) + 128 >> 2];
      if (($3_1 | 0) == ($972($1046($2_1 + 8 | 0) + 20 | 0) | 0)) {
       break label$3
      }
      while (1) {
       $5_1 = HEAP32[$3_1 + 4 >> 2];
       $6 = HEAP32[$3_1 >> 2] + 1 | 0;
       if ($6 >>> 0 < $973($1_1) >>> 0) {
        $4_1 = HEAPF64[$974($1_1, $6) + 168 >> 3] + 0.0
       } else {
        $4_1 = 0.0
       }
       $4_1 = $4_1 + ($5_1 ? HEAPF64[$5_1 + 80 >> 3] : HEAPF64[HEAP32[$0 + 24 >> 2] + 48 >> 3]);
       if (!!($4_1 > HEAPF64[$1046($2_1 + 8 | 0) + 168 >> 3])) {
        (wasm2js_i32$0 = $1046($2_1 + 8 | 0), wasm2js_i32$1 = $5_1), HEAP32[wasm2js_i32$0 + 160 >> 2] = wasm2js_i32$1;
        (wasm2js_i32$0 = $1046($2_1 + 8 | 0), wasm2js_f64$0 = $4_1), HEAPF64[wasm2js_i32$0 + 168 >> 3] = wasm2js_f64$0;
       }
       $3_1 = $3_1 + 8 | 0;
       if (($972($1046($2_1 + 8 | 0) + 20 | 0) | 0) != ($3_1 | 0)) {
        continue
       }
       break;
      };
      break label$3;
     }
     fimport$5(3233, 2830, 88, 3253);
     abort();
    }
    $976($2_1, $2_1 + 8 | 0);
    $967($2_1, $1_1);
    if ($799($2_1 + 8 | 0, $2_1)) {
     continue
    }
    break;
   }
  }
  global$0 = $2_1 + 16 | 0;
 }
 
 function $925($0, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  label$1 : {
   if ($973($1_1)) {
    while (1) {
     $3_1 = HEAP32[$974($1_1, $4_1) + 160 >> 2];
     label$4 : {
      if ($3_1) {
       if (!HEAP32[$3_1 + 68 >> 2]) {
        break label$1
       }
       $6 = Math_imul($4_1, 20) + $0 | 0;
       $977($2_1, $458($5_1 + 8 | 0, $6, ($6 + Math_imul(HEAP32[$3_1 + 68 >> 2], 20) | 0) + -20 | 0));
       $3_1 = HEAP32[$3_1 + 68 >> 2];
       break label$4;
      }
      $3_1 = Math_imul($4_1, 20) + $0 | 0;
      $977($2_1, $458($5_1 + 8 | 0, $3_1, $3_1));
      $3_1 = 1;
     }
     $4_1 = $3_1 + $4_1 | 0;
     if ($4_1 >>> 0 < $973($1_1) >>> 0) {
      continue
     }
     break;
    }
   }
   global$0 = $5_1 + 16 | 0;
   return;
  }
  fimport$5(3260, 2830, 117, 3280);
  abort();
 }
 
 function $926($0) {
  var $1_1 = 0;
  $978($0);
  if (HEAP32[$0 >> 2]) {
   $996($0, HEAP32[$0 >> 2]);
   $130($0);
   $1_1 = HEAP32[$0 >> 2];
   $1020($0);
   $2583($1_1);
  }
 }
 
 function $927($0) {
  $1060($0, HEAP32[$0 >> 2]);
 }
 
 function $931($0, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[$4_1 + 12 >> 2] = 0;
  $415($0 + 12 | 0, $4_1 + 12 | 0, $3_1);
  if ($1_1) {
   $416($0);
   $3_1 = $1_1;
   if (178956970 < $1_1 >>> 0) {
    $338(1572);
    abort();
   }
   $5_1 = $2497(Math_imul($3_1, 24));
  }
  HEAP32[$0 >> 2] = $5_1;
  $2_1 = Math_imul($2_1, 24) + $5_1 | 0;
  HEAP32[$0 + 8 >> 2] = $2_1;
  HEAP32[$0 + 4 >> 2] = $2_1;
  (wasm2js_i32$0 = $418($0), wasm2js_i32$1 = Math_imul($1_1, 24) + $5_1 | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  global$0 = $4_1 + 16 | 0;
  return $0;
 }
 
 function $932($0, $1_1) {
  var $2_1 = 0;
  $62($0);
  $2_1 = $1_1 + 4 | 0;
  $1070($130($0), HEAP32[$0 >> 2], HEAP32[$0 + 4 >> 2], $2_1);
  $420($0, $2_1);
  $420($0 + 4 | 0, $1_1 + 8 | 0);
  $420($130($0), $418($1_1));
  HEAP32[$1_1 >> 2] = HEAP32[$1_1 + 4 >> 2];
  $1072($0, $910($0));
 }
 
 function $933($0) {
  var $1_1 = 0;
  $1084($0, HEAP32[$0 + 4 >> 2]);
  if (HEAP32[$0 >> 2]) {
   $416($0);
   $1_1 = HEAP32[$0 >> 2];
   $1074($0);
   $2583($1_1);
  }
 }
 
 function $934($0, $1_1) {
  return HEAP32[$0 >> 2] + ($1_1 << 3) | 0;
 }
 
 function $935($0, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = 0, $6 = 0, $7 = 0, $8 = 0, $9_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $6 = HEAP32[$3_1 + 4 >> 2];
  $5_1 = HEAP32[$2_1 + 4 >> 2];
  if ($6 >>> 0 < $5_1 >>> 0) {
   fimport$5(3289, 3319, 194, 3359);
   abort();
  }
  $7 = HEAP32[$3_1 + 16 >> 2];
  $8 = HEAP32[$2_1 + 12 >> 2];
  $9_1 = HEAP32[$3_1 + 12 >> 2];
  $240($4_1, $1_1, $5_1, HEAP32[$3_1 + 8 >> 2] + ($6 - $5_1 | 0) | 0);
  $1_1 = HEAP32[$2_1 + 4 >> 2];
  $2_1 = HEAP32[$2_1 + 12 >> 2];
  $2508($0, $4_1);
  HEAP32[$0 + 20 >> 2] = ($9_1 - $8 | 0) + $7;
  HEAP32[$0 + 16 >> 2] = $2_1;
  HEAP32[$0 + 12 >> 2] = $1_1;
  $2512($4_1);
  global$0 = $4_1 + 16 | 0;
 }
 
 function $936($0, $1_1) {
  if (HEAPU32[$0 + 4 >> 2] < HEAPU32[$130($0) >> 2]) {
   $1085($0, $1_1);
   return;
  }
  $1086($0, $1_1);
 }
 
 function $938($0) {
  $941($0);
  $905($0);
  $941($0);
 }
 
 function $941($0) {
  return HEAP32[$130($0) >> 2] - HEAP32[$0 >> 2] >> 3;
 }
 
 function $947($0, $1_1) {
  $941($0);
  $941($0);
 }
 
 function $957($0, $1_1) {
  if (HEAP32[$0 + 8 >> 2] != ($1_1 | 0)) {
   while (1) {
    $416($0);
    HEAP32[$0 + 8 >> 2] = HEAP32[$0 + 8 >> 2] + -8;
    if (HEAP32[$0 + 8 >> 2] != ($1_1 | 0)) {
     continue
    }
    break;
   }
  }
 }
 
 function $961($0, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $418($0);
  $4_1 = HEAP32[$1_1 >> 2];
  $5_1 = $528($0);
  label$1 : {
   label$2 : {
    if (!$5_1) {
     break label$2
    }
    $6 = $529($4_1, $5_1);
    $2_1 = HEAP32[$530($0, $6) >> 2];
    if (!$2_1) {
     break label$2
    }
    $2_1 = HEAP32[$2_1 >> 2];
    if (!$2_1) {
     break label$2
    }
    while (1) {
     if (($4_1 | 0) != HEAP32[$2_1 + 4 >> 2]) {
      if (($529(HEAP32[$2_1 + 4 >> 2], $5_1) | 0) != ($6 | 0)) {
       break label$2
      }
     }
     label$5 : {
      if (($4_1 | 0) != HEAP32[$2_1 + 4 >> 2]) {
       break label$5
      }
      if (!$533($531($0), $2_1 + 8 | 0, $1_1)) {
       break label$5
      }
      $431($3_1 + 8 | 0, $2_1);
      break label$1;
     }
     $2_1 = HEAP32[$2_1 >> 2];
     if ($2_1) {
      continue
     }
     break;
    };
   }
   (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = $674()), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
  }
  global$0 = $3_1 + 16 | 0;
  return HEAP32[$3_1 + 8 >> 2];
 }
 
 function $965($0, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = 0, $6 = 0, $7 = 0, $8 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  if (HEAP32[$0 >> 2]) {
   $2_1 = $2_1 - $1_1 | 0;
   $7 = ($2_1 | 0) / 20 | 0;
   $981($3_1, $7);
   $6 = $181($4_1 + 24 | 0);
   HEAP32[$4_1 + 20 >> 2] = 0;
   if ($2_1) {
    $2_1 = 0;
    while (1) {
     $5_1 = $974($3_1, $2_1);
     $2_1 = Math_imul($2_1, 20) + $1_1 | 0;
     $8 = HEAP32[$2_1 + 4 >> 2];
     HEAP32[$5_1 >> 2] = HEAP32[$2_1 >> 2];
     HEAP32[$5_1 + 4 >> 2] = $8;
     HEAP32[$5_1 + 16 >> 2] = HEAP32[$2_1 + 16 >> 2];
     $8 = HEAP32[$2_1 + 12 >> 2];
     HEAP32[$5_1 + 8 >> 2] = HEAP32[$2_1 + 8 >> 2];
     HEAP32[$5_1 + 12 >> 2] = $8;
     label$4 : {
      if (HEAP32[HEAP32[$0 >> 2] >> 2]) {
       $2_1 = $665($4_1 + 8 | 0, $118());
       $665($4_1 + 16 | 0, $664(HEAP32[HEAP32[$0 >> 2] >> 2], $974($3_1, HEAP32[$4_1 + 20 >> 2])));
       HEAP32[$6 >> 2] = HEAP32[$4_1 + 16 >> 2];
       $5_1 = 0;
       if (!$115($2_1, $6)) {
        break label$4
       }
       $5_1 = HEAP32[$678($6) + 4 >> 2];
       break label$4;
      }
      $5_1 = 0;
     }
     $2_1 = $5_1;
     $5_1 = $974($3_1, HEAP32[$4_1 + 20 >> 2]) + 20 | 0;
     label$6 : {
      if ($2_1) {
       $983($5_1, $677($4_1 + 8 | 0, $4_1 + 20 | 0, $2_1 + 4 | 0));
       break label$6;
      }
      HEAP32[$4_1 + 16 >> 2] = 0;
      $983($5_1, $677($4_1 + 8 | 0, $4_1 + 20 | 0, $4_1 + 16 | 0));
     }
     $5_1 = HEAP32[$4_1 + 20 >> 2] + 1 | 0;
     HEAP32[$4_1 + 16 >> 2] = $5_1;
     label$8 : {
      if ($5_1 >>> 0 >= $7 >>> 0) {
       break label$8
      }
      while (1) {
       if (!HEAP32[$2_1 >> 2] | (!$2_1 | ($5_1 - HEAP32[$4_1 + 20 >> 2] | 0) + 1 >>> 0 > 512)) {
        break label$8
       }
       $665($4_1 + 8 | 0, $664(HEAP32[$2_1 >> 2], Math_imul($5_1, 20) + $1_1 | 0));
       HEAP32[$6 >> 2] = HEAP32[$4_1 + 8 >> 2];
       if ($667($665($4_1 + 8 | 0, $118()), $6)) {
        break label$8
       }
       $2_1 = HEAP32[$678($6) + 4 >> 2];
       if (HEAP32[$2_1 + 4 >> 2]) {
        $983($974($3_1, HEAP32[$4_1 + 20 >> 2]) + 20 | 0, $677($4_1 + 8 | 0, $4_1 + 16 | 0, $2_1 + 4 | 0))
       }
       $5_1 = HEAP32[$4_1 + 16 >> 2] + 1 | 0;
       HEAP32[$4_1 + 16 >> 2] = $5_1;
       if ($5_1 >>> 0 < $7 >>> 0) {
        continue
       }
       break;
      };
     }
     $2_1 = HEAP32[$4_1 + 20 >> 2] + 1 | 0;
     HEAP32[$4_1 + 20 >> 2] = $2_1;
     if ($2_1 >>> 0 < $7 >>> 0) {
      continue
     }
     break;
    };
   }
   global$0 = $4_1 + 32 | 0;
   return;
  }
  fimport$5(3214, 2421, 85, 3228);
  abort();
 }
 
 function $967($0, $1_1) {
  $802($0, $29($1_1));
 }
 
 function $972($0) {
  return HEAP32[$0 + 128 >> 2] + (HEAP32[$0 + 132 >> 2] << 3) | 0;
 }
 
 function $973($0) {
  return (HEAP32[$0 + 4 >> 2] - HEAP32[$0 >> 2] | 0) / 184 | 0;
 }
 
 function $974($0, $1_1) {
  return HEAP32[$0 >> 2] + Math_imul($1_1, 184) | 0;
 }
 
 function $976($0, $1_1) {
  var $2_1 = 0;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$0 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0 + 4 >> 2] = $2_1;
  $1047($1_1 + 4 | 0);
 }
 
 function $977($0, $1_1) {
  if (HEAP32[$0 + 4 >> 2] != HEAP32[$130($0) >> 2]) {
   $1048($0, $1_1);
   return;
  }
  $1049($0, $1_1);
 }
 
 function $978($0) {
  $1020($0);
  $973($0);
  $1020($0);
 }
 
 function $981($0, $1_1) {
  var $2_1 = 0;
  $2_1 = $973($0);
  if ($2_1 >>> 0 < $1_1 >>> 0) {
   $984($0, $1_1 - $2_1 | 0);
   return;
  }
  if ($2_1 >>> 0 > $1_1 >>> 0) {
   $1_1 = HEAP32[$0 >> 2] + Math_imul($1_1, 184) | 0;
   $973($0);
   $996($0, $1_1);
   $1020($0);
   $973($0);
  }
 }
 
 function $983($0, $1_1) {
  var $2_1 = 0;
  label$1 : {
   $2_1 = HEAP32[$0 + 136 >> 2];
   if (($2_1 | 0) == HEAP32[$0 + 132 >> 2]) {
    if (!$2_1) {
     break label$1
    }
    $986($0, $2_1 << 1);
   }
   $2_1 = HEAP32[$0 + 132 >> 2];
   HEAP32[$0 + 132 >> 2] = $2_1 + 1;
   $0 = HEAP32[$0 + 128 >> 2] + ($2_1 << 3) | 0;
   HEAP32[$0 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$0 + 4 >> 2] = HEAP32[$1_1 + 4 >> 2];
   return;
  }
  fimport$5(2194, 2147, 82, 2204);
  abort();
 }
 
 function $984($0, $1_1) {
  var $2_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  label$1 : {
   if ((HEAP32[$130($0) >> 2] - HEAP32[$0 + 4 >> 2] | 0) / 184 >>> 0 >= $1_1 >>> 0) {
    $989($0, $1_1);
    break label$1;
   }
   $2_1 = $130($0);
   $2_1 = $992($3_1 + 8 | 0, $991($0, $973($0) + $1_1 | 0), $973($0), $2_1);
   $993($2_1, $1_1);
   $994($0, $2_1);
   $1037($2_1, HEAP32[$2_1 + 4 >> 2]);
   if (HEAP32[$2_1 >> 2]) {
    $416($2_1);
    $0 = HEAP32[$2_1 >> 2];
    HEAP32[$418($2_1) >> 2];
    $2583($0);
   }
  }
  global$0 = $3_1 + 32 | 0;
 }
 
 function $986($0, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  label$1 : {
   $4_1 = HEAP32[$0 + 136 >> 2];
   label$2 : {
    if ($4_1 >>> 0 >= $1_1 >>> 0) {
     break label$2
    }
    $2_1 = $2582($1_1 << 3);
    if (!$2_1) {
     break label$1
    }
    $3_1 = HEAP32[$0 + 128 >> 2];
    HEAP32[$0 + 128 >> 2] = $2_1;
    $2591($2_1, $3_1, $4_1 << 3);
    HEAP32[$0 + 136 >> 2] = $1_1;
    if (($0 | 0) == ($3_1 | 0)) {
     break label$2
    }
    $2583($3_1);
   }
   return;
  }
  fimport$5(2142, 2147, 92, 2186);
  abort();
 }
 
 function $989($0, $1_1) {
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $1_1 = $998($2_1, $0, $1_1);
  if (HEAP32[$1_1 + 4 >> 2] != HEAP32[$1_1 + 8 >> 2]) {
   while (1) {
    $130($0);
    $1015(HEAP32[$1_1 + 4 >> 2]);
    $3_1 = HEAP32[$1_1 + 4 >> 2] + 184 | 0;
    HEAP32[$1_1 + 4 >> 2] = $3_1;
    if (HEAP32[$1_1 + 8 >> 2] != ($3_1 | 0)) {
     continue
    }
    break;
   }
  }
  $406($1_1);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $991($0, $1_1) {
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 + 12 >> 2] = $1_1;
  $1_1 = $1000($0);
  if (HEAPU32[$2_1 + 12 >> 2] <= $1_1 >>> 0) {
   $0 = $1020($0);
   if ($0 >>> 0 < $1_1 >>> 1 >>> 0) {
    HEAP32[$2_1 + 8 >> 2] = $0 << 1;
    $1_1 = HEAP32[$360($2_1 + 8 | 0, $2_1 + 12 | 0) >> 2];
   }
   global$0 = $2_1 + 16 | 0;
   return $1_1;
  }
  $2538();
  abort();
 }
 
 function $992($0, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[$4_1 + 12 >> 2] = 0;
  $415($0 + 12 | 0, $4_1 + 12 | 0, $3_1);
  if ($1_1) {
   $416($0);
   $3_1 = $1_1;
   if (23342213 < $1_1 >>> 0) {
    $338(1572);
    abort();
   }
   $5_1 = $2497(Math_imul($3_1, 184));
  }
  HEAP32[$0 >> 2] = $5_1;
  $2_1 = Math_imul($2_1, 184) + $5_1 | 0;
  HEAP32[$0 + 8 >> 2] = $2_1;
  HEAP32[$0 + 4 >> 2] = $2_1;
  (wasm2js_i32$0 = $418($0), wasm2js_i32$1 = Math_imul($1_1, 184) + $5_1 | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  global$0 = $4_1 + 16 | 0;
  return $0;
 }
 
 function $993($0, $1_1) {
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $1_1 = $1006($2_1, $0 + 8 | 0, $1_1);
  if (HEAP32[$1_1 >> 2] != HEAP32[$1_1 + 4 >> 2]) {
   while (1) {
    $416($0);
    $1015(HEAP32[$1_1 >> 2]);
    $3_1 = HEAP32[$1_1 >> 2] + 184 | 0;
    HEAP32[$1_1 >> 2] = $3_1;
    if (HEAP32[$1_1 + 4 >> 2] != ($3_1 | 0)) {
     continue
    }
    break;
   }
  }
  $1007($1_1);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $994($0, $1_1) {
  var $2_1 = 0;
  $978($0);
  $2_1 = $1_1 + 4 | 0;
  $1008($130($0), HEAP32[$0 >> 2], HEAP32[$0 + 4 >> 2], $2_1);
  $420($0, $2_1);
  $420($0 + 4 | 0, $1_1 + 8 | 0);
  $420($130($0), $418($1_1));
  HEAP32[$1_1 >> 2] = HEAP32[$1_1 + 4 >> 2];
  $973($0);
  $1020($0);
  $1020($0);
 }
 
 function $996($0, $1_1) {
  var $2_1 = 0;
  $2_1 = HEAP32[$0 + 4 >> 2];
  if (($2_1 | 0) != ($1_1 | 0)) {
   while (1) {
    $130($0);
    $2_1 = $2_1 + -184 | 0;
    $1041($2_1);
    if (($1_1 | 0) != ($2_1 | 0)) {
     continue
    }
    break;
   }
  }
  HEAP32[$0 + 4 >> 2] = $1_1;
 }
 
 function $998($0, $1_1, $2_1) {
  HEAP32[$0 >> 2] = $1_1;
  HEAP32[$0 + 4 >> 2] = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$0 + 8 >> 2] = HEAP32[$1_1 + 4 >> 2] + Math_imul($2_1, 184);
  return $0;
 }
 
 function $1000($0) {
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $130($0);
  HEAP32[$1_1 + 12 >> 2] = 23342213;
  HEAP32[$1_1 + 8 >> 2] = 2147483647;
  $0 = HEAP32[$124($1_1 + 12 | 0, $1_1 + 8 | 0) >> 2];
  global$0 = $1_1 + 16 | 0;
  return $0;
 }
 
 function $1006($0, $1_1, $2_1) {
  var $3_1 = 0;
  HEAP32[$0 >> 2] = HEAP32[$1_1 >> 2];
  $3_1 = HEAP32[$1_1 >> 2];
  HEAP32[$0 + 8 >> 2] = $1_1;
  HEAP32[$0 + 4 >> 2] = Math_imul($2_1, 184) + $3_1;
  return $0;
 }
 
 function $1007($0) {
  HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[$0 >> 2];
 }
 
 function $1008($0, $1_1, $2_1, $3_1) {
  if (($1_1 | 0) != ($2_1 | 0)) {
   while (1) {
    $2_1 = $2_1 + -184 | 0;
    $1028(HEAP32[$3_1 >> 2] + -184 | 0, $2_1);
    HEAP32[$3_1 >> 2] = HEAP32[$3_1 >> 2] + -184;
    if (($1_1 | 0) != ($2_1 | 0)) {
     continue
    }
    break;
   }
  }
 }
 
 function $1015($0) {
  $451($0);
  $1016($0 + 20 | 0);
  HEAP32[$0 + 176 >> 2] = 0;
  HEAP32[$0 + 168 >> 2] = 0;
  HEAP32[$0 + 172 >> 2] = 0;
  HEAP32[$0 + 160 >> 2] = 0;
 }
 
 function $1016($0) {
  var $1_1 = 0, $2_1 = 0;
  $2_1 = $0 + 128 | 0;
  $1_1 = $0;
  while (1) {
   $1_1 = $588($1_1) + 8 | 0;
   if (($2_1 | 0) != ($1_1 | 0)) {
    continue
   }
   break;
  };
  $1017($0);
  return $0;
 }
 
 function $1017($0) {
  HEAP32[$0 + 132 >> 2] = 0;
  HEAP32[$0 + 136 >> 2] = 16;
  HEAP32[$0 + 128 >> 2] = $0;
 }
 
 function $1020($0) {
  return (HEAP32[$130($0) >> 2] - HEAP32[$0 >> 2] | 0) / 184 | 0;
 }
 
 function $1028($0, $1_1) {
  var $2_1 = 0;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$0 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0 + 4 >> 2] = $2_1;
  HEAP32[$0 + 16 >> 2] = HEAP32[$1_1 + 16 >> 2];
  $2_1 = HEAP32[$1_1 + 12 >> 2];
  HEAP32[$0 + 8 >> 2] = HEAP32[$1_1 + 8 >> 2];
  HEAP32[$0 + 12 >> 2] = $2_1;
  $1029($0 + 20 | 0, $1_1 + 20 | 0);
  HEAP32[$0 + 176 >> 2] = HEAP32[$1_1 + 176 >> 2];
  $2_1 = HEAP32[$1_1 + 172 >> 2];
  HEAP32[$0 + 168 >> 2] = HEAP32[$1_1 + 168 >> 2];
  HEAP32[$0 + 172 >> 2] = $2_1;
  $2_1 = HEAP32[$1_1 + 164 >> 2];
  HEAP32[$0 + 160 >> 2] = HEAP32[$1_1 + 160 >> 2];
  HEAP32[$0 + 164 >> 2] = $2_1;
 }
 
 function $1029($0, $1_1) {
  var $2_1 = 0, $3_1 = 0;
  $3_1 = $0 + 128 | 0;
  $2_1 = $0;
  while (1) {
   $2_1 = $588($2_1) + 8 | 0;
   if (($3_1 | 0) != ($2_1 | 0)) {
    continue
   }
   break;
  };
  $1017($0);
  $1030($0, $1_1);
 }
 
 function $1030($0, $1_1) {
  var $2_1 = 0, $3_1 = 0;
  $2_1 = $0;
  $3_1 = HEAP32[$0 + 128 >> 2];
  if (($0 | 0) != ($3_1 | 0)) {
   $2583($3_1)
  }
  $1017($2_1);
  HEAP32[$0 + 132 >> 2] = HEAP32[$1_1 + 132 >> 2];
  HEAP32[$0 + 136 >> 2] = HEAP32[$1_1 + 136 >> 2];
  if (HEAP32[$1_1 + 128 >> 2] == ($1_1 | 0)) {
   $0 = $2591($0, $1_1, HEAP32[$0 + 132 >> 2] << 3);
   HEAP32[$0 + 128 >> 2] = $0;
   return;
  }
  $2_1 = $0;
  $0 = $2582(HEAP32[$1_1 + 136 >> 2] << 3);
  HEAP32[$2_1 + 128 >> 2] = $0;
  if ($0) {
   $2591($0, HEAP32[$1_1 + 128 >> 2], HEAP32[$1_1 + 132 >> 2] << 3);
   return;
  }
  fimport$5(2214, 2147, 62, 2219);
  abort();
 }
 
 function $1037($0, $1_1) {
  var $2_1 = 0;
  if (HEAP32[$0 + 8 >> 2] != ($1_1 | 0)) {
   while (1) {
    $416($0);
    $2_1 = HEAP32[$0 + 8 >> 2] + -184 | 0;
    HEAP32[$0 + 8 >> 2] = $2_1;
    $1041($2_1);
    if (HEAP32[$0 + 8 >> 2] != ($1_1 | 0)) {
     continue
    }
    break;
   }
  }
 }
 
 function $1041($0) {
  $1042($0 + 20 | 0);
 }
 
 function $1042($0) {
  var $1_1 = 0;
  $1_1 = $0;
  $0 = HEAP32[$0 + 128 >> 2];
  if (($1_1 | 0) != ($0 | 0)) {
   $2583($0)
  }
 }
 
 function $1046($0) {
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[$1_1 + 8 >> 2] = HEAP32[$0 + 4 >> 2];
  $0 = HEAP32[$1047($1_1 + 8 | 0) >> 2];
  global$0 = $1_1 + 16 | 0;
  return $0;
 }
 
 function $1047($0) {
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + -184;
  return $0;
 }
 
 function $1048($0, $1_1) {
  var $2_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $2_1 = $1050($3_1, $0, 1);
  $1051($130($0), HEAP32[$2_1 + 4 >> 2], $1_1);
  HEAP32[$2_1 + 4 >> 2] = HEAP32[$2_1 + 4 >> 2] + 8;
  $406($2_1);
  global$0 = $3_1 + 16 | 0;
 }
 
 function $1049($0, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  $2_1 = $130($0);
  $4_1 = $2_1;
  $2_1 = $917($3_1 + 8 | 0, $1052($0, $905($0) + 1 | 0), $905($0), $2_1);
  $1051($4_1, HEAP32[$2_1 + 8 >> 2], $1_1);
  HEAP32[$2_1 + 8 >> 2] = HEAP32[$2_1 + 8 >> 2] + 8;
  $918($0, $2_1);
  $919($2_1);
  global$0 = $3_1 + 32 | 0;
 }
 
 function $1050($0, $1_1, $2_1) {
  HEAP32[$0 >> 2] = $1_1;
  HEAP32[$0 + 4 >> 2] = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$0 + 8 >> 2] = HEAP32[$1_1 + 4 >> 2] + ($2_1 << 3);
  return $0;
 }
 
 function $1051($0, $1_1, $2_1) {
  $0 = HEAP32[$2_1 + 4 >> 2];
  HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $0;
 }
 
 function $1052($0, $1_1) {
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 + 12 >> 2] = $1_1;
  $1_1 = $1055($0);
  if (HEAPU32[$2_1 + 12 >> 2] <= $1_1 >>> 0) {
   $0 = $941($0);
   if ($0 >>> 0 < $1_1 >>> 1 >>> 0) {
    HEAP32[$2_1 + 8 >> 2] = $0 << 1;
    $1_1 = HEAP32[$360($2_1 + 8 | 0, $2_1 + 12 | 0) >> 2];
   }
   global$0 = $2_1 + 16 | 0;
   return $1_1;
  }
  $2538();
  abort();
 }
 
 function $1055($0) {
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $130($0);
  HEAP32[$1_1 + 12 >> 2] = 536870911;
  HEAP32[$1_1 + 8 >> 2] = 2147483647;
  $0 = HEAP32[$124($1_1 + 12 | 0, $1_1 + 8 | 0) >> 2];
  global$0 = $1_1 + 16 | 0;
  return $0;
 }
 
 function $1060($0, $1_1) {
  var $2_1 = 0;
  $2_1 = HEAP32[$0 + 4 >> 2];
  if (($2_1 | 0) != ($1_1 | 0)) {
   while (1) {
    $130($0);
    $2_1 = $2_1 + -24 | 0;
    $391($2_1);
    if (($1_1 | 0) != ($2_1 | 0)) {
     continue
    }
    break;
   }
  }
  HEAP32[$0 + 4 >> 2] = $1_1;
 }
 
 function $1064($0) {
  return (HEAP32[$130($0) >> 2] - HEAP32[$0 >> 2] | 0) / 24 | 0;
 }
 
 function $1070($0, $1_1, $2_1, $3_1) {
  if (($1_1 | 0) != ($2_1 | 0)) {
   while (1) {
    $2_1 = $2_1 + -24 | 0;
    $1077($0, HEAP32[$3_1 >> 2] + -24 | 0, $2_1);
    HEAP32[$3_1 >> 2] = HEAP32[$3_1 >> 2] + -24;
    if (($1_1 | 0) != ($2_1 | 0)) {
     continue
    }
    break;
   }
  }
 }
 
 function $1072($0, $1_1) {
  $1064($0);
  $1064($0);
 }
 
 function $1074($0) {
  return (HEAP32[$418($0) >> 2] - HEAP32[$0 >> 2] | 0) / 24 | 0;
 }
 
 function $1077($0, $1_1, $2_1) {
  $1080($1_1, $2_1);
 }
 
 function $1080($0, $1_1) {
  var $2_1 = 0;
  $437($0, $1_1);
  HEAP32[$0 + 20 >> 2] = HEAP32[$1_1 + 20 >> 2];
  $2_1 = HEAP32[$1_1 + 16 >> 2];
  HEAP32[$0 + 12 >> 2] = HEAP32[$1_1 + 12 >> 2];
  HEAP32[$0 + 16 >> 2] = $2_1;
 }
 
 function $1084($0, $1_1) {
  var $2_1 = 0;
  if (HEAP32[$0 + 8 >> 2] != ($1_1 | 0)) {
   while (1) {
    $416($0);
    $2_1 = HEAP32[$0 + 8 >> 2] + -24 | 0;
    HEAP32[$0 + 8 >> 2] = $2_1;
    $391($2_1);
    if (HEAP32[$0 + 8 >> 2] != ($1_1 | 0)) {
     continue
    }
    break;
   }
  }
 }
 
 function $1085($0, $1_1) {
  var $2_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $2_1 = $1088($3_1, $0);
  $1077($130($0), HEAP32[$2_1 + 4 >> 2], $1_1);
  HEAP32[$2_1 + 4 >> 2] = HEAP32[$2_1 + 4 >> 2] + 24;
  $406($2_1);
  global$0 = $3_1 + 16 | 0;
 }
 
 function $1086($0, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  $2_1 = $130($0);
  $4_1 = $2_1;
  $2_1 = $931($3_1 + 8 | 0, $1089($0, $910($0) + 1 | 0), $910($0), $2_1);
  $1077($4_1, HEAP32[$2_1 + 8 >> 2], $1_1);
  HEAP32[$2_1 + 8 >> 2] = HEAP32[$2_1 + 8 >> 2] + 24;
  $932($0, $2_1);
  $933($2_1);
  global$0 = $3_1 + 32 | 0;
 }
 
 function $1088($0, $1_1) {
  HEAP32[$0 >> 2] = $1_1;
  HEAP32[$0 + 4 >> 2] = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$0 + 8 >> 2] = HEAP32[$1_1 + 4 >> 2] + 24;
  return $0;
 }
 
 function $1089($0, $1_1) {
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 + 12 >> 2] = $1_1;
  $1_1 = $1090($0);
  if (HEAPU32[$2_1 + 12 >> 2] <= $1_1 >>> 0) {
   $0 = $1064($0);
   if ($0 >>> 0 < $1_1 >>> 1 >>> 0) {
    HEAP32[$2_1 + 8 >> 2] = $0 << 1;
    $1_1 = HEAP32[$360($2_1 + 8 | 0, $2_1 + 12 | 0) >> 2];
   }
   global$0 = $2_1 + 16 | 0;
   return $1_1;
  }
  $2538();
  abort();
 }
 
 function $1090($0) {
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $130($0);
  HEAP32[$1_1 + 12 >> 2] = 178956970;
  HEAP32[$1_1 + 8 >> 2] = 2147483647;
  $0 = HEAP32[$124($1_1 + 12 | 0, $1_1 + 8 | 0) >> 2];
  global$0 = $1_1 + 16 | 0;
  return $0;
 }
 
 function $1094($0) {
  $1095($0, HEAP32[$0 >> 2]);
 }
 
 function $1095($0, $1_1) {
  var $2_1 = 0;
  $2_1 = HEAP32[$0 + 4 >> 2];
  if (($2_1 | 0) != ($1_1 | 0)) {
   while (1) {
    $130($0);
    $2_1 = $2_1 + -8 | 0;
    if (($2_1 | 0) != ($1_1 | 0)) {
     continue
    }
    break;
   }
  }
  HEAP32[$0 + 4 >> 2] = $1_1;
 }
 
 function $1096($0, $1_1) {
  var $2_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  label$1 : {
   if ((HEAP32[$130($0) >> 2] - HEAP32[$0 + 4 >> 2] | 0) / 12 >>> 0 >= $1_1 >>> 0) {
    $1098($0, $1_1);
    break label$1;
   }
   $2_1 = $130($0);
   $2_1 = $408($3_1 + 8 | 0, $407($0, $98($0) + $1_1 | 0), $98($0), $2_1);
   $1099($2_1, $1_1);
   $409($0, $2_1);
   $410($2_1);
  }
  global$0 = $3_1 + 32 | 0;
 }
 
 function $1098($0, $1_1) {
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $1_1 = $404($2_1, $0, $1_1);
  if (HEAP32[$1_1 + 4 >> 2] != HEAP32[$1_1 + 8 >> 2]) {
   while (1) {
    $130($0);
    $1102(HEAP32[$1_1 + 4 >> 2]);
    $3_1 = HEAP32[$1_1 + 4 >> 2] + 12 | 0;
    HEAP32[$1_1 + 4 >> 2] = $3_1;
    if (HEAP32[$1_1 + 8 >> 2] != ($3_1 | 0)) {
     continue
    }
    break;
   }
  }
  $406($1_1);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1099($0, $1_1) {
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $1_1 = $1101($2_1, $0 + 8 | 0, $1_1);
  if (HEAP32[$1_1 >> 2] != HEAP32[$1_1 + 4 >> 2]) {
   while (1) {
    $416($0);
    $1102(HEAP32[$1_1 >> 2]);
    $3_1 = HEAP32[$1_1 >> 2] + 12 | 0;
    HEAP32[$1_1 >> 2] = $3_1;
    if (HEAP32[$1_1 + 4 >> 2] != ($3_1 | 0)) {
     continue
    }
    break;
   }
  }
  $1007($1_1);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1101($0, $1_1, $2_1) {
  var $3_1 = 0;
  HEAP32[$0 >> 2] = HEAP32[$1_1 >> 2];
  $3_1 = HEAP32[$1_1 >> 2];
  HEAP32[$0 + 8 >> 2] = $1_1;
  HEAP32[$0 + 4 >> 2] = Math_imul($2_1, 12) + $3_1;
  return $0;
 }
 
 function $1102($0) {
  $189($0);
 }
 
 function $1104($0, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0;
  $4_1 = global$0 - 480 | 0;
  global$0 = $4_1;
  $3_1 = $444($4_1 + 144 | 0);
  $2_1 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 16 >> 2]]($2_1) | 0;
  if ($2_1) {
   label$2 : {
    if (!$854($1_1, $3_1)) {
     $1_1 = $107($4_1, 3, 3389, 38);
     $108($1_1, 3441);
     $109($1_1);
     $3($0, 3456);
     break label$2;
    }
    label$4 : {
     $1_1 = $1112($2_1, HEAP32[$3_1 + 320 >> 2], $920($3_1));
     if ($1_1) {
      $1_1 = $1_1 + 88 | 0;
      if (!$772($1_1)) {
       break label$4
      }
     }
     $3($0, $1113($3_1));
     break label$2;
    }
    $2508($0, $1_1);
   }
   $450($3_1);
   global$0 = $4_1 + 480 | 0;
   return;
  }
  fimport$5(3376, 3389, 36, 3431);
  abort();
 }
 
 function $1106($0, $1_1) {
  if (HEAPU32[$0 + 4 >> 2] < HEAPU32[$130($0) >> 2]) {
   $1109($0, $1_1);
   return;
  }
  $1110($0, $1_1);
 }
 
 function $1107($0) {
  $2512($0 + 12 | 0);
  $2512($0);
 }
 
 function $1109($0, $1_1) {
  var $2_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $2_1 = $1088($3_1, $0);
  $1115($130($0), HEAP32[$2_1 + 4 >> 2], $1_1);
  HEAP32[$2_1 + 4 >> 2] = HEAP32[$2_1 + 4 >> 2] + 24;
  $406($2_1);
  global$0 = $3_1 + 16 | 0;
 }
 
 function $1110($0, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  $2_1 = $130($0);
  $4_1 = $2_1;
  $2_1 = $931($3_1 + 8 | 0, $1089($0, $910($0) + 1 | 0), $910($0), $2_1);
  $1115($4_1, HEAP32[$2_1 + 8 >> 2], $1_1);
  HEAP32[$2_1 + 8 >> 2] = HEAP32[$2_1 + 8 >> 2] + 24;
  $1118($0, $2_1);
  $1139($2_1, HEAP32[$2_1 + 4 >> 2]);
  if (HEAP32[$2_1 >> 2]) {
   $416($2_1);
   $0 = HEAP32[$2_1 >> 2];
   $1074($2_1);
   $2583($0);
  }
  global$0 = $3_1 + 32 | 0;
 }
 
 function $1112($0, $1_1, $2_1) {
  return $1143(HEAP32[$0 + 36 >> 2], $1_1, $2_1);
 }
 
 function $1113($0) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  label$1 : {
   if (!HEAP32[$0 + 324 >> 2]) {
    break label$1
   }
   while (1) {
    if ($2_1 >>> 0 >= HEAP32[$0 + 324 >> 2] >>> 1 >>> 0) {
     break label$1
    }
    label$4 : {
     if (HEAPU32[$448($0, $1_1) >> 2] > 127) {
      break label$4
     }
     $2_1 = $2_1 + 1 | 0;
     if (HEAPU32[$448($0, $1_1) >> 2] < 48) {
      break label$4
     }
     $3_1 = (HEAPU32[$448($0, $1_1) >> 2] < 58) + $3_1 | 0;
    }
    $1_1 = $1_1 + 1 | 0;
    if ($1_1 >>> 0 < HEAPU32[$0 + 324 >> 2]) {
     continue
    }
    break;
   };
  }
  return $2_1 ? (($2_1 | 0) == ($3_1 | 0) ? 3458 : 3460) : 3456;
 }
 
 function $1115($0, $1_1, $2_1) {
  $437($1_1, $2_1);
  $437($1_1 + 12 | 0, $2_1 + 12 | 0);
 }
 
 function $1118($0, $1_1) {
  var $2_1 = 0;
  $62($0);
  $2_1 = $1_1 + 4 | 0;
  $1129($130($0), HEAP32[$0 >> 2], HEAP32[$0 + 4 >> 2], $2_1);
  $420($0, $2_1);
  $420($0 + 4 | 0, $1_1 + 8 | 0);
  $420($130($0), $418($1_1));
  HEAP32[$1_1 >> 2] = HEAP32[$1_1 + 4 >> 2];
  $1072($0, $910($0));
 }
 
 function $1129($0, $1_1, $2_1, $3_1) {
  if (($1_1 | 0) != ($2_1 | 0)) {
   while (1) {
    $2_1 = $2_1 + -24 | 0;
    $1115($0, HEAP32[$3_1 >> 2] + -24 | 0, $2_1);
    HEAP32[$3_1 >> 2] = HEAP32[$3_1 >> 2] + -24;
    if (($1_1 | 0) != ($2_1 | 0)) {
     continue
    }
    break;
   }
  }
 }
 
 function $1139($0, $1_1) {
  var $2_1 = 0;
  if (HEAP32[$0 + 8 >> 2] != ($1_1 | 0)) {
   while (1) {
    $416($0);
    $2_1 = HEAP32[$0 + 8 >> 2] + -24 | 0;
    HEAP32[$0 + 8 >> 2] = $2_1;
    $1107($2_1);
    if (HEAP32[$0 + 8 >> 2] != ($1_1 | 0)) {
     continue
    }
    break;
   }
  }
 }
 
 function $1143($0, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  label$1 : {
   if (($1_1 | 0) == ($2_1 | 0)) {
    break label$1
   }
   $0 = HEAP32[$0 >> 2];
   $4_1 = $181($3_1 + 24 | 0);
   while (1) {
    if (!HEAP32[$0 >> 2]) {
     break label$1
    }
    $665($3_1 + 16 | 0, $664(HEAP32[$0 >> 2], $1_1));
    HEAP32[$4_1 >> 2] = HEAP32[$3_1 + 16 >> 2];
    if ($667($665($3_1 + 8 | 0, $118()), $4_1)) {
     break label$1
    }
    $0 = HEAP32[$678($4_1) + 4 >> 2];
    $1_1 = $1_1 + 20 | 0;
    if (($2_1 | 0) != ($1_1 | 0)) {
     continue
    }
    break;
   };
   $5_1 = HEAP32[$0 + 4 >> 2];
  }
  global$0 = $3_1 + 32 | 0;
  return $5_1;
 }
 
 function $1144($0) {
  $0 = $0 | 0;
  $2583($21($0));
 }
 
 function $1145($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = $0;
  $0 = $26($3_1);
  $1146($4_1, $1_1, $0);
  $897($0, $2_1);
  $58($0);
  global$0 = $3_1 + 16 | 0;
 }
 
 function $1146($0, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 368 | 0;
  global$0 = $3_1;
  $5_1 = $898($3_1 + 24 | 0, $0 + 4 | 0, $1_1);
  $4_1 = $26($3_1 + 8 | 0);
  $900($4_1, $100($1_1) >>> 1 | 0);
  if ($901($5_1)) {
   while (1) {
    $902($3_1, $5_1);
    $1156($0, HEAP32[$3_1 >> 2], HEAP32[$3_1 + 4 >> 2], $4_1);
    if ($901($5_1)) {
     continue
    }
    break;
   }
  }
  $904($2_1);
  $906($2_1, $905($4_1));
  $907($1_1, $4_1, $2_1);
  $908($4_1);
  $909($5_1);
  global$0 = $3_1 + 368 | 0;
 }
 
 function $1156($0, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = 0, $6 = 0, $7 = 0, $8 = 0, $9_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  label$1 : {
   if (($1_1 | 0) == ($2_1 | 0)) {
    $4_1 = $1_1;
    break label$1;
   }
   $4_1 = $1_1;
   while (1) {
    $6 = $2_1;
    label$4 : {
     if (HEAPU32[$1_1 >> 2] <= 127) {
      if (($1_1 | 0) != ($4_1 | 0)) {
       $1157($0, $4_1, $1_1, $3_1)
      }
      $7 = $3_1;
      $8 = $5_1 + 8 | 0;
      $9_1 = $1_1;
      $4_1 = $1158($1_1, $2_1);
      if (($4_1 | 0) == ($1_1 | 0)) {
       $4_1 = $1159($1_1, $2_1);
       $4_1 = ($1_1 | 0) == ($4_1 | 0) ? $4_1 + 20 | 0 : $4_1;
      }
      $977($7, $458($8, $9_1, $4_1 + -20 | 0));
      $1_1 = $4_1;
      break label$4;
     }
     $1_1 = $1_1 + 20 | 0;
    }
    if (($6 | 0) != ($1_1 | 0)) {
     continue
    }
    break;
   };
  }
  if (($1_1 | 0) != ($4_1 | 0)) {
   $1157($0, $4_1, $1_1, $3_1)
  }
  global$0 = $5_1 + 16 | 0;
 }
 
 function $1157($0, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = 0, $6 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  $5_1 = $2_1;
  $2_1 = $26($4_1 + 16 | 0);
  $1161($0, $1_1, $5_1, $2_1);
  if ($133($2_1)) {
   $6 = $1_1 + 20 | 0;
   $0 = 0;
   while (1) {
    if (HEAP8[$530($2_1, $0) | 0] & 1) {
     $5_1 = $1_1;
     $1_1 = Math_imul($0, 20) + $6 | 0;
     $977($3_1, $458($4_1 + 8 | 0, $5_1, $1_1 + -20 | 0));
    }
    $0 = $0 + 1 | 0;
    if ($0 >>> 0 < $133($2_1) >>> 0) {
     continue
    }
    break;
   };
  }
  $92($2_1);
  global$0 = $4_1 + 32 | 0;
 }
 
 function $1158($0, $1_1) {
  var $2_1 = 0;
  label$1 : {
   if ((HEAP32[$0 >> 2] & -33) + -65 >>> 0 > 25) {
    break label$1
   }
   while (1) {
    $0 = $0 + 20 | 0;
    if (($1_1 | 0) == ($0 | 0)) {
     break label$1
    }
    $2_1 = HEAP32[$0 >> 2];
    if ($2_1 + -48 >>> 0 < 10 | ($2_1 & -33) + -65 >>> 0 < 26) {
     continue
    }
    break;
   };
  }
  return $0;
 }
 
 function $1159($0, $1_1) {
  var $2_1 = 0;
  label$1 : {
   if (HEAP32[$0 >> 2] + -48 >>> 0 > 9) {
    break label$1
   }
   while (1) {
    $0 = $0 + 20 | 0;
    if (($1_1 | 0) == ($0 | 0)) {
     break label$1
    }
    $2_1 = HEAP32[$0 >> 2];
    if (($2_1 | 0) == 46 | $2_1 + -48 >>> 0 < 10) {
     continue
    }
    break;
   };
  }
  return $0;
 }
 
 function $1161($0, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9_1 = 0, $10_1 = 0.0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14 = 0, $15 = 0, wasm2js_i32$0 = 0, wasm2js_f64$0 = 0.0, wasm2js_i32$1 = 0;
  $12_1 = global$0 - 32 | 0;
  global$0 = $12_1;
  $4_1 = $12_1 + 16 | 0;
  $36($4_1);
  $13_1 = $2_1 - $1_1 | 0;
  $6 = ($13_1 | 0) / 20 | 0;
  $5_1 = $6 << 2;
  $2_1 = $5_1;
  if ($2_1) {
   $134($4_1, $2_1);
   $1172($4_1, $2_1);
  }
  $9_1 = $4_1;
  $2_1 = 0;
  $4_1 = $12_1;
  $36($4_1);
  if ($5_1) {
   $1174($4_1, $5_1);
   $1175($4_1, $5_1);
  }
  while (1) {
   $5_1 = HEAP32[$0 + 24 >> 2];
   $10_1 = HEAPF64[($5_1 + ($2_1 << 3) | 0) + 8 >> 3];
   $7 = $1165(HEAP32[$530($5_1 + 248 | 0, $2_1) >> 2], HEAP32[$1_1 >> 2]);
   $5_1 = Math_imul($2_1, $6);
   (wasm2js_i32$0 = $934($4_1, $5_1), wasm2js_f64$0 = $10_1 + $7), HEAPF64[wasm2js_i32$0 >> 3] = wasm2js_f64$0;
   (wasm2js_i32$0 = $530($9_1, $5_1), wasm2js_i32$1 = -1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
   $2_1 = $2_1 + 1 | 0;
   if (($2_1 | 0) != 4) {
    continue
   }
   break;
  };
  if ($6 >>> 0 >= 2) {
   $5_1 = 1;
   while (1) {
    $14 = $5_1 + -1 | 0;
    $15 = Math_imul($5_1, 20) + $1_1 | 0;
    $8 = 0;
    while (1) {
     $11_1 = Math_imul($6, $8) + $5_1 | 0;
     $2_1 = $934($4_1, $11_1);
     HEAP32[$2_1 >> 2] = 1548240741;
     HEAP32[$2_1 + 4 >> 2] = -724781509;
     (wasm2js_i32$0 = $530($9_1, $11_1), wasm2js_i32$1 = 1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
     $10_1 = $1165(HEAP32[$530(HEAP32[$0 + 24 >> 2] + 248 | 0, $8) >> 2], HEAP32[$15 >> 2]);
     $2_1 = 0;
     while (1) {
      $7 = $10_1 + (HEAPF64[$934($4_1, Math_imul($2_1, $6) + $14 | 0) >> 3] + HEAPF64[((HEAP32[$0 + 24 >> 2] + ($2_1 << 5) | 0) + ($8 << 3) | 0) + 40 >> 3]);
      if (!!($7 > HEAPF64[$934($4_1, $11_1) >> 3])) {
       (wasm2js_i32$0 = $934($4_1, $11_1), wasm2js_f64$0 = $7), HEAPF64[wasm2js_i32$0 >> 3] = wasm2js_f64$0;
       (wasm2js_i32$0 = $530($9_1, $11_1), wasm2js_i32$1 = $2_1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
      }
      $2_1 = $2_1 + 1 | 0;
      if (($2_1 | 0) != 4) {
       continue
      }
      break;
     };
     $8 = $8 + 1 | 0;
     if (($8 | 0) != 4) {
      continue
     }
     break;
    };
    $5_1 = $5_1 + 1 | 0;
    if (($5_1 | 0) != ($6 | 0)) {
     continue
    }
    break;
   };
  }
  $2_1 = $6 + -1 | 0;
  $10_1 = HEAPF64[$934($4_1, $6 + $2_1 | 0) >> 3];
  $7 = HEAPF64[$934($4_1, Math_imul($6, 3) + $2_1 | 0) >> 3];
  $1166($3_1, $6);
  if (($13_1 | 0) >= 1) {
   $0 = $10_1 >= $7 ? 1 : 3;
   while (1) {
    (wasm2js_i32$0 = $530($3_1, $2_1), wasm2js_i32$1 = $0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    $1_1 = ($2_1 | 0) > 0;
    $0 = HEAP32[$530($9_1, Math_imul($0, $6) + $2_1 | 0) >> 2];
    $2_1 = $2_1 + -1 | 0;
    if ($1_1) {
     continue
    }
    break;
   };
  }
  $938($4_1);
  $1182($4_1);
  $92($9_1);
  global$0 = $12_1 + 32 | 0;
 }
 
 function $1165($0, $1_1) {
  var $2_1 = 0, $3_1 = 0.0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3_1 = -3.14e+100;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 + 12 >> 2] = $1_1;
  (wasm2js_i32$0 = $2_1, wasm2js_i32$1 = $664($0, $2_1 + 12 | 0)), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $2_1, wasm2js_i32$1 = $118()), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  if (!$667($2_1 + 8 | 0, $2_1)) {
   $3_1 = HEAPF64[$678($2_1 + 8 | 0) + 8 >> 3]
  }
  global$0 = $2_1 + 16 | 0;
  return $3_1;
 }
 
 function $1166($0, $1_1) {
  var $2_1 = 0;
  $2_1 = $133($0);
  if ($2_1 >>> 0 < $1_1 >>> 0) {
   $1179($0, $1_1 - $2_1 | 0);
   return;
  }
  if ($2_1 >>> 0 > $1_1 >>> 0) {
   $1_1 = HEAP32[$0 >> 2] + ($1_1 << 2) | 0;
   $2_1 = $133($0);
   $727($0, $1_1);
   $1227($0, $2_1);
  }
 }
 
 function $1172($0, $1_1) {
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $1_1 = $631($2_1, $0, $1_1);
  if (HEAP32[$1_1 + 4 >> 2] != HEAP32[$1_1 + 8 >> 2]) {
   while (1) {
    $130($0);
    $1198(HEAP32[$1_1 + 4 >> 2]);
    $3_1 = HEAP32[$1_1 + 4 >> 2] + 4 | 0;
    HEAP32[$1_1 + 4 >> 2] = $3_1;
    if (HEAP32[$1_1 + 8 >> 2] != ($3_1 | 0)) {
     continue
    }
    break;
   }
  }
  $406($1_1);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1174($0, $1_1) {
  var $2_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  if ($1055($0) >>> 0 < $1_1 >>> 0) {
   $2538();
   abort();
  }
  $130($0);
  $2_1 = $1_1;
  if (536870911 < $2_1 >>> 0) {
   $338(1572);
   abort();
  }
  $2_1 = $2497($2_1 << 3);
  HEAP32[$0 >> 2] = $2_1;
  HEAP32[$0 + 4 >> 2] = $2_1;
  (wasm2js_i32$0 = $130($0), wasm2js_i32$1 = ($1_1 << 3) + $2_1 | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  $947($0, 0);
 }
 
 function $1175($0, $1_1) {
  var $2_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $1_1 = $1050($3_1, $0, $1_1);
  if (HEAP32[$1_1 + 4 >> 2] != HEAP32[$1_1 + 8 >> 2]) {
   while (1) {
    $130($0);
    $2_1 = HEAP32[$1_1 + 4 >> 2];
    HEAP32[$2_1 >> 2] = 0;
    HEAP32[$2_1 + 4 >> 2] = 0;
    $2_1 = HEAP32[$1_1 + 4 >> 2] + 8 | 0;
    HEAP32[$1_1 + 4 >> 2] = $2_1;
    if (HEAP32[$1_1 + 8 >> 2] != ($2_1 | 0)) {
     continue
    }
    break;
   }
  }
  $406($1_1);
  global$0 = $3_1 + 16 | 0;
 }
 
 function $1179($0, $1_1) {
  var $2_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  label$1 : {
   if (HEAP32[$130($0) >> 2] - HEAP32[$0 + 4 >> 2] >> 2 >>> 0 >= $1_1 >>> 0) {
    $1172($0, $1_1);
    break label$1;
   }
   $2_1 = $130($0);
   $2_1 = $635($3_1 + 8 | 0, $634($0, $133($0) + $1_1 | 0), $133($0), $2_1);
   $1223($2_1, $1_1);
   $636($0, $2_1);
   $637($2_1);
  }
  global$0 = $3_1 + 32 | 0;
 }
 
 function $1182($0) {
  var $1_1 = 0;
  if (HEAP32[$0 >> 2]) {
   $1094($0);
   $130($0);
   $1_1 = HEAP32[$0 >> 2];
   $941($0);
   $2583($1_1);
  }
 }
 
 function $1198($0) {
  HEAP32[$0 >> 2] = 0;
 }
 
 function $1223($0, $1_1) {
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $1_1 = $1235($2_1, $0 + 8 | 0, $1_1);
  if (HEAP32[$1_1 >> 2] != HEAP32[$1_1 + 4 >> 2]) {
   while (1) {
    $416($0);
    $1198(HEAP32[$1_1 >> 2]);
    $3_1 = HEAP32[$1_1 >> 2] + 4 | 0;
    HEAP32[$1_1 >> 2] = $3_1;
    if (HEAP32[$1_1 + 4 >> 2] != ($3_1 | 0)) {
     continue
    }
    break;
   }
  }
  $1007($1_1);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1227($0, $1_1) {
  $651($0);
  $133($0);
 }
 
 function $1235($0, $1_1, $2_1) {
  var $3_1 = 0;
  HEAP32[$0 >> 2] = HEAP32[$1_1 >> 2];
  $3_1 = HEAP32[$1_1 >> 2];
  HEAP32[$0 + 8 >> 2] = $1_1;
  HEAP32[$0 + 4 >> 2] = ($2_1 << 2) + $3_1;
  return $0;
 }
 
 function $1254($0) {
  $0 = $0 | 0;
  $2583($20($0));
 }
 
 function $1255($0) {
  $0 = $0 | 0;
  return HEAP32[($0 + 24 | 0) + 24 >> 2];
 }
 
 function $1256($0, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = 0, $6 = 0;
  $4_1 = global$0 - 368 | 0;
  global$0 = $4_1;
  $6 = $898($4_1 + 24 | 0, $0 + 4 | 0, $1_1);
  $5_1 = $26($4_1 + 8 | 0);
  $900($5_1, $100($1_1) >>> 1 | 0);
  if ($901($6)) {
   while (1) {
    $902($4_1, $6);
    $1257($0, HEAP32[$4_1 >> 2], HEAP32[$4_1 + 4 >> 2], $5_1, $3_1);
    if ($901($6)) {
     continue
    }
    break;
   }
  }
  $904($2_1);
  $906($2_1, $905($5_1));
  $907($1_1, $5_1, $2_1);
  $908($5_1);
  $909($6);
  global$0 = $4_1 + 368 | 0;
 }
 
 function $1257($0, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = 0, $6 = 0, $7 = 0, $8 = 0;
  $6 = global$0 - 32 | 0;
  global$0 = $6;
  label$1 : {
   label$2 : {
    if (!$4_1) {
     $903($0 + 24 | 0, $1_1, $2_1, $3_1);
     break label$2;
    }
    $4_1 = $26($6 + 16 | 0);
    if ($2_1 >>> 0 < $1_1 >>> 0) {
     break label$1
    }
    $7 = ($2_1 - $1_1 | 0) / 20 | 0;
    $900($4_1, $7);
    $8 = $0 + 24 | 0;
    $903($8, $1_1, $2_1, $4_1);
    $5_1 = $26($6);
    $900($5_1, $7);
    if ($905($4_1)) {
     $7 = $0 + 56 | 0;
     $0 = 0;
     while (1) {
      label$6 : {
       label$7 : {
        if (HEAP32[$934($4_1, $0) >> 2] == HEAP32[$934($4_1, $0) + 4 >> 2]) {
         if (HEAP32[$934($4_1, $0) >> 2] != HEAP32[$934($4_1, $0) + 4 >> 2]) {
          break label$7
         }
         if (!$1258($8, HEAP32[$934($4_1, $0) >> 2])) {
          break label$7
         }
        }
        $977($3_1, $934($4_1, $0));
        break label$6;
       }
       $1_1 = $0;
       label$9 : {
        if ($0 >>> 0 >= $905($4_1) >>> 0) {
         break label$9
        }
        while (1) {
         if (HEAP32[$934($4_1, $1_1) >> 2] != HEAP32[$934($4_1, $1_1) + 4 >> 2]) {
          break label$9
         }
         if ($1258($8, HEAP32[$934($4_1, $1_1) >> 2])) {
          break label$9
         }
         $1_1 = $1_1 + 1 | 0;
         if ($1_1 >>> 0 < $905($4_1) >>> 0) {
          continue
         }
         break;
        };
       }
       label$11 : {
        label$12 : {
         $2_1 = $1_1 + -1 | 0;
         if ($2_1 >>> 0 >= $0 >>> 0) {
          $1156($7, HEAP32[$934($4_1, $0) >> 2], HEAP32[$934($4_1, $2_1) >> 2] + 20 | 0, $5_1);
          $1_1 = 0;
          if ($905($5_1)) {
           break label$12
          }
          break label$11;
         }
         fimport$5(3644, 3597, 72, 3640);
         abort();
        }
        while (1) {
         $977($3_1, $934($5_1, $1_1));
         $1_1 = $1_1 + 1 | 0;
         if ($1_1 >>> 0 < $905($5_1) >>> 0) {
          continue
         }
         break;
        };
       }
       $905($5_1);
       $1094($5_1);
       $941($5_1);
       $905($5_1);
       $0 = $2_1;
      }
      $0 = $0 + 1 | 0;
      if ($0 >>> 0 < $905($4_1) >>> 0) {
       continue
      }
      break;
     };
    }
    $908($5_1);
    $908($4_1);
   }
   global$0 = $6 + 32 | 0;
   return;
  }
  fimport$5(3584, 3597, 52, 3640);
  abort();
 }
 
 function $1258($0, $1_1) {
  return $921(HEAP32[$0 + 24 >> 2] + 80 | 0, $1_1);
 }
 
 function $1262($0) {
  $0 = $0 | 0;
  $2583($19($0));
 }
 
 function $1263($0, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 368 | 0;
  global$0 = $3_1;
  $5_1 = $898($3_1 + 24 | 0, $0 + 4 | 0, $1_1);
  $4_1 = $26($3_1 + 8 | 0);
  $900($4_1, $100($1_1) >>> 1 | 0);
  if ($901($5_1)) {
   while (1) {
    $902($3_1, $5_1);
    $1264($0, HEAP32[$3_1 >> 2], HEAP32[$3_1 + 4 >> 2], $4_1);
    if ($901($5_1)) {
     continue
    }
    break;
   }
  }
  $904($2_1);
  $906($2_1, $905($4_1));
  $907($1_1, $4_1, $2_1);
  $908($4_1);
  $909($5_1);
  global$0 = $3_1 + 368 | 0;
 }
 
 function $1264($0, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = 0, $6 = 0, $7 = 0, $8 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0;
  $5_1 = global$0 - 176 | 0;
  global$0 = $5_1;
  $11_1 = $1016($5_1 + 32 | 0);
  if (HEAP32[$0 + 24 >> 2]) {
   $4_1 = $26($5_1 + 16 | 0);
   $923(HEAP32[$0 + 24 >> 2], $1_1, $2_1, $4_1);
   if ($973($4_1)) {
    $0 = 0;
    while (1) {
     label$4 : {
      if (!HEAP32[($974($4_1, $0) + 20 | 0) + 132 >> 2]) {
       break label$4
      }
      $8 = Math_imul($0, 20) + $1_1 | 0;
      $2_1 = 0;
      while (1) {
       $6 = HEAP32[$1265($974($4_1, $0) + 20 | 0, $2_1) >> 2];
       if ($6 >>> 0 < $973($4_1) >>> 0) {
        $9_1 = HEAP32[$1265($974($4_1, $0) + 20 | 0, $2_1) + 4 >> 2];
        label$7 : {
         if (!$9_1) {
          if (HEAP32[($974($4_1, $0) + 20 | 0) + 132 >> 2] != 1 | $7 >>> 0 > $0 >>> 0) {
           break label$7
          }
          $977($3_1, $458($5_1 + 8 | 0, $8, Math_imul($6, 20) + $1_1 | 0));
          break label$7;
         }
         $10_1 = HEAP32[$9_1 + 68 >> 2];
         if ($10_1 >>> 0 <= 1) {
          if (HEAP32[($974($4_1, $0) + 20 | 0) + 132 >> 2] != 1 | $7 >>> 0 > $0 >>> 0) {
           break label$7
          }
         }
         $977($3_1, $458($5_1 + 8 | 0, $8, Math_imul($6, 20) + $1_1 | 0));
        }
        $6 = $0 + $10_1 | 0;
        $7 = $6 >>> 0 > $7 >>> 0 ? $6 : $7;
        $2_1 = $2_1 + 1 | 0;
        if ($2_1 >>> 0 < HEAPU32[($974($4_1, $0) + 20 | 0) + 132 >> 2]) {
         continue
        }
        break label$4;
       }
       break;
      };
      fimport$5(3772, 3676, 68, 3640);
      abort();
     }
     $0 = $0 + 1 | 0;
     if ($0 >>> 0 < $973($4_1) >>> 0) {
      continue
     }
     break;
    };
   }
   $926($4_1);
   $1042($11_1);
   global$0 = $5_1 + 176 | 0;
   return;
  }
  fimport$5(2820, 3676, 62, 3640);
  abort();
 }
 
 function $1265($0, $1_1) {
  return HEAP32[$0 + 128 >> 2] + ($1_1 << 3) | 0;
 }
 
 function $1266($0) {
  $0 = $0 | 0;
  $2583($18($0));
 }
 
 function $1267($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $50($0, $1_1, $2_1, 1);
 }
 
 function $1268($0, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = 0, $6 = 0, $7 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $5_1 = global$0 - 48 | 0;
  global$0 = $5_1;
  $6 = $26($5_1 + 32 | 0);
  $1257($0 + 24 | 0, $1_1, $2_1, $6, $4_1);
  $7 = $26($5_1 + 16 | 0);
  (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $29($6)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  $1_1 = $780($5_1 + 8 | 0, $5_1);
  (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $30($6)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  if ($31($1_1, $5_1)) {
   while (1) {
    label$3 : {
     if ($1272(HEAP32[$1_1 >> 2]) >>> 0 < 3) {
      break label$3
     }
     if ($1272(HEAP32[$1_1 >> 2]) >>> 0 < 2) {
      break label$3
     }
     $4_1 = 0;
     $2_1 = 1;
     while (1) {
      $4_1 = Math_imul($4_1, 20);
      $4_1 = $458($5_1, $4_1 + HEAP32[HEAP32[$1_1 >> 2] >> 2] | 0, ($4_1 + HEAP32[HEAP32[$1_1 >> 2] >> 2] | 0) + 20 | 0);
      if ($1112(HEAP32[$0 + 116 >> 2], HEAP32[$5_1 >> 2], HEAP32[$5_1 + 4 >> 2] + 20 | 0)) {
       $977($3_1, $4_1)
      }
      $4_1 = $2_1;
      $2_1 = $4_1 + 1 | 0;
      if ($2_1 >>> 0 < $1272(HEAP32[$1_1 >> 2]) >>> 0) {
       continue
      }
      break;
     };
    }
    label$6 : {
     if ($1272(HEAP32[$1_1 >> 2]) >>> 0 < 4) {
      break label$6
     }
     $2_1 = 0;
     if ($1272(HEAP32[$1_1 >> 2]) >>> 0 < 3) {
      break label$6
     }
     while (1) {
      $4_1 = Math_imul($2_1, 20);
      $4_1 = $458($5_1, $4_1 + HEAP32[HEAP32[$1_1 >> 2] >> 2] | 0, ($4_1 + HEAP32[HEAP32[$1_1 >> 2] >> 2] | 0) + 40 | 0);
      if ($1112(HEAP32[$0 + 116 >> 2], HEAP32[$5_1 >> 2], HEAP32[$5_1 + 4 >> 2] + 20 | 0)) {
       $977($3_1, $4_1)
      }
      $4_1 = $2_1 + 3 | 0;
      $2_1 = $2_1 + 1 | 0;
      if ($4_1 >>> 0 < $1272(HEAP32[$1_1 >> 2]) >>> 0) {
       continue
      }
      break;
     };
    }
    $977($3_1, HEAP32[$1_1 >> 2]);
    HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] + 8;
    (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $30($6)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    if ($31($1_1, $5_1)) {
     continue
    }
    break;
   }
  }
  $908($7);
  $908($6);
  global$0 = $5_1 + 48 | 0;
 }
 
 function $1272($0) {
  return ((HEAP32[$0 + 4 >> 2] - HEAP32[$0 >> 2] | 0) / 20 | 0) + 1 | 0;
 }
 
 function $1277($0) {
  var $1_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $1_1 = global$0 - 32 | 0;
  global$0 = $1_1;
  (wasm2js_i32$0 = $1_1, wasm2js_i32$1 = $804($0)), HEAP32[wasm2js_i32$0 + 16 >> 2] = wasm2js_i32$1;
  $1295($1_1 + 24 | 0, $0, $1_1 + 16 | 0, $1_1 + 8 | 0);
  $0 = $678($1_1 + 24 | 0);
  global$0 = $1_1 + 32 | 0;
  return $0 + 16 | 0;
 }
 
 function $1278($0, $1_1) {
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $1345($2_1 + 8 | 0, $1_1, $1_1);
  $523($0, $2_1 + 8 | 0);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1295($0, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = 0, $6 = 0, $7 = 0, $8 = 0, $9_1 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  $8 = $1298($418(19604), $1_1);
  $5_1 = $528(19604);
  HEAP8[$4_1 + 31 | 0] = 0;
  label$1 : {
   label$2 : {
    if (!$5_1) {
     break label$2
    }
    $7 = $529($8, $5_1);
    $6 = HEAP32[$530(19604, $7) >> 2];
    if (!$6) {
     break label$2
    }
    while (1) {
     $6 = HEAP32[$6 >> 2];
     if (!$6) {
      break label$2
     }
     if (($8 | 0) != HEAP32[$6 + 4 >> 2]) {
      if (($529(HEAP32[$6 + 4 >> 2], $5_1) | 0) != ($7 | 0)) {
       break label$2
      }
     }
     if (!$1303($531(19604), $6 + 8 | 0, $1_1)) {
      continue
     }
     break;
    };
    break label$1;
   }
   $1304($4_1 + 16 | 0, $8, 2789, $2_1, $3_1);
   $1_1 = HEAP32[$418(19604) >> 2];
   if (!(Math_fround(HEAPF32[$531(19604) >> 2] * Math_fround($5_1 >>> 0)) < Math_fround($1_1 + 1 >>> 0) ^ 1 ? $5_1 : 0)) {
    (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $537($5_1) ^ 1 | $5_1 << 1), HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
    $1_1 = $4_1;
    $9_1 = Math_fround(Math_ceil(Math_fround(Math_fround(HEAP32[$418(19604) >> 2] + 1 >>> 0) / HEAPF32[$531(19604) >> 2])));
    label$7 : {
     if ($9_1 < Math_fround(4294967296.0) & $9_1 >= Math_fround(0.0)) {
      $2_1 = ~~$9_1 >>> 0;
      break label$7;
     }
     $2_1 = 0;
    }
    HEAP32[$1_1 + 8 >> 2] = $2_1;
    $1305(HEAP32[$360($4_1 + 12 | 0, $4_1 + 8 | 0) >> 2]);
    $5_1 = $528(19604);
    $7 = $529($8, $5_1);
   }
   $1_1 = HEAP32[$530(19604, $7) >> 2];
   label$9 : {
    if (!$1_1) {
     HEAP32[HEAP32[$4_1 + 16 >> 2] >> 2] = HEAP32[4903];
     HEAP32[4903] = HEAP32[$4_1 + 16 >> 2];
     (wasm2js_i32$0 = $530(19604, $7), wasm2js_i32$1 = 19612), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
     if (!HEAP32[HEAP32[$4_1 + 16 >> 2] >> 2]) {
      break label$9
     }
     $1_1 = HEAP32[$4_1 + 16 >> 2];
     (wasm2js_i32$0 = $530(19604, $529(HEAP32[HEAP32[HEAP32[$4_1 + 16 >> 2] >> 2] + 4 >> 2], $5_1)), wasm2js_i32$1 = $1_1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
     break label$9;
    }
    HEAP32[HEAP32[$4_1 + 16 >> 2] >> 2] = HEAP32[$1_1 >> 2];
    HEAP32[$1_1 >> 2] = HEAP32[$4_1 + 16 >> 2];
   }
   $6 = $300($4_1 + 16 | 0);
   $1_1 = $418(19604);
   HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] + 1;
   HEAP8[$4_1 + 31 | 0] = 1;
   $2_1 = $4_1 + 16 | 0;
   $1_1 = HEAP32[$2_1 >> 2];
   HEAP32[$2_1 >> 2] = 0;
   if ($1_1) {
    if (HEAPU8[$305($2_1) + 4 | 0]) {
     $391($1_1 + 8 | 0)
    }
    if ($1_1) {
     $2583($1_1)
    }
   }
  }
  $543($0, $431($4_1 + 16 | 0, $6), $4_1 + 31 | 0);
  global$0 = $4_1 + 32 | 0;
 }
 
 function $1298($0, $1_1) {
  return $1310($0, $1_1);
 }
 
 function $1303($0, $1_1, $2_1) {
  return $1312($0, $1_1, $2_1);
 }
 
 function $1304($0, $1_1, $2_1, $3_1, $4_1) {
  var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $4_1 = $0;
  $0 = $130(19604);
  $0 = $549($4_1, $1325(1), $548($2_1 + 8 | 0, $0));
  $1330(HEAP32[$0 >> 2] + 8 | 0, HEAP32[$3_1 >> 2]);
  (wasm2js_i32$0 = $305($0), wasm2js_i32$1 = 1), HEAP8[wasm2js_i32$0 + 4 | 0] = wasm2js_i32$1;
  HEAP32[HEAP32[$0 >> 2] + 4 >> 2] = $1_1;
  HEAP32[HEAP32[$0 >> 2] >> 2] = 0;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1305($0) {
  var $1_1 = 0, $2_1 = 0, $3_1 = Math_fround(0), $4_1 = 0, $5_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 + 12 >> 2] = $0;
  label$1 : {
   if (($0 | 0) == 1) {
    HEAP32[$2_1 + 12 >> 2] = 2;
    break label$1;
   }
   if (!($0 + -1 & $0)) {
    break label$1
   }
   (wasm2js_i32$0 = $2_1, wasm2js_i32$1 = $1639($0)), HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
  }
  $0 = $528(19604);
  $1_1 = HEAP32[$2_1 + 12 >> 2];
  label$3 : {
   if ($1_1 >>> 0 > $0 >>> 0) {
    $1318($1_1);
    break label$3;
   }
   if ($1_1 >>> 0 >= $0 >>> 0) {
    break label$3
   }
   $4_1 = $537($0);
   $3_1 = Math_fround(Math_ceil(Math_fround(Math_fround(HEAPU32[$418(19604) >> 2]) / HEAPF32[$531(19604) >> 2])));
   label$5 : {
    if ($3_1 < Math_fround(4294967296.0) & $3_1 >= Math_fround(0.0)) {
     $1_1 = ~~$3_1 >>> 0;
     break label$5;
    }
    $1_1 = 0;
   }
   $5_1 = $2_1;
   label$7 : {
    if ($4_1) {
     $1_1 = $553($1_1);
     break label$7;
    }
    $1_1 = $1639($1_1);
   }
   HEAP32[$5_1 + 8 >> 2] = $1_1;
   $1_1 = HEAP32[$360($2_1 + 12 | 0, $2_1 + 8 | 0) >> 2];
   HEAP32[$2_1 + 12 >> 2] = $1_1;
   if ($1_1 >>> 0 >= $0 >>> 0) {
    break label$3
   }
   $1318($1_1);
  }
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1310($0, $1_1) {
  return $1320($320($1_1), $320($1_1) + $100($1_1) | 0);
 }
 
 function $1312($0, $1_1, $2_1) {
  return $1323($1_1, $2_1);
 }
 
 function $1318($0) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $305(19604);
  label$1 : {
   if ($0) {
    $562(19604, $566($0));
    (wasm2js_i32$0 = $305(19604), wasm2js_i32$1 = $0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    while (1) {
     (wasm2js_i32$0 = $530(19604, $2_1), wasm2js_i32$1 = 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
     $2_1 = $2_1 + 1 | 0;
     if (($2_1 | 0) != ($0 | 0)) {
      continue
     }
     break;
    };
    $3_1 = HEAP32[4903];
    if (!$3_1) {
     break label$1
    }
    $5_1 = $529(HEAP32[$3_1 + 4 >> 2], $0);
    (wasm2js_i32$0 = $530(19604, $5_1), wasm2js_i32$1 = 19612), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    $1_1 = HEAP32[$3_1 >> 2];
    if (!$1_1) {
     break label$1
    }
    while (1) {
     $4_1 = $529(HEAP32[$1_1 + 4 >> 2], $0);
     label$5 : {
      if (($5_1 | 0) == ($4_1 | 0)) {
       $3_1 = $1_1;
       break label$5;
      }
      label$7 : {
       label$8 : {
        if (HEAP32[$530(19604, $4_1) >> 2]) {
         $2_1 = $1_1;
         if (!HEAP32[$1_1 >> 2]) {
          break label$7
         }
         if ($1303($531(19604), $1_1 + 8 | 0, HEAP32[$1_1 >> 2] + 8 | 0)) {
          break label$8
         }
         break label$7;
        }
        (wasm2js_i32$0 = $530(19604, $4_1), wasm2js_i32$1 = $3_1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
        $3_1 = $1_1;
        $5_1 = $4_1;
        break label$5;
       }
       while (1) {
        $2_1 = HEAP32[$2_1 >> 2];
        if (!HEAP32[$2_1 >> 2]) {
         break label$7
        }
        if ($1303($531(19604), $1_1 + 8 | 0, HEAP32[$2_1 >> 2] + 8 | 0)) {
         continue
        }
        break;
       };
      }
      HEAP32[$3_1 >> 2] = HEAP32[$2_1 >> 2];
      (wasm2js_i32$0 = $2_1, wasm2js_i32$1 = HEAP32[HEAP32[$530(19604, $4_1) >> 2] >> 2]), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
      (wasm2js_i32$0 = HEAP32[$530(19604, $4_1) >> 2], wasm2js_i32$1 = $1_1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
     }
     $1_1 = HEAP32[$3_1 >> 2];
     if ($1_1) {
      continue
     }
     break;
    };
    break label$1;
   }
   $562(19604, 0);
   (wasm2js_i32$0 = $305(19604), wasm2js_i32$1 = $0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  }
 }
 
 function $1320($0, $1_1) {
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $0 = $1321($0, $1_1 - $0 | 0);
  global$0 = $2_1 + 16 | 0;
  return $0;
 }
 
 function $1321($0, $1_1) {
  var $2_1 = 0, $3_1 = 0;
  label$1 : {
   if ($1_1 >>> 0 < 4) {
    $2_1 = $1_1;
    break label$1;
   }
   $2_1 = $1_1;
   while (1) {
    $3_1 = Math_imul($1322($0), 1540483477);
    $2_1 = Math_imul($3_1 ^ $3_1 >>> 24, 1540483477) ^ Math_imul($2_1, 1540483477);
    $0 = $0 + 4 | 0;
    $1_1 = $1_1 + -4 | 0;
    if ($1_1 >>> 0 > 3) {
     continue
    }
    break;
   };
  }
  label$4 : {
   switch ($1_1 + -1 | 0) {
   case 2:
    $2_1 = HEAPU8[$0 + 2 | 0] << 16 ^ $2_1;
   case 1:
    $2_1 = HEAPU8[$0 + 1 | 0] << 8 ^ $2_1;
   case 0:
    $2_1 = Math_imul(HEAPU8[$0 | 0] ^ $2_1, 1540483477);
    break;
   default:
    break label$4;
   };
  }
  $0 = Math_imul($2_1 >>> 13 ^ $2_1, 1540483477);
  return $0 >>> 15 ^ $0;
 }
 
 function $1322($0) {
  return HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24);
 }
 
 function $1323($0, $1_1) {
  var $2_1 = 0, $3_1 = 0;
  $2_1 = $100($0);
  if (($2_1 | 0) != ($100($1_1) | 0)) {
   return 0
  }
  $3_1 = $320($0);
  $1_1 = $320($1_1);
  label$2 : {
   if (!$207($0)) {
    if ($2_1) {
     break label$2
    }
    return 1;
   }
   return !$1324($3_1, $1_1, $2_1);
  }
  while (1) {
   if (HEAPU8[$3_1 | 0] != HEAPU8[$1_1 | 0]) {
    return 0
   }
   $1_1 = $1_1 + 1 | 0;
   $3_1 = $3_1 + 1 | 0;
   $2_1 = $2_1 + -1 | 0;
   if ($2_1) {
    continue
   }
   break;
  };
  return 1;
 }
 
 function $1324($0, $1_1, $2_1) {
  if (!$2_1) {
   return 0
  }
  return $1616($0, $1_1, $2_1);
 }
 
 function $1325($0) {
  if (134217727 < $0 >>> 0) {
   $338(1572);
   abort();
  }
  return $2497($0 << 5);
 }
 
 function $1330($0, $1_1) {
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 + 8 >> 2] = $1_1;
  $2508($0, HEAP32[$2_1 + 8 >> 2]);
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP32[$0 + 20 >> 2] = 0;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1345($0, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6 = 0, $7 = 0, $8 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  $7 = $1310($418(19632), $1_1);
  $4_1 = $528(19632);
  HEAP8[$3_1 + 31 | 0] = 0;
  label$1 : {
   label$2 : {
    if (!$4_1) {
     break label$2
    }
    $6 = $529($7, $4_1);
    $5_1 = HEAP32[$530(19632, $6) >> 2];
    if (!$5_1) {
     break label$2
    }
    while (1) {
     $5_1 = HEAP32[$5_1 >> 2];
     if (!$5_1) {
      break label$2
     }
     if (($7 | 0) != HEAP32[$5_1 + 4 >> 2]) {
      if (($529(HEAP32[$5_1 + 4 >> 2], $4_1) | 0) != ($6 | 0)) {
       break label$2
      }
     }
     if (!$1312($531(19632), $5_1 + 8 | 0, $1_1)) {
      continue
     }
     break;
    };
    break label$1;
   }
   $1351($3_1 + 16 | 0, $7, $2_1);
   $1_1 = HEAP32[$418(19632) >> 2];
   if (!(Math_fround(HEAPF32[$531(19632) >> 2] * Math_fround($4_1 >>> 0)) < Math_fround($1_1 + 1 >>> 0) ^ 1 ? $4_1 : 0)) {
    (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = $537($4_1) ^ 1 | $4_1 << 1), HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
    $1_1 = $3_1;
    $8 = Math_fround(Math_ceil(Math_fround(Math_fround(HEAP32[$418(19632) >> 2] + 1 >>> 0) / HEAPF32[$531(19632) >> 2])));
    label$7 : {
     if ($8 < Math_fround(4294967296.0) & $8 >= Math_fround(0.0)) {
      $2_1 = ~~$8 >>> 0;
      break label$7;
     }
     $2_1 = 0;
    }
    HEAP32[$1_1 + 8 >> 2] = $2_1;
    $1352(HEAP32[$360($3_1 + 12 | 0, $3_1 + 8 | 0) >> 2]);
    $4_1 = $528(19632);
    $6 = $529($7, $4_1);
   }
   $1_1 = HEAP32[$530(19632, $6) >> 2];
   label$9 : {
    if (!$1_1) {
     HEAP32[HEAP32[$3_1 + 16 >> 2] >> 2] = HEAP32[4910];
     HEAP32[4910] = HEAP32[$3_1 + 16 >> 2];
     (wasm2js_i32$0 = $530(19632, $6), wasm2js_i32$1 = 19640), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
     if (!HEAP32[HEAP32[$3_1 + 16 >> 2] >> 2]) {
      break label$9
     }
     $1_1 = HEAP32[$3_1 + 16 >> 2];
     (wasm2js_i32$0 = $530(19632, $529(HEAP32[HEAP32[HEAP32[$3_1 + 16 >> 2] >> 2] + 4 >> 2], $4_1)), wasm2js_i32$1 = $1_1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
     break label$9;
    }
    HEAP32[HEAP32[$3_1 + 16 >> 2] >> 2] = HEAP32[$1_1 >> 2];
    HEAP32[$1_1 >> 2] = HEAP32[$3_1 + 16 >> 2];
   }
   $5_1 = $300($3_1 + 16 | 0);
   $1_1 = $418(19632);
   HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] + 1;
   HEAP8[$3_1 + 31 | 0] = 1;
   $1363($3_1 + 16 | 0);
  }
  $543($0, $431($3_1 + 16 | 0, $5_1), $3_1 + 31 | 0);
  global$0 = $3_1 + 32 | 0;
 }
 
 function $1351($0, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = $130(19632);
  $0 = $549($0, $2497(20), $548($3_1 + 8 | 0, $4_1));
  $405($4_1, HEAP32[$0 >> 2] + 8 | 0, $2_1);
  (wasm2js_i32$0 = $305($0), wasm2js_i32$1 = 1), HEAP8[wasm2js_i32$0 + 4 | 0] = wasm2js_i32$1;
  HEAP32[HEAP32[$0 >> 2] + 4 >> 2] = $1_1;
  HEAP32[HEAP32[$0 >> 2] >> 2] = 0;
  global$0 = $3_1 + 16 | 0;
 }
 
 function $1352($0) {
  var $1_1 = 0, $2_1 = 0, $3_1 = Math_fround(0), $4_1 = 0, $5_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 + 12 >> 2] = $0;
  label$1 : {
   if (($0 | 0) == 1) {
    HEAP32[$2_1 + 12 >> 2] = 2;
    break label$1;
   }
   if (!($0 + -1 & $0)) {
    break label$1
   }
   (wasm2js_i32$0 = $2_1, wasm2js_i32$1 = $1639($0)), HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
  }
  $0 = $528(19632);
  $1_1 = HEAP32[$2_1 + 12 >> 2];
  label$3 : {
   if ($1_1 >>> 0 > $0 >>> 0) {
    $1362($1_1);
    break label$3;
   }
   if ($1_1 >>> 0 >= $0 >>> 0) {
    break label$3
   }
   $4_1 = $537($0);
   $3_1 = Math_fround(Math_ceil(Math_fround(Math_fround(HEAPU32[$418(19632) >> 2]) / HEAPF32[$531(19632) >> 2])));
   label$5 : {
    if ($3_1 < Math_fround(4294967296.0) & $3_1 >= Math_fround(0.0)) {
     $1_1 = ~~$3_1 >>> 0;
     break label$5;
    }
    $1_1 = 0;
   }
   $5_1 = $2_1;
   label$7 : {
    if ($4_1) {
     $1_1 = $553($1_1);
     break label$7;
    }
    $1_1 = $1639($1_1);
   }
   HEAP32[$5_1 + 8 >> 2] = $1_1;
   $1_1 = HEAP32[$360($2_1 + 12 | 0, $2_1 + 8 | 0) >> 2];
   HEAP32[$2_1 + 12 >> 2] = $1_1;
   if ($1_1 >>> 0 >= $0 >>> 0) {
    break label$3
   }
   $1362($1_1);
  }
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1362($0) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $305(19632);
  label$1 : {
   if ($0) {
    $562(19632, $566($0));
    (wasm2js_i32$0 = $305(19632), wasm2js_i32$1 = $0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    while (1) {
     (wasm2js_i32$0 = $530(19632, $2_1), wasm2js_i32$1 = 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
     $2_1 = $2_1 + 1 | 0;
     if (($2_1 | 0) != ($0 | 0)) {
      continue
     }
     break;
    };
    $3_1 = HEAP32[4910];
    if (!$3_1) {
     break label$1
    }
    $5_1 = $529(HEAP32[$3_1 + 4 >> 2], $0);
    (wasm2js_i32$0 = $530(19632, $5_1), wasm2js_i32$1 = 19640), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    $1_1 = HEAP32[$3_1 >> 2];
    if (!$1_1) {
     break label$1
    }
    while (1) {
     $4_1 = $529(HEAP32[$1_1 + 4 >> 2], $0);
     label$5 : {
      if (($5_1 | 0) == ($4_1 | 0)) {
       $3_1 = $1_1;
       break label$5;
      }
      label$7 : {
       label$8 : {
        if (HEAP32[$530(19632, $4_1) >> 2]) {
         $2_1 = $1_1;
         if (!HEAP32[$1_1 >> 2]) {
          break label$7
         }
         if ($1312($531(19632), $1_1 + 8 | 0, HEAP32[$1_1 >> 2] + 8 | 0)) {
          break label$8
         }
         break label$7;
        }
        (wasm2js_i32$0 = $530(19632, $4_1), wasm2js_i32$1 = $3_1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
        $3_1 = $1_1;
        $5_1 = $4_1;
        break label$5;
       }
       while (1) {
        $2_1 = HEAP32[$2_1 >> 2];
        if (!HEAP32[$2_1 >> 2]) {
         break label$7
        }
        if ($1312($531(19632), $1_1 + 8 | 0, HEAP32[$2_1 >> 2] + 8 | 0)) {
         continue
        }
        break;
       };
      }
      HEAP32[$3_1 >> 2] = HEAP32[$2_1 >> 2];
      (wasm2js_i32$0 = $2_1, wasm2js_i32$1 = HEAP32[HEAP32[$530(19632, $4_1) >> 2] >> 2]), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
      (wasm2js_i32$0 = HEAP32[$530(19632, $4_1) >> 2], wasm2js_i32$1 = $1_1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
     }
     $1_1 = HEAP32[$3_1 >> 2];
     if ($1_1) {
      continue
     }
     break;
    };
    break label$1;
   }
   $562(19632, 0);
   (wasm2js_i32$0 = $305(19632), wasm2js_i32$1 = $0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  }
 }
 
 function $1363($0) {
  var $1_1 = 0;
  $1_1 = HEAP32[$0 >> 2];
  HEAP32[$0 >> 2] = 0;
  if ($1_1) {
   if (HEAPU8[$305($0) + 4 | 0]) {
    $391($1_1 + 8 | 0)
   }
   if ($1_1) {
    $2583($1_1)
   }
  }
 }
 
 function $1379($0) {
  var $1_1 = 0;
  $130(19632);
  if ($0) {
   while (1) {
    $1_1 = HEAP32[$0 >> 2];
    $391($0 + 8 | 0);
    $2583($0);
    $0 = $1_1;
    if ($0) {
     continue
    }
    break;
   }
  }
 }
 
 function $1382($0) {
  var $1_1 = 0;
  $130(19604);
  if ($0) {
   while (1) {
    $1_1 = HEAP32[$0 >> 2];
    $391($0 + 8 | 0);
    $2583($0);
    $0 = $1_1;
    if ($0) {
     continue
    }
    break;
   }
  }
 }
 
 function $1385($0) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $3_1 = $864(18844);
  $2_1 = 0;
  __inlined_func$1389 : {
   if (!$883(18844)) {
    break __inlined_func$1389
   }
   $2_1 = Math_imul($883(18844), 39) + -1 | 0;
  }
  if (!(($2_1 - HEAP32[4715] | 0) - HEAP32[$864(18844) >> 2])) {
   $1388()
  }
  $879($1_1 + 8 | 0, 18844);
  $461($3_1, HEAP32[($1_1 + 8 | 0) + 4 >> 2], $0);
  $0 = $864(18844);
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
  global$0 = $1_1 + 16 | 0;
 }
 
 function $1386() {
  var $0 = 0, $1_1 = 0;
  $0 = $864(18844);
  $0 = (HEAP32[4715] + HEAP32[$0 >> 2] | 0) + -1 | 0;
  $1_1 = ($0 >>> 0) / 39 | 0;
  return HEAP32[HEAP32[4712] + ($1_1 << 2) >> 2] + Math_imul($0 - Math_imul($1_1, 39) | 0, 104) | 0;
 }
 
 function $1388() {
  var $0 = 0, $1_1 = 0, $2_1 = 0, $3_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $0 = global$0 - 48 | 0;
  global$0 = $0;
  $1_1 = $864(18844);
  label$1 : {
   if (HEAPU32[4715] >= 39) {
    HEAP32[4715] = HEAP32[4715] + -39;
    HEAP32[$0 + 24 >> 2] = HEAP32[HEAP32[4712] >> 2];
    $884(18844);
    $1391($0 + 24 | 0);
    break label$1;
   }
   label$3 : {
    if ($883(18844) >>> 0 < $648(18844) >>> 0) {
     if (!(HEAP32[$418(18844) >> 2] - HEAP32[4713] >> 2)) {
      break label$3
     }
     (wasm2js_i32$0 = $0, wasm2js_i32$1 = $491(39)), HEAP32[wasm2js_i32$0 + 24 >> 2] = wasm2js_i32$1;
     $1391($0 + 24 | 0);
     break label$1;
    }
    (wasm2js_i32$0 = $0, wasm2js_i32$1 = $648(18844) << 1), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
    HEAP32[$0 >> 2] = 1;
    $2_1 = $635($0 + 24 | 0, HEAP32[$360($0 + 8 | 0, $0) >> 2], $883(18844), $418(18844));
    $3_1 = $549($0 + 8 | 0, $491(39), $458($0, $1_1, 39));
    HEAP32[$0 >> 2] = HEAP32[$3_1 >> 2];
    $1397($2_1, $0);
    $300($3_1);
    $1_1 = HEAP32[4713];
    if (($1_1 | 0) != HEAP32[4712]) {
     while (1) {
      $1_1 = $1_1 + -4 | 0;
      $1399($2_1, $1_1);
      if (($1_1 | 0) != HEAP32[4712]) {
       continue
      }
      break;
     }
    }
    $420(18844, $2_1);
    $420(18848, $2_1 + 4 | 0);
    $420(18852, $2_1 + 8 | 0);
    $420($418(18844), $418($2_1));
    $1413($3_1);
    $637($2_1);
    break label$1;
   }
   (wasm2js_i32$0 = $0, wasm2js_i32$1 = $491(39)), HEAP32[wasm2js_i32$0 + 24 >> 2] = wasm2js_i32$1;
   $1403($0 + 24 | 0);
   HEAP32[$0 + 24 >> 2] = HEAP32[HEAP32[4712] >> 2];
   $884(18844);
   $1391($0 + 24 | 0);
  }
  global$0 = $0 + 48 | 0;
 }
 
 function $1391($0) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $2_1 = global$0 - 48 | 0;
  global$0 = $2_1;
  label$1 : {
   if (HEAP32[4713] != HEAP32[$418(18844) >> 2]) {
    break label$1
   }
   $1_1 = HEAP32[4712];
   $3_1 = HEAP32[4711];
   if ($1_1 >>> 0 > $3_1 >>> 0) {
    $3_1 = (($1_1 - $3_1 >> 2) + 1 | 0) / -2 << 2;
    (wasm2js_i32$0 = 18852, wasm2js_i32$1 = $1404($1_1, HEAP32[4713], $1_1 + $3_1 | 0)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    HEAP32[4712] = $3_1 + HEAP32[4712];
    break label$1;
   }
   (wasm2js_i32$0 = $2_1, wasm2js_i32$1 = HEAP32[$418(18844) >> 2] - HEAP32[4711] >> 1), HEAP32[wasm2js_i32$0 + 24 >> 2] = wasm2js_i32$1;
   HEAP32[$2_1 + 44 >> 2] = 1;
   $1_1 = HEAP32[$360($2_1 + 24 | 0, $2_1 + 44 | 0) >> 2];
   $1_1 = $635($2_1 + 24 | 0, $1_1, $1_1 >>> 2 | 0, $418(18844));
   $3_1 = $431($2_1 + 16 | 0, HEAP32[4712]);
   $4_1 = $431($2_1 + 8 | 0, HEAP32[4713]);
   $1405($1_1, HEAP32[$3_1 >> 2], HEAP32[$4_1 >> 2]);
   $420(18844, $1_1);
   $420(18848, $1_1 + 4 | 0);
   $420(18852, $1_1 + 8 | 0);
   $420($418(18844), $418($1_1));
   $637($1_1);
  }
  $550($418(18844), HEAP32[4713], $0);
  HEAP32[4713] = HEAP32[4713] + 4;
  global$0 = $2_1 + 48 | 0;
 }
 
 function $1397($0, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6 = 0, $7 = 0, $8 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3_1 = global$0 - 48 | 0;
  global$0 = $3_1;
  label$1 : {
   if (HEAP32[$0 + 8 >> 2] != HEAP32[$418($0) >> 2]) {
    break label$1
   }
   $4_1 = $0 + 8 | 0;
   $6 = $0 + 4 | 0;
   $2_1 = HEAP32[$0 + 4 >> 2];
   $5_1 = HEAP32[$0 >> 2];
   if ($2_1 >>> 0 > $5_1 >>> 0) {
    $7 = $4_1;
    $8 = HEAP32[$4_1 >> 2];
    $4_1 = (($2_1 - $5_1 >> 2) + 1 | 0) / -2 << 2;
    (wasm2js_i32$0 = $7, wasm2js_i32$1 = $1404($2_1, $8, $2_1 + $4_1 | 0)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    HEAP32[$6 >> 2] = $4_1 + HEAP32[$6 >> 2];
    break label$1;
   }
   (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = HEAP32[$418($0) >> 2] - HEAP32[$0 >> 2] >> 1), HEAP32[wasm2js_i32$0 + 24 >> 2] = wasm2js_i32$1;
   HEAP32[$3_1 + 44 >> 2] = 1;
   $2_1 = HEAP32[$360($3_1 + 24 | 0, $3_1 + 44 | 0) >> 2];
   $2_1 = $635($3_1 + 24 | 0, $2_1, $2_1 >>> 2 | 0, $416($0));
   $5_1 = $431($3_1 + 16 | 0, HEAP32[$0 + 4 >> 2]);
   $7 = $431($3_1 + 8 | 0, HEAP32[$0 + 8 >> 2]);
   $1405($2_1, HEAP32[$5_1 >> 2], HEAP32[$7 >> 2]);
   $420($0, $2_1);
   $420($6, $2_1 + 4 | 0);
   $420($4_1, $2_1 + 8 | 0);
   $420($418($0), $418($2_1));
   $637($2_1);
  }
  $550($416($0), HEAP32[$0 + 8 >> 2], $1_1);
  HEAP32[$0 + 8 >> 2] = HEAP32[$0 + 8 >> 2] + 4;
  global$0 = $3_1 + 48 | 0;
 }
 
 function $1399($0, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3_1 = global$0 - 48 | 0;
  global$0 = $3_1;
  label$1 : {
   if (HEAP32[$0 + 4 >> 2] != HEAP32[$0 >> 2]) {
    break label$1
   }
   if (HEAPU32[$0 + 8 >> 2] < HEAPU32[$418($0) >> 2]) {
    $4_1 = HEAP32[$418($0) >> 2];
    $2_1 = HEAP32[$0 + 8 >> 2];
    $4_1 = (($4_1 - $2_1 >> 2) + 1 | 0) / 2 << 2;
    (wasm2js_i32$0 = $0, wasm2js_i32$1 = $1408(HEAP32[$0 + 4 >> 2], $2_1, $2_1 + $4_1 | 0)), HEAP32[wasm2js_i32$0 + 4 >> 2] = wasm2js_i32$1;
    HEAP32[$0 + 8 >> 2] = $4_1 + HEAP32[$0 + 8 >> 2];
    break label$1;
   }
   (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = HEAP32[$418($0) >> 2] - HEAP32[$0 >> 2] >> 1), HEAP32[wasm2js_i32$0 + 24 >> 2] = wasm2js_i32$1;
   HEAP32[$3_1 + 44 >> 2] = 1;
   $2_1 = HEAP32[$360($3_1 + 24 | 0, $3_1 + 44 | 0) >> 2];
   $2_1 = $635($3_1 + 24 | 0, $2_1, $2_1 + 3 >>> 2 | 0, $416($0));
   $4_1 = $431($3_1 + 16 | 0, HEAP32[$0 + 4 >> 2]);
   $5_1 = $431($3_1 + 8 | 0, HEAP32[$0 + 8 >> 2]);
   $1405($2_1, HEAP32[$4_1 >> 2], HEAP32[$5_1 >> 2]);
   $420($0, $2_1);
   $420($0 + 4 | 0, $2_1 + 4 | 0);
   $420($0 + 8 | 0, $2_1 + 8 | 0);
   $420($418($0), $418($2_1));
   $637($2_1);
  }
  $550($416($0), HEAP32[$0 + 4 >> 2] + -4 | 0, $1_1);
  HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + -4;
  global$0 = $3_1 + 48 | 0;
 }
 
 function $1403($0) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $2_1 = global$0 - 48 | 0;
  global$0 = $2_1;
  label$1 : {
   if (HEAP32[4712] != HEAP32[4711]) {
    break label$1
   }
   if (HEAPU32[4713] < HEAPU32[$418(18844) >> 2]) {
    $3_1 = HEAP32[$418(18844) >> 2];
    $1_1 = HEAP32[4713];
    $3_1 = (($3_1 - $1_1 >> 2) + 1 | 0) / 2 << 2;
    (wasm2js_i32$0 = 18848, wasm2js_i32$1 = $1408(HEAP32[4712], $1_1, $1_1 + $3_1 | 0)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    HEAP32[4713] = $3_1 + HEAP32[4713];
    break label$1;
   }
   (wasm2js_i32$0 = $2_1, wasm2js_i32$1 = HEAP32[$418(18844) >> 2] - HEAP32[4711] >> 1), HEAP32[wasm2js_i32$0 + 24 >> 2] = wasm2js_i32$1;
   HEAP32[$2_1 + 44 >> 2] = 1;
   $1_1 = HEAP32[$360($2_1 + 24 | 0, $2_1 + 44 | 0) >> 2];
   $1_1 = $635($2_1 + 24 | 0, $1_1, $1_1 + 3 >>> 2 | 0, $418(18844));
   $3_1 = $431($2_1 + 16 | 0, HEAP32[4712]);
   $4_1 = $431($2_1 + 8 | 0, HEAP32[4713]);
   $1405($1_1, HEAP32[$3_1 >> 2], HEAP32[$4_1 >> 2]);
   $420(18844, $1_1);
   $420(18848, $1_1 + 4 | 0);
   $420(18852, $1_1 + 8 | 0);
   $420($418(18844), $418($1_1));
   $637($1_1);
  }
  $550($418(18844), HEAP32[4712] + -4 | 0, $0);
  HEAP32[4712] = HEAP32[4712] + -4;
  global$0 = $2_1 + 48 | 0;
 }
 
 function $1404($0, $1_1, $2_1) {
  return $1416($0, $1_1, $2_1);
 }
 
 function $1405($0, $1_1, $2_1) {
  var $3_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  HEAP32[$3_1 + 24 >> 2] = $1_1;
  $1_1 = $1235($3_1 + 8 | 0, $0 + 8 | 0, $1419($1_1, $2_1));
  if (HEAP32[$1_1 >> 2] != HEAP32[$1_1 + 4 >> 2]) {
   while (1) {
    $550($416($0), HEAP32[$1_1 >> 2], HEAP32[$3_1 + 24 >> 2]);
    HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] + 4;
    $84($3_1 + 24 | 0);
    if (HEAP32[$1_1 >> 2] != HEAP32[$1_1 + 4 >> 2]) {
     continue
    }
    break;
   }
  }
  $1007($1_1);
  global$0 = $3_1 + 32 | 0;
 }
 
 function $1408($0, $1_1, $2_1) {
  $1_1 = $1_1 - $0 | 0;
  if ($1_1) {
   $2_1 = $2_1 - $1_1 | 0;
   $2593($2_1, $0, $1_1);
  }
  return $2_1;
 }
 
 function $1413($0) {
  var $1_1 = 0;
  $1_1 = HEAP32[$0 >> 2];
  HEAP32[$0 >> 2] = 0;
  if ($1_1) {
   HEAP32[$305($0) >> 2];
   $2583($1_1);
  }
 }
 
 function $1416($0, $1_1, $2_1) {
  $1_1 = $1_1 - $0 | 0;
  if ($1_1) {
   $2593($2_1, $0, $1_1)
  }
  return $1_1 + $2_1 | 0;
 }
 
 function $1419($0, $1_1) {
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 >> 2] = $1_1;
  HEAP32[$2_1 + 8 >> 2] = $0;
  $0 = $1421($2_1, $2_1 + 8 | 0);
  global$0 = $2_1 + 16 | 0;
  return $0;
 }
 
 function $1421($0, $1_1) {
  return HEAP32[$0 >> 2] - HEAP32[$1_1 >> 2] >> 2;
 }
 
 function $1426($0, $1_1) {
  var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $177($0 + 4 | 0);
  HEAP32[$1_1 + 12 >> 2] = 0;
  $175($0 + 8 | 0, $1_1 + 12 | 0);
  (wasm2js_i32$0 = $0, wasm2js_i32$1 = $305($0)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  global$0 = $1_1 + 16 | 0;
 }
 
 function $1427($0) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = $1310($418(19632), $0);
  $4_1 = $528(19632);
  label$1 : {
   label$2 : {
    if (!$4_1) {
     break label$2
    }
    $5_1 = $529($3_1, $4_1);
    $1_1 = HEAP32[$530(19632, $5_1) >> 2];
    if (!$1_1) {
     break label$2
    }
    $1_1 = HEAP32[$1_1 >> 2];
    if (!$1_1) {
     break label$2
    }
    while (1) {
     if (($3_1 | 0) != HEAP32[$1_1 + 4 >> 2]) {
      if (($529(HEAP32[$1_1 + 4 >> 2], $4_1) | 0) != ($5_1 | 0)) {
       break label$2
      }
     }
     label$5 : {
      if (($3_1 | 0) != HEAP32[$1_1 + 4 >> 2]) {
       break label$5
      }
      if (!$1312($531(19632), $1_1 + 8 | 0, $0)) {
       break label$5
      }
      $431($2_1 + 8 | 0, $1_1);
      break label$1;
     }
     $1_1 = HEAP32[$1_1 >> 2];
     if ($1_1) {
      continue
     }
     break;
    };
   }
   (wasm2js_i32$0 = $2_1, wasm2js_i32$1 = $674()), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
  }
  global$0 = $2_1 + 16 | 0;
  return HEAP32[$2_1 + 8 >> 2];
 }
 
 function $1428($0, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = 0, $6 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  $6 = $1458($1_1, $5_1 + 28 | 0, $2_1);
  $2_1 = HEAP32[$6 >> 2];
  HEAP8[$5_1 + 27 | 0] = 0;
  if (!$2_1) {
   $1459($5_1 + 8 | 0, $1_1, 2789, $3_1, $4_1);
   $1461($1_1, HEAP32[$5_1 + 28 >> 2], $6, HEAP32[$5_1 + 8 >> 2]);
   $2_1 = $300($5_1 + 8 | 0);
   HEAP8[$5_1 + 27 | 0] = 1;
   $1476($5_1 + 8 | 0);
  }
  $543($0, $431($5_1 + 8 | 0, $2_1), $5_1 + 27 | 0);
  global$0 = $5_1 + 32 | 0;
 }
 
 function $1429($0) {
  return HEAP32[$0 >> 2] + 16 | 0;
 }
 
 function $1432($0) {
  $1504($0, HEAP32[$0 >> 2]);
 }
 
 function $1433($0, $1_1) {
  $1508($0);
  $123($0);
 }
 
 function $1436($0, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[$4_1 + 12 >> 2] = 0;
  $415($0 + 12 | 0, $4_1 + 12 | 0, $3_1);
  if ($1_1) {
   $416($0);
   $5_1 = $1325($1_1);
  }
  HEAP32[$0 >> 2] = $5_1;
  $2_1 = ($2_1 << 5) + $5_1 | 0;
  HEAP32[$0 + 8 >> 2] = $2_1;
  HEAP32[$0 + 4 >> 2] = $2_1;
  (wasm2js_i32$0 = $418($0), wasm2js_i32$1 = ($1_1 << 5) + $5_1 | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  global$0 = $4_1 + 16 | 0;
  return $0;
 }
 
 function $1437($0, $1_1) {
  var $2_1 = 0;
  $139($0);
  $2_1 = $1_1 + 4 | 0;
  $1514($130($0), HEAP32[$0 >> 2], HEAP32[$0 + 4 >> 2], $2_1);
  $420($0, $2_1);
  $420($0 + 4 | 0, $1_1 + 8 | 0);
  $420($130($0), $418($1_1));
  HEAP32[$1_1 >> 2] = HEAP32[$1_1 + 4 >> 2];
  $123($0);
  $1508($0);
  $1508($0);
 }
 
 function $1438($0) {
  var $1_1 = 0;
  $1526($0, HEAP32[$0 + 4 >> 2]);
  if (HEAP32[$0 >> 2]) {
   $416($0);
   $1_1 = HEAP32[$0 >> 2];
   HEAP32[$418($0) >> 2];
   $2583($1_1);
  }
 }
 
 function $1440($0) {
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $0 = HEAP32[$431($1_1 + 8 | 0, HEAP32[$0 >> 2]) >> 2];
  global$0 = $1_1 + 16 | 0;
  return $0;
 }
 
 function $1441($0) {
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $0 = HEAP32[$431($1_1 + 8 | 0, $305($0)) >> 2];
  global$0 = $1_1 + 16 | 0;
  return $0;
 }
 
 function $1442($0) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = $1298($418(19604), $0);
  $4_1 = $528(19604);
  label$1 : {
   label$2 : {
    if (!$4_1) {
     break label$2
    }
    $5_1 = $529($3_1, $4_1);
    $1_1 = HEAP32[$530(19604, $5_1) >> 2];
    if (!$1_1) {
     break label$2
    }
    $1_1 = HEAP32[$1_1 >> 2];
    if (!$1_1) {
     break label$2
    }
    while (1) {
     if (($3_1 | 0) != HEAP32[$1_1 + 4 >> 2]) {
      if (($529(HEAP32[$1_1 + 4 >> 2], $4_1) | 0) != ($5_1 | 0)) {
       break label$2
      }
     }
     label$5 : {
      if (($3_1 | 0) != HEAP32[$1_1 + 4 >> 2]) {
       break label$5
      }
      if (!$1303($531(19604), $1_1 + 8 | 0, $0)) {
       break label$5
      }
      $431($2_1 + 8 | 0, $1_1);
      break label$1;
     }
     $1_1 = HEAP32[$1_1 >> 2];
     if ($1_1) {
      continue
     }
     break;
    };
   }
   (wasm2js_i32$0 = $2_1, wasm2js_i32$1 = $674()), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
  }
  global$0 = $2_1 + 16 | 0;
  return HEAP32[$2_1 + 8 >> 2];
 }
 
 function $1445($0, $1_1) {
  var $2_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $2_1 = $1529($3_1, $0, 1);
  $1530($130($0), HEAP32[$2_1 + 4 >> 2], $1_1);
  HEAP32[$2_1 + 4 >> 2] = HEAP32[$2_1 + 4 >> 2] + 32;
  $406($2_1);
  global$0 = $3_1 + 16 | 0;
 }
 
 function $1446($0, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  $2_1 = $130($0);
  $4_1 = $2_1;
  $2_1 = $1436($3_1 + 8 | 0, $1531($0, $123($0) + 1 | 0), $123($0), $2_1);
  $1530($4_1, HEAP32[$2_1 + 8 >> 2], $1_1);
  HEAP32[$2_1 + 8 >> 2] = HEAP32[$2_1 + 8 >> 2] + 32;
  $1437($0, $2_1);
  $1438($2_1);
  global$0 = $3_1 + 32 | 0;
 }
 
 function $1448($0, $1_1, $2_1, $3_1) {
  var $4_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[$4_1 + 16 >> 2] = $1_1;
  HEAP32[$4_1 + 24 >> 2] = $0;
  HEAP32[$4_1 + 8 >> 2] = $2_1;
  $1541($0, $1_1, $3_1);
  $0 = $1542($4_1 + 16 | 0, $4_1 + 24 | 0);
  HEAP32[$4_1 >> 2] = HEAP32[$4_1 + 16 >> 2];
  if ($31($4_1, $4_1 + 8 | 0)) {
   while (1) {
    if (FUNCTION_TABLE[HEAP32[$3_1 >> 2]](HEAP32[$4_1 >> 2], HEAP32[$4_1 + 24 >> 2])) {
     $1543(HEAP32[$4_1 >> 2], HEAP32[$4_1 + 24 >> 2]);
     $1_1 = HEAP32[$4_1 + 24 >> 2];
     $1544($1_1, $3_1, $0, $1_1);
    }
    $138($4_1);
    if ($31($4_1, $4_1 + 8 | 0)) {
     continue
    }
    break;
   }
  }
  $1545(HEAP32[$4_1 + 24 >> 2], HEAP32[$4_1 + 16 >> 2], $3_1);
  global$0 = $4_1 + 32 | 0;
 }
 
 function $1450($0, $1_1) {
  var $2_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  label$1 : {
   if (HEAP32[$130($0) >> 2] - HEAP32[$0 + 4 >> 2] >> 5 >>> 0 >= $1_1 >>> 0) {
    $1556($0, $1_1);
    break label$1;
   }
   $2_1 = $130($0);
   $2_1 = $1436($3_1 + 8 | 0, $1531($0, $123($0) + $1_1 | 0), $123($0), $2_1);
   $1557($2_1, $1_1);
   $1437($0, $2_1);
   $1438($2_1);
  }
  global$0 = $3_1 + 32 | 0;
 }
 
 function $1458($0, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $3_1 = $528($0);
  $5_1 = $305($0);
  label$1 : {
   if ($3_1) {
    label$3 : {
     while (1) {
      $130($0);
      $4_1 = $3_1 + 16 | 0;
      if ($1478($2_1, $4_1)) {
       if (!HEAP32[$3_1 >> 2]) {
        break label$1
       }
       $5_1 = $3_1;
       $3_1 = HEAP32[$3_1 >> 2];
       continue;
      }
      $130($0);
      if (!$1478($4_1, $2_1)) {
       break label$3
      }
      $4_1 = $3_1 + 4 | 0;
      if (HEAP32[$3_1 + 4 >> 2]) {
       $5_1 = $4_1;
       $3_1 = HEAP32[$4_1 >> 2];
       continue;
      }
      break;
     };
     HEAP32[$1_1 >> 2] = $3_1;
     return $4_1;
    }
    HEAP32[$1_1 >> 2] = $3_1;
    return $5_1;
   }
   $3_1 = $305($0);
  }
  HEAP32[$1_1 >> 2] = $3_1;
  return $3_1;
 }
 
 function $1459($0, $1_1, $2_1, $3_1, $4_1) {
  var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $4_1 = $0;
  $0 = $305($1_1);
  $0 = $549($4_1, $2497(64), $548($2_1 + 8 | 0, $0));
  $1488(HEAP32[$0 >> 2] + 16 | 0, HEAP32[$3_1 >> 2]);
  (wasm2js_i32$0 = $305($0), wasm2js_i32$1 = 1), HEAP8[wasm2js_i32$0 + 4 | 0] = wasm2js_i32$1;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1461($0, $1_1, $2_1, $3_1) {
  HEAP32[$3_1 + 8 >> 2] = $1_1;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[$3_1 + 4 >> 2] = 0;
  HEAP32[$2_1 >> 2] = $3_1;
  if (HEAP32[HEAP32[$0 >> 2] >> 2]) {
   HEAP32[$0 >> 2] = HEAP32[HEAP32[$0 >> 2] >> 2]
  }
  $1474(HEAP32[$305($0) >> 2], HEAP32[$2_1 >> 2]);
  $0 = $130($0);
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
 }
 
 function $1474($0, $1_1) {
  var $2_1 = 0, $3_1 = 0;
  $2_1 = ($0 | 0) == ($1_1 | 0);
  HEAP8[$1_1 + 12 | 0] = $2_1;
  label$1 : {
   if ($2_1) {
    break label$1
   }
   while (1) {
    if (HEAPU8[HEAP32[$1_1 + 8 >> 2] + 12 | 0]) {
     break label$1
    }
    $3_1 = $1491(HEAP32[$1_1 + 8 >> 2]);
    $2_1 = HEAP32[$1_1 + 8 >> 2];
    label$3 : {
     if ($3_1) {
      $2_1 = HEAP32[HEAP32[$2_1 + 8 >> 2] + 4 >> 2];
      if (!(!$2_1 | HEAPU8[$2_1 + 12 | 0])) {
       $1_1 = HEAP32[$1_1 + 8 >> 2];
       HEAP8[$1_1 + 12 | 0] = 1;
       $1_1 = HEAP32[$1_1 + 8 >> 2];
       HEAP8[$1_1 + 12 | 0] = ($0 | 0) == ($1_1 | 0);
       HEAP8[$2_1 + 12 | 0] = 1;
       break label$3;
      }
      if (!$1491($1_1)) {
       $1_1 = HEAP32[$1_1 + 8 >> 2];
       $1492($1_1);
      }
      $0 = HEAP32[$1_1 + 8 >> 2];
      HEAP8[$0 + 12 | 0] = 1;
      $0 = HEAP32[$0 + 8 >> 2];
      HEAP8[$0 + 12 | 0] = 0;
      $1493($0);
      break label$1;
     }
     $2_1 = HEAP32[HEAP32[$2_1 + 8 >> 2] >> 2];
     label$7 : {
      if (!(!$2_1 | HEAPU8[$2_1 + 12 | 0])) {
       $1_1 = HEAP32[$1_1 + 8 >> 2];
       HEAP8[$1_1 + 12 | 0] = 1;
       $1_1 = HEAP32[$1_1 + 8 >> 2];
       HEAP8[$1_1 + 12 | 0] = ($0 | 0) == ($1_1 | 0);
       HEAP8[$2_1 + 12 | 0] = 1;
       $2_1 = 1;
       break label$7;
      }
      if ($1491($1_1)) {
       $1_1 = HEAP32[$1_1 + 8 >> 2];
       $1493($1_1);
      }
      $1_1 = HEAP32[$1_1 + 8 >> 2];
      HEAP8[$1_1 + 12 | 0] = 1;
      $1_1 = HEAP32[$1_1 + 8 >> 2];
      HEAP8[$1_1 + 12 | 0] = 0;
      $1492($1_1);
      $2_1 = 0;
     }
     if (!$2_1) {
      break label$1
     }
    }
    if (($0 | 0) != ($1_1 | 0)) {
     continue
    }
    break;
   };
  }
 }
 
 function $1476($0) {
  var $1_1 = 0;
  $1_1 = HEAP32[$0 >> 2];
  HEAP32[$0 >> 2] = 0;
  if ($1_1) {
   if (HEAPU8[$305($0) + 4 | 0]) {
    $1500($1_1 + 16 | 0)
   }
   if ($1_1) {
    $2583($1_1)
   }
  }
 }
 
 function $1478($0, $1_1) {
  return $1480($0, $1_1) >>> 31 | 0;
 }
 
 function $1480($0, $1_1) {
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $458($2_1 + 8 | 0, $320($1_1), $100($1_1));
  $0 = $1482($0, $2_1 + 8 | 0);
  global$0 = $2_1 + 16 | 0;
  return $0;
 }
 
 function $1482($0, $1_1) {
  var $2_1 = 0, $3_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$2_1 + 8 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$2_1 + 12 >> 2] = $3_1;
  (wasm2js_i32$0 = $2_1, wasm2js_i32$1 = $100($0)), HEAP32[wasm2js_i32$0 + 4 >> 2] = wasm2js_i32$1;
  HEAP32[$2_1 >> 2] = HEAP32[($2_1 + 8 | 0) + 4 >> 2];
  $0 = $1324($320($0), HEAP32[$2_1 + 8 >> 2], HEAP32[$124($2_1 + 4 | 0, $2_1) >> 2]);
  label$1 : {
   if ($0) {
    break label$1
   }
   $0 = -1;
   $1_1 = HEAP32[$2_1 + 4 >> 2];
   $3_1 = HEAP32[$2_1 >> 2];
   if ($1_1 >>> 0 < $3_1 >>> 0) {
    break label$1
   }
   $0 = $1_1 >>> 0 > $3_1 >>> 0;
  }
  global$0 = $2_1 + 16 | 0;
  return $0;
 }
 
 function $1488($0, $1_1) {
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 + 8 >> 2] = $1_1;
  $1489($0, $2_1 + 8 | 0);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1489($0, $1_1) {
  $2508($0, HEAP32[$1_1 >> 2]);
  HEAP32[$0 + 40 >> 2] = 0;
  HEAP32[$0 + 44 >> 2] = 0;
  HEAP32[$0 + 32 >> 2] = 0;
  HEAP32[$0 + 36 >> 2] = 0;
  HEAP32[$0 + 24 >> 2] = 0;
  HEAP32[$0 + 28 >> 2] = 0;
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP32[$0 + 20 >> 2] = 0;
  $1490($0 + 16 | 0);
 }
 
 function $1490($0) {
  $189($0);
  $26($0 + 12 | 0);
 }
 
 function $1491($0) {
  return HEAP32[HEAP32[$0 + 8 >> 2] >> 2] == ($0 | 0);
 }
 
 function $1492($0) {
  var $1_1 = 0, $2_1 = 0;
  $2_1 = HEAP32[$0 + 4 >> 2];
  $1_1 = HEAP32[$2_1 >> 2];
  HEAP32[$0 + 4 >> 2] = $1_1;
  if ($1_1) {
   $1494($1_1, $0)
  }
  HEAP32[$2_1 + 8 >> 2] = HEAP32[$0 + 8 >> 2];
  label$2 : {
   if ($1491($0)) {
    $1_1 = HEAP32[$0 + 8 >> 2];
    break label$2;
   }
   $1_1 = HEAP32[$0 + 8 >> 2] + 4 | 0;
  }
  HEAP32[$1_1 >> 2] = $2_1;
  HEAP32[$2_1 >> 2] = $0;
  $1494($0, $2_1);
 }
 
 function $1493($0) {
  var $1_1 = 0, $2_1 = 0;
  $2_1 = HEAP32[$0 >> 2];
  $1_1 = HEAP32[$2_1 + 4 >> 2];
  HEAP32[$0 >> 2] = $1_1;
  if ($1_1) {
   $1494($1_1, $0)
  }
  HEAP32[$2_1 + 8 >> 2] = HEAP32[$0 + 8 >> 2];
  label$2 : {
   if ($1491($0)) {
    $1_1 = HEAP32[$0 + 8 >> 2];
    break label$2;
   }
   $1_1 = HEAP32[$0 + 8 >> 2] + 4 | 0;
  }
  HEAP32[$1_1 >> 2] = $2_1;
  HEAP32[$2_1 + 4 >> 2] = $0;
  $1494($0, $2_1);
 }
 
 function $1494($0, $1_1) {
  HEAP32[$0 + 8 >> 2] = $1_1;
 }
 
 function $1500($0) {
  $1501($0 + 16 | 0);
  $2512($0);
 }
 
 function $1501($0) {
  $92($0 + 12 | 0);
  $2512($0);
 }
 
 function $1504($0, $1_1) {
  var $2_1 = 0;
  $2_1 = HEAP32[$0 + 4 >> 2];
  if (($2_1 | 0) != ($1_1 | 0)) {
   while (1) {
    $130($0);
    $2_1 = $2_1 + -32 | 0;
    $1501($2_1);
    if (($1_1 | 0) != ($2_1 | 0)) {
     continue
    }
    break;
   }
  }
  HEAP32[$0 + 4 >> 2] = $1_1;
 }
 
 function $1508($0) {
  return HEAP32[$130($0) >> 2] - HEAP32[$0 >> 2] >> 5;
 }
 
 function $1514($0, $1_1, $2_1, $3_1) {
  if (($1_1 | 0) != ($2_1 | 0)) {
   while (1) {
    $2_1 = $2_1 + -32 | 0;
    $1521(HEAP32[$3_1 >> 2] + -32 | 0, $2_1);
    HEAP32[$3_1 >> 2] = HEAP32[$3_1 >> 2] + -32;
    if (($1_1 | 0) != ($2_1 | 0)) {
     continue
    }
    break;
   }
  }
 }
 
 function $1521($0, $1_1) {
  var $2_1 = 0;
  $437($0, $1_1);
  $1522($0 + 12 | 0, $1_1 + 12 | 0);
  $2_1 = HEAP32[$1_1 + 28 >> 2];
  HEAP32[$0 + 24 >> 2] = HEAP32[$1_1 + 24 >> 2];
  HEAP32[$0 + 28 >> 2] = $2_1;
  return $0;
 }
 
 function $1522($0, $1_1) {
  var $2_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $2_1 = $132($0, $130($1_1));
  HEAP32[$0 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0 + 4 >> 2] = HEAP32[$1_1 + 4 >> 2];
  $0 = HEAP32[$130($1_1) >> 2];
  (wasm2js_i32$0 = $130($2_1), wasm2js_i32$1 = $0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $130($1_1), wasm2js_i32$1 = 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
 }
 
 function $1526($0, $1_1) {
  var $2_1 = 0;
  if (HEAP32[$0 + 8 >> 2] != ($1_1 | 0)) {
   while (1) {
    $416($0);
    $2_1 = HEAP32[$0 + 8 >> 2] + -32 | 0;
    HEAP32[$0 + 8 >> 2] = $2_1;
    $1501($2_1);
    if (HEAP32[$0 + 8 >> 2] != ($1_1 | 0)) {
     continue
    }
    break;
   }
  }
 }
 
 function $1529($0, $1_1, $2_1) {
  HEAP32[$0 >> 2] = $1_1;
  HEAP32[$0 + 4 >> 2] = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$0 + 8 >> 2] = HEAP32[$1_1 + 4 >> 2] + ($2_1 << 5);
  return $0;
 }
 
 function $1530($0, $1_1, $2_1) {
  $1534($1_1, $2_1);
 }
 
 function $1531($0, $1_1) {
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 + 12 >> 2] = $1_1;
  $1_1 = $1535($0);
  if (HEAPU32[$2_1 + 12 >> 2] <= $1_1 >>> 0) {
   $0 = $1508($0);
   if ($0 >>> 0 < $1_1 >>> 1 >>> 0) {
    HEAP32[$2_1 + 8 >> 2] = $0 << 1;
    $1_1 = HEAP32[$360($2_1 + 8 | 0, $2_1 + 12 | 0) >> 2];
   }
   global$0 = $2_1 + 16 | 0;
   return $1_1;
  }
  $2538();
  abort();
 }
 
 function $1534($0, $1_1) {
  var $2_1 = 0;
  $2508($0, $1_1);
  $91($0 + 12 | 0, $1_1 + 12 | 0);
  $2_1 = HEAP32[$1_1 + 28 >> 2];
  HEAP32[$0 + 24 >> 2] = HEAP32[$1_1 + 24 >> 2];
  HEAP32[$0 + 28 >> 2] = $2_1;
 }
 
 function $1535($0) {
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $130($0);
  HEAP32[$1_1 + 12 >> 2] = 134217727;
  HEAP32[$1_1 + 8 >> 2] = 2147483647;
  $0 = HEAP32[$124($1_1 + 12 | 0, $1_1 + 8 | 0) >> 2];
  global$0 = $1_1 + 16 | 0;
  return $0;
 }
 
 function $1539($0) {
  var $1_1 = 0;
  $1_1 = HEAP32[$0 + 4 >> 2];
  if (!$1_1) {
   if (!$1491($0)) {
    while (1) {
     $0 = HEAP32[$0 + 8 >> 2];
     if (!$1491($0)) {
      continue
     }
     break;
    }
   }
   return HEAP32[$0 + 8 >> 2];
  }
  $0 = $1_1;
  while (1) {
   $1_1 = $0;
   $0 = HEAP32[$0 >> 2];
   if ($0) {
    continue
   }
   break;
  };
  return $1_1;
 }
 
 function $1541($0, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[$3_1 >> 2] = $1_1;
  HEAP32[$3_1 + 8 >> 2] = $0;
  $1_1 = $1542($3_1, $3_1 + 8 | 0);
  if (($1_1 | 0) >= 2) {
   $0 = ($1_1 + -2 | 0) / 2 | 0;
   while (1) {
    $1544(HEAP32[$3_1 + 8 >> 2], $2_1, $1_1, $125($3_1 + 8 | 0, $0));
    $4_1 = ($0 | 0) > 0;
    $0 = $0 + -1 | 0;
    if ($4_1) {
     continue
    }
    break;
   };
  }
  global$0 = $3_1 + 16 | 0;
 }
 
 function $1542($0, $1_1) {
  return HEAP32[$0 >> 2] - HEAP32[$1_1 >> 2] >> 5;
 }
 
 function $1543($0, $1_1) {
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  $3_1 = $1521($2_1, $0);
  $1546($0, $1_1);
  $1546($1_1, $3_1);
  $1501($3_1);
  global$0 = $2_1 + 32 | 0;
 }
 
 function $1544($0, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = 0, $6 = 0, $7 = 0, $8 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 + -64 | 0;
  global$0 = $4_1;
  HEAP32[$4_1 + 48 >> 2] = $3_1;
  HEAP32[$4_1 + 56 >> 2] = $0;
  $0 = $1542($4_1 + 48 | 0, $4_1 + 56 | 0);
  label$1 : {
   if (($2_1 | 0) < 2) {
    break label$1
   }
   $7 = ($2_1 + -2 | 0) / 2 | 0;
   if (($7 | 0) < ($0 | 0)) {
    break label$1
   }
   $0 = $0 << 1 | 1;
   (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $125($4_1 + 56 | 0, $0)), HEAP32[wasm2js_i32$0 + 40 >> 2] = wasm2js_i32$1;
   $3_1 = $0 + 1 | 0;
   label$2 : {
    if (($3_1 | 0) >= ($2_1 | 0)) {
     break label$2
    }
    $5_1 = HEAP32[$1_1 >> 2];
    $6 = HEAP32[$4_1 + 40 >> 2];
    (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $125($4_1 + 40 | 0, 1)), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
    if (!FUNCTION_TABLE[$5_1]($6, HEAP32[$4_1 + 8 >> 2])) {
     break label$2
    }
    $138($4_1 + 40 | 0);
    $0 = $3_1;
   }
   if (FUNCTION_TABLE[HEAP32[$1_1 >> 2]](HEAP32[$4_1 + 40 >> 2], HEAP32[$4_1 + 48 >> 2])) {
    break label$1
   }
   $5_1 = $1521($4_1 + 8 | 0, HEAP32[$4_1 + 48 >> 2]);
   while (1) {
    label$4 : {
     $1546(HEAP32[$4_1 + 48 >> 2], HEAP32[$4_1 + 40 >> 2]);
     HEAP32[$4_1 + 48 >> 2] = HEAP32[$4_1 + 40 >> 2];
     if (($7 | 0) < ($0 | 0)) {
      break label$4
     }
     $0 = $0 << 1 | 1;
     (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $125($4_1 + 56 | 0, $0)), HEAP32[wasm2js_i32$0 + 40 >> 2] = wasm2js_i32$1;
     $3_1 = $0 + 1 | 0;
     label$5 : {
      if (($3_1 | 0) >= ($2_1 | 0)) {
       break label$5
      }
      $6 = HEAP32[$1_1 >> 2];
      $8 = HEAP32[$4_1 + 40 >> 2];
      (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $125($4_1 + 40 | 0, 1)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
      if (!FUNCTION_TABLE[$6]($8, HEAP32[$4_1 >> 2])) {
       break label$5
      }
      $138($4_1 + 40 | 0);
      $0 = $3_1;
     }
     if (!FUNCTION_TABLE[HEAP32[$1_1 >> 2]](HEAP32[$4_1 + 40 >> 2], $5_1)) {
      continue
     }
    }
    break;
   };
   $1546(HEAP32[$4_1 + 48 >> 2], $5_1);
   $1501($5_1);
  }
  global$0 = $4_1 - -64 | 0;
 }
 
 function $1545($0, $1_1, $2_1) {
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[$3_1 >> 2] = $1_1;
  HEAP32[$3_1 + 8 >> 2] = $0;
  $0 = $1542($3_1, $3_1 + 8 | 0);
  if (($0 | 0) > 1) {
   while (1) {
    $1547(HEAP32[$3_1 + 8 >> 2], HEAP32[$3_1 >> 2], $2_1, $0);
    $1_1 = ($0 | 0) > 2;
    $1548($3_1);
    $0 = $0 + -1 | 0;
    if ($1_1) {
     continue
    }
    break;
   }
  }
  global$0 = $3_1 + 16 | 0;
 }
 
 function $1546($0, $1_1) {
  var $2_1 = 0;
  $241($0, $1_1);
  $1550($0 + 12 | 0, $1_1 + 12 | 0);
  $2_1 = HEAP32[$1_1 + 28 >> 2];
  HEAP32[$0 + 24 >> 2] = HEAP32[$1_1 + 24 >> 2];
  HEAP32[$0 + 28 >> 2] = $2_1;
 }
 
 function $1547($0, $1_1, $2_1, $3_1) {
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[$4_1 >> 2] = $1_1;
  HEAP32[$4_1 + 8 >> 2] = $0;
  if (($3_1 | 0) >= 2) {
   $1543(HEAP32[$4_1 + 8 >> 2], HEAP32[$1548($4_1) >> 2]);
   $0 = HEAP32[$4_1 + 8 >> 2];
   $1544($0, $2_1, $3_1 + -1 | 0, $0);
  }
  global$0 = $4_1 + 16 | 0;
 }
 
 function $1548($0) {
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + -32;
  return $0;
 }
 
 function $1550($0, $1_1) {
  var $2_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $1551($0);
  $130($1_1);
  $130($0);
  HEAP32[$0 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0 + 4 >> 2] = HEAP32[$1_1 + 4 >> 2];
  $2_1 = HEAP32[$130($1_1) >> 2];
  (wasm2js_i32$0 = $130($0), wasm2js_i32$1 = $2_1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $130($1_1), wasm2js_i32$1 = 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
 }
 
 function $1551($0) {
  var $1_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  if (HEAP32[$0 >> 2]) {
   $1_1 = $133($0);
   $726($0);
   $1227($0, $1_1);
   $130($0);
   $1_1 = HEAP32[$0 >> 2];
   $651($0);
   $2583($1_1);
   (wasm2js_i32$0 = $130($0), wasm2js_i32$1 = 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
   HEAP32[$0 >> 2] = 0;
   HEAP32[$0 + 4 >> 2] = 0;
  }
 }
 
 function $1556($0, $1_1) {
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $1_1 = $1529($2_1, $0, $1_1);
  if (HEAP32[$1_1 + 4 >> 2] != HEAP32[$1_1 + 8 >> 2]) {
   while (1) {
    $130($0);
    $1561(HEAP32[$1_1 + 4 >> 2]);
    $3_1 = HEAP32[$1_1 + 4 >> 2] + 32 | 0;
    HEAP32[$1_1 + 4 >> 2] = $3_1;
    if (HEAP32[$1_1 + 8 >> 2] != ($3_1 | 0)) {
     continue
    }
    break;
   }
  }
  $406($1_1);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1557($0, $1_1) {
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $1_1 = $1559($2_1, $0 + 8 | 0, $1_1);
  if (HEAP32[$1_1 >> 2] != HEAP32[$1_1 + 4 >> 2]) {
   while (1) {
    $416($0);
    $1561(HEAP32[$1_1 >> 2]);
    $3_1 = HEAP32[$1_1 >> 2] + 32 | 0;
    HEAP32[$1_1 >> 2] = $3_1;
    if (HEAP32[$1_1 + 4 >> 2] != ($3_1 | 0)) {
     continue
    }
    break;
   }
  }
  $1007($1_1);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1559($0, $1_1, $2_1) {
  var $3_1 = 0;
  HEAP32[$0 >> 2] = HEAP32[$1_1 >> 2];
  $3_1 = HEAP32[$1_1 >> 2];
  HEAP32[$0 + 8 >> 2] = $1_1;
  HEAP32[$0 + 4 >> 2] = ($2_1 << 5) + $3_1;
  return $0;
 }
 
 function $1561($0) {
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$0 + 24 >> 2] = 0;
  HEAP32[$0 + 28 >> 2] = 0;
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP32[$0 + 20 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 + 12 >> 2] = 0;
  $1490($0);
 }
 
 function $1562($0, $1_1) {
  if ($1_1) {
   $1562($0, HEAP32[$1_1 >> 2]);
   $1562($0, HEAP32[$1_1 + 4 >> 2]);
   $305($0);
   $1500($1_1 + 16 | 0);
   $2583($1_1);
  }
 }
 
 function $1563($0, $1_1, $2_1) {
  if ($2_1) {
   $2591($0, $1_1, $2_1)
  }
 }
 
 function $1569($0, $1_1) {
  var $2_1 = 0;
  $2_1 = HEAP32[$0 + 4 >> 2];
  if (($2_1 | 0) != ($1_1 | 0)) {
   while (1) {
    $130($0);
    $2_1 = $2_1 + -24 | 0;
    $1107($2_1);
    if (($1_1 | 0) != ($2_1 | 0)) {
     continue
    }
    break;
   }
  }
  HEAP32[$0 + 4 >> 2] = $1_1;
 }
 
 function $1570($0, $1_1, $2_1, $3_1) {
  $0 = $2_1 - $1_1 | 0;
  if (($0 | 0) >= 1) {
   $2591(HEAP32[$3_1 >> 2], $1_1, $0);
   HEAP32[$3_1 >> 2] = $0 + HEAP32[$3_1 >> 2];
  }
 }
 
 function $1572($0) {
  return ($0 | 0) == 32 | $0 + -9 >>> 0 < 5;
 }
 
 function $1573($0) {
  $0 = $0 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $5_1 = HEAP32[$0 + 76 >> 2] >= 0 ? 1 : 0;
  $3_1 = HEAP32[$0 >> 2] & 1;
  if (!$3_1) {
   $1_1 = HEAP32[$0 + 52 >> 2];
   if ($1_1) {
    HEAP32[$1_1 + 56 >> 2] = HEAP32[$0 + 56 >> 2]
   }
   $2_1 = HEAP32[$0 + 56 >> 2];
   if ($2_1) {
    HEAP32[$2_1 + 52 >> 2] = $1_1
   }
   if (HEAP32[4933] == ($0 | 0)) {
    HEAP32[4933] = $2_1
   }
  }
  $1_1 = $1574($0);
  $2_1 = FUNCTION_TABLE[HEAP32[$0 + 12 >> 2]]($0) | 0;
  $4_1 = HEAP32[$0 + 96 >> 2];
  if ($4_1) {
   $2583($4_1)
  }
  label$7 : {
   if (!$3_1) {
    $2583($0);
    break label$7;
   }
   if (!$5_1) {
    break label$7
   }
  }
  return $1_1 | $2_1;
 }
 
 function $1574($0) {
  var $1_1 = 0;
  if ($0) {
   if (HEAP32[$0 + 76 >> 2] <= -1) {
    return $1575($0)
   }
   return $1575($0);
  }
  if (HEAP32[4612]) {
   $1_1 = $1574(HEAP32[4612])
  }
  $0 = HEAP32[4933];
  if ($0) {
   while (1) {
    if (HEAPU32[$0 + 20 >> 2] > HEAPU32[$0 + 28 >> 2]) {
     $1_1 = $1575($0) | $1_1
    }
    $0 = HEAP32[$0 + 56 >> 2];
    if ($0) {
     continue
    }
    break;
   }
  }
  return $1_1;
 }
 
 function $1575($0) {
  var $1_1 = 0, $2_1 = 0;
  label$1 : {
   if (HEAPU32[$0 + 20 >> 2] <= HEAPU32[$0 + 28 >> 2]) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[$0 + 36 >> 2]]($0, 0, 0) | 0;
   if (HEAP32[$0 + 20 >> 2]) {
    break label$1
   }
   return -1;
  }
  $1_1 = HEAP32[$0 + 4 >> 2];
  $2_1 = HEAP32[$0 + 8 >> 2];
  if ($1_1 >>> 0 < $2_1 >>> 0) {
   $1_1 = $1_1 - $2_1 | 0;
   FUNCTION_TABLE[HEAP32[$0 + 40 >> 2]]($0, $1_1, $1_1 >> 31, 1) | 0;
  }
  HEAP32[$0 + 28 >> 2] = 0;
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP32[$0 + 20 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = 0;
  return 0;
 }
 
 function $1576() {
  return 19656;
 }
 
 function $1577($0) {
  var $1_1 = 0;
  $1_1 = 2;
  if (!$1617($0, 43)) {
   $1_1 = HEAPU8[$0 | 0] != 114
  }
  $1_1 = $1617($0, 120) ? $1_1 | 128 : $1_1;
  $1_1 = $1617($0, 101) ? $1_1 | 524288 : $1_1;
  $0 = HEAPU8[$0 | 0];
  $1_1 = ($0 | 0) == 114 ? $1_1 : $1_1 | 64;
  $1_1 = ($0 | 0) == 119 ? $1_1 | 512 : $1_1;
  return ($0 | 0) == 97 ? $1_1 | 1024 : $1_1;
 }
 
 function $1578($0) {
  if ($0 >>> 0 >= 4294963201) {
   HEAP32[4914] = 0 - $0;
   $0 = -1;
  }
  return $0;
 }
 
 function $1579($0, $1_1, $2_1, $3_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  label$1 : {
   if (!$1622(fimport$26(HEAP32[$0 + 60 >> 2], $1_1 | 0, $2_1 | 0, $3_1 & 255, $4_1 + 8 | 0) | 0)) {
    $1_1 = HEAP32[$4_1 + 12 >> 2];
    $0 = HEAP32[$4_1 + 8 >> 2];
    break label$1;
   }
   HEAP32[$4_1 + 8 >> 2] = -1;
   HEAP32[$4_1 + 12 >> 2] = -1;
   $1_1 = -1;
   $0 = -1;
  }
  global$0 = $4_1 + 16 | 0;
  i64toi32_i32$HIGH_BITS = $1_1;
  return $0 | 0;
 }
 
 function $1580($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6 = 0, $7 = 0, $8 = 0, $9_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  $4_1 = HEAP32[$0 + 28 >> 2];
  HEAP32[$3_1 + 16 >> 2] = $4_1;
  $5_1 = HEAP32[$0 + 20 >> 2];
  HEAP32[$3_1 + 28 >> 2] = $2_1;
  HEAP32[$3_1 + 24 >> 2] = $1_1;
  $1_1 = $5_1 - $4_1 | 0;
  HEAP32[$3_1 + 20 >> 2] = $1_1;
  $4_1 = $1_1 + $2_1 | 0;
  $9_1 = 2;
  $1_1 = $3_1 + 16 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if (!$1622(fimport$15(HEAP32[$0 + 60 >> 2], $3_1 + 16 | 0, 2, $3_1 + 12 | 0) | 0)) {
      while (1) {
       $5_1 = HEAP32[$3_1 + 12 >> 2];
       if (($5_1 | 0) == ($4_1 | 0)) {
        break label$3
       }
       if (($5_1 | 0) <= -1) {
        break label$2
       }
       $6 = HEAP32[$1_1 + 4 >> 2];
       $7 = $5_1 >>> 0 > $6 >>> 0;
       $8 = ($7 << 3) + $1_1 | 0;
       $6 = $5_1 - ($7 ? $6 : 0) | 0;
       HEAP32[$8 >> 2] = $6 + HEAP32[$8 >> 2];
       $8 = ($7 ? 12 : 4) + $1_1 | 0;
       HEAP32[$8 >> 2] = HEAP32[$8 >> 2] - $6;
       $4_1 = $4_1 - $5_1 | 0;
       $1_1 = $7 ? $1_1 + 8 | 0 : $1_1;
       $9_1 = $9_1 - $7 | 0;
       if (!$1622(fimport$15(HEAP32[$0 + 60 >> 2], $1_1 | 0, $9_1 | 0, $3_1 + 12 | 0) | 0)) {
        continue
       }
       break;
      }
     }
     HEAP32[$3_1 + 12 >> 2] = -1;
     if (($4_1 | 0) != -1) {
      break label$2
     }
    }
    $1_1 = HEAP32[$0 + 44 >> 2];
    HEAP32[$0 + 28 >> 2] = $1_1;
    HEAP32[$0 + 20 >> 2] = $1_1;
    HEAP32[$0 + 16 >> 2] = $1_1 + HEAP32[$0 + 48 >> 2];
    $0 = $2_1;
    break label$1;
   }
   HEAP32[$0 + 28 >> 2] = 0;
   HEAP32[$0 + 16 >> 2] = 0;
   HEAP32[$0 + 20 >> 2] = 0;
   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] | 32;
   $0 = 0;
   if (($9_1 | 0) == 2) {
    break label$1
   }
   $0 = $2_1 - HEAP32[$1_1 + 4 >> 2] | 0;
  }
  global$0 = $3_1 + 32 | 0;
  return $0 | 0;
 }
 
 function $1581($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  HEAP32[$3_1 + 16 >> 2] = $1_1;
  $4_1 = HEAP32[$0 + 48 >> 2];
  HEAP32[$3_1 + 20 >> 2] = $2_1 - (($4_1 | 0) != 0);
  $5_1 = HEAP32[$0 + 44 >> 2];
  HEAP32[$3_1 + 28 >> 2] = $4_1;
  HEAP32[$3_1 + 24 >> 2] = $5_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if ($1622(fimport$16(HEAP32[$0 + 60 >> 2], $3_1 + 16 | 0, 2, $3_1 + 12 | 0) | 0)) {
      HEAP32[$3_1 + 12 >> 2] = -1;
      $2_1 = -1;
      break label$3;
     }
     $4_1 = HEAP32[$3_1 + 12 >> 2];
     if (($4_1 | 0) > 0) {
      break label$2
     }
     $2_1 = $4_1;
    }
    HEAP32[$0 >> 2] = HEAP32[$0 >> 2] | $2_1 & 48 ^ 16;
    break label$1;
   }
   $6 = HEAP32[$3_1 + 20 >> 2];
   if ($4_1 >>> 0 <= $6 >>> 0) {
    $2_1 = $4_1;
    break label$1;
   }
   $5_1 = HEAP32[$0 + 44 >> 2];
   HEAP32[$0 + 4 >> 2] = $5_1;
   HEAP32[$0 + 8 >> 2] = $5_1 + ($4_1 - $6 | 0);
   if (!HEAP32[$0 + 48 >> 2]) {
    break label$1
   }
   HEAP32[$0 + 4 >> 2] = $5_1 + 1;
   HEAP8[($1_1 + $2_1 | 0) + -1 | 0] = HEAPU8[$5_1 | 0];
  }
  global$0 = $3_1 + 32 | 0;
  return $2_1 | 0;
 }
 
 function $1582($0) {
  $0 = $0 | 0;
  return fimport$17(HEAP32[$0 + 60 >> 2]) | 0;
 }
 
 function $1583($0, $1_1) {
  var $2_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if (!$1617(4039, HEAP8[$1_1 | 0])) {
      HEAP32[4914] = 28;
      break label$3;
     }
     $2_1 = $2582(1176);
     if ($2_1) {
      break label$2
     }
    }
    $0 = 0;
    break label$1;
   }
   $2592($2_1, 0, 144);
   if (!$1617($1_1, 43)) {
    HEAP32[$2_1 >> 2] = HEAPU8[$1_1 | 0] == 114 ? 8 : 4
   }
   label$6 : {
    if (HEAPU8[$1_1 | 0] != 97) {
     $1_1 = HEAP32[$2_1 >> 2];
     break label$6;
    }
    $1_1 = fimport$13($0 | 0, 3, 0) | 0;
    if (!($1_1 & 1024)) {
     HEAP32[$3_1 + 16 >> 2] = $1_1 | 1024;
     fimport$13($0 | 0, 4, $3_1 + 16 | 0) | 0;
    }
    $1_1 = HEAP32[$2_1 >> 2] | 128;
    HEAP32[$2_1 >> 2] = $1_1;
   }
   HEAP8[$2_1 + 75 | 0] = 255;
   HEAP32[$2_1 + 48 >> 2] = 1024;
   HEAP32[$2_1 + 60 >> 2] = $0;
   HEAP32[$2_1 + 44 >> 2] = $2_1 + 152;
   label$9 : {
    if ($1_1 & 8) {
     break label$9
    }
    HEAP32[$3_1 >> 2] = $3_1 + 24;
    if (fimport$14($0 | 0, 21523, $3_1 | 0)) {
     break label$9
    }
    HEAP8[$2_1 + 75 | 0] = 10;
   }
   HEAP32[$2_1 + 40 >> 2] = 73;
   HEAP32[$2_1 + 36 >> 2] = 74;
   HEAP32[$2_1 + 32 >> 2] = 75;
   HEAP32[$2_1 + 12 >> 2] = 76;
   if (!HEAP32[4916]) {
    HEAP32[$2_1 + 76 >> 2] = -1
   }
   $0 = $1594($2_1);
  }
  global$0 = $3_1 + 32 | 0;
  return $0;
 }
 
 function $1584($0, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    if (!$1617(4043, HEAP8[$1_1 | 0])) {
     HEAP32[4914] = 28;
     break label$2;
    }
    $4_1 = $1577($1_1);
    HEAP32[$2_1 >> 2] = 438;
    $0 = $1578(fimport$12($0 | 0, $4_1 | 32768, $2_1 | 0) | 0);
    if (($0 | 0) < 0) {
     break label$1
    }
    $3_1 = $1583($0, $1_1);
    if ($3_1) {
     break label$1
    }
    fimport$17($0 | 0) | 0;
   }
   $3_1 = 0;
  }
  global$0 = $2_1 + 16 | 0;
  return $3_1;
 }
 
 function $1585($0) {
  var $1_1 = 0, $2_1 = 0;
  $1_1 = HEAPU8[$0 + 74 | 0];
  HEAP8[$0 + 74 | 0] = $1_1 + -1 | $1_1;
  if (HEAPU32[$0 + 20 >> 2] > HEAPU32[$0 + 28 >> 2]) {
   FUNCTION_TABLE[HEAP32[$0 + 36 >> 2]]($0, 0, 0) | 0
  }
  HEAP32[$0 + 28 >> 2] = 0;
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP32[$0 + 20 >> 2] = 0;
  $1_1 = HEAP32[$0 >> 2];
  if ($1_1 & 4) {
   HEAP32[$0 >> 2] = $1_1 | 32;
   return -1;
  }
  $2_1 = HEAP32[$0 + 44 >> 2] + HEAP32[$0 + 48 >> 2] | 0;
  HEAP32[$0 + 8 >> 2] = $2_1;
  HEAP32[$0 + 4 >> 2] = $2_1;
  return $1_1 << 27 >> 31;
 }
 
 function $1586($0, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6 = 0;
  $4_1 = HEAPU8[$2_1 + 74 | 0];
  HEAP8[$2_1 + 74 | 0] = $4_1 + -1 | $4_1;
  $4_1 = $1_1;
  $5_1 = HEAP32[$2_1 + 4 >> 2];
  $3_1 = HEAP32[$2_1 + 8 >> 2] - $5_1 | 0;
  $6 = $4_1;
  label$2 : {
   if (($3_1 | 0) < 1) {
    break label$2
   }
   $3_1 = $3_1 >>> 0 < $4_1 >>> 0 ? $3_1 : $4_1;
   $2591($0, $5_1, $3_1);
   HEAP32[$2_1 + 4 >> 2] = $3_1 + HEAP32[$2_1 + 4 >> 2];
   $0 = $0 + $3_1 | 0;
   $6 = $4_1 - $3_1 | 0;
  }
  $3_1 = $6;
  if ($3_1) {
   while (1) {
    label$5 : {
     if (!$1585($2_1)) {
      $5_1 = FUNCTION_TABLE[HEAP32[$2_1 + 32 >> 2]]($2_1, $0, $3_1) | 0;
      if ($5_1 + 1 >>> 0 > 1) {
       break label$5
      }
     }
     return $4_1 - $3_1 | 0;
    }
    $0 = $0 + $5_1 | 0;
    $3_1 = $3_1 - $5_1 | 0;
    if ($3_1) {
     continue
    }
    break;
   }
  }
  return $1_1;
 }
 
 function $1587($0, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = 0;
  if (($3_1 | 0) == 1) {
   $5_1 = $1_1;
   $4_1 = HEAP32[$0 + 8 >> 2] - HEAP32[$0 + 4 >> 2] | 0;
   $1_1 = $1_1 - $4_1 | 0;
   $2_1 = $2_1 - (($4_1 >> 31) + ($5_1 >>> 0 < $4_1 >>> 0) | 0) | 0;
  }
  label$2 : {
   if (HEAPU32[$0 + 20 >> 2] > HEAPU32[$0 + 28 >> 2]) {
    FUNCTION_TABLE[HEAP32[$0 + 36 >> 2]]($0, 0, 0) | 0;
    if (!HEAP32[$0 + 20 >> 2]) {
     break label$2
    }
   }
   HEAP32[$0 + 28 >> 2] = 0;
   HEAP32[$0 + 16 >> 2] = 0;
   HEAP32[$0 + 20 >> 2] = 0;
   $2_1 = FUNCTION_TABLE[HEAP32[$0 + 40 >> 2]]($0, $1_1, $2_1, $3_1) >>> 0 >= 0 ? 0 : 1;
   $1_1 = i64toi32_i32$HIGH_BITS;
   if (($1_1 | 0) < 0 ? 1 : ($1_1 | 0) <= 0 ? $2_1 : 0) {
    break label$2
   }
   HEAP32[$0 + 4 >> 2] = 0;
   HEAP32[$0 + 8 >> 2] = 0;
   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] & -17;
   return 0;
  }
  return -1;
 }
 
 function $1588($0, $1_1, $2_1, $3_1) {
  if (HEAP32[$0 + 76 >> 2] <= -1) {
   return $1587($0, $1_1, $2_1, $3_1)
  }
  return $1587($0, $1_1, $2_1, $3_1);
 }
 
 function $1590($0) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $1_1 = HEAP32[$0 + 40 >> 2];
  $2_1 = FUNCTION_TABLE[$1_1]($0, 0, 0, HEAPU8[$0 | 0] & 128 ? (HEAPU32[$0 + 20 >> 2] > HEAPU32[$0 + 28 >> 2] ? 2 : 1) : 1) | 0;
  $1_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $1_1;
  if (($1_1 | 0) > 0 ? 1 : ($1_1 | 0) >= 0 ? ($2_1 >>> 0 < 0 ? 0 : 1) : 0) {
   $4_1 = HEAP32[$0 + 20 >> 2] - HEAP32[$0 + 28 >> 2] | 0;
   $0 = HEAP32[$0 + 8 >> 2] - HEAP32[$0 + 4 >> 2] | 0;
   $5_1 = $2_1 - $0 | 0;
   $1_1 = $4_1 + $5_1 | 0;
   $0 = ($3_1 - (($0 >> 31) + ($2_1 >>> 0 < $0 >>> 0) | 0) | 0) + ($4_1 >> 31) | 0;
   $2_1 = $1_1;
   $3_1 = $1_1 >>> 0 < $5_1 >>> 0 ? $0 + 1 | 0 : $0;
  }
  i64toi32_i32$HIGH_BITS = $3_1;
  return $2_1;
 }
 
 function $1594($0) {
  var $1_1 = 0;
  HEAP32[$0 + 56 >> 2] = HEAP32[4933];
  $1_1 = HEAP32[4933];
  if ($1_1) {
   HEAP32[$1_1 + 52 >> 2] = $0
  }
  HEAP32[4933] = $0;
  return $0;
 }
 
 function $1595($0) {
  return $1611($0, 0);
 }
 
 function $1596($0) {
  return $0 + -48 >>> 0 < 10;
 }
 
 function $1598($0) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0;
  while (1) {
   $1_1 = $0;
   $0 = $1_1 + 1 | 0;
   if ($1572(HEAP8[$1_1 | 0])) {
    continue
   }
   break;
  };
  label$2 : {
   label$3 : {
    label$4 : {
     $2_1 = HEAP8[$1_1 | 0];
     switch ($2_1 + -43 | 0) {
     case 0:
      break label$3;
     case 2:
      break label$4;
     default:
      break label$2;
     };
    }
    $4_1 = 1;
   }
   $2_1 = HEAP8[$0 | 0];
   $1_1 = $0;
   $5_1 = $4_1;
  }
  if ($1596($2_1)) {
   while (1) {
    $3_1 = (Math_imul($3_1, 10) - HEAP8[$1_1 | 0] | 0) + 48 | 0;
    $0 = HEAP8[$1_1 + 1 | 0];
    $1_1 = $1_1 + 1 | 0;
    if ($1596($0)) {
     continue
    }
    break;
   }
  }
  return $5_1 ? $3_1 : 0 - $3_1 | 0;
 }
 
 function $1599($0) {
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = -1;
  label$1 : {
   if ($1585($0)) {
    break label$1
   }
   if ((FUNCTION_TABLE[HEAP32[$0 + 32 >> 2]]($0, $1_1 + 15 | 0, 1) | 0) != 1) {
    break label$1
   }
   $2_1 = HEAPU8[$1_1 + 15 | 0];
  }
  global$0 = $1_1 + 16 | 0;
  return $2_1;
 }
 
 function $1600($0, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6 = 0;
  HEAP32[$0 + 112 >> 2] = $1_1;
  HEAP32[$0 + 116 >> 2] = $2_1;
  $5_1 = HEAP32[$0 + 8 >> 2];
  $6 = HEAP32[$0 + 4 >> 2];
  $3_1 = $5_1 - $6 | 0;
  $4_1 = $3_1 >> 31;
  HEAP32[$0 + 120 >> 2] = $3_1;
  HEAP32[$0 + 124 >> 2] = $4_1;
  if (!(!($1_1 | $2_1) | (($4_1 | 0) < ($2_1 | 0) ? 1 : ($4_1 | 0) <= ($2_1 | 0) ? ($3_1 >>> 0 > $1_1 >>> 0 ? 0 : 1) : 0))) {
   HEAP32[$0 + 104 >> 2] = $1_1 + $6;
   return;
  }
  HEAP32[$0 + 104 >> 2] = $5_1;
 }
 
 function $1601($0) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6 = 0, $7 = 0;
  $2_1 = HEAP32[$0 + 116 >> 2];
  $3_1 = $2_1;
  label$1 : {
   $5_1 = HEAP32[$0 + 112 >> 2];
   label$2 : {
    if ($2_1 | $5_1) {
     $2_1 = HEAP32[$0 + 124 >> 2];
     if (($2_1 | 0) > ($3_1 | 0) ? 1 : ($2_1 | 0) >= ($3_1 | 0) ? (HEAPU32[$0 + 120 >> 2] < $5_1 >>> 0 ? 0 : 1) : 0) {
      break label$2
     }
    }
    $5_1 = $1599($0);
    if (($5_1 | 0) > -1) {
     break label$1
    }
   }
   HEAP32[$0 + 104 >> 2] = 0;
   return -1;
  }
  $2_1 = HEAP32[$0 + 8 >> 2];
  $3_1 = HEAP32[$0 + 116 >> 2];
  $4_1 = $3_1;
  label$4 : {
   label$5 : {
    $1_1 = HEAP32[$0 + 112 >> 2];
    if (!($3_1 | $1_1)) {
     break label$5
    }
    $3_1 = (HEAP32[$0 + 124 >> 2] ^ -1) + $4_1 | 0;
    $4_1 = HEAP32[$0 + 120 >> 2] ^ -1;
    $1_1 = $4_1 + $1_1 | 0;
    if ($1_1 >>> 0 < $4_1 >>> 0) {
     $3_1 = $3_1 + 1 | 0
    }
    $4_1 = $1_1;
    $1_1 = HEAP32[$0 + 4 >> 2];
    $6 = $2_1 - $1_1 | 0;
    $7 = $4_1 >>> 0 < $6 >>> 0 ? 0 : 1;
    $6 = $6 >> 31;
    if (($3_1 | 0) > ($6 | 0) ? 1 : ($3_1 | 0) >= ($6 | 0) ? $7 : 0) {
     break label$5
    }
    HEAP32[$0 + 104 >> 2] = $4_1 + $1_1;
    break label$4;
   }
   HEAP32[$0 + 104 >> 2] = $2_1;
  }
  label$6 : {
   if (!$2_1) {
    $2_1 = HEAP32[$0 + 4 >> 2];
    break label$6;
   }
   $3_1 = $0;
   $1_1 = $2_1;
   $2_1 = HEAP32[$0 + 4 >> 2];
   $1_1 = ($1_1 - $2_1 | 0) + 1 | 0;
   $4_1 = $1_1 + HEAP32[$0 + 120 >> 2] | 0;
   $0 = HEAP32[$0 + 124 >> 2] + ($1_1 >> 31) | 0;
   HEAP32[$3_1 + 120 >> 2] = $4_1;
   HEAP32[$3_1 + 124 >> 2] = $4_1 >>> 0 < $1_1 >>> 0 ? $0 + 1 | 0 : $0;
  }
  $0 = $2_1 + -1 | 0;
  if (HEAPU8[$0 | 0] != ($5_1 | 0)) {
   HEAP8[$0 | 0] = $5_1
  }
  return $5_1;
 }
 
 function $1602($0, $1_1, $2_1, $3_1, $4_1, $5_1, $6, $7, $8) {
  HEAP32[$0 >> 2] = $1_1;
  HEAP32[$0 + 4 >> 2] = $2_1;
  HEAP32[$0 + 8 >> 2] = $3_1;
  HEAP32[$0 + 12 >> 2] = $4_1 & 65535 | ($8 >>> 16 & 32768 | $4_1 >>> 16 & 32767) << 16;
 }
 
 function $1603($0, $1_1, $2_1, $3_1, $4_1, $5_1) {
  var $6 = 0;
  $6 = global$0 - 80 | 0;
  global$0 = $6;
  label$1 : {
   if (($5_1 | 0) >= 16384) {
    $1633($6 + 32 | 0, $1_1, $2_1, $3_1, $4_1, 0, 0, 0, 2147352576);
    $3_1 = HEAP32[$6 + 40 >> 2];
    $4_1 = HEAP32[$6 + 44 >> 2];
    $1_1 = HEAP32[$6 + 32 >> 2];
    $2_1 = HEAP32[$6 + 36 >> 2];
    if (($5_1 | 0) < 32767) {
     $5_1 = $5_1 + -16383 | 0;
     break label$1;
    }
    $1633($6 + 16 | 0, $1_1, $2_1, $3_1, $4_1, 0, 0, 0, 2147352576);
    $5_1 = (($5_1 | 0) < 49149 ? $5_1 : 49149) + -32766 | 0;
    $3_1 = HEAP32[$6 + 24 >> 2];
    $4_1 = HEAP32[$6 + 28 >> 2];
    $1_1 = HEAP32[$6 + 16 >> 2];
    $2_1 = HEAP32[$6 + 20 >> 2];
    break label$1;
   }
   if (($5_1 | 0) > -16383) {
    break label$1
   }
   $1633($6 - -64 | 0, $1_1, $2_1, $3_1, $4_1, 0, 0, 0, 65536);
   $3_1 = HEAP32[$6 + 72 >> 2];
   $4_1 = HEAP32[$6 + 76 >> 2];
   $1_1 = HEAP32[$6 + 64 >> 2];
   $2_1 = HEAP32[$6 + 68 >> 2];
   if (($5_1 | 0) > -32765) {
    $5_1 = $5_1 + 16382 | 0;
    break label$1;
   }
   $1633($6 + 48 | 0, $1_1, $2_1, $3_1, $4_1, 0, 0, 0, 65536);
   $5_1 = (($5_1 | 0) > -49146 ? $5_1 : -49146) + 32764 | 0;
   $3_1 = HEAP32[$6 + 56 >> 2];
   $4_1 = HEAP32[$6 + 60 >> 2];
   $1_1 = HEAP32[$6 + 48 >> 2];
   $2_1 = HEAP32[$6 + 52 >> 2];
  }
  $1633($6, $1_1, $2_1, $3_1, $4_1, 0, 0, 0, $5_1 + 16383 << 16);
  $1_1 = HEAP32[$6 + 12 >> 2];
  HEAP32[$0 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
  HEAP32[$0 + 12 >> 2] = $1_1;
  $1_1 = HEAP32[$6 + 4 >> 2];
  HEAP32[$0 >> 2] = HEAP32[$6 >> 2];
  HEAP32[$0 + 4 >> 2] = $1_1;
  global$0 = $6 + 80 | 0;
 }
 
 function $1605($0, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = 0, $6 = 0, $7 = 0, $8 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0;
  $6 = global$0 - 48 | 0;
  global$0 = $6;
  label$1 : {
   if ($2_1 >>> 0 <= 2) {
    $5_1 = $1_1 + 4 | 0;
    $2_1 = $2_1 << 2;
    $7 = HEAP32[$2_1 + 4124 >> 2];
    $11_1 = HEAP32[$2_1 + 4112 >> 2];
    while (1) {
     $2_1 = HEAP32[$1_1 + 4 >> 2];
     label$4 : {
      if ($2_1 >>> 0 < HEAPU32[$1_1 + 104 >> 2]) {
       HEAP32[$5_1 >> 2] = $2_1 + 1;
       $2_1 = HEAPU8[$2_1 | 0];
       break label$4;
      }
      $2_1 = $1601($1_1);
     }
     if ($1572($2_1)) {
      continue
     }
     break;
    };
    $8 = 1;
    label$6 : {
     label$7 : {
      switch ($2_1 + -43 | 0) {
      case 0:
      case 2:
       break label$7;
      default:
       break label$6;
      };
     }
     $8 = ($2_1 | 0) == 45 ? -1 : 1;
     $2_1 = HEAP32[$1_1 + 4 >> 2];
     if ($2_1 >>> 0 < HEAPU32[$1_1 + 104 >> 2]) {
      HEAP32[$5_1 >> 2] = $2_1 + 1;
      $2_1 = HEAPU8[$2_1 | 0];
      break label$6;
     }
     $2_1 = $1601($1_1);
    }
    label$9 : {
     label$10 : {
      while (1) {
       if (HEAP8[$4_1 + 4047 | 0] == ($2_1 | 32)) {
        label$13 : {
         if ($4_1 >>> 0 > 6) {
          break label$13
         }
         $2_1 = HEAP32[$1_1 + 4 >> 2];
         if ($2_1 >>> 0 < HEAPU32[$1_1 + 104 >> 2]) {
          HEAP32[$5_1 >> 2] = $2_1 + 1;
          $2_1 = HEAPU8[$2_1 | 0];
          break label$13;
         }
         $2_1 = $1601($1_1);
        }
        $4_1 = $4_1 + 1 | 0;
        if (($4_1 | 0) != 8) {
         continue
        }
        break label$10;
       }
       break;
      };
      if (($4_1 | 0) != 3) {
       if (($4_1 | 0) == 8) {
        break label$10
       }
       if (!$3_1 | $4_1 >>> 0 < 4) {
        break label$9
       }
       if (($4_1 | 0) == 8) {
        break label$10
       }
      }
      $1_1 = HEAP32[$1_1 + 104 >> 2];
      if ($1_1) {
       HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] + -1
      }
      if (!$3_1 | $4_1 >>> 0 < 4) {
       break label$10
      }
      while (1) {
       if ($1_1) {
        HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] + -1
       }
       $4_1 = $4_1 + -1 | 0;
       if ($4_1 >>> 0 > 3) {
        continue
       }
       break;
      };
     }
     $1629($6, Math_fround(Math_fround($8 | 0) * Math_fround(infinity)));
     $8 = HEAP32[$6 + 8 >> 2];
     $2_1 = HEAP32[$6 + 12 >> 2];
     $9_1 = HEAP32[$6 >> 2];
     $10_1 = HEAP32[$6 + 4 >> 2];
     break label$1;
    }
    label$19 : {
     label$20 : {
      label$21 : {
       if ($4_1) {
        break label$21
       }
       $4_1 = 0;
       while (1) {
        if (HEAP8[$4_1 + 4056 | 0] != ($2_1 | 32)) {
         break label$21
        }
        label$23 : {
         if ($4_1 >>> 0 > 1) {
          break label$23
         }
         $2_1 = HEAP32[$1_1 + 4 >> 2];
         if ($2_1 >>> 0 < HEAPU32[$1_1 + 104 >> 2]) {
          HEAP32[$5_1 >> 2] = $2_1 + 1;
          $2_1 = HEAPU8[$2_1 | 0];
          break label$23;
         }
         $2_1 = $1601($1_1);
        }
        $4_1 = $4_1 + 1 | 0;
        if (($4_1 | 0) != 3) {
         continue
        }
        break;
       };
       break label$20;
      }
      label$25 : {
       switch ($4_1 | 0) {
       case 0:
        label$27 : {
         if (($2_1 | 0) != 48) {
          break label$27
         }
         $4_1 = HEAP32[$1_1 + 4 >> 2];
         label$28 : {
          if ($4_1 >>> 0 < HEAPU32[$1_1 + 104 >> 2]) {
           HEAP32[$5_1 >> 2] = $4_1 + 1;
           $4_1 = HEAPU8[$4_1 | 0];
           break label$28;
          }
          $4_1 = $1601($1_1);
         }
         if (($4_1 & -33) == 88) {
          $1606($6 + 16 | 0, $1_1, $11_1, $7, $8, $3_1);
          $8 = HEAP32[$6 + 24 >> 2];
          $2_1 = HEAP32[$6 + 28 >> 2];
          $9_1 = HEAP32[$6 + 16 >> 2];
          $10_1 = HEAP32[$6 + 20 >> 2];
          break label$1;
         }
         if (!HEAP32[$1_1 + 104 >> 2]) {
          break label$27
         }
         HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] + -1;
        }
        $1607($6 + 32 | 0, $1_1, $2_1, $11_1, $7, $8, $3_1);
        $8 = HEAP32[$6 + 40 >> 2];
        $2_1 = HEAP32[$6 + 44 >> 2];
        $9_1 = HEAP32[$6 + 32 >> 2];
        $10_1 = HEAP32[$6 + 36 >> 2];
        break label$1;
       case 3:
        break label$20;
       default:
        break label$25;
       };
      }
      if (HEAP32[$1_1 + 104 >> 2]) {
       HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] + -1
      }
      break label$19;
     }
     label$32 : {
      $2_1 = HEAP32[$1_1 + 4 >> 2];
      label$33 : {
       if ($2_1 >>> 0 < HEAPU32[$1_1 + 104 >> 2]) {
        HEAP32[$5_1 >> 2] = $2_1 + 1;
        $2_1 = HEAPU8[$2_1 | 0];
        break label$33;
       }
       $2_1 = $1601($1_1);
      }
      if (($2_1 | 0) == 40) {
       $4_1 = 1;
       break label$32;
      }
      $8 = 0;
      $2_1 = 2147450880;
      if (!HEAP32[$1_1 + 104 >> 2]) {
       break label$1
      }
      HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] + -1;
      break label$1;
     }
     while (1) {
      $2_1 = HEAP32[$1_1 + 4 >> 2];
      label$37 : {
       if ($2_1 >>> 0 < HEAPU32[$1_1 + 104 >> 2]) {
        HEAP32[$5_1 >> 2] = $2_1 + 1;
        $7 = HEAPU8[$2_1 | 0];
        break label$37;
       }
       $7 = $1601($1_1);
      }
      if (!($7 + -97 >>> 0 >= 26 ? !($7 + -48 >>> 0 < 10 | $7 + -65 >>> 0 < 26 | ($7 | 0) == 95) : 0)) {
       $4_1 = $4_1 + 1 | 0;
       continue;
      }
      break;
     };
     $8 = 0;
     $2_1 = 2147450880;
     if (($7 | 0) == 41) {
      break label$1
     }
     $7 = HEAP32[$1_1 + 104 >> 2];
     if ($7) {
      HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] + -1
     }
     if ($3_1) {
      if (!$4_1) {
       break label$1
      }
      while (1) {
       $4_1 = $4_1 + -1 | 0;
       if ($7) {
        HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] + -1
       }
       if ($4_1) {
        continue
       }
       break;
      };
      break label$1;
     }
    }
    HEAP32[4914] = 28;
    $1600($1_1, 0, 0);
   }
   $8 = 0;
   $2_1 = 0;
  }
  HEAP32[$0 >> 2] = $9_1;
  HEAP32[$0 + 4 >> 2] = $10_1;
  HEAP32[$0 + 8 >> 2] = $8;
  HEAP32[$0 + 12 >> 2] = $2_1;
  global$0 = $6 + 48 | 0;
 }
 
 function $1606($0, $1_1, $2_1, $3_1, $4_1, $5_1) {
  var $6 = 0, $7 = 0, $8 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14 = 0, $15 = 0, $16_1 = 0, $17 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0;
  $6 = global$0 - 432 | 0;
  global$0 = $6;
  $7 = HEAP32[$1_1 + 4 >> 2];
  label$1 : {
   if ($7 >>> 0 < HEAPU32[$1_1 + 104 >> 2]) {
    HEAP32[$1_1 + 4 >> 2] = $7 + 1;
    $8 = HEAPU8[$7 | 0];
    break label$1;
   }
   $8 = $1601($1_1);
  }
  label$3 : {
   label$4 : {
    while (1) {
     label$6 : {
      if (($8 | 0) != 48) {
       if (($8 | 0) != 46) {
        break label$3
       }
       $7 = HEAP32[$1_1 + 4 >> 2];
       if ($7 >>> 0 >= HEAPU32[$1_1 + 104 >> 2]) {
        break label$6
       }
       HEAP32[$1_1 + 4 >> 2] = $7 + 1;
       $8 = HEAPU8[$7 | 0];
       break label$4;
      }
      $7 = HEAP32[$1_1 + 4 >> 2];
      if ($7 >>> 0 < HEAPU32[$1_1 + 104 >> 2]) {
       HEAP32[$1_1 + 4 >> 2] = $7 + 1;
       $8 = HEAPU8[$7 | 0];
      } else {
       $8 = $1601($1_1)
      }
      $23_1 = 1;
      continue;
     }
     break;
    };
    $8 = $1601($1_1);
   }
   $22_1 = 1;
   if (($8 | 0) != 48) {
    break label$3
   }
   while (1) {
    $15 = $15 + -1 | 0;
    $12_1 = $12_1 + -1 | 0;
    if ($12_1 >>> 0 < 4294967295) {
     $15 = $15 + 1 | 0
    }
    $7 = HEAP32[$1_1 + 4 >> 2];
    label$11 : {
     if ($7 >>> 0 < HEAPU32[$1_1 + 104 >> 2]) {
      HEAP32[$1_1 + 4 >> 2] = $7 + 1;
      $8 = HEAPU8[$7 | 0];
      break label$11;
     }
     $8 = $1601($1_1);
    }
    if (($8 | 0) == 48) {
     continue
    }
    break;
   };
   $23_1 = 1;
  }
  $14 = 1073676288;
  $7 = 0;
  while (1) {
   label$14 : {
    $25_1 = $8 | 32;
    label$15 : {
     label$16 : {
      $16_1 = $8 + -48 | 0;
      if ($16_1 >>> 0 < 10) {
       break label$16
      }
      if ($25_1 + -97 >>> 0 > 5 ? ($8 | 0) != 46 : 0) {
       break label$14
      }
      if (($8 | 0) != 46) {
       break label$16
      }
      if ($22_1) {
       break label$14
      }
      $22_1 = 1;
      $12_1 = $9_1;
      $15 = $7;
      break label$15;
     }
     $16_1 = ($8 | 0) > 57 ? $25_1 + -87 | 0 : $16_1;
     label$17 : {
      if (($7 | 0) < 0 ? 1 : ($7 | 0) <= 0 ? ($9_1 >>> 0 > 7 ? 0 : 1) : 0) {
       $17 = $16_1 + ($17 << 4) | 0;
       break label$17;
      }
      if (($7 | 0) < 0 ? 1 : ($7 | 0) <= 0 ? ($9_1 >>> 0 > 28 ? 0 : 1) : 0) {
       $1630($6 + 48 | 0, $16_1);
       $1633($6 + 32 | 0, $20_1, $21_1, $13_1, $14, 0, 0, 0, 1073414144);
       $20_1 = HEAP32[$6 + 32 >> 2];
       $21_1 = HEAP32[$6 + 36 >> 2];
       $13_1 = HEAP32[$6 + 40 >> 2];
       $14 = HEAP32[$6 + 44 >> 2];
       $1633($6 + 16 | 0, $20_1, $21_1, $13_1, $14, HEAP32[$6 + 48 >> 2], HEAP32[$6 + 52 >> 2], HEAP32[$6 + 56 >> 2], HEAP32[$6 + 60 >> 2]);
       $1623($6, $10_1, $11_1, $18_1, $19_1, HEAP32[$6 + 16 >> 2], HEAP32[$6 + 20 >> 2], HEAP32[$6 + 24 >> 2], HEAP32[$6 + 28 >> 2]);
       $18_1 = HEAP32[$6 + 8 >> 2];
       $19_1 = HEAP32[$6 + 12 >> 2];
       $10_1 = HEAP32[$6 >> 2];
       $11_1 = HEAP32[$6 + 4 >> 2];
       break label$17;
      }
      if (!$16_1 | $24_1) {
       break label$17
      }
      $1633($6 + 80 | 0, $20_1, $21_1, $13_1, $14, 0, 0, 0, 1073610752);
      $1623($6 - -64 | 0, $10_1, $11_1, $18_1, $19_1, HEAP32[$6 + 80 >> 2], HEAP32[$6 + 84 >> 2], HEAP32[$6 + 88 >> 2], HEAP32[$6 + 92 >> 2]);
      $18_1 = HEAP32[$6 + 72 >> 2];
      $19_1 = HEAP32[$6 + 76 >> 2];
      $24_1 = 1;
      $10_1 = HEAP32[$6 + 64 >> 2];
      $11_1 = HEAP32[$6 + 68 >> 2];
     }
     $9_1 = $9_1 + 1 | 0;
     if ($9_1 >>> 0 < 1) {
      $7 = $7 + 1 | 0
     }
     $23_1 = 1;
    }
    $16_1 = HEAP32[$1_1 + 4 >> 2];
    if ($16_1 >>> 0 < HEAPU32[$1_1 + 104 >> 2]) {
     HEAP32[$1_1 + 4 >> 2] = $16_1 + 1;
     $8 = HEAPU8[$16_1 | 0];
    } else {
     $8 = $1601($1_1)
    }
    continue;
   }
   break;
  };
  label$22 : {
   label$23 : {
    label$24 : {
     if (!$23_1) {
      if (!HEAP32[$1_1 + 104 >> 2]) {
       if ($5_1) {
        break label$23
       }
       break label$24;
      }
      $2_1 = HEAP32[$1_1 + 4 >> 2];
      HEAP32[$1_1 + 4 >> 2] = $2_1 + -1;
      if (!$5_1) {
       break label$24
      }
      HEAP32[$1_1 + 4 >> 2] = $2_1 + -2;
      if (!$22_1) {
       break label$23
      }
      HEAP32[$1_1 + 4 >> 2] = $2_1 + -3;
      break label$23;
     }
     if (($7 | 0) < 0 ? 1 : ($7 | 0) <= 0 ? ($9_1 >>> 0 > 7 ? 0 : 1) : 0) {
      $13_1 = $9_1;
      $14 = $7;
      while (1) {
       $17 = $17 << 4;
       $13_1 = $13_1 + 1 | 0;
       if ($13_1 >>> 0 < 1) {
        $14 = $14 + 1 | 0
       }
       if (($13_1 | 0) != 8 | $14) {
        continue
       }
       break;
      };
     }
     label$29 : {
      if (($8 & -33) == 80) {
       $13_1 = $1608($1_1, $5_1);
       $24_1 = i64toi32_i32$HIGH_BITS;
       $14 = $24_1;
       if ($13_1 | ($14 | 0) != -2147483648) {
        break label$29
       }
       if ($5_1) {
        $13_1 = 0;
        $14 = 0;
        if (!HEAP32[$1_1 + 104 >> 2]) {
         break label$29
        }
        HEAP32[$1_1 + 4 >> 2] = HEAP32[$1_1 + 4 >> 2] + -1;
        break label$29;
       }
       $10_1 = 0;
       $11_1 = 0;
       $1600($1_1, 0, 0);
       $2_1 = 0;
       $1_1 = 0;
       break label$22;
      }
      $13_1 = 0;
      $14 = 0;
      if (!HEAP32[$1_1 + 104 >> 2]) {
       break label$29
      }
      HEAP32[$1_1 + 4 >> 2] = HEAP32[$1_1 + 4 >> 2] + -1;
     }
     if (!$17) {
      $1628($6 + 112 | 0, +($4_1 | 0) * 0.0);
      $10_1 = HEAP32[$6 + 112 >> 2];
      $11_1 = HEAP32[$6 + 116 >> 2];
      $2_1 = HEAP32[$6 + 120 >> 2];
      $1_1 = HEAP32[$6 + 124 >> 2];
      break label$22;
     }
     $5_1 = $22_1 ? $12_1 : $9_1;
     $1_1 = ($22_1 ? $15 : $7) << 2 | $5_1 >>> 30;
     $7 = $13_1 + ($5_1 << 2) | 0;
     $12_1 = $7 + -32 | 0;
     $9_1 = $12_1;
     $5_1 = 0 - $3_1 | 0;
     $1_1 = $1_1 + $14 | 0;
     $1_1 = ($7 >>> 0 < $13_1 >>> 0 ? $1_1 + 1 | 0 : $1_1) + -1 | 0;
     $7 = $9_1 >>> 0 < 4294967264 ? $1_1 + 1 | 0 : $1_1;
     $1_1 = $5_1 >> 31;
     if (($7 | 0) > ($1_1 | 0) ? 1 : ($7 | 0) >= ($1_1 | 0) ? ($9_1 >>> 0 <= $5_1 >>> 0 ? 0 : 1) : 0) {
      HEAP32[4914] = 68;
      $1630($6 + 160 | 0, $4_1);
      $1633($6 + 144 | 0, HEAP32[$6 + 160 >> 2], HEAP32[$6 + 164 >> 2], HEAP32[$6 + 168 >> 2], HEAP32[$6 + 172 >> 2], -1, -1, -1, 2147418111);
      $1633($6 + 128 | 0, HEAP32[$6 + 144 >> 2], HEAP32[$6 + 148 >> 2], HEAP32[$6 + 152 >> 2], HEAP32[$6 + 156 >> 2], -1, -1, -1, 2147418111);
      $10_1 = HEAP32[$6 + 128 >> 2];
      $11_1 = HEAP32[$6 + 132 >> 2];
      $2_1 = HEAP32[$6 + 136 >> 2];
      $1_1 = HEAP32[$6 + 140 >> 2];
      break label$22;
     }
     $1_1 = $3_1 + -226 | 0;
     $5_1 = $9_1 >>> 0 < $1_1 >>> 0 ? 0 : 1;
     $1_1 = $1_1 >> 31;
     if (($7 | 0) > ($1_1 | 0) ? 1 : ($7 | 0) >= ($1_1 | 0) ? $5_1 : 0) {
      if (($17 | 0) > -1) {
       while (1) {
        $1623($6 + 416 | 0, $10_1, $11_1, $18_1, $19_1, 0, 0, 0, -1073807360);
        $12_1 = $1626($10_1, $11_1, $18_1, $19_1);
        $5_1 = ($12_1 | 0) < 0;
        $1_1 = $5_1;
        $1623($6 + 400 | 0, $10_1, $11_1, $18_1, $19_1, $1_1 ? $10_1 : HEAP32[$6 + 416 >> 2], $1_1 ? $11_1 : HEAP32[$6 + 420 >> 2], $1_1 ? $18_1 : HEAP32[$6 + 424 >> 2], $1_1 ? $19_1 : HEAP32[$6 + 428 >> 2]);
        $7 = $7 + -1 | 0;
        $9_1 = $9_1 + -1 | 0;
        if ($9_1 >>> 0 < 4294967295) {
         $7 = $7 + 1 | 0
        }
        $18_1 = HEAP32[$6 + 408 >> 2];
        $19_1 = HEAP32[$6 + 412 >> 2];
        $10_1 = HEAP32[$6 + 400 >> 2];
        $11_1 = HEAP32[$6 + 404 >> 2];
        $17 = $17 << 1 | ($12_1 | 0) > -1;
        if (($17 | 0) > -1) {
         continue
        }
        break;
       }
      }
      $12_1 = ($9_1 - $3_1 | 0) + 32 | 0;
      $5_1 = $12_1;
      $1_1 = $5_1;
      $8 = ($1_1 | 0) > 0 ? $1_1 : 0;
      $1_1 = $7 - (($3_1 >> 31) + ($9_1 >>> 0 < $3_1 >>> 0) | 0) | 0;
      $3_1 = $5_1 >>> 0 < 32 ? $1_1 + 1 | 0 : $1_1;
      $1_1 = $2_1 >> 31;
      $2_1 = (($3_1 | 0) < ($1_1 | 0) ? 1 : ($3_1 | 0) <= ($1_1 | 0) ? ($5_1 >>> 0 >= $2_1 >>> 0 ? 0 : 1) : 0) ? $8 : $2_1;
      label$37 : {
       if (($2_1 | 0) >= 113) {
        $1630($6 + 384 | 0, $4_1);
        $12_1 = HEAP32[$6 + 392 >> 2];
        $15 = HEAP32[$6 + 396 >> 2];
        $20_1 = HEAP32[$6 + 384 >> 2];
        $21_1 = HEAP32[$6 + 388 >> 2];
        $5_1 = 0;
        $4_1 = 0;
        $3_1 = 0;
        $1_1 = 0;
        break label$37;
       }
       $1628($6 + 352 | 0, $2589(144 - $2_1 | 0));
       $1630($6 + 336 | 0, $4_1);
       $20_1 = HEAP32[$6 + 336 >> 2];
       $21_1 = HEAP32[$6 + 340 >> 2];
       $12_1 = HEAP32[$6 + 344 >> 2];
       $15 = HEAP32[$6 + 348 >> 2];
       $1602($6 + 368 | 0, HEAP32[$6 + 352 >> 2], HEAP32[$6 + 356 >> 2], HEAP32[$6 + 360 >> 2], HEAP32[$6 + 364 >> 2], $20_1, $21_1, $12_1, $15);
       $5_1 = HEAP32[$6 + 376 >> 2];
       $4_1 = HEAP32[$6 + 380 >> 2];
       $3_1 = HEAP32[$6 + 372 >> 2];
       $1_1 = HEAP32[$6 + 368 >> 2];
      }
      $2_1 = !($17 & 1) & (($1625($10_1, $11_1, $18_1, $19_1, 0, 0, 0, 0) | 0) != 0 & ($2_1 | 0) < 32);
      $1631($6 + 320 | 0, $2_1 + $17 | 0);
      $1633($6 + 304 | 0, $20_1, $21_1, $12_1, $15, HEAP32[$6 + 320 >> 2], HEAP32[$6 + 324 >> 2], HEAP32[$6 + 328 >> 2], HEAP32[$6 + 332 >> 2]);
      $1623($6 + 272 | 0, HEAP32[$6 + 304 >> 2], HEAP32[$6 + 308 >> 2], HEAP32[$6 + 312 >> 2], HEAP32[$6 + 316 >> 2], $1_1, $3_1, $5_1, $4_1);
      $1633($6 + 288 | 0, $2_1 ? 0 : $10_1, $2_1 ? 0 : $11_1, $2_1 ? 0 : $18_1, $2_1 ? 0 : $19_1, $20_1, $21_1, $12_1, $15);
      $1623($6 + 256 | 0, HEAP32[$6 + 288 >> 2], HEAP32[$6 + 292 >> 2], HEAP32[$6 + 296 >> 2], HEAP32[$6 + 300 >> 2], HEAP32[$6 + 272 >> 2], HEAP32[$6 + 276 >> 2], HEAP32[$6 + 280 >> 2], HEAP32[$6 + 284 >> 2]);
      $1635($6 + 240 | 0, HEAP32[$6 + 256 >> 2], HEAP32[$6 + 260 >> 2], HEAP32[$6 + 264 >> 2], HEAP32[$6 + 268 >> 2], $1_1, $3_1, $5_1, $4_1);
      $4_1 = HEAP32[$6 + 240 >> 2];
      $3_1 = HEAP32[$6 + 244 >> 2];
      $2_1 = HEAP32[$6 + 248 >> 2];
      $1_1 = HEAP32[$6 + 252 >> 2];
      if (!$1625($4_1, $3_1, $2_1, $1_1, 0, 0, 0, 0)) {
       HEAP32[4914] = 68
      }
      $1603($6 + 224 | 0, $4_1, $3_1, $2_1, $1_1, $9_1);
      $10_1 = HEAP32[$6 + 224 >> 2];
      $11_1 = HEAP32[$6 + 228 >> 2];
      $2_1 = HEAP32[$6 + 232 >> 2];
      $1_1 = HEAP32[$6 + 236 >> 2];
      break label$22;
     }
     HEAP32[4914] = 68;
     $1630($6 + 208 | 0, $4_1);
     $1633($6 + 192 | 0, HEAP32[$6 + 208 >> 2], HEAP32[$6 + 212 >> 2], HEAP32[$6 + 216 >> 2], HEAP32[$6 + 220 >> 2], 0, 0, 0, 65536);
     $1633($6 + 176 | 0, HEAP32[$6 + 192 >> 2], HEAP32[$6 + 196 >> 2], HEAP32[$6 + 200 >> 2], HEAP32[$6 + 204 >> 2], 0, 0, 0, 65536);
     $10_1 = HEAP32[$6 + 176 >> 2];
     $11_1 = HEAP32[$6 + 180 >> 2];
     $2_1 = HEAP32[$6 + 184 >> 2];
     $1_1 = HEAP32[$6 + 188 >> 2];
     break label$22;
    }
    $1600($1_1, 0, 0);
   }
   $1628($6 + 96 | 0, +($4_1 | 0) * 0.0);
   $10_1 = HEAP32[$6 + 96 >> 2];
   $11_1 = HEAP32[$6 + 100 >> 2];
   $2_1 = HEAP32[$6 + 104 >> 2];
   $1_1 = HEAP32[$6 + 108 >> 2];
  }
  HEAP32[$0 >> 2] = $10_1;
  HEAP32[$0 + 4 >> 2] = $11_1;
  HEAP32[$0 + 8 >> 2] = $2_1;
  HEAP32[$0 + 12 >> 2] = $1_1;
  global$0 = $6 + 432 | 0;
 }
 
 function $1607($0, $1_1, $2_1, $3_1, $4_1, $5_1, $6) {
  var $7 = 0, $8 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14 = 0, $15 = 0, $16_1 = 0, $17 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0.0, $25_1 = 0, $26_1 = 0, $27_1 = 0;
  $7 = global$0 - 8960 | 0;
  global$0 = $7;
  $22_1 = $3_1 + $4_1 | 0;
  $25_1 = 0 - $22_1 | 0;
  label$1 : {
   label$2 : {
    while (1) {
     if (($2_1 | 0) != 48) {
      label$4 : {
       if (($2_1 | 0) != 46) {
        break label$1
       }
       $2_1 = HEAP32[$1_1 + 4 >> 2];
       if ($2_1 >>> 0 >= HEAPU32[$1_1 + 104 >> 2]) {
        break label$4
       }
       HEAP32[$1_1 + 4 >> 2] = $2_1 + 1;
       $2_1 = HEAPU8[$2_1 | 0];
       break label$2;
      }
     } else {
      $2_1 = HEAP32[$1_1 + 4 >> 2];
      if ($2_1 >>> 0 < HEAPU32[$1_1 + 104 >> 2]) {
       $15 = 1;
       HEAP32[$1_1 + 4 >> 2] = $2_1 + 1;
       $2_1 = HEAPU8[$2_1 | 0];
      } else {
       $15 = 1;
       $2_1 = $1601($1_1);
      }
      continue;
     }
     break;
    };
    $2_1 = $1601($1_1);
   }
   $10_1 = 1;
   if (($2_1 | 0) != 48) {
    break label$1
   }
   while (1) {
    $8 = $8 + -1 | 0;
    $9_1 = $9_1 + -1 | 0;
    if ($9_1 >>> 0 < 4294967295) {
     $8 = $8 + 1 | 0
    }
    $2_1 = HEAP32[$1_1 + 4 >> 2];
    label$9 : {
     if ($2_1 >>> 0 < HEAPU32[$1_1 + 104 >> 2]) {
      HEAP32[$1_1 + 4 >> 2] = $2_1 + 1;
      $2_1 = HEAPU8[$2_1 | 0];
      break label$9;
     }
     $2_1 = $1601($1_1);
    }
    if (($2_1 | 0) == 48) {
     continue
    }
    break;
   };
   $15 = 1;
  }
  HEAP32[$7 + 768 >> 2] = 0;
  $26_1 = $0;
  $27_1 = $0;
  label$11 : {
   label$12 : {
    $12_1 = ($2_1 | 0) == 46;
    $17 = $2_1 + -48 | 0;
    label$13 : {
     label$14 : {
      label$15 : {
       if ($12_1 | $17 >>> 0 <= 9) {
        while (1) {
         label$19 : {
          if ($12_1 & 1) {
           if (!$10_1) {
            $9_1 = $14;
            $8 = $13_1;
            $10_1 = 1;
            break label$19;
           }
           $15 = ($15 | 0) != 0;
           break label$15;
          }
          $14 = $14 + 1 | 0;
          if ($14 >>> 0 < 1) {
           $13_1 = $13_1 + 1 | 0
          }
          if (($11_1 | 0) <= 2044) {
           $20_1 = ($2_1 | 0) != 48 ? $14 : $20_1;
           $18_1 = ($7 + 768 | 0) + ($11_1 << 2) | 0;
           HEAP32[$18_1 >> 2] = $16_1 ? (Math_imul(HEAP32[$18_1 >> 2], 10) + $2_1 | 0) + -48 | 0 : $17;
           $15 = 1;
           $2_1 = $16_1 + 1 | 0;
           $12_1 = ($2_1 | 0) == 9;
           $16_1 = $12_1 ? 0 : $2_1;
           $11_1 = $11_1 + $12_1 | 0;
           break label$19;
          }
          if (($2_1 | 0) == 48) {
           break label$19
          }
          HEAP32[$7 + 8944 >> 2] = HEAP32[$7 + 8944 >> 2] | 1;
         }
         $2_1 = HEAP32[$1_1 + 4 >> 2];
         label$25 : {
          if ($2_1 >>> 0 < HEAPU32[$1_1 + 104 >> 2]) {
           HEAP32[$1_1 + 4 >> 2] = $2_1 + 1;
           $2_1 = HEAPU8[$2_1 | 0];
           break label$25;
          }
          $2_1 = $1601($1_1);
         }
         $12_1 = ($2_1 | 0) == 46;
         $17 = $2_1 + -48 | 0;
         if ($12_1 | $17 >>> 0 < 10) {
          continue
         }
         break;
        }
       }
       $9_1 = $10_1 ? $9_1 : $14;
       $8 = $10_1 ? $8 : $13_1;
       if (!(!$15 | ($2_1 & -33) != 69)) {
        $2_1 = $1608($1_1, $6);
        $12_1 = i64toi32_i32$HIGH_BITS;
        $10_1 = $12_1;
        label$28 : {
         if ($2_1 | ($10_1 | 0) != -2147483648) {
          break label$28
         }
         if (!$6) {
          break label$13
         }
         $2_1 = 0;
         $10_1 = 0;
         if (!HEAP32[$1_1 + 104 >> 2]) {
          break label$28
         }
         HEAP32[$1_1 + 4 >> 2] = HEAP32[$1_1 + 4 >> 2] + -1;
        }
        $8 = $8 + $10_1 | 0;
        $9_1 = $2_1 + $9_1 | 0;
        if ($9_1 >>> 0 < $2_1 >>> 0) {
         $8 = $8 + 1 | 0
        }
        break label$12;
       }
       $15 = ($15 | 0) != 0;
       if (($2_1 | 0) < 0) {
        break label$14
       }
      }
      if (!HEAP32[$1_1 + 104 >> 2]) {
       break label$14
      }
      HEAP32[$1_1 + 4 >> 2] = HEAP32[$1_1 + 4 >> 2] + -1;
     }
     if ($15) {
      break label$12
     }
     HEAP32[4914] = 28;
    }
    $1600($1_1, 0, 0);
    $9_1 = 0;
    $8 = 0;
    $2_1 = 0;
    $1_1 = 0;
    break label$11;
   }
   $1_1 = HEAP32[$7 + 768 >> 2];
   if (!$1_1) {
    $1628($7, +($5_1 | 0) * 0.0);
    $9_1 = HEAP32[$7 + 8 >> 2];
    $8 = HEAP32[$7 + 12 >> 2];
    $2_1 = HEAP32[$7 + 4 >> 2];
    $1_1 = HEAP32[$7 >> 2];
    break label$11;
   }
   if (!(($9_1 | 0) != ($14 | 0) | ($8 | 0) != ($13_1 | 0) | (($13_1 | 0) > 0 ? 1 : ($13_1 | 0) >= 0 ? ($14 >>> 0 <= 9 ? 0 : 1) : 0) | ($1_1 >>> $3_1 | 0 ? ($3_1 | 0) <= 30 : 0))) {
    $1630($7 + 48 | 0, $5_1);
    $1631($7 + 32 | 0, $1_1);
    $1633($7 + 16 | 0, HEAP32[$7 + 48 >> 2], HEAP32[$7 + 52 >> 2], HEAP32[$7 + 56 >> 2], HEAP32[$7 + 60 >> 2], HEAP32[$7 + 32 >> 2], HEAP32[$7 + 36 >> 2], HEAP32[$7 + 40 >> 2], HEAP32[$7 + 44 >> 2]);
    $9_1 = HEAP32[$7 + 24 >> 2];
    $8 = HEAP32[$7 + 28 >> 2];
    $2_1 = HEAP32[$7 + 20 >> 2];
    $1_1 = HEAP32[$7 + 16 >> 2];
    break label$11;
   }
   $1_1 = ($4_1 | 0) / -2 | 0;
   $2_1 = $9_1 >>> 0 <= $1_1 >>> 0 ? 0 : 1;
   $1_1 = $1_1 >> 31;
   if (($8 | 0) > ($1_1 | 0) ? 1 : ($8 | 0) >= ($1_1 | 0) ? $2_1 : 0) {
    HEAP32[4914] = 68;
    $1630($7 + 96 | 0, $5_1);
    $1633($7 + 80 | 0, HEAP32[$7 + 96 >> 2], HEAP32[$7 + 100 >> 2], HEAP32[$7 + 104 >> 2], HEAP32[$7 + 108 >> 2], -1, -1, -1, 2147418111);
    $1633($7 - -64 | 0, HEAP32[$7 + 80 >> 2], HEAP32[$7 + 84 >> 2], HEAP32[$7 + 88 >> 2], HEAP32[$7 + 92 >> 2], -1, -1, -1, 2147418111);
    $9_1 = HEAP32[$7 + 72 >> 2];
    $8 = HEAP32[$7 + 76 >> 2];
    $2_1 = HEAP32[$7 + 68 >> 2];
    $1_1 = HEAP32[$7 + 64 >> 2];
    break label$11;
   }
   $1_1 = $4_1 + -226 | 0;
   $2_1 = $9_1 >>> 0 >= $1_1 >>> 0 ? 0 : 1;
   $1_1 = $1_1 >> 31;
   if (($8 | 0) < ($1_1 | 0) ? 1 : ($8 | 0) <= ($1_1 | 0) ? $2_1 : 0) {
    HEAP32[4914] = 68;
    $1630($7 + 144 | 0, $5_1);
    $1633($7 + 128 | 0, HEAP32[$7 + 144 >> 2], HEAP32[$7 + 148 >> 2], HEAP32[$7 + 152 >> 2], HEAP32[$7 + 156 >> 2], 0, 0, 0, 65536);
    $1633($7 + 112 | 0, HEAP32[$7 + 128 >> 2], HEAP32[$7 + 132 >> 2], HEAP32[$7 + 136 >> 2], HEAP32[$7 + 140 >> 2], 0, 0, 0, 65536);
    $9_1 = HEAP32[$7 + 120 >> 2];
    $8 = HEAP32[$7 + 124 >> 2];
    $2_1 = HEAP32[$7 + 116 >> 2];
    $1_1 = HEAP32[$7 + 112 >> 2];
    break label$11;
   }
   if ($16_1) {
    if (($16_1 | 0) <= 8) {
     $2_1 = ($7 + 768 | 0) + ($11_1 << 2) | 0;
     $1_1 = HEAP32[$2_1 >> 2];
     while (1) {
      $1_1 = Math_imul($1_1, 10);
      $16_1 = $16_1 + 1 | 0;
      if (($16_1 | 0) != 9) {
       continue
      }
      break;
     };
     HEAP32[$2_1 >> 2] = $1_1;
    }
    $11_1 = $11_1 + 1 | 0;
   }
   label$36 : {
    $10_1 = $9_1;
    if (($20_1 | 0) > 8 | ($20_1 | 0) > ($10_1 | 0) | ($10_1 | 0) > 17) {
     break label$36
    }
    if (($10_1 | 0) == 9) {
     $1630($7 + 192 | 0, $5_1);
     $1631($7 + 176 | 0, HEAP32[$7 + 768 >> 2]);
     $1633($7 + 160 | 0, HEAP32[$7 + 192 >> 2], HEAP32[$7 + 196 >> 2], HEAP32[$7 + 200 >> 2], HEAP32[$7 + 204 >> 2], HEAP32[$7 + 176 >> 2], HEAP32[$7 + 180 >> 2], HEAP32[$7 + 184 >> 2], HEAP32[$7 + 188 >> 2]);
     $9_1 = HEAP32[$7 + 168 >> 2];
     $8 = HEAP32[$7 + 172 >> 2];
     $2_1 = HEAP32[$7 + 164 >> 2];
     $1_1 = HEAP32[$7 + 160 >> 2];
     break label$11;
    }
    if (($10_1 | 0) <= 8) {
     $1630($7 + 272 | 0, $5_1);
     $1631($7 + 256 | 0, HEAP32[$7 + 768 >> 2]);
     $1633($7 + 240 | 0, HEAP32[$7 + 272 >> 2], HEAP32[$7 + 276 >> 2], HEAP32[$7 + 280 >> 2], HEAP32[$7 + 284 >> 2], HEAP32[$7 + 256 >> 2], HEAP32[$7 + 260 >> 2], HEAP32[$7 + 264 >> 2], HEAP32[$7 + 268 >> 2]);
     $1630($7 + 224 | 0, HEAP32[(0 - $10_1 << 2) + 4112 >> 2]);
     $1627($7 + 208 | 0, HEAP32[$7 + 240 >> 2], HEAP32[$7 + 244 >> 2], HEAP32[$7 + 248 >> 2], HEAP32[$7 + 252 >> 2], HEAP32[$7 + 224 >> 2], HEAP32[$7 + 228 >> 2], HEAP32[$7 + 232 >> 2], HEAP32[$7 + 236 >> 2]);
     $9_1 = HEAP32[$7 + 216 >> 2];
     $8 = HEAP32[$7 + 220 >> 2];
     $2_1 = HEAP32[$7 + 212 >> 2];
     $1_1 = HEAP32[$7 + 208 >> 2];
     break label$11;
    }
    $2_1 = (Math_imul($10_1, -3) + $3_1 | 0) + 27 | 0;
    $1_1 = HEAP32[$7 + 768 >> 2];
    if ($1_1 >>> $2_1 | 0 ? ($2_1 | 0) <= 30 : 0) {
     break label$36
    }
    $1630($7 + 352 | 0, $5_1);
    $1631($7 + 336 | 0, $1_1);
    $1633($7 + 320 | 0, HEAP32[$7 + 352 >> 2], HEAP32[$7 + 356 >> 2], HEAP32[$7 + 360 >> 2], HEAP32[$7 + 364 >> 2], HEAP32[$7 + 336 >> 2], HEAP32[$7 + 340 >> 2], HEAP32[$7 + 344 >> 2], HEAP32[$7 + 348 >> 2]);
    $1630($7 + 304 | 0, HEAP32[($10_1 << 2) + 4040 >> 2]);
    $1633($7 + 288 | 0, HEAP32[$7 + 320 >> 2], HEAP32[$7 + 324 >> 2], HEAP32[$7 + 328 >> 2], HEAP32[$7 + 332 >> 2], HEAP32[$7 + 304 >> 2], HEAP32[$7 + 308 >> 2], HEAP32[$7 + 312 >> 2], HEAP32[$7 + 316 >> 2]);
    $9_1 = HEAP32[$7 + 296 >> 2];
    $8 = HEAP32[$7 + 300 >> 2];
    $2_1 = HEAP32[$7 + 292 >> 2];
    $1_1 = HEAP32[$7 + 288 >> 2];
    break label$11;
   }
   $16_1 = 0;
   $1_1 = ($10_1 | 0) % 9 | 0;
   label$39 : {
    if (!$1_1) {
     $2_1 = 0;
     break label$39;
    }
    $18_1 = ($10_1 | 0) > -1 ? $1_1 : $1_1 + 9 | 0;
    label$41 : {
     if (!$11_1) {
      $2_1 = 0;
      $11_1 = 0;
      break label$41;
     }
     $8 = HEAP32[(0 - $18_1 << 2) + 4112 >> 2];
     $14 = 1e9 / ($8 | 0) | 0;
     $15 = 0;
     $1_1 = 0;
     $2_1 = 0;
     while (1) {
      $6 = ($7 + 768 | 0) + ($1_1 << 2) | 0;
      $12_1 = HEAP32[$6 >> 2];
      $9_1 = ($12_1 >>> 0) / ($8 >>> 0) | 0;
      $13_1 = $15 + $9_1 | 0;
      HEAP32[$6 >> 2] = $13_1;
      $6 = !$13_1 & ($1_1 | 0) == ($2_1 | 0);
      $2_1 = $6 ? $2_1 + 1 & 2047 : $2_1;
      $10_1 = $6 ? $10_1 + -9 | 0 : $10_1;
      $15 = Math_imul($14, $12_1 - Math_imul($8, $9_1) | 0);
      $1_1 = $1_1 + 1 | 0;
      if (($11_1 | 0) != ($1_1 | 0)) {
       continue
      }
      break;
     };
     if (!$15) {
      break label$41
     }
     HEAP32[($7 + 768 | 0) + ($11_1 << 2) >> 2] = $15;
     $11_1 = $11_1 + 1 | 0;
    }
    $10_1 = ($10_1 - $18_1 | 0) + 9 | 0;
   }
   while (1) {
    $14 = ($7 + 768 | 0) + ($2_1 << 2) | 0;
    label$45 : {
     while (1) {
      if (($10_1 | 0) != 36 | HEAPU32[$14 >> 2] >= 10384593 ? ($10_1 | 0) >= 36 : 0) {
       break label$45
      }
      $17 = $11_1 + 2047 | 0;
      $15 = 0;
      $12_1 = $11_1;
      while (1) {
       $11_1 = $12_1;
       $13_1 = $17 & 2047;
       $12_1 = ($7 + 768 | 0) + ($13_1 << 2) | 0;
       $1_1 = HEAP32[$12_1 >> 2];
       $8 = $1_1 >>> 3 | 0;
       $6 = $1_1 << 29;
       $1_1 = $6 + $15 | 0;
       if ($1_1 >>> 0 < $6 >>> 0) {
        $8 = $8 + 1 | 0
       }
       $9_1 = $1_1;
       $6 = 0;
       label$49 : {
        if (!$8 & $1_1 >>> 0 < 1000000001 | $8 >>> 0 < 0) {
         break label$49
        }
        $1_1 = __wasm_i64_udiv($1_1, $8, 1e9);
        $9_1 = $9_1 - __wasm_i64_mul($1_1, i64toi32_i32$HIGH_BITS, 1e9, 0) | 0;
        $6 = $1_1;
       }
       $15 = $6;
       HEAP32[$12_1 >> 2] = $9_1;
       $12_1 = ($13_1 | 0) != ($11_1 + -1 & 2047) ? $11_1 : ($2_1 | 0) == ($13_1 | 0) ? $11_1 : $9_1 ? $11_1 : $13_1;
       $17 = $13_1 + -1 | 0;
       if (($2_1 | 0) != ($13_1 | 0)) {
        continue
       }
       break;
      };
      $16_1 = $16_1 + -29 | 0;
      if (!$15) {
       continue
      }
      break;
     };
     $2_1 = $2_1 + -1 & 2047;
     if (($12_1 | 0) == ($2_1 | 0)) {
      $1_1 = ($7 + 768 | 0) + (($12_1 + 2046 & 2047) << 2) | 0;
      $11_1 = $12_1 + -1 & 2047;
      HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] | HEAP32[($7 + 768 | 0) + ($11_1 << 2) >> 2];
     }
     $10_1 = $10_1 + 9 | 0;
     HEAP32[($7 + 768 | 0) + ($2_1 << 2) >> 2] = $15;
     continue;
    }
    break;
   };
   label$51 : {
    label$52 : while (1) {
     $6 = $11_1 + 1 & 2047;
     $18_1 = ($7 + 768 | 0) + (($11_1 + -1 & 2047) << 2) | 0;
     while (1) {
      $19_1 = ($10_1 | 0) > 45 ? 9 : 1;
      label$54 : {
       while (1) {
        $12_1 = $2_1;
        $1_1 = 0;
        label$56 : {
         while (1) {
          label$58 : {
           $2_1 = $1_1 + $12_1 & 2047;
           if (($2_1 | 0) == ($11_1 | 0)) {
            break label$58
           }
           $9_1 = HEAP32[($7 + 768 | 0) + ($2_1 << 2) >> 2];
           $2_1 = HEAP32[($1_1 << 2) + 4064 >> 2];
           if ($9_1 >>> 0 < $2_1 >>> 0) {
            break label$58
           }
           if ($9_1 >>> 0 > $2_1 >>> 0) {
            break label$56
           }
           $1_1 = $1_1 + 1 | 0;
           if (($1_1 | 0) != 4) {
            continue
           }
          }
          break;
         };
         if (($10_1 | 0) != 36) {
          break label$56
         }
         $9_1 = 0;
         $8 = 0;
         $1_1 = 0;
         $14 = 0;
         $13_1 = 0;
         while (1) {
          $2_1 = $1_1 + $12_1 & 2047;
          if (($2_1 | 0) == ($11_1 | 0)) {
           $11_1 = $11_1 + 1 & 2047;
           HEAP32[(($11_1 << 2) + $7 | 0) + 764 >> 2] = 0;
          }
          $1633($7 + 752 | 0, $9_1, $8, $14, $13_1, 0, 0, 1342177280, 1075633366);
          $1631($7 + 736 | 0, HEAP32[($7 + 768 | 0) + ($2_1 << 2) >> 2]);
          $1623($7 + 720 | 0, HEAP32[$7 + 752 >> 2], HEAP32[$7 + 756 >> 2], HEAP32[$7 + 760 >> 2], HEAP32[$7 + 764 >> 2], HEAP32[$7 + 736 >> 2], HEAP32[$7 + 740 >> 2], HEAP32[$7 + 744 >> 2], HEAP32[$7 + 748 >> 2]);
          $14 = HEAP32[$7 + 728 >> 2];
          $13_1 = HEAP32[$7 + 732 >> 2];
          $9_1 = HEAP32[$7 + 720 >> 2];
          $8 = HEAP32[$7 + 724 >> 2];
          $1_1 = $1_1 + 1 | 0;
          if (($1_1 | 0) != 4) {
           continue
          }
          break;
         };
         $1630($7 + 704 | 0, $5_1);
         $1633($7 + 688 | 0, $9_1, $8, $14, $13_1, HEAP32[$7 + 704 >> 2], HEAP32[$7 + 708 >> 2], HEAP32[$7 + 712 >> 2], HEAP32[$7 + 716 >> 2]);
         $14 = HEAP32[$7 + 696 >> 2];
         $13_1 = HEAP32[$7 + 700 >> 2];
         $9_1 = 0;
         $8 = 0;
         $2_1 = HEAP32[$7 + 688 >> 2];
         $10_1 = HEAP32[$7 + 692 >> 2];
         $6 = $16_1 + 113 | 0;
         $19_1 = $6 - $4_1 | 0;
         $18_1 = ($19_1 | 0) < ($3_1 | 0);
         $21_1 = $18_1 ? (($19_1 | 0) > 0 ? $19_1 : 0) : $3_1;
         if (($21_1 | 0) <= 112) {
          break label$54
         }
         $1_1 = 0;
         $3_1 = 0;
         $15 = 0;
         $17 = 0;
         $20_1 = 0;
         break label$51;
        }
        $16_1 = $16_1 + $19_1 | 0;
        $2_1 = $11_1;
        if (($12_1 | 0) == ($2_1 | 0)) {
         continue
        }
        break;
       };
       $13_1 = 1e9 >>> $19_1 | 0;
       $14 = -1 << $19_1 ^ -1;
       $1_1 = 0;
       $2_1 = $12_1;
       while (1) {
        $8 = $1_1;
        $1_1 = ($7 + 768 | 0) + ($12_1 << 2) | 0;
        $9_1 = HEAP32[$1_1 >> 2];
        $8 = $8 + ($9_1 >>> $19_1 | 0) | 0;
        HEAP32[$1_1 >> 2] = $8;
        $1_1 = !$8 & ($2_1 | 0) == ($12_1 | 0);
        $2_1 = $1_1 ? $2_1 + 1 & 2047 : $2_1;
        $10_1 = $1_1 ? $10_1 + -9 | 0 : $10_1;
        $1_1 = Math_imul($13_1, $9_1 & $14);
        $12_1 = $12_1 + 1 & 2047;
        if (($12_1 | 0) != ($11_1 | 0)) {
         continue
        }
        break;
       };
       if (!$1_1) {
        continue
       }
       if (($2_1 | 0) != ($6 | 0)) {
        HEAP32[($7 + 768 | 0) + ($11_1 << 2) >> 2] = $1_1;
        $11_1 = $6;
        continue label$52;
       }
       HEAP32[$18_1 >> 2] = HEAP32[$18_1 >> 2] | 1;
       $2_1 = $6;
       continue;
      }
      break;
     };
     break;
    };
    $1628($7 + 640 | 0, $2589(225 - $21_1 | 0));
    $1602($7 + 672 | 0, HEAP32[$7 + 640 >> 2], HEAP32[$7 + 644 >> 2], HEAP32[$7 + 648 >> 2], HEAP32[$7 + 652 >> 2], $2_1, $10_1, $14, $13_1);
    $20_1 = HEAP32[$7 + 680 >> 2];
    $23_1 = HEAP32[$7 + 684 >> 2];
    $15 = HEAP32[$7 + 672 >> 2];
    $17 = HEAP32[$7 + 676 >> 2];
    $1628($7 + 624 | 0, $2589(113 - $21_1 | 0));
    $2588($7 + 656 | 0, $2_1, $10_1, $14, $13_1, HEAP32[$7 + 624 >> 2], HEAP32[$7 + 628 >> 2], HEAP32[$7 + 632 >> 2], HEAP32[$7 + 636 >> 2]);
    $9_1 = HEAP32[$7 + 656 >> 2];
    $8 = HEAP32[$7 + 660 >> 2];
    $1_1 = HEAP32[$7 + 664 >> 2];
    $3_1 = HEAP32[$7 + 668 >> 2];
    $1635($7 + 608 | 0, $2_1, $10_1, $14, $13_1, $9_1, $8, $1_1, $3_1);
    $1623($7 + 592 | 0, $15, $17, $20_1, $23_1, HEAP32[$7 + 608 >> 2], HEAP32[$7 + 612 >> 2], HEAP32[$7 + 616 >> 2], HEAP32[$7 + 620 >> 2]);
    $14 = HEAP32[$7 + 600 >> 2];
    $13_1 = HEAP32[$7 + 604 >> 2];
    $2_1 = HEAP32[$7 + 592 >> 2];
    $10_1 = HEAP32[$7 + 596 >> 2];
   }
   $4_1 = $12_1 + 4 & 2047;
   label$63 : {
    if (($4_1 | 0) == ($11_1 | 0)) {
     break label$63
    }
    $4_1 = HEAP32[($7 + 768 | 0) + ($4_1 << 2) >> 2];
    label$64 : {
     if ($4_1 >>> 0 <= 499999999) {
      if (($12_1 + 5 & 2047) == ($11_1 | 0) ? !$4_1 : 0) {
       break label$64
      }
      $1628($7 + 480 | 0, +($5_1 | 0) * .25);
      $1623($7 + 464 | 0, $9_1, $8, $1_1, $3_1, HEAP32[$7 + 480 >> 2], HEAP32[$7 + 484 >> 2], HEAP32[$7 + 488 >> 2], HEAP32[$7 + 492 >> 2]);
      $1_1 = HEAP32[$7 + 472 >> 2];
      $3_1 = HEAP32[$7 + 476 >> 2];
      $9_1 = HEAP32[$7 + 464 >> 2];
      $8 = HEAP32[$7 + 468 >> 2];
      break label$64;
     }
     if (($4_1 | 0) != 5e8) {
      $1628($7 + 576 | 0, +($5_1 | 0) * .75);
      $1623($7 + 560 | 0, $9_1, $8, $1_1, $3_1, HEAP32[$7 + 576 >> 2], HEAP32[$7 + 580 >> 2], HEAP32[$7 + 584 >> 2], HEAP32[$7 + 588 >> 2]);
      $1_1 = HEAP32[$7 + 568 >> 2];
      $3_1 = HEAP32[$7 + 572 >> 2];
      $9_1 = HEAP32[$7 + 560 >> 2];
      $8 = HEAP32[$7 + 564 >> 2];
      break label$64;
     }
     $24_1 = +($5_1 | 0);
     if (($12_1 + 5 & 2047) == ($11_1 | 0)) {
      $1628($7 + 512 | 0, $24_1 * .5);
      $1623($7 + 496 | 0, $9_1, $8, $1_1, $3_1, HEAP32[$7 + 512 >> 2], HEAP32[$7 + 516 >> 2], HEAP32[$7 + 520 >> 2], HEAP32[$7 + 524 >> 2]);
      $1_1 = HEAP32[$7 + 504 >> 2];
      $3_1 = HEAP32[$7 + 508 >> 2];
      $9_1 = HEAP32[$7 + 496 >> 2];
      $8 = HEAP32[$7 + 500 >> 2];
      break label$64;
     }
     $1628($7 + 544 | 0, $24_1 * .75);
     $1623($7 + 528 | 0, $9_1, $8, $1_1, $3_1, HEAP32[$7 + 544 >> 2], HEAP32[$7 + 548 >> 2], HEAP32[$7 + 552 >> 2], HEAP32[$7 + 556 >> 2]);
     $1_1 = HEAP32[$7 + 536 >> 2];
     $3_1 = HEAP32[$7 + 540 >> 2];
     $9_1 = HEAP32[$7 + 528 >> 2];
     $8 = HEAP32[$7 + 532 >> 2];
    }
    if (($21_1 | 0) > 111) {
     break label$63
    }
    $2588($7 + 448 | 0, $9_1, $8, $1_1, $3_1, 0, 0, 0, 1073676288);
    if ($1625(HEAP32[$7 + 448 >> 2], HEAP32[$7 + 452 >> 2], HEAP32[$7 + 456 >> 2], HEAP32[$7 + 460 >> 2], 0, 0, 0, 0)) {
     break label$63
    }
    $1623($7 + 432 | 0, $9_1, $8, $1_1, $3_1, 0, 0, 0, 1073676288);
    $1_1 = HEAP32[$7 + 440 >> 2];
    $3_1 = HEAP32[$7 + 444 >> 2];
    $9_1 = HEAP32[$7 + 432 >> 2];
    $8 = HEAP32[$7 + 436 >> 2];
   }
   $1623($7 + 416 | 0, $2_1, $10_1, $14, $13_1, $9_1, $8, $1_1, $3_1);
   $1635($7 + 400 | 0, HEAP32[$7 + 416 >> 2], HEAP32[$7 + 420 >> 2], HEAP32[$7 + 424 >> 2], HEAP32[$7 + 428 >> 2], $15, $17, $20_1, $23_1);
   $14 = HEAP32[$7 + 408 >> 2];
   $13_1 = HEAP32[$7 + 412 >> 2];
   $2_1 = HEAP32[$7 + 400 >> 2];
   $10_1 = HEAP32[$7 + 404 >> 2];
   label$68 : {
    if (($6 & 2147483647) <= (-2 - $22_1 | 0)) {
     break label$68
    }
    $1633($7 + 384 | 0, $2_1, $10_1, $14, $13_1, 0, 0, 0, 1073610752);
    $1_1 = $1625($9_1, $8, $1_1, $3_1, 0, 0, 0, 0);
    $3_1 = Math_abs($1636($2_1, $10_1, $14, $13_1)) >= 1038459371706965525706099.0e10;
    $14 = $3_1 ? HEAP32[$7 + 392 >> 2] : $14;
    $13_1 = $3_1 ? HEAP32[$7 + 396 >> 2] : $13_1;
    $2_1 = $3_1 ? HEAP32[$7 + 384 >> 2] : $2_1;
    $10_1 = $3_1 ? HEAP32[$7 + 388 >> 2] : $10_1;
    $16_1 = $3_1 + $16_1 | 0;
    if (($16_1 + 110 | 0) <= ($25_1 | 0) ? !($18_1 & ($3_1 ^ 1 | ($19_1 | 0) != ($21_1 | 0)) & ($1_1 | 0) != 0) : 0) {
     break label$68
    }
    HEAP32[4914] = 68;
   }
   $1603($7 + 368 | 0, $2_1, $10_1, $14, $13_1, $16_1);
   $9_1 = HEAP32[$7 + 376 >> 2];
   $8 = HEAP32[$7 + 380 >> 2];
   $2_1 = HEAP32[$7 + 372 >> 2];
   $1_1 = HEAP32[$7 + 368 >> 2];
  }
  HEAP32[$27_1 >> 2] = $1_1;
  HEAP32[$26_1 + 4 >> 2] = $2_1;
  HEAP32[$0 + 8 >> 2] = $9_1;
  HEAP32[$0 + 12 >> 2] = $8;
  global$0 = $7 + 8960 | 0;
 }
 
 function $1608($0, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     $2_1 = HEAP32[$0 + 4 >> 2];
     label$4 : {
      if ($2_1 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
       HEAP32[$0 + 4 >> 2] = $2_1 + 1;
       $2_1 = HEAPU8[$2_1 | 0];
       break label$4;
      }
      $2_1 = $1601($0);
     }
     switch ($2_1 + -43 | 0) {
     case 0:
     case 2:
      break label$2;
     default:
      break label$3;
     };
    }
    $3_1 = $2_1 + -48 | 0;
    break label$1;
   }
   $5_1 = ($2_1 | 0) == 45;
   $1_1 = !$1_1;
   $2_1 = HEAP32[$0 + 4 >> 2];
   label$6 : {
    if ($2_1 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
     HEAP32[$0 + 4 >> 2] = $2_1 + 1;
     $2_1 = HEAPU8[$2_1 | 0];
     break label$6;
    }
    $2_1 = $1601($0);
   }
   $3_1 = $2_1 + -48 | 0;
   if (!($1_1 | $3_1 >>> 0 < 10 | !HEAP32[$0 + 104 >> 2])) {
    HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + -1
   }
  }
  label$9 : {
   if ($3_1 >>> 0 < 10) {
    $3_1 = 0;
    while (1) {
     $3_1 = Math_imul($3_1, 10) + $2_1 | 0;
     $1_1 = HEAP32[$0 + 4 >> 2];
     label$12 : {
      if ($1_1 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
       HEAP32[$0 + 4 >> 2] = $1_1 + 1;
       $2_1 = HEAPU8[$1_1 | 0];
       break label$12;
      }
      $2_1 = $1601($0);
     }
     $4_1 = $2_1 + -48 | 0;
     $3_1 = $3_1 + -48 | 0;
     if (($3_1 | 0) < 214748364 ? $4_1 >>> 0 <= 9 : 0) {
      continue
     }
     break;
    };
    $1_1 = $3_1;
    $3_1 = $3_1 >> 31;
    label$14 : {
     if ($4_1 >>> 0 >= 10) {
      break label$14
     }
     while (1) {
      $3_1 = __wasm_i64_mul($1_1, $3_1, 10, 0);
      $2_1 = $3_1 + $2_1 | 0;
      $1_1 = i64toi32_i32$HIGH_BITS;
      $1_1 = $2_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
      $2_1 = $2_1 + -48 | 0;
      $3_1 = $1_1 + -1 | 0;
      $3_1 = $2_1 >>> 0 < 4294967248 ? $3_1 + 1 | 0 : $3_1;
      $1_1 = $2_1;
      $2_1 = HEAP32[$0 + 4 >> 2];
      label$16 : {
       if ($2_1 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
        HEAP32[$0 + 4 >> 2] = $2_1 + 1;
        $2_1 = HEAPU8[$2_1 | 0];
        break label$16;
       }
       $2_1 = $1601($0);
      }
      $4_1 = $2_1 + -48 | 0;
      if ($4_1 >>> 0 > 9) {
       break label$14
      }
      if (($3_1 | 0) < 21474836 ? 1 : ($3_1 | 0) <= 21474836 ? ($1_1 >>> 0 >= 2061584302 ? 0 : 1) : 0) {
       continue
      }
      break;
     };
    }
    if ($4_1 >>> 0 < 10) {
     while (1) {
      $2_1 = HEAP32[$0 + 4 >> 2];
      label$20 : {
       if ($2_1 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
        HEAP32[$0 + 4 >> 2] = $2_1 + 1;
        $2_1 = HEAPU8[$2_1 | 0];
        break label$20;
       }
       $2_1 = $1601($0);
      }
      if ($2_1 + -48 >>> 0 < 10) {
       continue
      }
      break;
     }
    }
    if (HEAP32[$0 + 104 >> 2]) {
     HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + -1
    }
    $0 = $1_1;
    $1_1 = $5_1 ? 0 - $0 | 0 : $0;
    $3_1 = $5_1 ? 0 - ($3_1 + (0 < $0 >>> 0) | 0) | 0 : $3_1;
    break label$9;
   }
   $1_1 = 0;
   $3_1 = -2147483648;
   if (!HEAP32[$0 + 104 >> 2]) {
    break label$9
   }
   HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + -1;
   i64toi32_i32$HIGH_BITS = -2147483648;
   return 0;
  }
  i64toi32_i32$HIGH_BITS = $3_1;
  return $1_1;
 }
 
 function $1609($0, $1_1) {
  var $2_1 = 0, $3_1 = Math_fround(0);
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $1610($2_1, $0, $1_1, 0);
  $3_1 = $1637(HEAP32[$2_1 >> 2], HEAP32[$2_1 + 4 >> 2], HEAP32[$2_1 + 8 >> 2], HEAP32[$2_1 + 12 >> 2]);
  global$0 = $2_1 + 16 | 0;
  return $3_1;
 }
 
 function $1610($0, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = 0, $6 = 0, $7 = 0, $8 = 0, $9_1 = 0, $10_1 = 0;
  $4_1 = global$0 - 160 | 0;
  global$0 = $4_1;
  $2592($4_1 + 16 | 0, 0, 144);
  HEAP32[$4_1 + 92 >> 2] = -1;
  HEAP32[$4_1 + 60 >> 2] = $1_1;
  HEAP32[$4_1 + 24 >> 2] = -1;
  HEAP32[$4_1 + 20 >> 2] = $1_1;
  $1600($4_1 + 16 | 0, 0, 0);
  $1605($4_1, $4_1 + 16 | 0, $3_1, 1);
  $3_1 = HEAP32[$4_1 + 8 >> 2];
  $6 = HEAP32[$4_1 + 12 >> 2];
  $7 = HEAP32[$4_1 >> 2];
  $8 = HEAP32[$4_1 + 4 >> 2];
  if ($2_1) {
   $9_1 = $2_1;
   $5_1 = $1_1;
   $1_1 = HEAP32[$4_1 + 20 >> 2] - HEAP32[$4_1 + 24 >> 2] | 0;
   $10_1 = $1_1;
   $2_1 = $1_1 + HEAP32[$4_1 + 136 >> 2] | 0;
   $1_1 = HEAP32[$4_1 + 140 >> 2] + ($1_1 >> 31) | 0;
   $1_1 = $2_1 >>> 0 < $10_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   HEAP32[$9_1 >> 2] = !($1_1 | $2_1) ? $5_1 : $5_1 + $2_1 | 0;
  }
  HEAP32[$0 >> 2] = $7;
  HEAP32[$0 + 4 >> 2] = $8;
  HEAP32[$0 + 8 >> 2] = $3_1;
  HEAP32[$0 + 12 >> 2] = $6;
  global$0 = $4_1 + 160 | 0;
 }
 
 function $1611($0, $1_1) {
  var $2_1 = 0, $3_1 = 0.0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $1610($2_1, $0, $1_1, 1);
  $3_1 = $1636(HEAP32[$2_1 >> 2], HEAP32[$2_1 + 4 >> 2], HEAP32[$2_1 + 8 >> 2], HEAP32[$2_1 + 12 >> 2]);
  global$0 = $2_1 + 16 | 0;
  return $3_1;
 }
 
 function $1612($0, $1_1, $2_1) {
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $1610($3_1, $1_1, $2_1, 2);
  $1_1 = HEAP32[$3_1 + 4 >> 2];
  HEAP32[$0 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$0 + 4 >> 2] = $1_1;
  $1_1 = HEAP32[$3_1 + 12 >> 2];
  HEAP32[$0 + 8 >> 2] = HEAP32[$3_1 + 8 >> 2];
  HEAP32[$0 + 12 >> 2] = $1_1;
  global$0 = $3_1 + 16 | 0;
 }
 
 function $1615($0, $1_1, $2_1, $3_1) {
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $1612($3_1, $1_1, $2_1);
  $1_1 = HEAP32[$3_1 + 4 >> 2];
  HEAP32[$0 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$0 + 4 >> 2] = $1_1;
  $1_1 = HEAP32[$3_1 + 12 >> 2];
  HEAP32[$0 + 8 >> 2] = HEAP32[$3_1 + 8 >> 2];
  HEAP32[$0 + 12 >> 2] = $1_1;
  global$0 = $3_1 + 16 | 0;
 }
 
 function $1616($0, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   while (1) {
    $3_1 = HEAPU8[$0 | 0];
    $4_1 = HEAPU8[$1_1 | 0];
    if (($3_1 | 0) == ($4_1 | 0)) {
     $1_1 = $1_1 + 1 | 0;
     $0 = $0 + 1 | 0;
     $2_1 = $2_1 + -1 | 0;
     if ($2_1) {
      continue
     }
     break label$1;
    }
    break;
   };
   $5_1 = $3_1 - $4_1 | 0;
  }
  return $5_1;
 }
 
 function $1617($0, $1_1) {
  $0 = $1618($0, $1_1);
  return HEAPU8[$0 | 0] == ($1_1 & 255) ? $0 : 0;
 }
 
 function $1618($0, $1_1) {
  var $2_1 = 0, $3_1 = 0;
  label$1 : {
   $3_1 = $1_1 & 255;
   if ($3_1) {
    if ($0 & 3) {
     while (1) {
      $2_1 = HEAPU8[$0 | 0];
      if (!$2_1 | ($2_1 | 0) == ($1_1 & 255)) {
       break label$1
      }
      $0 = $0 + 1 | 0;
      if ($0 & 3) {
       continue
      }
      break;
     }
    }
    $2_1 = HEAP32[$0 >> 2];
    label$5 : {
     if (($2_1 ^ -1) & $2_1 + -16843009 & -2139062144) {
      break label$5
     }
     $3_1 = Math_imul($3_1, 16843009);
     while (1) {
      $2_1 = $2_1 ^ $3_1;
      if (($2_1 ^ -1) & $2_1 + -16843009 & -2139062144) {
       break label$5
      }
      $2_1 = HEAP32[$0 + 4 >> 2];
      $0 = $0 + 4 | 0;
      if (!($2_1 + -16843009 & ($2_1 ^ -1) & -2139062144)) {
       continue
      }
      break;
     };
    }
    while (1) {
     $2_1 = $0;
     $3_1 = HEAPU8[$2_1 | 0];
     if ($3_1) {
      $0 = $2_1 + 1 | 0;
      if (($3_1 | 0) != ($1_1 & 255)) {
       continue
      }
     }
     break;
    };
    return $2_1;
   }
   return $2597($0) + $0 | 0;
  }
  return $0;
 }
 
 function $1619() {
  return 19736;
 }
 
 function $1620() {
  return 19744;
 }
 
 function $1621() {
  return 19748;
 }
 
 function $1622($0) {
  if (!$0) {
   return 0
  }
  HEAP32[4914] = $0;
  return -1;
 }
 
 function $1623($0, $1_1, $2_1, $3_1, $4_1, $5_1, $6, $7, $8) {
  var $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14 = 0, $15 = 0, $16_1 = 0, $17 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0;
  $11_1 = global$0 - 112 | 0;
  global$0 = $11_1;
  $12_1 = $7;
  $14 = $8 & 2147483647;
  $10_1 = $2_1 + -1 | 0;
  $9_1 = $1_1 + -1 | 0;
  if ($9_1 >>> 0 < 4294967295) {
   $10_1 = $10_1 + 1 | 0
  }
  $13_1 = $9_1;
  $16_1 = ($9_1 | 0) == -1 & ($10_1 | 0) == -1;
  $15 = $4_1 & 2147483647;
  $9_1 = $15;
  $17 = $3_1;
  $10_1 = ($2_1 | 0) == ($10_1 | 0) & $13_1 >>> 0 < $1_1 >>> 0 | $10_1 >>> 0 < $2_1 >>> 0;
  $13_1 = $3_1 + $10_1 | 0;
  if ($13_1 >>> 0 < $10_1 >>> 0) {
   $9_1 = $9_1 + 1 | 0
  }
  $13_1 = $13_1 + -1 | 0;
  $10_1 = $9_1 + -1 | 0;
  $9_1 = $13_1;
  label$1 : {
   label$2 : {
    $10_1 = $9_1 >>> 0 < 4294967295 ? $10_1 + 1 | 0 : $10_1;
    if (!(($9_1 | 0) == -1 & ($10_1 | 0) == 2147418111 ? $16_1 : ($10_1 | 0) == 2147418111 & $9_1 >>> 0 > 4294967295 | $10_1 >>> 0 > 2147418111)) {
     $10_1 = $6 + -1 | 0;
     $9_1 = $5_1 + -1 | 0;
     if ($9_1 >>> 0 < 4294967295) {
      $10_1 = $10_1 + 1 | 0
     }
     $13_1 = $9_1;
     $16_1 = ($9_1 | 0) != -1 | ($10_1 | 0) != -1;
     $9_1 = $14;
     $10_1 = ($6 | 0) == ($10_1 | 0) & $13_1 >>> 0 < $5_1 >>> 0 | $10_1 >>> 0 < $6 >>> 0;
     $13_1 = $10_1 + $12_1 | 0;
     if ($13_1 >>> 0 < $10_1 >>> 0) {
      $9_1 = $9_1 + 1 | 0
     }
     $10_1 = $13_1 + -1 | 0;
     $9_1 = $9_1 + -1 | 0;
     $9_1 = $10_1 >>> 0 < 4294967295 ? $9_1 + 1 | 0 : $9_1;
     if (($10_1 | 0) == -1 & ($9_1 | 0) == 2147418111 ? $16_1 : ($9_1 | 0) == 2147418111 & $10_1 >>> 0 < 4294967295 | $9_1 >>> 0 < 2147418111) {
      break label$2
     }
    }
    if (!(!$17 & ($15 | 0) == 2147418112 ? !($1_1 | $2_1) : ($15 | 0) == 2147418112 & $17 >>> 0 < 0 | $15 >>> 0 < 2147418112)) {
     $7 = $3_1;
     $8 = $4_1 | 32768;
     $5_1 = $1_1;
     $6 = $2_1;
     break label$1;
    }
    if (!(!$12_1 & ($14 | 0) == 2147418112 ? !($5_1 | $6) : ($14 | 0) == 2147418112 & $12_1 >>> 0 < 0 | $14 >>> 0 < 2147418112)) {
     $8 = $8 | 32768;
     break label$1;
    }
    if (!($1_1 | $17 | ($15 ^ 2147418112 | $2_1))) {
     $9_1 = $3_1;
     $3_1 = !($1_1 ^ $5_1 | $3_1 ^ $7 | ($2_1 ^ $6 | $4_1 ^ $8 ^ -2147483648));
     $7 = $3_1 ? 0 : $9_1;
     $8 = $3_1 ? 2147450880 : $4_1;
     $5_1 = $3_1 ? 0 : $1_1;
     $6 = $3_1 ? 0 : $2_1;
     break label$1;
    }
    if (!($5_1 | $12_1 | ($14 ^ 2147418112 | $6))) {
     break label$1
    }
    if (!($1_1 | $17 | ($2_1 | $15))) {
     if ($5_1 | $12_1 | ($6 | $14)) {
      break label$1
     }
     $5_1 = $1_1 & $5_1;
     $6 = $2_1 & $6;
     $7 = $3_1 & $7;
     $8 = $4_1 & $8;
     break label$1;
    }
    if ($5_1 | $12_1 | ($6 | $14)) {
     break label$2
    }
    $5_1 = $1_1;
    $6 = $2_1;
    $7 = $3_1;
    $8 = $4_1;
    break label$1;
   }
   $10_1 = ($12_1 | 0) == ($17 | 0) & ($14 | 0) == ($15 | 0) ? ($2_1 | 0) == ($6 | 0) & $5_1 >>> 0 > $1_1 >>> 0 | $6 >>> 0 > $2_1 >>> 0 : ($14 | 0) == ($15 | 0) & $12_1 >>> 0 > $17 >>> 0 | $14 >>> 0 > $15 >>> 0;
   $9_1 = $10_1;
   $15 = $9_1 ? $5_1 : $1_1;
   $14 = $9_1 ? $6 : $2_1;
   $12_1 = $9_1 ? $8 : $4_1;
   $17 = $12_1;
   $18_1 = $9_1 ? $7 : $3_1;
   $13_1 = $18_1;
   $9_1 = $12_1 & 65535;
   $8 = $10_1 ? $4_1 : $8;
   $19_1 = $8;
   $4_1 = $10_1 ? $3_1 : $7;
   $16_1 = $8 >>> 16 & 32767;
   $12_1 = $12_1 >>> 16 & 32767;
   if (!$12_1) {
    $3_1 = !($9_1 | $13_1);
    $7 = $3_1 << 6;
    $8 = Math_clz32($3_1 ? $15 : $13_1) + 32 | 0;
    $3_1 = Math_clz32($3_1 ? $14 : $9_1);
    $3_1 = $7 + (($3_1 | 0) == 32 ? $8 : $3_1) | 0;
    $1624($11_1 + 96 | 0, $15, $14, $13_1, $9_1, $3_1 + -15 | 0);
    $13_1 = HEAP32[$11_1 + 104 >> 2];
    $15 = HEAP32[$11_1 + 96 >> 2];
    $14 = HEAP32[$11_1 + 100 >> 2];
    $12_1 = 16 - $3_1 | 0;
    $9_1 = HEAP32[$11_1 + 108 >> 2];
   }
   $5_1 = $10_1 ? $1_1 : $5_1;
   $6 = $10_1 ? $2_1 : $6;
   $1_1 = $4_1;
   $2_1 = $19_1 & 65535;
   if ($16_1) {
    $3_1 = $1_1;
    $1_1 = $2_1;
   } else {
    $8 = $1_1;
    $3_1 = !($1_1 | $2_1);
    $7 = $3_1 << 6;
    $10_1 = Math_clz32($3_1 ? $5_1 : $1_1) + 32 | 0;
    $1_1 = Math_clz32($3_1 ? $6 : $2_1);
    $1_1 = $7 + (($1_1 | 0) == 32 ? $10_1 : $1_1) | 0;
    $1624($11_1 + 80 | 0, $5_1, $6, $8, $2_1, $1_1 + -15 | 0);
    $16_1 = 16 - $1_1 | 0;
    $5_1 = HEAP32[$11_1 + 80 >> 2];
    $6 = HEAP32[$11_1 + 84 >> 2];
    $3_1 = HEAP32[$11_1 + 88 >> 2];
    $1_1 = HEAP32[$11_1 + 92 >> 2];
   }
   $2_1 = $3_1;
   $10_1 = $1_1 << 3 | $2_1 >>> 29;
   $7 = $2_1 << 3 | $6 >>> 29;
   $8 = $10_1 | 524288;
   $1_1 = $13_1;
   $3_1 = $9_1 << 3 | $1_1 >>> 29;
   $10_1 = $1_1 << 3 | $14 >>> 29;
   $20_1 = $3_1;
   $18_1 = $4_1 ^ $18_1;
   $13_1 = $17 ^ $19_1;
   $1_1 = $5_1;
   $9_1 = $6 << 3 | $1_1 >>> 29;
   $1_1 = $1_1 << 3;
   $2_1 = $9_1;
   $4_1 = $12_1 - $16_1 | 0;
   $3_1 = $1_1;
   label$11 : {
    if (!$4_1) {
     break label$11
    }
    if ($4_1 >>> 0 > 127) {
     $7 = 0;
     $8 = 0;
     $9_1 = 0;
     $3_1 = 1;
     break label$11;
    }
    $1624($11_1 - -64 | 0, $1_1, $2_1, $7, $8, 128 - $4_1 | 0);
    $1632($11_1 + 48 | 0, $1_1, $2_1, $7, $8, $4_1);
    $7 = HEAP32[$11_1 + 56 >> 2];
    $8 = HEAP32[$11_1 + 60 >> 2];
    $9_1 = HEAP32[$11_1 + 52 >> 2];
    $3_1 = HEAP32[$11_1 + 48 >> 2] | ((HEAP32[$11_1 + 64 >> 2] | HEAP32[$11_1 + 72 >> 2]) != 0 | (HEAP32[$11_1 + 68 >> 2] | HEAP32[$11_1 + 76 >> 2]) != 0);
   }
   $6 = $9_1;
   $4_1 = $10_1;
   $16_1 = $20_1 | 524288;
   $1_1 = $15;
   $9_1 = $14 << 3 | $1_1 >>> 29;
   $2_1 = $1_1 << 3;
   label$13 : {
    if (($13_1 | 0) < -1 ? 1 : ($13_1 | 0) <= -1 ? ($18_1 >>> 0 > 4294967295 ? 0 : 1) : 0) {
     $14 = $3_1;
     $1_1 = $2_1 - $3_1 | 0;
     $15 = $4_1 - $7 | 0;
     $3_1 = ($6 | 0) == ($9_1 | 0) & $2_1 >>> 0 < $3_1 >>> 0 | $9_1 >>> 0 < $6 >>> 0;
     $5_1 = $15 - $3_1 | 0;
     $2_1 = $9_1 - (($2_1 >>> 0 < $14 >>> 0) + $6 | 0) | 0;
     $6 = ($16_1 - (($4_1 >>> 0 < $7 >>> 0) + $8 | 0) | 0) - ($15 >>> 0 < $3_1 >>> 0) | 0;
     if (!($1_1 | $5_1 | ($2_1 | $6))) {
      $5_1 = 0;
      $6 = 0;
      $7 = 0;
      $8 = 0;
      break label$1;
     }
     if (($6 | 0) == 524287 & $5_1 >>> 0 > 4294967295 | $6 >>> 0 > 524287) {
      break label$13
     }
     $7 = $1_1;
     $3_1 = !($5_1 | $6);
     $4_1 = $3_1 << 6;
     $8 = Math_clz32($3_1 ? $1_1 : $5_1) + 32 | 0;
     $1_1 = Math_clz32($3_1 ? $2_1 : $6);
     $1_1 = $4_1 + (($1_1 | 0) == 32 ? $8 : $1_1) | 0;
     $1_1 = $1_1 + -12 | 0;
     $1624($11_1 + 32 | 0, $7, $2_1, $5_1, $6, $1_1);
     $12_1 = $12_1 - $1_1 | 0;
     $5_1 = HEAP32[$11_1 + 40 >> 2];
     $6 = HEAP32[$11_1 + 44 >> 2];
     $1_1 = HEAP32[$11_1 + 32 >> 2];
     $2_1 = HEAP32[$11_1 + 36 >> 2];
     break label$13;
    }
    $10_1 = $6 + $9_1 | 0;
    $1_1 = $3_1;
    $2_1 = $1_1 + $2_1 | 0;
    if ($2_1 >>> 0 < $1_1 >>> 0) {
     $10_1 = $10_1 + 1 | 0
    }
    $1_1 = $2_1;
    $2_1 = $10_1;
    $6 = ($6 | 0) == ($2_1 | 0) & $1_1 >>> 0 < $3_1 >>> 0 | $2_1 >>> 0 < $6 >>> 0;
    $10_1 = $8 + $16_1 | 0;
    $3_1 = $4_1 + $7 | 0;
    if ($3_1 >>> 0 < $4_1 >>> 0) {
     $10_1 = $10_1 + 1 | 0
    }
    $5_1 = $3_1;
    $4_1 = $6 + $3_1 | 0;
    $3_1 = $10_1;
    $3_1 = $4_1 >>> 0 < $5_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
    $5_1 = $4_1;
    $6 = $3_1;
    if (!($3_1 & 1048576)) {
     break label$13
    }
    $1_1 = $1_1 & 1 | (($2_1 & 1) << 31 | $1_1 >>> 1);
    $2_1 = $5_1 << 31 | $2_1 >>> 1;
    $12_1 = $12_1 + 1 | 0;
    $5_1 = ($6 & 1) << 31 | $5_1 >>> 1;
    $6 = $6 >>> 1 | 0;
   }
   $7 = 0;
   $9_1 = $17 & -2147483648;
   if (($12_1 | 0) >= 32767) {
    $8 = $9_1 | 2147418112;
    $5_1 = 0;
    $6 = 0;
    break label$1;
   }
   $4_1 = 0;
   label$17 : {
    if (($12_1 | 0) > 0) {
     $4_1 = $12_1;
     break label$17;
    }
    $1624($11_1 + 16 | 0, $1_1, $2_1, $5_1, $6, $12_1 + 127 | 0);
    $1632($11_1, $1_1, $2_1, $5_1, $6, 1 - $12_1 | 0);
    $1_1 = HEAP32[$11_1 >> 2] | ((HEAP32[$11_1 + 16 >> 2] | HEAP32[$11_1 + 24 >> 2]) != 0 | (HEAP32[$11_1 + 20 >> 2] | HEAP32[$11_1 + 28 >> 2]) != 0);
    $2_1 = HEAP32[$11_1 + 4 >> 2];
    $5_1 = HEAP32[$11_1 + 8 >> 2];
    $6 = HEAP32[$11_1 + 12 >> 2];
   }
   $7 = $7 | (($6 & 7) << 29 | $5_1 >>> 3);
   $4_1 = $9_1 | $6 >>> 3 & 65535 | $4_1 << 16;
   $9_1 = $5_1 << 29;
   $3_1 = 0;
   $5_1 = $9_1;
   $6 = ($2_1 & 7) << 29 | $1_1 >>> 3 | $3_1;
   $9_1 = $4_1;
   $3_1 = $2_1 >>> 3 | $5_1;
   $10_1 = $3_1;
   $4_1 = $1_1 & 7;
   $1_1 = $4_1 >>> 0 > 4;
   $2_1 = $1_1 + $6 | 0;
   if ($2_1 >>> 0 < $1_1 >>> 0) {
    $10_1 = $10_1 + 1 | 0
   }
   $1_1 = $2_1;
   $2_1 = $10_1;
   $3_1 = ($3_1 | 0) == ($2_1 | 0) & $1_1 >>> 0 < $6 >>> 0 | $2_1 >>> 0 < $3_1 >>> 0;
   $5_1 = $3_1 + $7 | 0;
   if ($5_1 >>> 0 < $3_1 >>> 0) {
    $9_1 = $9_1 + 1 | 0
   }
   $4_1 = ($4_1 | 0) == 4;
   $3_1 = $4_1 ? $1_1 & 1 : 0;
   $8 = $9_1;
   $7 = $5_1;
   $4_1 = 0;
   $9_1 = $2_1 + $4_1 | 0;
   $2_1 = $1_1 + $3_1 | 0;
   if ($2_1 >>> 0 < $1_1 >>> 0) {
    $9_1 = $9_1 + 1 | 0
   }
   $5_1 = $2_1;
   $1_1 = $2_1;
   $6 = $9_1;
   $1_1 = ($4_1 | 0) == ($9_1 | 0) & $1_1 >>> 0 < $3_1 >>> 0 | $9_1 >>> 0 < $4_1 >>> 0;
   $2_1 = $7 + $1_1 | 0;
   if ($2_1 >>> 0 < $1_1 >>> 0) {
    $8 = $8 + 1 | 0
   }
   $7 = $2_1;
  }
  HEAP32[$0 >> 2] = $5_1;
  HEAP32[$0 + 4 >> 2] = $6;
  HEAP32[$0 + 8 >> 2] = $7;
  HEAP32[$0 + 12 >> 2] = $8;
  global$0 = $11_1 + 112 | 0;
 }
 
 function $1624($0, $1_1, $2_1, $3_1, $4_1, $5_1) {
  var $6 = 0, $7 = 0, $8 = 0, $9_1 = 0;
  label$1 : {
   if ($5_1 & 64) {
    $3_1 = $1_1;
    $4_1 = $5_1 + -64 | 0;
    $1_1 = $4_1 & 31;
    if (32 <= ($4_1 & 63) >>> 0) {
     $4_1 = $3_1 << $1_1;
     $3_1 = 0;
    } else {
     $4_1 = (1 << $1_1) - 1 & $3_1 >>> 32 - $1_1 | $2_1 << $1_1;
     $3_1 = $3_1 << $1_1;
    }
    $1_1 = 0;
    $2_1 = 0;
    break label$1;
   }
   if (!$5_1) {
    break label$1
   }
   $6 = $3_1;
   $8 = $5_1;
   $3_1 = $5_1 & 31;
   if (32 <= ($5_1 & 63) >>> 0) {
    $7 = $6 << $3_1;
    $9_1 = 0;
   } else {
    $7 = (1 << $3_1) - 1 & $6 >>> 32 - $3_1 | $4_1 << $3_1;
    $9_1 = $6 << $3_1;
   }
   $3_1 = $2_1;
   $6 = $1_1;
   $5_1 = 64 - $5_1 | 0;
   $4_1 = $5_1 & 31;
   if (32 <= ($5_1 & 63) >>> 0) {
    $5_1 = 0;
    $3_1 = $3_1 >>> $4_1 | 0;
   } else {
    $5_1 = $3_1 >>> $4_1 | 0;
    $3_1 = ((1 << $4_1) - 1 & $3_1) << 32 - $4_1 | $6 >>> $4_1;
   }
   $3_1 = $9_1 | $3_1;
   $4_1 = $5_1 | $7;
   $5_1 = $1_1;
   $1_1 = $8 & 31;
   if (32 <= ($8 & 63) >>> 0) {
    $7 = $5_1 << $1_1;
    $1_1 = 0;
   } else {
    $7 = (1 << $1_1) - 1 & $5_1 >>> 32 - $1_1 | $2_1 << $1_1;
    $1_1 = $5_1 << $1_1;
   }
   $2_1 = $7;
  }
  HEAP32[$0 >> 2] = $1_1;
  HEAP32[$0 + 4 >> 2] = $2_1;
  HEAP32[$0 + 8 >> 2] = $3_1;
  HEAP32[$0 + 12 >> 2] = $4_1;
 }
 
 function $1625($0, $1_1, $2_1, $3_1, $4_1, $5_1, $6, $7) {
  var $8 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0;
  $9_1 = 1;
  $8 = $3_1 & 2147483647;
  $12_1 = $8;
  $10_1 = $2_1;
  label$1 : {
   if (!$2_1 & ($8 | 0) == 2147418112 ? $0 | $1_1 : ($8 | 0) == 2147418112 & $2_1 >>> 0 > 0 | $8 >>> 0 > 2147418112) {
    break label$1
   }
   $11_1 = $7 & 2147483647;
   $13_1 = $11_1;
   $8 = $6;
   if (!$6 & ($11_1 | 0) == 2147418112 ? $4_1 | $5_1 : ($11_1 | 0) == 2147418112 & $6 >>> 0 > 0 | $11_1 >>> 0 > 2147418112) {
    break label$1
   }
   if (!($0 | $4_1 | ($8 | $10_1) | ($1_1 | $5_1 | ($12_1 | $13_1)))) {
    return 0
   }
   $10_1 = $3_1 & $7;
   if (($10_1 | 0) > 0 ? 1 : ($10_1 | 0) >= 0 ? (($2_1 & $6) >>> 0 < 0 ? 0 : 1) : 0) {
    $9_1 = -1;
    if (($2_1 | 0) == ($6 | 0) & ($3_1 | 0) == ($7 | 0) ? ($1_1 | 0) == ($5_1 | 0) & $0 >>> 0 < $4_1 >>> 0 | $1_1 >>> 0 < $5_1 >>> 0 : ($3_1 | 0) < ($7 | 0) ? 1 : ($3_1 | 0) <= ($7 | 0) ? ($2_1 >>> 0 >= $6 >>> 0 ? 0 : 1) : 0) {
     break label$1
    }
    return ($0 ^ $4_1 | $2_1 ^ $6) != 0 | ($1_1 ^ $5_1 | $3_1 ^ $7) != 0;
   }
   $9_1 = -1;
   if (($2_1 | 0) == ($6 | 0) & ($3_1 | 0) == ($7 | 0) ? ($1_1 | 0) == ($5_1 | 0) & $0 >>> 0 > $4_1 >>> 0 | $1_1 >>> 0 > $5_1 >>> 0 : ($3_1 | 0) > ($7 | 0) ? 1 : ($3_1 | 0) >= ($7 | 0) ? ($2_1 >>> 0 <= $6 >>> 0 ? 0 : 1) : 0) {
    break label$1
   }
   $9_1 = ($0 ^ $4_1 | $2_1 ^ $6) != 0 | ($1_1 ^ $5_1 | $3_1 ^ $7) != 0;
  }
  return $9_1;
 }
 
 function $1626($0, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = 0, $6 = 0, $7 = 0;
  $6 = -1;
  $4_1 = $3_1 & 2147483647;
  $7 = $4_1;
  $5_1 = $2_1;
  label$1 : {
   if (!$2_1 & ($4_1 | 0) == 2147418112 ? $0 | $1_1 : ($4_1 | 0) == 2147418112 & $2_1 >>> 0 > 0 | $4_1 >>> 0 > 2147418112) {
    break label$1
   }
   if (!($0 | $5_1 | ($1_1 | ($7 | 1073610752)))) {
    return 0
   }
   $5_1 = $3_1 & 1073610752;
   if (($5_1 | 0) > 0 ? 1 : ($5_1 | 0) >= 0 ? 1 : 0) {
    if (!$2_1 & ($3_1 | 0) == 1073610752 ? !$1_1 & $0 >>> 0 < 0 | $1_1 >>> 0 < 0 : ($3_1 | 0) < 1073610752 ? 1 : ($3_1 | 0) <= 1073610752 ? ($2_1 >>> 0 >= 0 ? 0 : 1) : 0) {
     break label$1
    }
    return ($0 | $2_1) != 0 | ($1_1 | $3_1 ^ 1073610752) != 0;
   }
   if (!$2_1 & ($3_1 | 0) == 1073610752 ? !$1_1 & $0 >>> 0 > 0 | $1_1 >>> 0 > 0 : ($3_1 | 0) > 1073610752 ? 1 : ($3_1 | 0) >= 1073610752 ? ($2_1 >>> 0 <= 0 ? 0 : 1) : 0) {
    break label$1
   }
   $6 = ($0 | $2_1) != 0 | ($1_1 | $3_1 ^ 1073610752) != 0;
  }
  return $6;
 }
 
 function $1627($0, $1_1, $2_1, $3_1, $4_1, $5_1, $6, $7, $8) {
  var $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14 = 0, $15 = 0, $16_1 = 0, $17 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0, $26_1 = 0, $27_1 = 0, $28 = 0, $29_1 = 0, $30_1 = 0, $31_1 = 0, $32 = 0, $33 = 0, $34 = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, $38_1 = 0, $39 = 0, $40_1 = 0, $41 = 0;
  $13_1 = global$0 - 192 | 0;
  global$0 = $13_1;
  $29_1 = $7;
  $32 = $8 & 65535;
  $16_1 = $3_1;
  $14 = $4_1 & 65535;
  $28 = ($4_1 ^ $8) & -2147483648;
  $17 = $8 >>> 16 & 32767;
  label$1 : {
   $19_1 = $4_1 >>> 16 & 32767;
   label$2 : {
    label$3 : {
     if ($19_1 + -1 >>> 0 <= 32765) {
      if ($17 + -1 >>> 0 < 32766) {
       break label$3
      }
     }
     $10_1 = $4_1 & 2147483647;
     $11_1 = $10_1;
     $9_1 = $3_1;
     if (!(!$9_1 & ($10_1 | 0) == 2147418112 ? !($1_1 | $2_1) : ($10_1 | 0) == 2147418112 & $9_1 >>> 0 < 0 | $10_1 >>> 0 < 2147418112)) {
      $33 = $3_1;
      $28 = $4_1 | 32768;
      break label$2;
     }
     $10_1 = $8 & 2147483647;
     $4_1 = $10_1;
     $3_1 = $7;
     if (!(!$3_1 & ($10_1 | 0) == 2147418112 ? !($5_1 | $6) : ($10_1 | 0) == 2147418112 & $3_1 >>> 0 < 0 | $10_1 >>> 0 < 2147418112)) {
      $33 = $7;
      $28 = $8 | 32768;
      $1_1 = $5_1;
      $2_1 = $6;
      break label$2;
     }
     if (!($1_1 | $9_1 | ($11_1 ^ 2147418112 | $2_1))) {
      if (!($3_1 | $5_1 | ($4_1 ^ 2147418112 | $6))) {
       $1_1 = 0;
       $2_1 = 0;
       $28 = 2147450880;
       break label$2;
      }
      $28 = $28 | 2147418112;
      $1_1 = 0;
      $2_1 = 0;
      break label$2;
     }
     if (!($3_1 | $5_1 | ($4_1 ^ 2147418112 | $6))) {
      $1_1 = 0;
      $2_1 = 0;
      break label$2;
     }
     if (!($1_1 | $9_1 | ($2_1 | $11_1))) {
      break label$1
     }
     if (!($3_1 | $5_1 | ($4_1 | $6))) {
      $28 = $28 | 2147418112;
      $1_1 = 0;
      $2_1 = 0;
      break label$2;
     }
     $10_1 = 0;
     if (($11_1 | 0) == 65535 & $9_1 >>> 0 <= 4294967295 | $11_1 >>> 0 < 65535) {
      $9_1 = $1_1;
      $7 = !($14 | $16_1);
      $8 = $7 << 6;
      $10_1 = Math_clz32($7 ? $1_1 : $16_1) + 32 | 0;
      $1_1 = Math_clz32($7 ? $2_1 : $14);
      $1_1 = $8 + (($1_1 | 0) == 32 ? $10_1 : $1_1) | 0;
      $1624($13_1 + 176 | 0, $9_1, $2_1, $16_1, $14, $1_1 + -15 | 0);
      $10_1 = 16 - $1_1 | 0;
      $16_1 = HEAP32[$13_1 + 184 >> 2];
      $14 = HEAP32[$13_1 + 188 >> 2];
      $2_1 = HEAP32[$13_1 + 180 >> 2];
      $1_1 = HEAP32[$13_1 + 176 >> 2];
     }
     if (($4_1 | 0) == 65535 & $3_1 >>> 0 > 4294967295 | $4_1 >>> 0 > 65535) {
      break label$3
     }
     $3_1 = !($29_1 | $32);
     $4_1 = $3_1 << 6;
     $7 = Math_clz32($3_1 ? $5_1 : $29_1) + 32 | 0;
     $3_1 = Math_clz32($3_1 ? $6 : $32);
     $3_1 = $4_1 + (($3_1 | 0) == 32 ? $7 : $3_1) | 0;
     $1624($13_1 + 160 | 0, $5_1, $6, $29_1, $32, $3_1 + -15 | 0);
     $10_1 = ($3_1 + $10_1 | 0) + -16 | 0;
     $29_1 = HEAP32[$13_1 + 168 >> 2];
     $32 = HEAP32[$13_1 + 172 >> 2];
     $5_1 = HEAP32[$13_1 + 160 >> 2];
     $6 = HEAP32[$13_1 + 164 >> 2];
    }
    $4_1 = $32 | 65536;
    $31_1 = $4_1;
    $38_1 = $29_1;
    $3_1 = $29_1;
    $12_1 = $4_1 << 15 | $3_1 >>> 17;
    $3_1 = $3_1 << 15 | $6 >>> 17;
    $7 = -102865788 - $3_1 | 0;
    $4_1 = $12_1;
    $9_1 = $4_1;
    $8 = 1963258675 - ($9_1 + (4192101508 < $3_1 >>> 0) | 0) | 0;
    $1634($13_1 + 144 | 0, $3_1, $9_1, $7, $8);
    $9_1 = HEAP32[$13_1 + 152 >> 2];
    $1634($13_1 + 128 | 0, 0 - $9_1 | 0, 0 - (HEAP32[$13_1 + 156 >> 2] + (0 < $9_1 >>> 0) | 0) | 0, $7, $8);
    $7 = HEAP32[$13_1 + 136 >> 2];
    $8 = $7 << 1 | HEAP32[$13_1 + 132 >> 2] >>> 31;
    $7 = HEAP32[$13_1 + 140 >> 2] << 1 | $7 >>> 31;
    $1634($13_1 + 112 | 0, $8, $7, $3_1, $4_1);
    $9_1 = $7;
    $7 = HEAP32[$13_1 + 120 >> 2];
    $1634($13_1 + 96 | 0, $8, $9_1, 0 - $7 | 0, 0 - (HEAP32[$13_1 + 124 >> 2] + (0 < $7 >>> 0) | 0) | 0);
    $7 = HEAP32[$13_1 + 104 >> 2];
    $11_1 = HEAP32[$13_1 + 108 >> 2] << 1 | $7 >>> 31;
    $8 = $7 << 1 | HEAP32[$13_1 + 100 >> 2] >>> 31;
    $1634($13_1 + 80 | 0, $8, $11_1, $3_1, $4_1);
    $7 = HEAP32[$13_1 + 88 >> 2];
    $1634($13_1 - -64 | 0, $8, $11_1, 0 - $7 | 0, 0 - (HEAP32[$13_1 + 92 >> 2] + (0 < $7 >>> 0) | 0) | 0);
    $7 = HEAP32[$13_1 + 72 >> 2];
    $8 = $7 << 1 | HEAP32[$13_1 + 68 >> 2] >>> 31;
    $7 = HEAP32[$13_1 + 76 >> 2] << 1 | $7 >>> 31;
    $1634($13_1 + 48 | 0, $8, $7, $3_1, $4_1);
    $9_1 = $7;
    $7 = HEAP32[$13_1 + 56 >> 2];
    $1634($13_1 + 32 | 0, $8, $9_1, 0 - $7 | 0, 0 - (HEAP32[$13_1 + 60 >> 2] + (0 < $7 >>> 0) | 0) | 0);
    $7 = HEAP32[$13_1 + 40 >> 2];
    $11_1 = HEAP32[$13_1 + 44 >> 2] << 1 | $7 >>> 31;
    $8 = $7 << 1 | HEAP32[$13_1 + 36 >> 2] >>> 31;
    $1634($13_1 + 16 | 0, $8, $11_1, $3_1, $4_1);
    $7 = HEAP32[$13_1 + 24 >> 2];
    $1634($13_1, $8, $11_1, 0 - $7 | 0, 0 - (HEAP32[$13_1 + 28 >> 2] + (0 < $7 >>> 0) | 0) | 0);
    $34 = ($19_1 - $17 | 0) + $10_1 | 0;
    $7 = HEAP32[$13_1 + 8 >> 2];
    $9_1 = HEAP32[$13_1 + 12 >> 2] << 1 | $7 >>> 31;
    $8 = $7 << 1;
    $10_1 = $9_1 + -1 | 0;
    $8 = (HEAP32[$13_1 + 4 >> 2] >>> 31 | $8) + -1 | 0;
    if ($8 >>> 0 < 4294967295) {
     $10_1 = $10_1 + 1 | 0
    }
    $7 = $8;
    $9_1 = 0;
    $21_1 = $9_1;
    $20_1 = $4_1;
    $11_1 = 0;
    $12_1 = __wasm_i64_mul($7, $9_1, $4_1, $11_1);
    $4_1 = i64toi32_i32$HIGH_BITS;
    $19_1 = $4_1;
    $22_1 = $10_1;
    $17 = 0;
    $9_1 = $3_1;
    $7 = __wasm_i64_mul($10_1, $17, $9_1, 0);
    $3_1 = $7 + $12_1 | 0;
    $10_1 = i64toi32_i32$HIGH_BITS + $4_1 | 0;
    $10_1 = $3_1 >>> 0 < $7 >>> 0 ? $10_1 + 1 | 0 : $10_1;
    $7 = $3_1;
    $3_1 = $10_1;
    $15 = __wasm_i64_mul($8, $21_1, $9_1, $15);
    $4_1 = 0 + $15 | 0;
    $10_1 = $7;
    $9_1 = $10_1 + i64toi32_i32$HIGH_BITS | 0;
    $9_1 = $4_1 >>> 0 < $15 >>> 0 ? $9_1 + 1 | 0 : $9_1;
    $15 = $4_1;
    $4_1 = $9_1;
    $9_1 = ($10_1 | 0) == ($9_1 | 0) & $15 >>> 0 < $23_1 >>> 0 | $9_1 >>> 0 < $10_1 >>> 0;
    $10_1 = ($3_1 | 0) == ($19_1 | 0) & $10_1 >>> 0 < $12_1 >>> 0 | $3_1 >>> 0 < $19_1 >>> 0;
    $7 = $3_1;
    $3_1 = __wasm_i64_mul($22_1, $17, $20_1, $11_1) + $3_1 | 0;
    $11_1 = $10_1 + i64toi32_i32$HIGH_BITS | 0;
    $11_1 = $3_1 >>> 0 < $7 >>> 0 ? $11_1 + 1 | 0 : $11_1;
    $7 = $3_1;
    $3_1 = $9_1 + $3_1 | 0;
    $9_1 = $11_1;
    $26_1 = $3_1;
    $7 = $3_1 >>> 0 < $7 >>> 0 ? $9_1 + 1 | 0 : $9_1;
    $3_1 = $6;
    $24_1 = ($3_1 & 131071) << 15 | $5_1 >>> 17;
    $20_1 = __wasm_i64_mul($8, $21_1, $24_1, 0);
    $3_1 = i64toi32_i32$HIGH_BITS;
    $23_1 = $3_1;
    $10_1 = $5_1;
    $18_1 = $10_1 << 15 & -32768;
    $11_1 = __wasm_i64_mul($22_1, $17, $18_1, 0);
    $9_1 = $11_1 + $20_1 | 0;
    $10_1 = i64toi32_i32$HIGH_BITS + $3_1 | 0;
    $10_1 = $9_1 >>> 0 < $11_1 >>> 0 ? $10_1 + 1 | 0 : $10_1;
    $3_1 = $10_1;
    $25_1 = __wasm_i64_mul($8, $21_1, $18_1, $25_1);
    $18_1 = 0 + $25_1 | 0;
    $10_1 = $9_1 + i64toi32_i32$HIGH_BITS | 0;
    $10_1 = $18_1 >>> 0 < $25_1 >>> 0 ? $10_1 + 1 | 0 : $10_1;
    $10_1 = ($9_1 | 0) == ($10_1 | 0) & $18_1 >>> 0 < $30_1 >>> 0 | $10_1 >>> 0 < $9_1 >>> 0;
    $9_1 = ($3_1 | 0) == ($23_1 | 0) & $9_1 >>> 0 < $20_1 >>> 0 | $3_1 >>> 0 < $23_1 >>> 0;
    $12_1 = $3_1;
    $3_1 = __wasm_i64_mul($22_1, $17, $24_1, $27_1) + $3_1 | 0;
    $11_1 = $9_1 + i64toi32_i32$HIGH_BITS | 0;
    $11_1 = $3_1 >>> 0 < $12_1 >>> 0 ? $11_1 + 1 | 0 : $11_1;
    $9_1 = $3_1;
    $3_1 = $10_1 + $9_1 | 0;
    $12_1 = $3_1 >>> 0 < $9_1 >>> 0 ? $11_1 + 1 | 0 : $11_1;
    $10_1 = $3_1;
    $3_1 = $15 + $3_1 | 0;
    $9_1 = $12_1 + $4_1 | 0;
    $9_1 = $3_1 >>> 0 < $10_1 >>> 0 ? $9_1 + 1 | 0 : $9_1;
    $19_1 = $3_1;
    $10_1 = $7;
    $20_1 = $9_1;
    $3_1 = ($4_1 | 0) == ($9_1 | 0) & $3_1 >>> 0 < $15 >>> 0 | $9_1 >>> 0 < $4_1 >>> 0;
    $4_1 = $3_1 + $26_1 | 0;
    if ($4_1 >>> 0 < $3_1 >>> 0) {
     $10_1 = $10_1 + 1 | 0
    }
    $9_1 = $10_1;
    $3_1 = ($19_1 | 0) != 0 | ($20_1 | 0) != 0;
    $4_1 = $4_1 + $3_1 | 0;
    if ($4_1 >>> 0 < $3_1 >>> 0) {
     $9_1 = $9_1 + 1 | 0
    }
    $10_1 = $4_1;
    $4_1 = 0 - $10_1 | 0;
    $15 = 0;
    $7 = __wasm_i64_mul($4_1, $15, $8, $21_1);
    $3_1 = i64toi32_i32$HIGH_BITS;
    $23_1 = $3_1;
    $18_1 = __wasm_i64_mul($22_1, $17, $4_1, $15);
    $4_1 = i64toi32_i32$HIGH_BITS;
    $26_1 = $4_1;
    $24_1 = 0 - ((0 < $10_1 >>> 0) + $9_1 | 0) | 0;
    $9_1 = 0;
    $15 = __wasm_i64_mul($8, $21_1, $24_1, $9_1);
    $12_1 = $15 + $18_1 | 0;
    $10_1 = i64toi32_i32$HIGH_BITS + $4_1 | 0;
    $10_1 = $12_1 >>> 0 < $15 >>> 0 ? $10_1 + 1 | 0 : $10_1;
    $4_1 = $12_1;
    $15 = 0 + $7 | 0;
    $11_1 = $3_1 + $4_1 | 0;
    $11_1 = $15 >>> 0 < $27_1 >>> 0 ? $11_1 + 1 | 0 : $11_1;
    $12_1 = $15;
    $3_1 = $11_1;
    $11_1 = ($23_1 | 0) == ($3_1 | 0) & $12_1 >>> 0 < $7 >>> 0 | $3_1 >>> 0 < $23_1 >>> 0;
    $12_1 = ($10_1 | 0) == ($26_1 | 0) & $4_1 >>> 0 < $18_1 >>> 0 | $10_1 >>> 0 < $26_1 >>> 0;
    $4_1 = __wasm_i64_mul($22_1, $17, $24_1, $9_1) + $10_1 | 0;
    $9_1 = $12_1 + i64toi32_i32$HIGH_BITS | 0;
    $9_1 = $4_1 >>> 0 < $10_1 >>> 0 ? $9_1 + 1 | 0 : $9_1;
    $7 = $4_1;
    $4_1 = $11_1 + $4_1 | 0;
    if ($4_1 >>> 0 < $7 >>> 0) {
     $9_1 = $9_1 + 1 | 0
    }
    $24_1 = $4_1;
    $7 = $9_1;
    $4_1 = 0 - $19_1 | 0;
    $27_1 = 0 - ((0 < $19_1 >>> 0) + $20_1 | 0) | 0;
    $19_1 = 0;
    $26_1 = __wasm_i64_mul($27_1, $19_1, $8, $21_1);
    $18_1 = i64toi32_i32$HIGH_BITS;
    $20_1 = $4_1;
    $25_1 = 0;
    $9_1 = __wasm_i64_mul($4_1, $25_1, $22_1, $17);
    $4_1 = $9_1 + $26_1 | 0;
    $10_1 = i64toi32_i32$HIGH_BITS + $18_1 | 0;
    $11_1 = $4_1;
    $4_1 = $4_1 >>> 0 < $9_1 >>> 0 ? $10_1 + 1 | 0 : $10_1;
    $20_1 = __wasm_i64_mul($8, $21_1, $20_1, $25_1);
    $8 = 0 + $20_1 | 0;
    $9_1 = $11_1;
    $10_1 = $9_1 + i64toi32_i32$HIGH_BITS | 0;
    $10_1 = $8 >>> 0 < $20_1 >>> 0 ? $10_1 + 1 | 0 : $10_1;
    $10_1 = ($9_1 | 0) == ($10_1 | 0) & $8 >>> 0 < $30_1 >>> 0 | $10_1 >>> 0 < $9_1 >>> 0;
    $9_1 = ($4_1 | 0) == ($18_1 | 0) & $9_1 >>> 0 < $26_1 >>> 0 | $4_1 >>> 0 < $18_1 >>> 0;
    $8 = $4_1;
    $4_1 = __wasm_i64_mul($27_1, $19_1, $22_1, $17) + $4_1 | 0;
    $12_1 = $9_1 + i64toi32_i32$HIGH_BITS | 0;
    $12_1 = $4_1 >>> 0 < $8 >>> 0 ? $12_1 + 1 | 0 : $12_1;
    $8 = $4_1;
    $4_1 = $10_1 + $4_1 | 0;
    $9_1 = $12_1;
    $9_1 = $4_1 >>> 0 < $8 >>> 0 ? $9_1 + 1 | 0 : $9_1;
    $8 = $4_1;
    $4_1 = $15 + $4_1 | 0;
    $9_1 = $9_1 + $3_1 | 0;
    $9_1 = $4_1 >>> 0 < $8 >>> 0 ? $9_1 + 1 | 0 : $9_1;
    $8 = $4_1;
    $10_1 = $7;
    $4_1 = $9_1;
    $3_1 = ($3_1 | 0) == ($9_1 | 0) & $8 >>> 0 < $15 >>> 0 | $9_1 >>> 0 < $3_1 >>> 0;
    $7 = $3_1 + $24_1 | 0;
    if ($7 >>> 0 < $3_1 >>> 0) {
     $10_1 = $10_1 + 1 | 0
    }
    $3_1 = $7;
    $9_1 = $10_1;
    $12_1 = $3_1;
    $11_1 = $4_1 + -1 | 0;
    $3_1 = $8 + -2 | 0;
    if ($3_1 >>> 0 < 4294967294) {
     $11_1 = $11_1 + 1 | 0
    }
    $7 = $3_1;
    $10_1 = $3_1;
    $3_1 = $11_1;
    $4_1 = ($4_1 | 0) == ($3_1 | 0) & $10_1 >>> 0 < $8 >>> 0 | $3_1 >>> 0 < $4_1 >>> 0;
    $8 = $12_1 + $4_1 | 0;
    if ($8 >>> 0 < $4_1 >>> 0) {
     $9_1 = $9_1 + 1 | 0
    }
    $4_1 = $8 + -1 | 0;
    $10_1 = $9_1 + -1 | 0;
    $10_1 = $4_1 >>> 0 < 4294967295 ? $10_1 + 1 | 0 : $10_1;
    $8 = 0;
    $22_1 = $8;
    $17 = $4_1;
    $9_1 = $16_1;
    $18_1 = $9_1 << 2 | $2_1 >>> 30;
    $24_1 = 0;
    $12_1 = __wasm_i64_mul($4_1, $8, $18_1, $24_1);
    $8 = i64toi32_i32$HIGH_BITS;
    $15 = $8;
    $11_1 = $8;
    $8 = $2_1;
    $27_1 = ($8 & 1073741823) << 2 | $1_1 >>> 30;
    $25_1 = $10_1;
    $8 = 0;
    $9_1 = __wasm_i64_mul($27_1, 0, $10_1, $8);
    $4_1 = $9_1 + $12_1 | 0;
    $11_1 = i64toi32_i32$HIGH_BITS + $11_1 | 0;
    $11_1 = $4_1 >>> 0 < $9_1 >>> 0 ? $11_1 + 1 | 0 : $11_1;
    $9_1 = $4_1;
    $20_1 = $11_1;
    $23_1 = ($15 | 0) == ($11_1 | 0) & $9_1 >>> 0 < $12_1 >>> 0 | $11_1 >>> 0 < $15 >>> 0;
    $12_1 = $11_1;
    $11_1 = 0;
    $15 = $11_1;
    $10_1 = 0;
    $26_1 = $3_1;
    $30_1 = (($14 & 1073741823) << 2 | $16_1 >>> 30) & -262145 | 262144;
    $4_1 = __wasm_i64_mul($3_1, $11_1, $30_1, 0);
    $3_1 = $4_1 + $9_1 | 0;
    $12_1 = i64toi32_i32$HIGH_BITS + $12_1 | 0;
    $12_1 = $3_1 >>> 0 < $4_1 >>> 0 ? $12_1 + 1 | 0 : $12_1;
    $16_1 = $3_1;
    $4_1 = $12_1;
    $3_1 = ($20_1 | 0) == ($4_1 | 0) & $3_1 >>> 0 < $9_1 >>> 0 | $4_1 >>> 0 < $20_1 >>> 0;
    $9_1 = $3_1 + $23_1 | 0;
    if ($9_1 >>> 0 < $3_1 >>> 0) {
     $10_1 = 1
    }
    $11_1 = __wasm_i64_mul($25_1, $8, $30_1, $35_1);
    $3_1 = $11_1 + $9_1 | 0;
    $9_1 = i64toi32_i32$HIGH_BITS + $10_1 | 0;
    $10_1 = $3_1 >>> 0 < $11_1 >>> 0 ? $9_1 + 1 | 0 : $9_1;
    $11_1 = __wasm_i64_mul($17, $22_1, $30_1, $35_1);
    $9_1 = i64toi32_i32$HIGH_BITS;
    $2_1 = $3_1;
    $14 = __wasm_i64_mul($18_1, $24_1, $25_1, $8);
    $3_1 = $14 + $11_1 | 0;
    $12_1 = i64toi32_i32$HIGH_BITS + $9_1 | 0;
    $12_1 = $3_1 >>> 0 < $14 >>> 0 ? $12_1 + 1 | 0 : $12_1;
    $14 = $3_1;
    $3_1 = $12_1;
    $12_1 = ($9_1 | 0) == ($3_1 | 0) & $14 >>> 0 < $11_1 >>> 0 | $3_1 >>> 0 < $9_1 >>> 0;
    $11_1 = $2_1 + $3_1 | 0;
    $10_1 = $10_1 + $12_1 | 0;
    $9_1 = $11_1;
    $12_1 = $9_1 >>> 0 < $3_1 >>> 0 ? $10_1 + 1 | 0 : $10_1;
    $2_1 = $9_1;
    $11_1 = $4_1 + $14 | 0;
    $10_1 = 0;
    $3_1 = $10_1 + $16_1 | 0;
    if ($3_1 >>> 0 < $10_1 >>> 0) {
     $11_1 = $11_1 + 1 | 0
    }
    $14 = $3_1;
    $9_1 = $3_1;
    $3_1 = $11_1;
    $4_1 = ($4_1 | 0) == ($3_1 | 0) & $9_1 >>> 0 < $16_1 >>> 0 | $3_1 >>> 0 < $4_1 >>> 0;
    $9_1 = $2_1 + $4_1 | 0;
    if ($9_1 >>> 0 < $4_1 >>> 0) {
     $12_1 = $12_1 + 1 | 0
    }
    $39 = $9_1;
    $4_1 = $14;
    $10_1 = $3_1;
    $16_1 = __wasm_i64_mul($27_1, $19_1, $26_1, $15);
    $11_1 = i64toi32_i32$HIGH_BITS;
    $20_1 = $7;
    $23_1 = __wasm_i64_mul($7, 0, $18_1, $24_1);
    $7 = $23_1 + $16_1 | 0;
    $9_1 = i64toi32_i32$HIGH_BITS + $11_1 | 0;
    $9_1 = $7 >>> 0 < $23_1 >>> 0 ? $9_1 + 1 | 0 : $9_1;
    $21_1 = $7;
    $7 = $9_1;
    $16_1 = ($11_1 | 0) == ($9_1 | 0) & $21_1 >>> 0 < $16_1 >>> 0 | $9_1 >>> 0 < $11_1 >>> 0;
    $11_1 = $9_1;
    $40_1 = $4_1;
    $9_1 = 0;
    $41 = $16_1;
    $36_1 = $1_1 << 2 & -4;
    $2_1 = 0;
    $16_1 = __wasm_i64_mul($17, $22_1, $36_1, $2_1);
    $4_1 = $16_1 + $21_1 | 0;
    $11_1 = i64toi32_i32$HIGH_BITS + $11_1 | 0;
    $11_1 = $4_1 >>> 0 < $16_1 >>> 0 ? $11_1 + 1 | 0 : $11_1;
    $23_1 = $4_1;
    $16_1 = $4_1;
    $4_1 = $11_1;
    $7 = ($7 | 0) == ($4_1 | 0) & $16_1 >>> 0 < $21_1 >>> 0 | $4_1 >>> 0 < $7 >>> 0;
    $11_1 = $41 + $7 | 0;
    if ($11_1 >>> 0 < $7 >>> 0) {
     $9_1 = 1
    }
    $7 = $40_1 + $11_1 | 0;
    $10_1 = $9_1 + $10_1 | 0;
    $10_1 = $7 >>> 0 < $11_1 >>> 0 ? $10_1 + 1 | 0 : $10_1;
    $16_1 = $7;
    $11_1 = $12_1;
    $7 = $10_1;
    $3_1 = ($3_1 | 0) == ($10_1 | 0) & $16_1 >>> 0 < $14 >>> 0 | $10_1 >>> 0 < $3_1 >>> 0;
    $9_1 = $3_1 + $39 | 0;
    if ($9_1 >>> 0 < $3_1 >>> 0) {
     $11_1 = $11_1 + 1 | 0
    }
    $40_1 = $9_1;
    $14 = $16_1;
    $21_1 = $7;
    $39 = __wasm_i64_mul($25_1, $8, $36_1, $2_1);
    $25_1 = i64toi32_i32$HIGH_BITS;
    $8 = __wasm_i64_mul($30_1, $35_1, $20_1, $37_1);
    $3_1 = $8 + $39 | 0;
    $12_1 = i64toi32_i32$HIGH_BITS + $25_1 | 0;
    $12_1 = $3_1 >>> 0 < $8 >>> 0 ? $12_1 + 1 | 0 : $12_1;
    $30_1 = $3_1;
    $9_1 = __wasm_i64_mul($18_1, $24_1, $26_1, $15);
    $3_1 = $3_1 + $9_1 | 0;
    $8 = $12_1;
    $10_1 = $8 + i64toi32_i32$HIGH_BITS | 0;
    $10_1 = $3_1 >>> 0 < $9_1 >>> 0 ? $10_1 + 1 | 0 : $10_1;
    $18_1 = $3_1;
    $12_1 = __wasm_i64_mul($17, $22_1, $27_1, $19_1);
    $3_1 = $3_1 + $12_1 | 0;
    $9_1 = i64toi32_i32$HIGH_BITS + $10_1 | 0;
    $17 = $3_1;
    $9_1 = $3_1 >>> 0 < $12_1 >>> 0 ? $9_1 + 1 | 0 : $9_1;
    $22_1 = 0;
    $12_1 = $11_1;
    $3_1 = $9_1;
    $9_1 = ($9_1 | 0) == ($10_1 | 0) & $17 >>> 0 < $18_1 >>> 0 | $9_1 >>> 0 < $10_1 >>> 0;
    $11_1 = ($8 | 0) == ($25_1 | 0) & $30_1 >>> 0 < $39 >>> 0 | $8 >>> 0 < $25_1 >>> 0;
    $8 = ($8 | 0) == ($10_1 | 0) & $18_1 >>> 0 < $30_1 >>> 0 | $10_1 >>> 0 < $8 >>> 0;
    $10_1 = $11_1 + $8 | 0;
    $10_1 >>> 0 < $8 >>> 0;
    $8 = $9_1 + $10_1 | 0;
    $10_1 = $8;
    $9_1 = $3_1 | 0;
    $8 = $9_1 + $14 | 0;
    $10_1 = ($10_1 | $22_1) + $21_1 | 0;
    $10_1 = $8 >>> 0 < $9_1 >>> 0 ? $10_1 + 1 | 0 : $10_1;
    $21_1 = $8;
    $14 = $10_1;
    $7 = ($7 | 0) == ($10_1 | 0) & $8 >>> 0 < $16_1 >>> 0 | $10_1 >>> 0 < $7 >>> 0;
    $8 = $7 + $40_1 | 0;
    if ($8 >>> 0 < $7 >>> 0) {
     $12_1 = $12_1 + 1 | 0
    }
    $24_1 = $8;
    $8 = $12_1;
    $12_1 = $21_1;
    $16_1 = $14;
    $22_1 = $23_1;
    $26_1 = __wasm_i64_mul($26_1, $15, $36_1, $2_1);
    $15 = i64toi32_i32$HIGH_BITS;
    $9_1 = __wasm_i64_mul($27_1, $19_1, $20_1, $37_1);
    $7 = $9_1 + $26_1 | 0;
    $11_1 = i64toi32_i32$HIGH_BITS + $15 | 0;
    $11_1 = $7 >>> 0 < $9_1 >>> 0 ? $11_1 + 1 | 0 : $11_1;
    $10_1 = $11_1;
    $19_1 = $10_1;
    $11_1 = 0;
    $9_1 = ($10_1 | 0) == ($15 | 0) & $7 >>> 0 < $26_1 >>> 0 | $10_1 >>> 0 < $15 >>> 0;
    $7 = $10_1 + $22_1 | 0;
    $10_1 = ($9_1 | $11_1) + $4_1 | 0;
    $10_1 = $7 >>> 0 < $19_1 >>> 0 ? $10_1 + 1 | 0 : $10_1;
    $19_1 = $7;
    $9_1 = $7;
    $7 = $10_1;
    $9_1 = ($4_1 | 0) == ($10_1 | 0) & $9_1 >>> 0 < $22_1 >>> 0 | $10_1 >>> 0 < $4_1 >>> 0;
    $23_1 = $12_1;
    $4_1 = $9_1;
    $9_1 = $10_1 + $17 | 0;
    $12_1 = 0;
    $3_1 = $12_1 + $19_1 | 0;
    if ($3_1 >>> 0 < $12_1 >>> 0) {
     $9_1 = $9_1 + 1 | 0
    }
    $3_1 = ($7 | 0) == ($9_1 | 0) & $3_1 >>> 0 < $19_1 >>> 0 | $9_1 >>> 0 < $7 >>> 0;
    $4_1 = $4_1 + $3_1 | 0;
    if ($4_1 >>> 0 < $3_1 >>> 0) {
     $11_1 = 1
    }
    $3_1 = $23_1 + $4_1 | 0;
    $12_1 = $11_1 + $16_1 | 0;
    $7 = $3_1;
    $9_1 = $8;
    $12_1 = $3_1 >>> 0 < $4_1 >>> 0 ? $12_1 + 1 | 0 : $12_1;
    $8 = $12_1;
    $3_1 = ($14 | 0) == ($8 | 0) & $3_1 >>> 0 < $21_1 >>> 0 | $8 >>> 0 < $14 >>> 0;
    $4_1 = $3_1 + $24_1 | 0;
    if ($4_1 >>> 0 < $3_1 >>> 0) {
     $9_1 = $9_1 + 1 | 0
    }
    $3_1 = $4_1;
    $4_1 = $9_1;
    label$12 : {
     if (($9_1 | 0) == 131071 & $3_1 >>> 0 <= 4294967295 | $9_1 >>> 0 < 131071) {
      $22_1 = 0;
      $14 = $5_1;
      $18_1 = 0;
      $10_1 = __wasm_i64_mul($7, $22_1, $14, $18_1);
      $11_1 = i64toi32_i32$HIGH_BITS;
      $9_1 = $1_1 << 17;
      $1_1 = 0;
      $2_1 = ($10_1 | 0) != 0 | ($11_1 | 0) != 0;
      $16_1 = $1_1 - $2_1 | 0;
      $30_1 = $9_1 - ($1_1 >>> 0 < $2_1 >>> 0) | 0;
      $19_1 = 0 - $10_1 | 0;
      $15 = 0 - ((0 < $10_1 >>> 0) + $11_1 | 0) | 0;
      $2_1 = 0;
      $24_1 = __wasm_i64_mul($8, $2_1, $14, $18_1);
      $1_1 = i64toi32_i32$HIGH_BITS;
      $27_1 = $1_1;
      $17 = 0;
      $10_1 = __wasm_i64_mul($7, $22_1, $6, $17);
      $9_1 = $10_1 + $24_1 | 0;
      $11_1 = i64toi32_i32$HIGH_BITS + $1_1 | 0;
      $11_1 = $9_1 >>> 0 < $10_1 >>> 0 ? $11_1 + 1 | 0 : $11_1;
      $1_1 = $9_1;
      $10_1 = $9_1;
      $20_1 = 0;
      $9_1 = $20_1;
      $23_1 = $10_1;
      $9_1 = ($10_1 | 0) == ($15 | 0) & $19_1 >>> 0 < $9_1 >>> 0 | $15 >>> 0 < $10_1 >>> 0;
      $21_1 = $16_1 - $9_1 | 0;
      $30_1 = $30_1 - ($16_1 >>> 0 < $9_1 >>> 0) | 0;
      $9_1 = __wasm_i64_mul($3_1, 0, $14, $18_1);
      $10_1 = i64toi32_i32$HIGH_BITS;
      $14 = __wasm_i64_mul($7, $22_1, $29_1, 0);
      $9_1 = $14 + $9_1 | 0;
      $12_1 = i64toi32_i32$HIGH_BITS + $10_1 | 0;
      $12_1 = $9_1 >>> 0 < $14 >>> 0 ? $12_1 + 1 | 0 : $12_1;
      $14 = __wasm_i64_mul($8, $2_1, $6, $17);
      $9_1 = $14 + $9_1 | 0;
      $10_1 = i64toi32_i32$HIGH_BITS + $12_1 | 0;
      $10_1 = $9_1 >>> 0 < $14 >>> 0 ? $10_1 + 1 | 0 : $10_1;
      $12_1 = $10_1;
      $10_1 = ($11_1 | 0) == ($27_1 | 0) & $1_1 >>> 0 < $24_1 >>> 0 | $11_1 >>> 0 < $27_1 >>> 0;
      $1_1 = $11_1 + $9_1 | 0;
      $10_1 = $10_1 + $12_1 | 0;
      $10_1 = $1_1 >>> 0 < $11_1 >>> 0 ? $10_1 + 1 | 0 : $10_1;
      $11_1 = $1_1;
      $1_1 = $10_1;
      $9_1 = __wasm_i64_mul($7, $8, $31_1, 0);
      $14 = i64toi32_i32$HIGH_BITS;
      $16_1 = $11_1;
      $11_1 = __wasm_i64_mul($5_1, $6, $4_1, 0);
      $10_1 = $11_1 + $9_1 | 0;
      $9_1 = i64toi32_i32$HIGH_BITS + $14 | 0;
      $9_1 = $10_1 >>> 0 < $11_1 >>> 0 ? $9_1 + 1 | 0 : $9_1;
      $12_1 = __wasm_i64_mul($3_1, $4_1, $6, $17);
      $11_1 = $12_1 + $10_1 | 0;
      $9_1 = __wasm_i64_mul($8, $2_1, $29_1, $32);
      $2_1 = $9_1 + $11_1 | 0;
      $9_1 = $2_1;
      $10_1 = 0;
      $2_1 = $16_1 + $10_1 | 0;
      $9_1 = $1_1 + $9_1 | 0;
      $1_1 = $2_1;
      $16_1 = $21_1 - $1_1 | 0;
      $2_1 = $30_1 - (($21_1 >>> 0 < $1_1 >>> 0) + ($1_1 >>> 0 < $10_1 >>> 0 ? $9_1 + 1 | 0 : $9_1) | 0) | 0;
      $34 = $34 + -1 | 0;
      $29_1 = $19_1 - $20_1 | 0;
      $1_1 = $15 - (($19_1 >>> 0 < $20_1 >>> 0) + $23_1 | 0) | 0;
      break label$12;
     }
     $17 = $8 >>> 1 | 0;
     $11_1 = 0;
     $12_1 = $1_1 << 16;
     $10_1 = $3_1 << 31;
     $7 = ($8 & 1) << 31 | $7 >>> 1;
     $8 = $8 >>> 1 | $10_1;
     $27_1 = 0;
     $25_1 = 0;
     $1_1 = __wasm_i64_mul($7, $27_1, $5_1, $25_1);
     $9_1 = i64toi32_i32$HIGH_BITS;
     $10_1 = $9_1;
     $9_1 = ($1_1 | 0) != 0 | ($9_1 | 0) != 0;
     $14 = $2_1 - $9_1 | 0;
     $37_1 = $12_1 - ($2_1 >>> 0 < $9_1 >>> 0) | 0;
     $21_1 = 0 - $1_1 | 0;
     $22_1 = 0 - ((0 < $1_1 >>> 0) + $10_1 | 0) | 0;
     $12_1 = $22_1;
     $15 = 0;
     $20_1 = __wasm_i64_mul($7, $27_1, $6, $15);
     $1_1 = i64toi32_i32$HIGH_BITS;
     $35_1 = $1_1;
     $23_1 = $17 | $3_1 << 31;
     $36_1 = $4_1 << 31 | $3_1 >>> 1 | $11_1;
     $10_1 = $23_1;
     $17 = __wasm_i64_mul($10_1, 0, $5_1, $25_1);
     $2_1 = $17 + $20_1 | 0;
     $9_1 = i64toi32_i32$HIGH_BITS + $1_1 | 0;
     $9_1 = $2_1 >>> 0 < $17 >>> 0 ? $9_1 + 1 | 0 : $9_1;
     $1_1 = $9_1;
     $9_1 = $2_1;
     $26_1 = $9_1;
     $18_1 = 0;
     $9_1 = ($9_1 | 0) == ($12_1 | 0) & $21_1 >>> 0 < $18_1 >>> 0 | $12_1 >>> 0 < $9_1 >>> 0;
     $24_1 = $14 - $9_1 | 0;
     $37_1 = $37_1 - ($14 >>> 0 < $9_1 >>> 0) | 0;
     $10_1 = __wasm_i64_mul($6, $15, $10_1, $11_1);
     $11_1 = i64toi32_i32$HIGH_BITS;
     $9_1 = $4_1;
     $12_1 = $9_1 >>> 1 | 0;
     $17 = ($9_1 & 1) << 31 | $3_1 >>> 1;
     $14 = $12_1;
     $12_1 = __wasm_i64_mul($17, 0, $5_1, $25_1);
     $9_1 = $12_1 + $10_1 | 0;
     $10_1 = i64toi32_i32$HIGH_BITS + $11_1 | 0;
     $10_1 = $9_1 >>> 0 < $12_1 >>> 0 ? $10_1 + 1 | 0 : $10_1;
     $12_1 = __wasm_i64_mul($7, $27_1, $29_1, 0);
     $11_1 = $12_1 + $9_1 | 0;
     $9_1 = i64toi32_i32$HIGH_BITS + $10_1 | 0;
     $10_1 = $11_1;
     $11_1 = $10_1 >>> 0 < $12_1 >>> 0 ? $9_1 + 1 | 0 : $9_1;
     $9_1 = ($1_1 | 0) == ($35_1 | 0) & $2_1 >>> 0 < $20_1 >>> 0 | $1_1 >>> 0 < $35_1 >>> 0;
     $2_1 = $1_1;
     $1_1 = $1_1 + $10_1 | 0;
     $11_1 = $9_1 + $11_1 | 0;
     $9_1 = $1_1;
     $1_1 = $9_1 >>> 0 < $2_1 >>> 0 ? $11_1 + 1 | 0 : $11_1;
     $2_1 = __wasm_i64_mul($7, $8, $31_1, 0);
     $10_1 = i64toi32_i32$HIGH_BITS;
     $11_1 = $9_1;
     $3_1 = __wasm_i64_mul($5_1, $6, $4_1 >>> 1 | 0, 0);
     $2_1 = $3_1 + $2_1 | 0;
     $9_1 = i64toi32_i32$HIGH_BITS + $10_1 | 0;
     $9_1 = $2_1 >>> 0 < $3_1 >>> 0 ? $9_1 + 1 | 0 : $9_1;
     $3_1 = __wasm_i64_mul($6, $15, $17, $14);
     $2_1 = $3_1 + $2_1 | 0;
     $9_1 = i64toi32_i32$HIGH_BITS + $9_1 | 0;
     $3_1 = __wasm_i64_mul($23_1, $36_1, $29_1, $32);
     $2_1 = $3_1 + $2_1 | 0;
     $9_1 = $2_1;
     $3_1 = 0;
     $2_1 = $11_1 + $3_1 | 0;
     $10_1 = $1_1 + $9_1 | 0;
     $1_1 = $2_1;
     $16_1 = $24_1 - $1_1 | 0;
     $2_1 = $37_1 - (($24_1 >>> 0 < $1_1 >>> 0) + ($1_1 >>> 0 < $3_1 >>> 0 ? $10_1 + 1 | 0 : $10_1) | 0) | 0;
     $3_1 = $17;
     $4_1 = $14;
     $29_1 = $21_1 - $18_1 | 0;
     $1_1 = $22_1 - (($21_1 >>> 0 < $18_1 >>> 0) + $26_1 | 0) | 0;
    }
    if (($34 | 0) >= 16384) {
     $28 = $28 | 2147418112;
     $1_1 = 0;
     $2_1 = 0;
     break label$2;
    }
    $11_1 = $34 + 16383 | 0;
    if (($34 | 0) <= -16383) {
     label$16 : {
      if ($11_1) {
       break label$16
      }
      $11_1 = $8;
      $14 = $29_1;
      $12_1 = $1_1 << 1 | $14 >>> 31;
      $9_1 = $14 << 1;
      $6 = ($6 | 0) == ($12_1 | 0) & $9_1 >>> 0 > $5_1 >>> 0 | $12_1 >>> 0 > $6 >>> 0;
      $9_1 = $4_1 & 65535;
      $5_1 = $16_1;
      $12_1 = $2_1 << 1 | $5_1 >>> 31;
      $2_1 = $5_1 << 1 | $1_1 >>> 31;
      $4_1 = $2_1;
      $1_1 = $12_1;
      $1_1 = ($4_1 | 0) == ($38_1 | 0) & ($1_1 | 0) == ($31_1 | 0) ? $6 : ($31_1 | 0) == ($1_1 | 0) & $4_1 >>> 0 > $38_1 >>> 0 | $1_1 >>> 0 > $31_1 >>> 0;
      $2_1 = $1_1 + $7 | 0;
      if ($2_1 >>> 0 < $1_1 >>> 0) {
       $11_1 = $11_1 + 1 | 0
      }
      $1_1 = $2_1;
      $4_1 = $1_1;
      $2_1 = $11_1;
      $4_1 = $3_1 + (($8 | 0) == ($11_1 | 0) & $4_1 >>> 0 < $7 >>> 0 | $11_1 >>> 0 < $8 >>> 0) | 0;
      if ($4_1 >>> 0 < $3_1 >>> 0) {
       $9_1 = $9_1 + 1 | 0
      }
      $3_1 = $9_1;
      if (!($9_1 & 65536)) {
       break label$16
      }
      $33 = $4_1 | $33;
      $28 = $3_1 | $28;
      break label$2;
     }
     $1_1 = 0;
     $2_1 = 0;
     break label$2;
    }
    $10_1 = $8;
    $4_1 = $4_1 & 65535;
    $14 = $29_1;
    $9_1 = $1_1 << 1 | $14 >>> 31;
    $14 = $14 << 1;
    $6 = ($6 | 0) == ($9_1 | 0) & $14 >>> 0 >= $5_1 >>> 0 | $9_1 >>> 0 > $6 >>> 0;
    $5_1 = $16_1;
    $9_1 = $2_1 << 1 | $5_1 >>> 31;
    $2_1 = $5_1 << 1 | $1_1 >>> 31;
    $1_1 = ($2_1 | 0) == ($38_1 | 0) & ($9_1 | 0) == ($31_1 | 0) ? $6 : ($31_1 | 0) == ($9_1 | 0) & $2_1 >>> 0 >= $38_1 >>> 0 | $9_1 >>> 0 > $31_1 >>> 0;
    $2_1 = $1_1 + $7 | 0;
    if ($2_1 >>> 0 < $1_1 >>> 0) {
     $10_1 = $10_1 + 1 | 0
    }
    $1_1 = $2_1;
    $2_1 = $10_1;
    $5_1 = $3_1;
    $3_1 = (($8 | 0) == ($10_1 | 0) & $1_1 >>> 0 < $7 >>> 0 | $10_1 >>> 0 < $8 >>> 0) + $3_1 | 0;
    $10_1 = $11_1 << 16 | $4_1;
    $33 = $3_1 | $33;
    $28 = $28 | ($3_1 >>> 0 < $5_1 >>> 0 ? $10_1 + 1 | 0 : $10_1);
   }
   HEAP32[$0 >> 2] = $1_1;
   HEAP32[$0 + 4 >> 2] = $2_1;
   HEAP32[$0 + 8 >> 2] = $33;
   HEAP32[$0 + 12 >> 2] = $28;
   global$0 = $13_1 + 192 | 0;
   return;
  }
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  $1_1 = ($3_1 | $5_1) != 0 | ($4_1 | $6) != 0;
  HEAP32[$0 + 8 >> 2] = $1_1 ? $33 : 0;
  HEAP32[$0 + 12 >> 2] = $1_1 ? $28 : 2147450880;
  global$0 = $13_1 + 192 | 0;
 }
 
 function $1628($0, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6 = 0, $7 = 0, $8 = 0, $9_1 = 0;
  $6 = global$0 - 16 | 0;
  global$0 = $6;
  wasm2js_scratch_store_f64(+$1_1);
  $8 = wasm2js_scratch_load_i32(1) | 0;
  $7 = wasm2js_scratch_load_i32(0) | 0;
  $4_1 = $8 & 2147483647;
  $2_1 = $4_1;
  $5_1 = $2_1 + -1048576 | 0;
  $3_1 = $7;
  $4_1 = $3_1;
  if ($3_1 >>> 0 < 0) {
   $5_1 = $5_1 + 1 | 0
  }
  label$1 : {
   if (($5_1 | 0) == 2145386495 & $4_1 >>> 0 <= 4294967295 | $5_1 >>> 0 < 2145386495) {
    $4_1 = $3_1 << 28;
    $5_1 = ($2_1 & 15) << 28 | $3_1 >>> 4;
    $2_1 = ($2_1 >>> 4 | 0) + 1006632960 | 0;
    $3_1 = $5_1;
    $2_1 = $3_1 >>> 0 < 0 ? $2_1 + 1 | 0 : $2_1;
    break label$1;
   }
   if (($2_1 | 0) == 2146435072 & $3_1 >>> 0 >= 0 | $2_1 >>> 0 > 2146435072) {
    $4_1 = $7 << 28;
    $5_1 = $7;
    $2_1 = $8;
    $7 = $2_1 >>> 4 | 0;
    $3_1 = ($2_1 & 15) << 28 | $5_1 >>> 4;
    $2_1 = $7 | 2147418112;
    break label$1;
   }
   if (!($2_1 | $3_1)) {
    $4_1 = 0;
    $3_1 = 0;
    $2_1 = 0;
    break label$1;
   }
   $4_1 = $2_1;
   $2_1 = ($2_1 | 0) == 1 & $3_1 >>> 0 < 0 | $2_1 >>> 0 < 1 ? Math_clz32($7) + 32 | 0 : Math_clz32($2_1);
   $1624($6, $3_1, $4_1, 0, 0, $2_1 + 49 | 0);
   $9_1 = HEAP32[$6 >> 2];
   $4_1 = HEAP32[$6 + 4 >> 2];
   $3_1 = HEAP32[$6 + 8 >> 2];
   $2_1 = HEAP32[$6 + 12 >> 2] ^ 65536 | 15372 - $2_1 << 16;
  }
  HEAP32[$0 >> 2] = $9_1;
  HEAP32[$0 + 4 >> 2] = $4_1;
  HEAP32[$0 + 8 >> 2] = $3_1;
  HEAP32[$0 + 12 >> 2] = $8 & -2147483648 | $2_1;
  global$0 = $6 + 16 | 0;
 }
 
 function $1629($0, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6 = 0, $7 = 0, $8 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $5_1 = (wasm2js_scratch_store_f32($1_1), wasm2js_scratch_load_i32(0));
  $2_1 = $5_1 & 2147483647;
  label$1 : {
   if ($2_1 + -8388608 >>> 0 <= 2130706431) {
    $3_1 = $2_1;
    $2_1 = $2_1 >>> 7 | 0;
    $3_1 = $3_1 << 25;
    $2_1 = $2_1 + 1065353216 | 0;
    $6 = $3_1;
    $2_1 = $3_1 >>> 0 < 0 ? $2_1 + 1 | 0 : $2_1;
    break label$1;
   }
   if ($2_1 >>> 0 >= 2139095040) {
    $2_1 = $5_1;
    $3_1 = $2_1 >>> 7 | 0;
    $6 = $2_1 << 25;
    $2_1 = $3_1 | 2147418112;
    break label$1;
   }
   if (!$2_1) {
    $2_1 = 0;
    break label$1;
   }
   $3_1 = $2_1;
   $2_1 = Math_clz32($2_1);
   $1624($4_1, $3_1, 0, 0, 0, $2_1 + 81 | 0);
   $7 = HEAP32[$4_1 >> 2];
   $8 = HEAP32[$4_1 + 4 >> 2];
   $6 = HEAP32[$4_1 + 8 >> 2];
   $2_1 = HEAP32[$4_1 + 12 >> 2] ^ 65536 | 16265 - $2_1 << 16;
  }
  HEAP32[$0 >> 2] = $7;
  HEAP32[$0 + 4 >> 2] = $8;
  HEAP32[$0 + 8 >> 2] = $6;
  HEAP32[$0 + 12 >> 2] = $5_1 & -2147483648 | $2_1;
  global$0 = $4_1 + 16 | 0;
 }
 
 function $1630($0, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6 = 0, $7 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $6 = $0;
  $7 = $0;
  label$1 : {
   if (!$1_1) {
    $1_1 = 0;
    $5_1 = 0;
    break label$1;
   }
   $2_1 = $1_1 >> 31;
   $4_1 = $2_1 + $1_1 ^ $2_1;
   $2_1 = Math_clz32($4_1);
   $1624($3_1, $4_1, 0, 0, 0, $2_1 + 81 | 0);
   $2_1 = (HEAP32[$3_1 + 12 >> 2] ^ 65536) + (16414 - $2_1 << 16) | 0;
   $4_1 = 0 + HEAP32[$3_1 + 8 >> 2] | 0;
   if ($4_1 >>> 0 < $5_1 >>> 0) {
    $2_1 = $2_1 + 1 | 0
   }
   $1_1 = $1_1 & -2147483648 | $2_1;
   $2_1 = HEAP32[$3_1 + 4 >> 2];
   $5_1 = HEAP32[$3_1 >> 2];
  }
  HEAP32[$7 >> 2] = $5_1;
  HEAP32[$6 + 4 >> 2] = $2_1;
  HEAP32[$0 + 8 >> 2] = $4_1;
  HEAP32[$0 + 12 >> 2] = $1_1;
  global$0 = $3_1 + 16 | 0;
 }
 
 function $1631($0, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6 = 0, $7 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $6 = $0;
  $7 = $0;
  label$1 : {
   if (!$1_1) {
    $1_1 = 0;
    $3_1 = 0;
    break label$1;
   }
   $3_1 = $1_1;
   $1_1 = Math_clz32($1_1) ^ 31;
   $1624($2_1, $3_1, 0, 0, 0, 112 - $1_1 | 0);
   $1_1 = (HEAP32[$2_1 + 12 >> 2] ^ 65536) + ($1_1 + 16383 << 16) | 0;
   $4_1 = 0 + HEAP32[$2_1 + 8 >> 2] | 0;
   if ($4_1 >>> 0 < $5_1 >>> 0) {
    $1_1 = $1_1 + 1 | 0
   }
   $5_1 = HEAP32[$2_1 + 4 >> 2];
   $3_1 = HEAP32[$2_1 >> 2];
  }
  HEAP32[$7 >> 2] = $3_1;
  HEAP32[$6 + 4 >> 2] = $5_1;
  HEAP32[$0 + 8 >> 2] = $4_1;
  HEAP32[$0 + 12 >> 2] = $1_1;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1632($0, $1_1, $2_1, $3_1, $4_1, $5_1) {
  var $6 = 0, $7 = 0, $8 = 0, $9_1 = 0;
  label$1 : {
   if ($5_1 & 64) {
    $2_1 = $5_1 + -64 | 0;
    $1_1 = $2_1 & 31;
    if (32 <= ($2_1 & 63) >>> 0) {
     $2_1 = 0;
     $1_1 = $4_1 >>> $1_1 | 0;
    } else {
     $2_1 = $4_1 >>> $1_1 | 0;
     $1_1 = ((1 << $1_1) - 1 & $4_1) << 32 - $1_1 | $3_1 >>> $1_1;
    }
    $3_1 = 0;
    $4_1 = 0;
    break label$1;
   }
   if (!$5_1) {
    break label$1
   }
   $7 = $4_1;
   $8 = $3_1;
   $9_1 = 64 - $5_1 | 0;
   $6 = $9_1 & 31;
   if (32 <= ($9_1 & 63) >>> 0) {
    $7 = $8 << $6;
    $9_1 = 0;
   } else {
    $7 = (1 << $6) - 1 & $8 >>> 32 - $6 | $7 << $6;
    $9_1 = $8 << $6;
   }
   $8 = $1_1;
   $6 = $5_1;
   $1_1 = $6 & 31;
   if (32 <= ($6 & 63) >>> 0) {
    $6 = 0;
    $1_1 = $2_1 >>> $1_1 | 0;
   } else {
    $6 = $2_1 >>> $1_1 | 0;
    $1_1 = ((1 << $1_1) - 1 & $2_1) << 32 - $1_1 | $8 >>> $1_1;
   }
   $1_1 = $9_1 | $1_1;
   $2_1 = $6 | $7;
   $6 = $3_1;
   $3_1 = $5_1 & 31;
   if (32 <= ($5_1 & 63) >>> 0) {
    $7 = 0;
    $3_1 = $4_1 >>> $3_1 | 0;
   } else {
    $7 = $4_1 >>> $3_1 | 0;
    $3_1 = ((1 << $3_1) - 1 & $4_1) << 32 - $3_1 | $6 >>> $3_1;
   }
   $4_1 = $7;
  }
  HEAP32[$0 >> 2] = $1_1;
  HEAP32[$0 + 4 >> 2] = $2_1;
  HEAP32[$0 + 8 >> 2] = $3_1;
  HEAP32[$0 + 12 >> 2] = $4_1;
 }
 
 function $1633($0, $1_1, $2_1, $3_1, $4_1, $5_1, $6, $7, $8) {
  var $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14 = 0, $15 = 0, $16_1 = 0, $17 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0, $26_1 = 0, $27_1 = 0, $28 = 0, $29_1 = 0, $30_1 = 0, $31_1 = 0, $32 = 0, $33 = 0, $34 = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, $38_1 = 0, $39 = 0, $40_1 = 0, $41 = 0, $42_1 = 0, $43_1 = 0, $44 = 0, $45_1 = 0, $46 = 0, $47_1 = 0;
  $13_1 = global$0 - 96 | 0;
  global$0 = $13_1;
  $15 = $2_1;
  $9_1 = $6;
  $20_1 = ($9_1 & 131071) << 15 | $5_1 >>> 17;
  $10_1 = $8 & 65535;
  $22_1 = $10_1;
  $17 = $7;
  $9_1 = $7;
  $25_1 = $9_1 << 15 | $6 >>> 17;
  $14 = ($4_1 ^ $8) & -2147483648;
  $9_1 = $4_1 & 65535;
  $12_1 = $9_1;
  $18_1 = $3_1;
  $28 = $9_1;
  $9_1 = $10_1;
  $26_1 = ($9_1 & 131071) << 15 | $7 >>> 17;
  $29_1 = $8 >>> 16 & 32767;
  $37_1 = $4_1 >>> 16 & 32767;
  label$1 : {
   label$2 : {
    if ($37_1 + -1 >>> 0 <= 32765) {
     $21_1 = 0;
     if ($29_1 + -1 >>> 0 < 32766) {
      break label$2
     }
    }
    $11_1 = $4_1 & 2147483647;
    $10_1 = $11_1;
    $9_1 = $3_1;
    if (!(!$3_1 & ($10_1 | 0) == 2147418112 ? !($1_1 | $2_1) : ($10_1 | 0) == 2147418112 & $3_1 >>> 0 < 0 | $10_1 >>> 0 < 2147418112)) {
     $23_1 = $3_1;
     $14 = $4_1 | 32768;
     break label$1;
    }
    $4_1 = $8 & 2147483647;
    $16_1 = $4_1;
    $3_1 = $7;
    if (!(!$3_1 & ($4_1 | 0) == 2147418112 ? !($5_1 | $6) : ($4_1 | 0) == 2147418112 & $3_1 >>> 0 < 0 | $4_1 >>> 0 < 2147418112)) {
     $23_1 = $7;
     $14 = $8 | 32768;
     $1_1 = $5_1;
     $2_1 = $6;
     break label$1;
    }
    if (!($1_1 | $9_1 | ($10_1 ^ 2147418112 | $2_1))) {
     if (!($3_1 | $5_1 | ($6 | $16_1))) {
      $14 = 2147450880;
      $1_1 = 0;
      $2_1 = 0;
      break label$1;
     }
     $14 = $14 | 2147418112;
     $1_1 = 0;
     $2_1 = 0;
     break label$1;
    }
    if (!($3_1 | $5_1 | ($16_1 ^ 2147418112 | $6))) {
     $3_1 = $1_1 | $9_1;
     $4_1 = $2_1 | $10_1;
     $1_1 = 0;
     $2_1 = 0;
     if (!($3_1 | $4_1)) {
      $14 = 2147450880;
      break label$1;
     }
     $14 = $14 | 2147418112;
     break label$1;
    }
    if (!($1_1 | $9_1 | ($2_1 | $10_1))) {
     $1_1 = 0;
     $2_1 = 0;
     break label$1;
    }
    if (!($3_1 | $5_1 | ($6 | $16_1))) {
     $1_1 = 0;
     $2_1 = 0;
     break label$1;
    }
    $4_1 = 0;
    if (($10_1 | 0) == 65535 & $9_1 >>> 0 <= 4294967295 | $10_1 >>> 0 < 65535) {
     $8 = $1_1;
     $10_1 = $2_1;
     $4_1 = !($12_1 | $18_1);
     $7 = $4_1 << 6;
     $9_1 = Math_clz32($4_1 ? $1_1 : $18_1) + 32 | 0;
     $1_1 = Math_clz32($4_1 ? $2_1 : $12_1);
     $1_1 = $7 + (($1_1 | 0) == 32 ? $9_1 : $1_1) | 0;
     $1624($13_1 + 80 | 0, $8, $10_1, $18_1, $12_1, $1_1 + -15 | 0);
     $18_1 = HEAP32[$13_1 + 88 >> 2];
     $15 = HEAP32[$13_1 + 84 >> 2];
     $28 = HEAP32[$13_1 + 92 >> 2];
     $4_1 = 16 - $1_1 | 0;
     $1_1 = HEAP32[$13_1 + 80 >> 2];
    }
    $21_1 = $4_1;
    if (($16_1 | 0) == 65535 & $3_1 >>> 0 > 4294967295 | $16_1 >>> 0 > 65535) {
     break label$2
    }
    $2_1 = !($17 | $22_1);
    $3_1 = $2_1 << 6;
    $7 = Math_clz32($2_1 ? $5_1 : $17) + 32 | 0;
    $2_1 = Math_clz32($2_1 ? $6 : $22_1);
    $2_1 = $3_1 + (($2_1 | 0) == 32 ? $7 : $2_1) | 0;
    $8 = $2_1;
    $1624($13_1 - -64 | 0, $5_1, $6, $17, $22_1, $2_1 + -15 | 0);
    $5_1 = HEAP32[$13_1 + 76 >> 2];
    $2_1 = $5_1;
    $7 = HEAP32[$13_1 + 72 >> 2];
    $3_1 = $7;
    $3_1 = $3_1 << 15;
    $9_1 = HEAP32[$13_1 + 68 >> 2];
    $25_1 = $9_1 >>> 17 | $3_1;
    $3_1 = $9_1;
    $5_1 = HEAP32[$13_1 + 64 >> 2];
    $20_1 = ($3_1 & 131071) << 15 | $5_1 >>> 17;
    $26_1 = ($2_1 & 131071) << 15 | $7 >>> 17;
    $21_1 = ($4_1 - $8 | 0) + 16 | 0;
   }
   $3_1 = $20_1;
   $17 = 0;
   $8 = __wasm_i64_mul($3_1, 0, $1_1, $17);
   $2_1 = i64toi32_i32$HIGH_BITS;
   $27_1 = $2_1;
   $24_1 = $5_1 << 15 & -32768;
   $5_1 = __wasm_i64_mul($24_1, 0, $15, 0);
   $4_1 = $5_1 + $8 | 0;
   $11_1 = i64toi32_i32$HIGH_BITS + $2_1 | 0;
   $11_1 = $4_1 >>> 0 < $5_1 >>> 0 ? $11_1 + 1 | 0 : $11_1;
   $2_1 = $4_1;
   $5_1 = 0;
   $6 = __wasm_i64_mul($24_1, $30_1, $1_1, $17);
   $4_1 = $5_1 + $6 | 0;
   $10_1 = i64toi32_i32$HIGH_BITS + $2_1 | 0;
   $10_1 = $4_1 >>> 0 < $6 >>> 0 ? $10_1 + 1 | 0 : $10_1;
   $20_1 = $4_1;
   $6 = $10_1;
   $47_1 = ($2_1 | 0) == ($10_1 | 0) & $4_1 >>> 0 < $5_1 >>> 0 | $10_1 >>> 0 < $2_1 >>> 0;
   $40_1 = __wasm_i64_mul($3_1, $38_1, $15, $39);
   $33 = i64toi32_i32$HIGH_BITS;
   $16_1 = $18_1;
   $5_1 = __wasm_i64_mul($24_1, $30_1, $16_1, 0);
   $4_1 = $5_1 + $40_1 | 0;
   $12_1 = i64toi32_i32$HIGH_BITS + $33 | 0;
   $12_1 = $4_1 >>> 0 < $5_1 >>> 0 ? $12_1 + 1 | 0 : $12_1;
   $41 = $4_1;
   $7 = __wasm_i64_mul($25_1, 0, $1_1, $17);
   $4_1 = $4_1 + $7 | 0;
   $5_1 = i64toi32_i32$HIGH_BITS + $12_1 | 0;
   $34 = $4_1;
   $5_1 = $4_1 >>> 0 < $7 >>> 0 ? $5_1 + 1 | 0 : $5_1;
   $22_1 = $5_1;
   $7 = $5_1;
   $5_1 = ($11_1 | 0) == ($27_1 | 0) & $2_1 >>> 0 < $8 >>> 0 | $11_1 >>> 0 < $27_1 >>> 0;
   $4_1 = $11_1;
   $2_1 = $4_1 + $34 | 0;
   $10_1 = $5_1 + $7 | 0;
   $27_1 = $2_1;
   $10_1 = $2_1 >>> 0 < $4_1 >>> 0 ? $10_1 + 1 | 0 : $10_1;
   $4_1 = $10_1;
   $7 = $2_1;
   $43_1 = __wasm_i64_mul($3_1, $38_1, $16_1, $42_1);
   $35_1 = i64toi32_i32$HIGH_BITS;
   $2_1 = $24_1;
   $31_1 = $28 | 65536;
   $24_1 = $19_1;
   $5_1 = __wasm_i64_mul($2_1, $30_1, $31_1, $19_1);
   $2_1 = $5_1 + $43_1 | 0;
   $10_1 = i64toi32_i32$HIGH_BITS + $35_1 | 0;
   $10_1 = $2_1 >>> 0 < $5_1 >>> 0 ? $10_1 + 1 | 0 : $10_1;
   $44 = $2_1;
   $9_1 = __wasm_i64_mul($15, $39, $25_1, $45_1);
   $2_1 = $2_1 + $9_1 | 0;
   $19_1 = $10_1;
   $5_1 = $10_1 + i64toi32_i32$HIGH_BITS | 0;
   $5_1 = $2_1 >>> 0 < $9_1 >>> 0 ? $5_1 + 1 | 0 : $5_1;
   $36_1 = $2_1;
   $32 = $26_1 & 2147483647 | -2147483648;
   $2_1 = __wasm_i64_mul($32, 0, $1_1, $17);
   $1_1 = $36_1 + $2_1 | 0;
   $17 = $5_1;
   $9_1 = $5_1 + i64toi32_i32$HIGH_BITS | 0;
   $30_1 = $1_1;
   $2_1 = $1_1 >>> 0 < $2_1 >>> 0 ? $9_1 + 1 | 0 : $9_1;
   $10_1 = $4_1 + $1_1 | 0;
   $5_1 = 0;
   $1_1 = $5_1 + $7 | 0;
   if ($1_1 >>> 0 < $5_1 >>> 0) {
    $10_1 = $10_1 + 1 | 0
   }
   $28 = $1_1;
   $26_1 = $10_1;
   $5_1 = $10_1;
   $7 = $1_1 + $47_1 | 0;
   if ($7 >>> 0 < $1_1 >>> 0) {
    $5_1 = $5_1 + 1 | 0
   }
   $8 = $5_1;
   $18_1 = ($21_1 + ($29_1 + $37_1 | 0) | 0) + -16383 | 0;
   $5_1 = __wasm_i64_mul($16_1, $42_1, $25_1, $45_1);
   $1_1 = i64toi32_i32$HIGH_BITS;
   $11_1 = 0;
   $9_1 = __wasm_i64_mul($3_1, $38_1, $31_1, $24_1);
   $3_1 = $9_1 + $5_1 | 0;
   $10_1 = i64toi32_i32$HIGH_BITS + $1_1 | 0;
   $10_1 = $3_1 >>> 0 < $9_1 >>> 0 ? $10_1 + 1 | 0 : $10_1;
   $21_1 = $3_1;
   $9_1 = $3_1;
   $3_1 = $10_1;
   $10_1 = ($1_1 | 0) == ($3_1 | 0) & $9_1 >>> 0 < $5_1 >>> 0 | $3_1 >>> 0 < $1_1 >>> 0;
   $5_1 = __wasm_i64_mul($32, $46, $15, $39);
   $1_1 = $5_1 + $9_1 | 0;
   $9_1 = i64toi32_i32$HIGH_BITS + $3_1 | 0;
   $9_1 = $1_1 >>> 0 < $5_1 >>> 0 ? $9_1 + 1 | 0 : $9_1;
   $15 = $1_1;
   $5_1 = $1_1;
   $1_1 = $9_1;
   $3_1 = ($3_1 | 0) == ($1_1 | 0) & $5_1 >>> 0 < $21_1 >>> 0 | $1_1 >>> 0 < $3_1 >>> 0;
   $5_1 = $10_1 + $3_1 | 0;
   if ($5_1 >>> 0 < $3_1 >>> 0) {
    $11_1 = 1
   }
   $9_1 = $5_1;
   $3_1 = $1_1;
   $5_1 = $11_1;
   $29_1 = $9_1;
   $10_1 = 0;
   $9_1 = ($12_1 | 0) == ($22_1 | 0) & $34 >>> 0 < $41 >>> 0 | $22_1 >>> 0 < $12_1 >>> 0;
   $12_1 = $9_1 + (($12_1 | 0) == ($33 | 0) & $41 >>> 0 < $40_1 >>> 0 | $12_1 >>> 0 < $33 >>> 0) | 0;
   if ($12_1 >>> 0 < $9_1 >>> 0) {
    $10_1 = 1
   }
   $11_1 = $12_1;
   $12_1 = $12_1 + $15 | 0;
   $9_1 = $3_1 + $10_1 | 0;
   $21_1 = $12_1;
   $10_1 = $12_1;
   $9_1 = $10_1 >>> 0 < $11_1 >>> 0 ? $9_1 + 1 | 0 : $9_1;
   $3_1 = $9_1;
   $1_1 = ($1_1 | 0) == ($3_1 | 0) & $10_1 >>> 0 < $15 >>> 0 | $3_1 >>> 0 < $1_1 >>> 0;
   $9_1 = $29_1 + $1_1 | 0;
   if ($9_1 >>> 0 < $1_1 >>> 0) {
    $5_1 = $5_1 + 1 | 0
   }
   $1_1 = $9_1;
   $9_1 = __wasm_i64_mul($32, $46, $31_1, $24_1);
   $1_1 = $1_1 + $9_1 | 0;
   $10_1 = i64toi32_i32$HIGH_BITS + $5_1 | 0;
   $10_1 = $1_1 >>> 0 < $9_1 >>> 0 ? $10_1 + 1 | 0 : $10_1;
   $11_1 = $1_1;
   $12_1 = __wasm_i64_mul($32, $46, $16_1, $42_1);
   $5_1 = i64toi32_i32$HIGH_BITS;
   $15 = __wasm_i64_mul($25_1, $45_1, $31_1, $24_1);
   $1_1 = $15 + $12_1 | 0;
   $9_1 = i64toi32_i32$HIGH_BITS + $5_1 | 0;
   $9_1 = $1_1 >>> 0 < $15 >>> 0 ? $9_1 + 1 | 0 : $9_1;
   $15 = $1_1;
   $16_1 = $1_1;
   $1_1 = $9_1;
   $9_1 = ($5_1 | 0) == ($1_1 | 0) & $16_1 >>> 0 < $12_1 >>> 0 | $1_1 >>> 0 < $5_1 >>> 0;
   $5_1 = $1_1 + $11_1 | 0;
   $11_1 = $10_1 + $9_1 | 0;
   $9_1 = $5_1 >>> 0 < $1_1 >>> 0 ? $11_1 + 1 | 0 : $11_1;
   $16_1 = $5_1;
   $10_1 = $3_1 + $15 | 0;
   $11_1 = 0;
   $1_1 = $11_1 + $21_1 | 0;
   if ($1_1 >>> 0 < $11_1 >>> 0) {
    $10_1 = $10_1 + 1 | 0
   }
   $12_1 = $1_1;
   $5_1 = $1_1;
   $1_1 = $10_1;
   $3_1 = ($3_1 | 0) == ($1_1 | 0) & $5_1 >>> 0 < $21_1 >>> 0 | $1_1 >>> 0 < $3_1 >>> 0;
   $5_1 = $16_1 + $3_1 | 0;
   if ($5_1 >>> 0 < $3_1 >>> 0) {
    $9_1 = $9_1 + 1 | 0
   }
   $15 = $5_1;
   $11_1 = $1_1;
   $10_1 = 0;
   $5_1 = ($19_1 | 0) == ($17 | 0) & $36_1 >>> 0 < $44 >>> 0 | $17 >>> 0 < $19_1 >>> 0;
   $19_1 = $5_1 + (($19_1 | 0) == ($35_1 | 0) & $44 >>> 0 < $43_1 >>> 0 | $19_1 >>> 0 < $35_1 >>> 0) | 0;
   if ($19_1 >>> 0 < $5_1 >>> 0) {
    $10_1 = 1
   }
   $5_1 = $19_1 + (($2_1 | 0) == ($17 | 0) & $30_1 >>> 0 < $36_1 >>> 0 | $2_1 >>> 0 < $17 >>> 0) | 0;
   $3_1 = $2_1;
   $2_1 = $3_1 + $12_1 | 0;
   $11_1 = $5_1 + $11_1 | 0;
   $11_1 = $2_1 >>> 0 < $3_1 >>> 0 ? $11_1 + 1 | 0 : $11_1;
   $19_1 = $2_1;
   $3_1 = $2_1;
   $2_1 = $11_1;
   $1_1 = ($1_1 | 0) == ($2_1 | 0) & $3_1 >>> 0 < $12_1 >>> 0 | $2_1 >>> 0 < $1_1 >>> 0;
   $3_1 = $1_1 + $15 | 0;
   if ($3_1 >>> 0 < $1_1 >>> 0) {
    $9_1 = $9_1 + 1 | 0
   }
   $1_1 = $2_1;
   $10_1 = $9_1;
   $9_1 = $3_1;
   $5_1 = 0;
   $3_1 = ($4_1 | 0) == ($26_1 | 0) & $28 >>> 0 < $27_1 >>> 0 | $26_1 >>> 0 < $4_1 >>> 0;
   $4_1 = $3_1 + (($4_1 | 0) == ($22_1 | 0) & $27_1 >>> 0 < $34 >>> 0 | $4_1 >>> 0 < $22_1 >>> 0) | 0;
   if ($4_1 >>> 0 < $3_1 >>> 0) {
    $5_1 = 1
   }
   $3_1 = $4_1 + $19_1 | 0;
   $11_1 = $1_1 + $5_1 | 0;
   $11_1 = $3_1 >>> 0 < $4_1 >>> 0 ? $11_1 + 1 | 0 : $11_1;
   $1_1 = $3_1;
   $4_1 = $11_1;
   $1_1 = ($2_1 | 0) == ($4_1 | 0) & $1_1 >>> 0 < $19_1 >>> 0 | $4_1 >>> 0 < $2_1 >>> 0;
   $2_1 = $9_1 + $1_1 | 0;
   if ($2_1 >>> 0 < $1_1 >>> 0) {
    $10_1 = $10_1 + 1 | 0
   }
   $1_1 = $2_1;
   $2_1 = $10_1;
   label$13 : {
    if ($2_1 & 65536) {
     $18_1 = $18_1 + 1 | 0;
     break label$13;
    }
    $12_1 = $6 >>> 31 | 0;
    $10_1 = $2_1 << 1 | $1_1 >>> 31;
    $1_1 = $1_1 << 1 | $4_1 >>> 31;
    $2_1 = $10_1;
    $10_1 = $4_1 << 1 | $3_1 >>> 31;
    $3_1 = $3_1 << 1 | $8 >>> 31;
    $4_1 = $10_1;
    $9_1 = $20_1;
    $10_1 = $6 << 1 | $9_1 >>> 31;
    $20_1 = $9_1 << 1;
    $6 = $10_1;
    $9_1 = $8 << 1 | $7 >>> 31;
    $7 = $7 << 1 | $12_1;
    $8 = $9_1;
   }
   if (($18_1 | 0) >= 32767) {
    $14 = $14 | 2147418112;
    $1_1 = 0;
    $2_1 = 0;
    break label$1;
   }
   label$16 : {
    if (($18_1 | 0) <= 0) {
     $5_1 = 1 - $18_1 | 0;
     if ($5_1 >>> 0 <= 127) {
      $9_1 = $18_1 + 127 | 0;
      $1624($13_1 + 48 | 0, $20_1, $6, $7, $8, $9_1);
      $1624($13_1 + 32 | 0, $3_1, $4_1, $1_1, $2_1, $9_1);
      $1632($13_1 + 16 | 0, $20_1, $6, $7, $8, $5_1);
      $1632($13_1, $3_1, $4_1, $1_1, $2_1, $5_1);
      $20_1 = (HEAP32[$13_1 + 48 >> 2] | HEAP32[$13_1 + 56 >> 2]) != 0 | (HEAP32[$13_1 + 52 >> 2] | HEAP32[$13_1 + 60 >> 2]) != 0 | (HEAP32[$13_1 + 32 >> 2] | HEAP32[$13_1 + 16 >> 2]);
      $6 = HEAP32[$13_1 + 36 >> 2] | HEAP32[$13_1 + 20 >> 2];
      $7 = HEAP32[$13_1 + 40 >> 2] | HEAP32[$13_1 + 24 >> 2];
      $8 = HEAP32[$13_1 + 44 >> 2] | HEAP32[$13_1 + 28 >> 2];
      $3_1 = HEAP32[$13_1 >> 2];
      $4_1 = HEAP32[$13_1 + 4 >> 2];
      $2_1 = HEAP32[$13_1 + 12 >> 2];
      $1_1 = HEAP32[$13_1 + 8 >> 2];
      break label$16;
     }
     $1_1 = 0;
     $2_1 = 0;
     break label$1;
    }
    $2_1 = $2_1 & 65535 | $18_1 << 16;
   }
   $23_1 = $1_1 | $23_1;
   $14 = $2_1 | $14;
   if (!(!$7 & ($8 | 0) == -2147483648 ? !($6 | $20_1) : ($8 | 0) > -1 ? 1 : ($8 | 0) >= -1 ? ($7 >>> 0 <= 4294967295 ? 0 : 1) : 0)) {
    $11_1 = $14;
    $12_1 = $4_1;
    $1_1 = $3_1 + 1 | 0;
    if ($1_1 >>> 0 < 1) {
     $12_1 = $12_1 + 1 | 0
    }
    $2_1 = $12_1;
    $3_1 = ($4_1 | 0) == ($2_1 | 0) & $1_1 >>> 0 < $3_1 >>> 0 | $2_1 >>> 0 < $4_1 >>> 0;
    $4_1 = $3_1 + $23_1 | 0;
    if ($4_1 >>> 0 < $3_1 >>> 0) {
     $11_1 = $11_1 + 1 | 0
    }
    $23_1 = $4_1;
    $14 = $11_1;
    break label$1;
   }
   if ($7 | $20_1 | ($8 ^ -2147483648 | $6)) {
    $1_1 = $3_1;
    $2_1 = $4_1;
    break label$1;
   }
   $12_1 = $14;
   $10_1 = $4_1;
   $1_1 = $3_1 & 1;
   $2_1 = $1_1 + $3_1 | 0;
   if ($2_1 >>> 0 < $1_1 >>> 0) {
    $10_1 = $10_1 + 1 | 0
   }
   $1_1 = $2_1;
   $2_1 = $10_1;
   $3_1 = ($4_1 | 0) == ($2_1 | 0) & $1_1 >>> 0 < $3_1 >>> 0 | $2_1 >>> 0 < $4_1 >>> 0;
   $4_1 = $3_1 + $23_1 | 0;
   if ($4_1 >>> 0 < $3_1 >>> 0) {
    $12_1 = $12_1 + 1 | 0
   }
   $23_1 = $4_1;
   $14 = $12_1;
  }
  HEAP32[$0 >> 2] = $1_1;
  HEAP32[$0 + 4 >> 2] = $2_1;
  HEAP32[$0 + 8 >> 2] = $23_1;
  HEAP32[$0 + 12 >> 2] = $14;
  global$0 = $13_1 + 96 | 0;
 }
 
 function $1634($0, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = 0, $6 = 0, $7 = 0, $8 = 0, $9_1 = 0, $10_1 = 0;
  $5_1 = __wasm_i64_mul($1_1, $2_1, 0, 0);
  $6 = i64toi32_i32$HIGH_BITS;
  $7 = __wasm_i64_mul(0, 0, $3_1, $4_1);
  $5_1 = $5_1 + $7 | 0;
  $6 = i64toi32_i32$HIGH_BITS + $6 | 0;
  $9_1 = __wasm_i64_mul($4_1, 0, $2_1, 0);
  $8 = $5_1 + $9_1 | 0;
  $5_1 = i64toi32_i32$HIGH_BITS + ($5_1 >>> 0 < $7 >>> 0 ? $6 + 1 | 0 : $6) | 0;
  $6 = __wasm_i64_mul($3_1, 0, $1_1, 0);
  $10_1 = i64toi32_i32$HIGH_BITS;
  $7 = __wasm_i64_mul($2_1, 0, $3_1, 0);
  $3_1 = $10_1 + $7 | 0;
  $2_1 = $8 >>> 0 < $9_1 >>> 0 ? $5_1 + 1 | 0 : $5_1;
  $5_1 = i64toi32_i32$HIGH_BITS;
  $5_1 = $3_1 >>> 0 < $7 >>> 0 ? $5_1 + 1 | 0 : $5_1;
  $8 = $5_1 + $8 | 0;
  if ($8 >>> 0 < $5_1 >>> 0) {
   $2_1 = $2_1 + 1 | 0
  }
  $1_1 = __wasm_i64_mul($1_1, 0, $4_1, 0) + $3_1 | 0;
  $4_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $1_1 >>> 0 < $3_1 >>> 0 ? $4_1 + 1 | 0 : $4_1;
  $4_1 = $8 + $3_1 | 0;
  if ($4_1 >>> 0 < $3_1 >>> 0) {
   $2_1 = $2_1 + 1 | 0
  }
  HEAP32[$0 + 8 >> 2] = $4_1;
  HEAP32[$0 + 12 >> 2] = $2_1;
  HEAP32[$0 >> 2] = $6;
  HEAP32[$0 + 4 >> 2] = $1_1;
 }
 
 function $1635($0, $1_1, $2_1, $3_1, $4_1, $5_1, $6, $7, $8) {
  var $9_1 = 0;
  $9_1 = global$0 - 16 | 0;
  global$0 = $9_1;
  $1623($9_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6, $7, $8 ^ -2147483648);
  $1_1 = HEAP32[$9_1 + 4 >> 2];
  HEAP32[$0 >> 2] = HEAP32[$9_1 >> 2];
  HEAP32[$0 + 4 >> 2] = $1_1;
  $1_1 = HEAP32[$9_1 + 12 >> 2];
  HEAP32[$0 + 8 >> 2] = HEAP32[$9_1 + 8 >> 2];
  HEAP32[$0 + 12 >> 2] = $1_1;
  global$0 = $9_1 + 16 | 0;
 }
 
 function $1636($0, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = 0, $6 = 0, $7 = 0, $8 = 0, $9_1 = 0, $10_1 = 0;
  $6 = global$0 - 32 | 0;
  global$0 = $6;
  $4_1 = $3_1 & 2147483647;
  $8 = $4_1;
  $4_1 = $4_1 + -1006698496 | 0;
  $7 = $2_1;
  $5_1 = $2_1;
  if ($2_1 >>> 0 < 0) {
   $4_1 = $4_1 + 1 | 0
  }
  $9_1 = $5_1;
  $5_1 = $4_1;
  $4_1 = $8 + -1140785152 | 0;
  $10_1 = $7;
  if ($7 >>> 0 < 0) {
   $4_1 = $4_1 + 1 | 0
  }
  label$1 : {
   if (($4_1 | 0) == ($5_1 | 0) & $9_1 >>> 0 < $10_1 >>> 0 | $5_1 >>> 0 < $4_1 >>> 0) {
    $4_1 = $3_1 << 4 | $2_1 >>> 28;
    $2_1 = $2_1 << 4 | $1_1 >>> 28;
    $1_1 = $1_1 & 268435455;
    $7 = $1_1;
    if (($1_1 | 0) == 134217728 & $0 >>> 0 >= 1 | $1_1 >>> 0 > 134217728) {
     $4_1 = $4_1 + 1073741824 | 0;
     $0 = $2_1 + 1 | 0;
     if ($0 >>> 0 < 1) {
      $4_1 = $4_1 + 1 | 0
     }
     $5_1 = $0;
     break label$1;
    }
    $5_1 = $2_1;
    $4_1 = $4_1 - (($2_1 >>> 0 < 0) + -1073741824 | 0) | 0;
    if ($0 | $7 ^ 134217728) {
     break label$1
    }
    $0 = $5_1 + ($5_1 & 1) | 0;
    if ($0 >>> 0 < $5_1 >>> 0) {
     $4_1 = $4_1 + 1 | 0
    }
    $5_1 = $0;
    break label$1;
   }
   if (!(!$7 & ($8 | 0) == 2147418112 ? !($0 | $1_1) : ($8 | 0) == 2147418112 & $7 >>> 0 < 0 | $8 >>> 0 < 2147418112)) {
    $4_1 = $3_1 << 4 | $2_1 >>> 28;
    $5_1 = $2_1 << 4 | $1_1 >>> 28;
    $4_1 = $4_1 & 524287 | 2146959360;
    break label$1;
   }
   $5_1 = 0;
   $4_1 = 2146435072;
   if (($8 | 0) == 1140785151 & $7 >>> 0 > 4294967295 | $8 >>> 0 > 1140785151) {
    break label$1
   }
   $4_1 = 0;
   $7 = $8 >>> 16 | 0;
   if ($7 >>> 0 < 15249) {
    break label$1
   }
   $4_1 = $3_1 & 65535 | 65536;
   $1624($6 + 16 | 0, $0, $1_1, $2_1, $4_1, $7 + -15233 | 0);
   $1632($6, $0, $1_1, $2_1, $4_1, 15361 - $7 | 0);
   $2_1 = HEAP32[$6 + 4 >> 2];
   $0 = HEAP32[$6 + 8 >> 2];
   $4_1 = HEAP32[$6 + 12 >> 2] << 4 | $0 >>> 28;
   $5_1 = $0 << 4 | $2_1 >>> 28;
   $0 = $2_1 & 268435455;
   $2_1 = $0;
   $1_1 = HEAP32[$6 >> 2] | ((HEAP32[$6 + 16 >> 2] | HEAP32[$6 + 24 >> 2]) != 0 | (HEAP32[$6 + 20 >> 2] | HEAP32[$6 + 28 >> 2]) != 0);
   if (($0 | 0) == 134217728 & $1_1 >>> 0 >= 1 | $0 >>> 0 > 134217728) {
    $0 = $5_1 + 1 | 0;
    if ($0 >>> 0 < 1) {
     $4_1 = $4_1 + 1 | 0
    }
    $5_1 = $0;
    break label$1;
   }
   if ($1_1 | $2_1 ^ 134217728) {
    break label$1
   }
   $0 = $5_1 + ($5_1 & 1) | 0;
   if ($0 >>> 0 < $5_1 >>> 0) {
    $4_1 = $4_1 + 1 | 0
   }
   $5_1 = $0;
  }
  global$0 = $6 + 32 | 0;
  wasm2js_scratch_store_i32(0, $5_1 | 0);
  wasm2js_scratch_store_i32(1, $3_1 & -2147483648 | $4_1);
  return +wasm2js_scratch_load_f64();
 }
 
 function $1637($0, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = 0, $6 = 0, $7 = 0, $8 = 0, $9_1 = 0, $10_1 = 0;
  $7 = global$0 - 32 | 0;
  global$0 = $7;
  $5_1 = $3_1 & 2147483647;
  $6 = $5_1;
  $4_1 = $5_1 + -1065418752 | 0;
  $5_1 = $2_1;
  $8 = $5_1;
  if ($5_1 >>> 0 < 0) {
   $4_1 = $4_1 + 1 | 0
  }
  $10_1 = $8;
  $9_1 = $6 + -1082064896 | 0;
  $8 = $5_1;
  if ($5_1 >>> 0 < 0) {
   $9_1 = $9_1 + 1 | 0
  }
  label$1 : {
   if (($4_1 | 0) == ($9_1 | 0) & $10_1 >>> 0 < $8 >>> 0 | $4_1 >>> 0 < $9_1 >>> 0) {
    $6 = ($3_1 & 33554431) << 7 | $2_1 >>> 25;
    $5_1 = 0;
    $9_1 = $5_1;
    $8 = $2_1 & 33554431;
    if (!(!$5_1 & ($8 | 0) == 16777216 ? !($0 | $1_1) : !$5_1 & $8 >>> 0 < 16777216 | $5_1 >>> 0 < 0)) {
     $4_1 = $6 + 1073741825 | 0;
     break label$1;
    }
    $4_1 = $6 + 1073741824 | 0;
    if ($8 ^ 16777216 | $0 | ($1_1 | $9_1)) {
     break label$1
    }
    $4_1 = ($4_1 & 1) + $4_1 | 0;
    break label$1;
   }
   if (!(!$5_1 & ($6 | 0) == 2147418112 ? !($0 | $1_1) : ($6 | 0) == 2147418112 & $5_1 >>> 0 < 0 | $6 >>> 0 < 2147418112)) {
    $4_1 = (($3_1 & 33554431) << 7 | $2_1 >>> 25) & 4194303 | 2143289344;
    break label$1;
   }
   $4_1 = 2139095040;
   if (($6 | 0) == 1082064895 & $5_1 >>> 0 > 4294967295 | $6 >>> 0 > 1082064895) {
    break label$1
   }
   $4_1 = 0;
   $6 = $6 >>> 16 | 0;
   if ($6 >>> 0 < 16145) {
    break label$1
   }
   $4_1 = $3_1 & 65535 | 65536;
   $1624($7 + 16 | 0, $0, $1_1, $2_1, $4_1, $6 + -16129 | 0);
   $1632($7, $0, $1_1, $5_1, $4_1, 16257 - $6 | 0);
   $1_1 = HEAP32[$7 + 8 >> 2];
   $4_1 = (HEAP32[$7 + 12 >> 2] & 33554431) << 7 | $1_1 >>> 25;
   $5_1 = HEAP32[$7 + 4 >> 2];
   $6 = $5_1;
   $0 = 0;
   $8 = $0;
   $9_1 = HEAP32[$7 >> 2] | ((HEAP32[$7 + 16 >> 2] | HEAP32[$7 + 24 >> 2]) != 0 | (HEAP32[$7 + 20 >> 2] | HEAP32[$7 + 28 >> 2]) != 0);
   $1_1 = $1_1 & 33554431;
   if (!(!$0 & ($1_1 | 0) == 16777216 ? !($5_1 | $9_1) : !$0 & $1_1 >>> 0 < 16777216 | $0 >>> 0 < 0)) {
    $4_1 = $4_1 + 1 | 0;
    break label$1;
   }
   if ($1_1 ^ 16777216 | $9_1 | ($6 | $8)) {
    break label$1
   }
   $4_1 = ($4_1 & 1) + $4_1 | 0;
  }
  global$0 = $7 + 32 | 0;
  return wasm2js_scratch_store_i32(0, $3_1 & -2147483648 | $4_1), wasm2js_scratch_load_f32();
 }
 
 function $1638($0) {
  var $1_1 = 0, $2_1 = 0.0, $3_1 = 0, $4_1 = 0.0, $5_1 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9_1 = 0.0, $10_1 = 0.0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      wasm2js_scratch_store_f64(+$0);
      $1_1 = wasm2js_scratch_load_i32(1) | 0;
      $3_1 = wasm2js_scratch_load_i32(0) | 0;
      if (($1_1 | 0) > 0 ? 1 : ($1_1 | 0) >= 0 ? ($3_1 >>> 0 < 0 ? 0 : 1) : 0) {
       $5_1 = $1_1;
       if ($1_1 >>> 0 > 1048575) {
        break label$4
       }
      }
      if (!($1_1 & 2147483647 | $3_1)) {
       return -1.0 / ($0 * $0)
      }
      if (($1_1 | 0) > -1 ? 1 : ($1_1 | 0) >= -1 ? ($3_1 >>> 0 <= 4294967295 ? 0 : 1) : 0) {
       break label$3
      }
      return ($0 - $0) / 0.0;
     }
     if ($5_1 >>> 0 > 2146435071) {
      break label$1
     }
     $1_1 = 1072693248;
     $6 = -1023;
     if (($5_1 | 0) != 1072693248) {
      $1_1 = $5_1;
      break label$2;
     }
     if ($3_1) {
      break label$2
     }
     return 0.0;
    }
    wasm2js_scratch_store_f64(+($0 * 18014398509481984.0));
    $1_1 = wasm2js_scratch_load_i32(1) | 0;
    $3_1 = wasm2js_scratch_load_i32(0) | 0;
    $6 = -1077;
   }
   $1_1 = $1_1 + 614242 | 0;
   $4_1 = +(($1_1 >>> 20 | 0) + $6 | 0);
   wasm2js_scratch_store_i32(0, $3_1 | 0);
   wasm2js_scratch_store_i32(1, ($1_1 & 1048575) + 1072079006 | 0);
   $0 = +wasm2js_scratch_load_f64() + -1.0;
   $2_1 = $0 / ($0 + 2.0);
   $7 = $4_1 * .6931471803691238;
   $8 = $0;
   $9_1 = $4_1 * 1.9082149292705877e-10;
   $10_1 = $2_1;
   $4_1 = $0 * ($0 * .5);
   $2_1 = $2_1 * $2_1;
   $0 = $2_1 * $2_1;
   $0 = $7 + ($8 + ($9_1 + $10_1 * ($4_1 + ($0 * ($0 * ($0 * .15313837699209373 + .22222198432149784) + .3999999999940942) + $2_1 * ($0 * ($0 * ($0 * .14798198605116586 + .1818357216161805) + .2857142874366239) + .6666666666666735))) - $4_1));
  }
  return $0;
 }
 
 function $1639($0) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6 = 0, $7 = 0, $8 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[$4_1 + 12 >> 2] = $0;
  label$1 : {
   if ($0 >>> 0 <= 211) {
    $0 = HEAP32[$1640(4144, 4336, $4_1 + 12 | 0) >> 2];
    break label$1;
   }
   if ($0 >>> 0 >= 4294967292) {
    $1643();
    abort();
   }
   $5_1 = ($0 >>> 0) / 210 | 0;
   $3_1 = Math_imul($5_1, 210);
   HEAP32[$4_1 + 8 >> 2] = $0 - $3_1;
   $6 = $1640(4336, 4528, $4_1 + 8 | 0) - 4336 >> 2;
   label$3 : {
    while (1) {
     $0 = HEAP32[($6 << 2) + 4336 >> 2] + $3_1 | 0;
     $3_1 = 5;
     $1_1 = $7;
     label$5 : {
      label$6 : {
       while (1) {
        $7 = $1_1;
        if (($3_1 | 0) == 47) {
         $3_1 = 211;
         while (1) {
          $1_1 = ($0 >>> 0) / ($3_1 >>> 0) | 0;
          if ($1_1 >>> 0 < $3_1 >>> 0) {
           break label$5
          }
          if ((Math_imul($1_1, $3_1) | 0) == ($0 | 0)) {
           break label$6
          }
          $1_1 = $3_1 + 10 | 0;
          $2_1 = ($0 >>> 0) / ($1_1 >>> 0) | 0;
          if ($2_1 >>> 0 < $1_1 >>> 0) {
           break label$5
          }
          if ((Math_imul($1_1, $2_1) | 0) == ($0 | 0)) {
           break label$6
          }
          $1_1 = $3_1 + 12 | 0;
          $2_1 = ($0 >>> 0) / ($1_1 >>> 0) | 0;
          if ($2_1 >>> 0 < $1_1 >>> 0) {
           break label$5
          }
          if ((Math_imul($1_1, $2_1) | 0) == ($0 | 0)) {
           break label$6
          }
          $1_1 = $3_1 + 16 | 0;
          $2_1 = ($0 >>> 0) / ($1_1 >>> 0) | 0;
          if ($2_1 >>> 0 < $1_1 >>> 0) {
           break label$5
          }
          if ((Math_imul($1_1, $2_1) | 0) == ($0 | 0)) {
           break label$6
          }
          $1_1 = $3_1 + 18 | 0;
          $2_1 = ($0 >>> 0) / ($1_1 >>> 0) | 0;
          if ($2_1 >>> 0 < $1_1 >>> 0) {
           break label$5
          }
          if ((Math_imul($1_1, $2_1) | 0) == ($0 | 0)) {
           break label$6
          }
          $1_1 = $3_1 + 22 | 0;
          $2_1 = ($0 >>> 0) / ($1_1 >>> 0) | 0;
          if ($2_1 >>> 0 < $1_1 >>> 0) {
           break label$5
          }
          if ((Math_imul($1_1, $2_1) | 0) == ($0 | 0)) {
           break label$6
          }
          $1_1 = $3_1 + 28 | 0;
          $2_1 = ($0 >>> 0) / ($1_1 >>> 0) | 0;
          if ($2_1 >>> 0 < $1_1 >>> 0) {
           break label$5
          }
          if ((Math_imul($1_1, $2_1) | 0) == ($0 | 0)) {
           break label$6
          }
          $1_1 = $3_1 + 30 | 0;
          $2_1 = ($0 >>> 0) / ($1_1 >>> 0) | 0;
          if ($2_1 >>> 0 < $1_1 >>> 0) {
           break label$5
          }
          if ((Math_imul($1_1, $2_1) | 0) == ($0 | 0)) {
           break label$6
          }
          $1_1 = $3_1 + 36 | 0;
          $2_1 = ($0 >>> 0) / ($1_1 >>> 0) | 0;
          if ($2_1 >>> 0 < $1_1 >>> 0) {
           break label$5
          }
          if ((Math_imul($1_1, $2_1) | 0) == ($0 | 0)) {
           break label$6
          }
          $1_1 = $3_1 + 40 | 0;
          $2_1 = ($0 >>> 0) / ($1_1 >>> 0) | 0;
          if ($2_1 >>> 0 < $1_1 >>> 0) {
           break label$5
          }
          if ((Math_imul($1_1, $2_1) | 0) == ($0 | 0)) {
           break label$6
          }
          $1_1 = $3_1 + 42 | 0;
          $2_1 = ($0 >>> 0) / ($1_1 >>> 0) | 0;
          if ($2_1 >>> 0 < $1_1 >>> 0) {
           break label$5
          }
          if ((Math_imul($1_1, $2_1) | 0) == ($0 | 0)) {
           break label$6
          }
          $1_1 = $3_1 + 46 | 0;
          $2_1 = ($0 >>> 0) / ($1_1 >>> 0) | 0;
          if ($2_1 >>> 0 < $1_1 >>> 0) {
           break label$5
          }
          if ((Math_imul($1_1, $2_1) | 0) == ($0 | 0)) {
           break label$6
          }
          $1_1 = $3_1 + 52 | 0;
          $2_1 = ($0 >>> 0) / ($1_1 >>> 0) | 0;
          if ($2_1 >>> 0 < $1_1 >>> 0) {
           break label$5
          }
          if ((Math_imul($1_1, $2_1) | 0) == ($0 | 0)) {
           break label$6
          }
          $1_1 = $3_1 + 58 | 0;
          $2_1 = ($0 >>> 0) / ($1_1 >>> 0) | 0;
          if ($2_1 >>> 0 < $1_1 >>> 0) {
           break label$5
          }
          if ((Math_imul($1_1, $2_1) | 0) == ($0 | 0)) {
           break label$6
          }
          $1_1 = $3_1 + 60 | 0;
          $2_1 = ($0 >>> 0) / ($1_1 >>> 0) | 0;
          if ($2_1 >>> 0 < $1_1 >>> 0) {
           break label$5
          }
          if ((Math_imul($1_1, $2_1) | 0) == ($0 | 0)) {
           break label$6
          }
          $1_1 = $3_1 + 66 | 0;
          $2_1 = ($0 >>> 0) / ($1_1 >>> 0) | 0;
          if ($2_1 >>> 0 < $1_1 >>> 0) {
           break label$5
          }
          if ((Math_imul($1_1, $2_1) | 0) == ($0 | 0)) {
           break label$6
          }
          $1_1 = $3_1 + 70 | 0;
          $2_1 = ($0 >>> 0) / ($1_1 >>> 0) | 0;
          if ($2_1 >>> 0 < $1_1 >>> 0) {
           break label$5
          }
          if ((Math_imul($1_1, $2_1) | 0) == ($0 | 0)) {
           break label$6
          }
          $1_1 = $3_1 + 72 | 0;
          $2_1 = ($0 >>> 0) / ($1_1 >>> 0) | 0;
          if ($2_1 >>> 0 < $1_1 >>> 0) {
           break label$5
          }
          if ((Math_imul($1_1, $2_1) | 0) == ($0 | 0)) {
           break label$6
          }
          $1_1 = $3_1 + 78 | 0;
          $2_1 = ($0 >>> 0) / ($1_1 >>> 0) | 0;
          if ($2_1 >>> 0 < $1_1 >>> 0) {
           break label$5
          }
          if ((Math_imul($1_1, $2_1) | 0) == ($0 | 0)) {
           break label$6
          }
          $1_1 = $3_1 + 82 | 0;
          $2_1 = ($0 >>> 0) / ($1_1 >>> 0) | 0;
          if ($2_1 >>> 0 < $1_1 >>> 0) {
           break label$5
          }
          if ((Math_imul($1_1, $2_1) | 0) == ($0 | 0)) {
           break label$6
          }
          $1_1 = $3_1 + 88 | 0;
          $2_1 = ($0 >>> 0) / ($1_1 >>> 0) | 0;
          if ($2_1 >>> 0 < $1_1 >>> 0) {
           break label$5
          }
          if ((Math_imul($1_1, $2_1) | 0) == ($0 | 0)) {
           break label$6
          }
          $1_1 = $3_1 + 96 | 0;
          $2_1 = ($0 >>> 0) / ($1_1 >>> 0) | 0;
          if ($2_1 >>> 0 < $1_1 >>> 0) {
           break label$5
          }
          if ((Math_imul($1_1, $2_1) | 0) == ($0 | 0)) {
           break label$6
          }
          $1_1 = $3_1 + 100 | 0;
          $2_1 = ($0 >>> 0) / ($1_1 >>> 0) | 0;
          if ($2_1 >>> 0 < $1_1 >>> 0) {
           break label$5
          }
          if ((Math_imul($1_1, $2_1) | 0) == ($0 | 0)) {
           break label$6
          }
          $1_1 = $3_1 + 102 | 0;
          $2_1 = ($0 >>> 0) / ($1_1 >>> 0) | 0;
          if ($2_1 >>> 0 < $1_1 >>> 0) {
           break label$5
          }
          if ((Math_imul($1_1, $2_1) | 0) == ($0 | 0)) {
           break label$6
          }
          $1_1 = $3_1 + 106 | 0;
          $2_1 = ($0 >>> 0) / ($1_1 >>> 0) | 0;
          if ($2_1 >>> 0 < $1_1 >>> 0) {
           break label$5
          }
          if ((Math_imul($1_1, $2_1) | 0) == ($0 | 0)) {
           break label$6
          }
          $1_1 = $3_1 + 108 | 0;
          $2_1 = ($0 >>> 0) / ($1_1 >>> 0) | 0;
          if ($2_1 >>> 0 < $1_1 >>> 0) {
           break label$5
          }
          if ((Math_imul($1_1, $2_1) | 0) == ($0 | 0)) {
           break label$6
          }
          $1_1 = $3_1 + 112 | 0;
          $2_1 = ($0 >>> 0) / ($1_1 >>> 0) | 0;
          if ($2_1 >>> 0 < $1_1 >>> 0) {
           break label$5
          }
          if ((Math_imul($1_1, $2_1) | 0) == ($0 | 0)) {
           break label$6
          }
          $1_1 = $3_1 + 120 | 0;
          $2_1 = ($0 >>> 0) / ($1_1 >>> 0) | 0;
          if ($2_1 >>> 0 < $1_1 >>> 0) {
           break label$5
          }
          if ((Math_imul($1_1, $2_1) | 0) == ($0 | 0)) {
           break label$6
          }
          $1_1 = $3_1 + 126 | 0;
          $2_1 = ($0 >>> 0) / ($1_1 >>> 0) | 0;
          if ($2_1 >>> 0 < $1_1 >>> 0) {
           break label$5
          }
          if ((Math_imul($1_1, $2_1) | 0) == ($0 | 0)) {
           break label$6
          }
          $1_1 = $3_1 + 130 | 0;
          $2_1 = ($0 >>> 0) / ($1_1 >>> 0) | 0;
          if ($2_1 >>> 0 < $1_1 >>> 0) {
           break label$5
          }
          if ((Math_imul($1_1, $2_1) | 0) == ($0 | 0)) {
           break label$6
          }
          $1_1 = $3_1 + 136 | 0;
          $2_1 = ($0 >>> 0) / ($1_1 >>> 0) | 0;
          if ($2_1 >>> 0 < $1_1 >>> 0) {
           break label$5
          }
          if ((Math_imul($1_1, $2_1) | 0) == ($0 | 0)) {
           break label$6
          }
          $1_1 = $3_1 + 138 | 0;
          $2_1 = ($0 >>> 0) / ($1_1 >>> 0) | 0;
          if ($2_1 >>> 0 < $1_1 >>> 0) {
           break label$5
          }
          if ((Math_imul($1_1, $2_1) | 0) == ($0 | 0)) {
           break label$6
          }
          $1_1 = $3_1 + 142 | 0;
          $2_1 = ($0 >>> 0) / ($1_1 >>> 0) | 0;
          if ($2_1 >>> 0 < $1_1 >>> 0) {
           break label$5
          }
          if ((Math_imul($1_1, $2_1) | 0) == ($0 | 0)) {
           break label$6
          }
          $1_1 = $3_1 + 148 | 0;
          $2_1 = ($0 >>> 0) / ($1_1 >>> 0) | 0;
          if ($2_1 >>> 0 < $1_1 >>> 0) {
           break label$5
          }
          if ((Math_imul($1_1, $2_1) | 0) == ($0 | 0)) {
           break label$6
          }
          $1_1 = $3_1 + 150 | 0;
          $2_1 = ($0 >>> 0) / ($1_1 >>> 0) | 0;
          if ($2_1 >>> 0 < $1_1 >>> 0) {
           break label$5
          }
          if ((Math_imul($1_1, $2_1) | 0) == ($0 | 0)) {
           break label$6
          }
          $1_1 = $3_1 + 156 | 0;
          $2_1 = ($0 >>> 0) / ($1_1 >>> 0) | 0;
          if ($2_1 >>> 0 < $1_1 >>> 0) {
           break label$5
          }
          if ((Math_imul($1_1, $2_1) | 0) == ($0 | 0)) {
           break label$6
          }
          $1_1 = $3_1 + 162 | 0;
          $2_1 = ($0 >>> 0) / ($1_1 >>> 0) | 0;
          if ($2_1 >>> 0 < $1_1 >>> 0) {
           break label$5
          }
          if ((Math_imul($1_1, $2_1) | 0) == ($0 | 0)) {
           break label$6
          }
          $1_1 = $3_1 + 166 | 0;
          $2_1 = ($0 >>> 0) / ($1_1 >>> 0) | 0;
          if ($2_1 >>> 0 < $1_1 >>> 0) {
           break label$5
          }
          if ((Math_imul($1_1, $2_1) | 0) == ($0 | 0)) {
           break label$6
          }
          $1_1 = $3_1 + 168 | 0;
          $2_1 = ($0 >>> 0) / ($1_1 >>> 0) | 0;
          if ($2_1 >>> 0 < $1_1 >>> 0) {
           break label$5
          }
          if ((Math_imul($1_1, $2_1) | 0) == ($0 | 0)) {
           break label$6
          }
          $1_1 = $3_1 + 172 | 0;
          $2_1 = ($0 >>> 0) / ($1_1 >>> 0) | 0;
          if ($2_1 >>> 0 < $1_1 >>> 0) {
           break label$5
          }
          if ((Math_imul($1_1, $2_1) | 0) == ($0 | 0)) {
           break label$6
          }
          $1_1 = $3_1 + 178 | 0;
          $2_1 = ($0 >>> 0) / ($1_1 >>> 0) | 0;
          if ($2_1 >>> 0 < $1_1 >>> 0) {
           break label$5
          }
          if ((Math_imul($1_1, $2_1) | 0) == ($0 | 0)) {
           break label$6
          }
          $1_1 = $3_1 + 180 | 0;
          $2_1 = ($0 >>> 0) / ($1_1 >>> 0) | 0;
          if ($2_1 >>> 0 < $1_1 >>> 0) {
           break label$5
          }
          if ((Math_imul($1_1, $2_1) | 0) == ($0 | 0)) {
           break label$6
          }
          $1_1 = $3_1 + 186 | 0;
          $2_1 = ($0 >>> 0) / ($1_1 >>> 0) | 0;
          if ($2_1 >>> 0 < $1_1 >>> 0) {
           break label$5
          }
          if ((Math_imul($1_1, $2_1) | 0) == ($0 | 0)) {
           break label$6
          }
          $1_1 = $3_1 + 190 | 0;
          $2_1 = ($0 >>> 0) / ($1_1 >>> 0) | 0;
          if ($2_1 >>> 0 < $1_1 >>> 0) {
           break label$5
          }
          if ((Math_imul($1_1, $2_1) | 0) == ($0 | 0)) {
           break label$6
          }
          $1_1 = $3_1 + 192 | 0;
          $2_1 = ($0 >>> 0) / ($1_1 >>> 0) | 0;
          if ($2_1 >>> 0 < $1_1 >>> 0) {
           break label$5
          }
          if ((Math_imul($1_1, $2_1) | 0) == ($0 | 0)) {
           break label$6
          }
          $1_1 = $3_1 + 196 | 0;
          $2_1 = ($0 >>> 0) / ($1_1 >>> 0) | 0;
          if ($2_1 >>> 0 < $1_1 >>> 0) {
           break label$5
          }
          if ((Math_imul($1_1, $2_1) | 0) == ($0 | 0)) {
           break label$6
          }
          $1_1 = $3_1 + 198 | 0;
          $2_1 = ($0 >>> 0) / ($1_1 >>> 0) | 0;
          if ($2_1 >>> 0 < $1_1 >>> 0) {
           break label$5
          }
          if ((Math_imul($1_1, $2_1) | 0) == ($0 | 0)) {
           break label$6
          }
          $1_1 = $3_1 + 208 | 0;
          $2_1 = ($0 >>> 0) / ($1_1 >>> 0) | 0;
          if ($2_1 >>> 0 < $1_1 >>> 0) {
           break label$5
          }
          $3_1 = $3_1 + 210 | 0;
          if ((Math_imul($1_1, $2_1) | 0) != ($0 | 0)) {
           continue
          }
          break;
         };
         break label$6;
        }
        $1_1 = HEAP32[($3_1 << 2) + 4144 >> 2];
        $2_1 = ($0 >>> 0) / ($1_1 >>> 0) | 0;
        $8 = Math_imul($1_1, $2_1);
        $2_1 = $2_1 >>> 0 < $1_1 >>> 0;
        if (!$2_1) {
         $1_1 = $2_1 ? $0 : $7;
         $3_1 = $3_1 + 1 | 0;
         if (($0 | 0) != ($8 | 0)) {
          continue
         }
        }
        break;
       };
       if (($0 | 0) != ($8 | 0) | $2_1) {
        break label$3
       }
      }
      $1_1 = $6 + 1 | 0;
      $0 = ($1_1 | 0) == 48;
      $6 = $0 ? 0 : $1_1;
      $5_1 = $0 + $5_1 | 0;
      $3_1 = Math_imul($5_1, 210);
      continue;
     }
     break;
    };
    HEAP32[$4_1 + 12 >> 2] = $0;
    break label$1;
   }
   HEAP32[$4_1 + 12 >> 2] = $0;
   $0 = $2_1 ? $0 : $7;
  }
  global$0 = $4_1 + 16 | 0;
  return $0;
 }
 
 function $1640($0, $1_1, $2_1) {
  return $1642($0, $1_1, $2_1);
 }
 
 function $1642($0, $1_1, $2_1) {
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $0 = $1644($0, $1_1, $2_1);
  global$0 = $3_1 + 16 | 0;
  return $0;
 }
 
 function $1643() {
  fimport$9();
  abort();
 }
 
 function $1644($0, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $1_1 = $1645($0, $1_1);
  while (1) {
   if ($1_1) {
    HEAP32[$3_1 + 12 >> 2] = $0;
    $4_1 = $3_1 + 12 | 0;
    $5_1 = $4_1;
    $6 = HEAP32[$4_1 >> 2];
    $4_1 = $1_1 >>> 1 | 0;
    HEAP32[$5_1 >> 2] = $6 + ($4_1 << 2);
    if ($309(HEAP32[$3_1 + 12 >> 2], $2_1)) {
     $0 = HEAP32[$3_1 + 12 >> 2] + 4 | 0;
     HEAP32[$3_1 + 12 >> 2] = $0;
     $1_1 = ($4_1 ^ -1) + $1_1 | 0;
    } else {
     $1_1 = $4_1
    }
    continue;
   }
   break;
  };
  global$0 = $3_1 + 16 | 0;
  return $0;
 }
 
 function $1645($0, $1_1) {
  return $1648($0, $1_1);
 }
 
 function $1648($0, $1_1) {
  return $1_1 - $0 >> 2;
 }
 
 function $1650($0, $1_1, $2_1) {
  if ($2_1) {
   while (1) {
    HEAP32[$0 >> 2] = HEAP32[$1_1 >> 2];
    $0 = $0 + 4 | 0;
    $1_1 = $1_1 + 4 | 0;
    $2_1 = $2_1 + -1 | 0;
    if ($2_1) {
     continue
    }
    break;
   }
  }
 }
 
 function $1653($0) {
  $0 = $0 | 0;
  $1654($0);
  return $0 | 0;
 }
 
 function $1654($0) {
  $0 = $0 | 0;
  HEAP32[$0 >> 2] = 4880;
  $1655($0);
  $1855($0 + 28 | 0);
  $2583(HEAP32[$0 + 32 >> 2]);
  $2583(HEAP32[$0 + 36 >> 2]);
  $2583(HEAP32[$0 + 48 >> 2]);
  $2583(HEAP32[$0 + 60 >> 2]);
  return $0 | 0;
 }
 
 function $1655($0) {
  var $1_1 = 0, $2_1 = 0;
  $1_1 = HEAP32[$0 + 40 >> 2];
  while (1) {
   if ($1_1) {
    $1_1 = $1_1 + -1 | 0;
    $2_1 = $1_1 << 2;
    FUNCTION_TABLE[HEAP32[HEAP32[$0 + 32 >> 2] + $2_1 >> 2]](0, $0, HEAP32[$2_1 + HEAP32[$0 + 36 >> 2] >> 2]);
    continue;
   }
   break;
  };
 }
 
 function $1656($0) {
  $0 = $0 | 0;
  $2583($1653($0));
 }
 
 function $1657($0) {
  $0 = $0 | 0;
  HEAP32[$0 >> 2] = 4560;
  $1855($0 + 4 | 0);
  return $0 | 0;
 }
 
 function $1658($0) {
  $0 = $0 | 0;
  $2583($1657($0));
 }
 
 function $1659($0) {
  HEAP32[$0 >> 2] = 4560;
  $2285($0 + 4 | 0);
  HEAP32[$0 + 24 >> 2] = 0;
  HEAP32[$0 + 28 >> 2] = 0;
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP32[$0 + 20 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 + 12 >> 2] = 0;
  return $0;
 }
 
 function $1660($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $0 | 0;
 }
 
 function $1661($0, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $271($0, -1, -1);
 }
 
 function $1662($0, $1_1, $2_1, $3_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $271($0, -1, -1);
 }
 
 function $1663($0) {
  $0 = $0 | 0;
  return 0;
 }
 
 function $1664($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  while (1) {
   label$2 : {
    if (($5_1 | 0) >= ($2_1 | 0)) {
     break label$2
    }
    $3_1 = HEAP32[$0 + 12 >> 2];
    $6 = HEAP32[$0 + 16 >> 2];
    label$3 : {
     if ($3_1 >>> 0 < $6 >>> 0) {
      HEAP32[$4_1 + 12 >> 2] = 2147483647;
      HEAP32[$4_1 + 8 >> 2] = $6 - $3_1;
      HEAP32[$4_1 + 4 >> 2] = $2_1 - $5_1;
      $3_1 = HEAP32[$1665($4_1 + 12 | 0, $1665($4_1 + 8 | 0, $4_1 + 4 | 0)) >> 2];
      $1563($1_1, HEAP32[$0 + 12 >> 2], $3_1);
      $291($0, $3_1);
      break label$3;
     }
     $3_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 40 >> 2]]($0) | 0;
     if (($3_1 | 0) == -1) {
      break label$2
     }
     (wasm2js_i32$0 = $1_1, wasm2js_i32$1 = $293($3_1)), HEAP8[wasm2js_i32$0 | 0] = wasm2js_i32$1;
     $3_1 = 1;
    }
    $1_1 = $1_1 + $3_1 | 0;
    $5_1 = $3_1 + $5_1 | 0;
    continue;
   }
   break;
  };
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $1665($0, $1_1) {
  return $1666($0, $1_1);
 }
 
 function $1666($0, $1_1) {
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = $307($1_1, $0);
  global$0 = $2_1 + 16 | 0;
  return $3_1 ? $1_1 : $0;
 }
 
 function $1667($0) {
  $0 = $0 | 0;
  return -1;
 }
 
 function $1668($0) {
  $0 = $0 | 0;
  var $1_1 = 0;
  if ((FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 36 >> 2]]($0) | 0) == -1) {
   return -1
  }
  $1_1 = $0;
  $0 = HEAP32[$0 + 12 >> 2];
  HEAP32[$1_1 + 12 >> 2] = $0 + 1;
  return $287(HEAP8[$0 | 0]) | 0;
 }
 
 function $1669($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  return -1;
 }
 
 function $1670($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  while (1) {
   label$2 : {
    if (($5_1 | 0) >= ($2_1 | 0)) {
     break label$2
    }
    $3_1 = HEAP32[$0 + 24 >> 2];
    $6 = HEAP32[$0 + 28 >> 2];
    if ($3_1 >>> 0 >= $6 >>> 0) {
     if (((((wasm2js_i32$1 = $0, wasm2js_i32$2 = $287(HEAP8[$1_1 | 0])), wasm2js_i32$0 = HEAP32[HEAP32[$0 >> 2] + 52 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0) | 0) == -1) {
      break label$2
     }
     $5_1 = $5_1 + 1 | 0;
     $1_1 = $1_1 + 1 | 0;
    } else {
     HEAP32[$4_1 + 12 >> 2] = $6 - $3_1;
     HEAP32[$4_1 + 8 >> 2] = $2_1 - $5_1;
     $3_1 = HEAP32[$1665($4_1 + 12 | 0, $4_1 + 8 | 0) >> 2];
     $1563(HEAP32[$0 + 24 >> 2], $1_1, $3_1);
     HEAP32[$0 + 24 >> 2] = $3_1 + HEAP32[$0 + 24 >> 2];
     $5_1 = $5_1 + $3_1 | 0;
     $1_1 = $1_1 + $3_1 | 0;
    }
    continue;
   }
   break;
  };
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $1671($0) {
  $0 = $0 | 0;
  HEAP32[$0 >> 2] = 4624;
  $1855($0 + 4 | 0);
  return $0 | 0;
 }
 
 function $1672($0) {
  $0 = $0 | 0;
  $2583($1671($0));
 }
 
 function $1673($0) {
  HEAP32[$0 >> 2] = 4624;
  $2285($0 + 4 | 0);
  HEAP32[$0 + 24 >> 2] = 0;
  HEAP32[$0 + 28 >> 2] = 0;
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP32[$0 + 20 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 + 12 >> 2] = 0;
  return $0;
 }
 
 function $1674($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  while (1) {
   label$2 : {
    if (($5_1 | 0) >= ($2_1 | 0)) {
     break label$2
    }
    $3_1 = HEAP32[$0 + 12 >> 2];
    $6 = HEAP32[$0 + 16 >> 2];
    label$3 : {
     if ($3_1 >>> 0 < $6 >>> 0) {
      HEAP32[$4_1 + 12 >> 2] = 2147483647;
      HEAP32[$4_1 + 8 >> 2] = $6 - $3_1 >> 2;
      HEAP32[$4_1 + 4 >> 2] = $2_1 - $5_1;
      $3_1 = HEAP32[$1665($4_1 + 12 | 0, $1665($4_1 + 8 | 0, $4_1 + 4 | 0)) >> 2];
      $1675($1_1, HEAP32[$0 + 12 >> 2], $3_1);
      HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] + ($3_1 << 2);
      $1_1 = ($3_1 << 2) + $1_1 | 0;
      break label$3;
     }
     $3_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 40 >> 2]]($0) | 0;
     if (($3_1 | 0) == -1) {
      break label$2
     }
     HEAP32[$1_1 >> 2] = $3_1;
     $3_1 = 1;
     $1_1 = $1_1 + 4 | 0;
    }
    $5_1 = $3_1 + $5_1 | 0;
    continue;
   }
   break;
  };
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $1675($0, $1_1, $2_1) {
  if ($2_1) {
   $1650($0, $1_1, $2_1)
  }
 }
 
 function $1677($0) {
  $0 = $0 | 0;
  var $1_1 = 0;
  if ((FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 36 >> 2]]($0) | 0) == -1) {
   return -1
  }
  $1_1 = $0;
  $0 = HEAP32[$0 + 12 >> 2];
  HEAP32[$1_1 + 12 >> 2] = $0 + 4;
  return HEAP32[$0 >> 2];
 }
 
 function $1678($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  while (1) {
   label$2 : {
    if (($4_1 | 0) >= ($2_1 | 0)) {
     break label$2
    }
    $5_1 = HEAP32[$0 + 24 >> 2];
    $6 = HEAP32[$0 + 28 >> 2];
    if ($5_1 >>> 0 >= $6 >>> 0) {
     if ((FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 52 >> 2]]($0, HEAP32[$1_1 >> 2]) | 0) == -1) {
      break label$2
     }
     $4_1 = $4_1 + 1 | 0;
     $1_1 = $1_1 + 4 | 0;
    } else {
     HEAP32[$3_1 + 12 >> 2] = $6 - $5_1 >> 2;
     HEAP32[$3_1 + 8 >> 2] = $2_1 - $4_1;
     $5_1 = HEAP32[$1665($3_1 + 12 | 0, $3_1 + 8 | 0) >> 2];
     $1675(HEAP32[$0 + 24 >> 2], $1_1, $5_1);
     $6 = $5_1 << 2;
     HEAP32[$0 + 24 >> 2] = $6 + HEAP32[$0 + 24 >> 2];
     $4_1 = $4_1 + $5_1 | 0;
     $1_1 = $1_1 + $6 | 0;
    }
    continue;
   }
   break;
  };
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1680($0) {
  $0 = $0 | 0;
  $1653($0 + 8 | 0);
  return $0 | 0;
 }
 
 function $1681($0) {
  $0 = $0 | 0;
  return $1680(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0) | 0;
 }
 
 function $1682($0) {
  $0 = $0 | 0;
  $2583($1680($0));
 }
 
 function $1683($0) {
  $0 = $0 | 0;
  $1682(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0);
 }
 
 function $1684($0, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  HEAP8[$0 | 0] = 0;
  $4_1 = $1693(HEAP32[HEAP32[$1_1 >> 2] + -12 >> 2] + $1_1 | 0);
  $3_1 = HEAP32[HEAP32[$1_1 >> 2] + -12 >> 2] + $1_1 | 0;
  label$1 : {
   if ($4_1) {
    if (HEAP32[$3_1 + 72 >> 2]) {
     $1686(HEAP32[(HEAP32[HEAP32[$1_1 >> 2] + -12 >> 2] + $1_1 | 0) + 72 >> 2])
    }
    (wasm2js_i32$0 = $0, wasm2js_i32$1 = $1693(HEAP32[HEAP32[$1_1 >> 2] + -12 >> 2] + $1_1 | 0)), HEAP8[wasm2js_i32$0 | 0] = wasm2js_i32$1;
    break label$1;
   }
   $225($3_1, 4);
  }
  global$0 = $2_1 + 32 | 0;
  return $0;
 }
 
 function $1686($0) {
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  if (HEAP32[(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0) + 24 >> 2]) {
   $2_1 = $1694($1_1 + 8 | 0, $0);
   label$2 : {
    if (!HEAPU8[$2_1 | 0]) {
     break label$2
    }
    if (($270(HEAP32[(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0) + 24 >> 2]) | 0) != -1) {
     break label$2
    }
    $225(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0, 1);
   }
   $1695($2_1);
  }
  global$0 = $1_1 + 16 | 0;
 }
 
 function $1687($0, $1_1) {
  $2283($0, $1_1 + 28 | 0);
 }
 
 function $1688($0, $1_1) {
  return $1696($0, $1_1) ^ 1;
 }
 
 function $1689($0) {
  return $1697(HEAP32[$0 >> 2]) << 24 >> 24;
 }
 
 function $1690($0, $1_1, $2_1) {
  return ($2_1 | 0) >= 0 ? (HEAPU16[HEAP32[$0 + 8 >> 2] + (($2_1 & 255) << 1) >> 1] & $1_1) != 0 : 0;
 }
 
 function $1691($0) {
  $375(HEAP32[$0 >> 2]);
  return $0;
 }
 
 function $1692($0, $1_1) {
  return $1696($0, $1_1);
 }
 
 function $1693($0) {
  return !HEAP32[$0 + 16 >> 2];
 }
 
 function $1694($0, $1_1) {
  HEAP32[$0 + 4 >> 2] = $1_1;
  HEAP8[$0 | 0] = 0;
  if ($1693(HEAP32[HEAP32[$1_1 >> 2] + -12 >> 2] + $1_1 | 0)) {
   if (HEAP32[(HEAP32[HEAP32[$1_1 >> 2] + -12 >> 2] + $1_1 | 0) + 72 >> 2]) {
    $1686(HEAP32[(HEAP32[HEAP32[$1_1 >> 2] + -12 >> 2] + $1_1 | 0) + 72 >> 2])
   }
   HEAP8[$0 | 0] = 1;
  }
  return $0;
 }
 
 function $1695($0) {
  var $1_1 = 0;
  label$1 : {
   $1_1 = HEAP32[$0 + 4 >> 2];
   if (!HEAP32[(HEAP32[HEAP32[$1_1 >> 2] + -12 >> 2] + $1_1 | 0) + 24 >> 2]) {
    break label$1
   }
   $1_1 = HEAP32[$0 + 4 >> 2];
   if (!$1693(HEAP32[HEAP32[$1_1 >> 2] + -12 >> 2] + $1_1 | 0)) {
    break label$1
   }
   $1_1 = HEAP32[$0 + 4 >> 2];
   if (!(HEAP32[(HEAP32[HEAP32[$1_1 >> 2] + -12 >> 2] + $1_1 | 0) + 4 >> 2] & 8192)) {
    break label$1
   }
   $1_1 = HEAP32[$0 + 4 >> 2];
   if (($270(HEAP32[(HEAP32[HEAP32[$1_1 >> 2] + -12 >> 2] + $1_1 | 0) + 24 >> 2]) | 0) != -1) {
    break label$1
   }
   $0 = HEAP32[$0 + 4 >> 2];
   $225(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0, 1);
  }
 }
 
 function $1696($0, $1_1) {
  return $1733($0) ^ $1733($1_1) ^ 1;
 }
 
 function $1697($0) {
  var $1_1 = 0;
  $1_1 = HEAP32[$0 + 12 >> 2];
  if (($1_1 | 0) == HEAP32[$0 + 16 >> 2]) {
   return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 36 >> 2]]($0) | 0
  }
  return $287(HEAP8[$1_1 | 0]);
 }
 
 function $1698($0, $1_1) {
  $1_1 = !HEAP32[$0 + 24 >> 2] | $1_1;
  HEAP32[$0 + 16 >> 2] = $1_1;
  if ($1_1 & HEAP32[$0 + 20 >> 2]) {
   $1643();
   abort();
  }
 }
 
 function $1703($0) {
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  if (HEAP32[(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0) + 24 >> 2]) {
   $2_1 = $1710($1_1 + 8 | 0, $0);
   label$2 : {
    if (!HEAPU8[$2_1 | 0]) {
     break label$2
    }
    if (($270(HEAP32[(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0) + 24 >> 2]) | 0) != -1) {
     break label$2
    }
    $225(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0, 1);
   }
   $1695($2_1);
  }
  global$0 = $1_1 + 16 | 0;
 }
 
 function $1704($0) {
  return $1860($0, 23104);
 }
 
 function $1705($0, $1_1) {
  return $1711($0, $1_1) ^ 1;
 }
 
 function $1706($0) {
  return $1712(HEAP32[$0 >> 2]);
 }
 
 function $1707($0, $1_1, $2_1) {
  return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0, $1_1, $2_1) | 0;
 }
 
 function $1708($0) {
  $1713(HEAP32[$0 >> 2]);
  return $0;
 }
 
 function $1709($0, $1_1) {
  return $1711($0, $1_1);
 }
 
 function $1710($0, $1_1) {
  HEAP32[$0 + 4 >> 2] = $1_1;
  HEAP8[$0 | 0] = 0;
  if ($1693(HEAP32[HEAP32[$1_1 >> 2] + -12 >> 2] + $1_1 | 0)) {
   if (HEAP32[(HEAP32[HEAP32[$1_1 >> 2] + -12 >> 2] + $1_1 | 0) + 72 >> 2]) {
    $1703(HEAP32[(HEAP32[HEAP32[$1_1 >> 2] + -12 >> 2] + $1_1 | 0) + 72 >> 2])
   }
   HEAP8[$0 | 0] = 1;
  }
  return $0;
 }
 
 function $1711($0, $1_1) {
  return $1734($0) ^ $1734($1_1) ^ 1;
 }
 
 function $1712($0) {
  var $1_1 = 0;
  $1_1 = HEAP32[$0 + 12 >> 2];
  if (($1_1 | 0) == HEAP32[$0 + 16 >> 2]) {
   return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 36 >> 2]]($0) | 0
  }
  return HEAP32[$1_1 >> 2];
 }
 
 function $1713($0) {
  var $1_1 = 0;
  $1_1 = HEAP32[$0 + 12 >> 2];
  if (($1_1 | 0) == HEAP32[$0 + 16 >> 2]) {
   return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 40 >> 2]]($0) | 0
  }
  HEAP32[$0 + 12 >> 2] = $1_1 + 4;
  return HEAP32[$1_1 >> 2];
 }
 
 function $1714($0, $1_1) {
  var $2_1 = 0;
  $2_1 = HEAP32[$0 + 24 >> 2];
  if (($2_1 | 0) == HEAP32[$0 + 28 >> 2]) {
   return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 52 >> 2]]($0, $1_1) | 0
  }
  HEAP32[$0 + 24 >> 2] = $2_1 + 4;
  HEAP32[$2_1 >> 2] = $1_1;
  return $1_1;
 }
 
 function $1715($0) {
  $0 = $0 | 0;
  $1653($0 + 4 | 0);
  return $0 | 0;
 }
 
 function $1716($0) {
  $0 = $0 | 0;
  return $1715(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0) | 0;
 }
 
 function $1717($0) {
  $0 = $0 | 0;
  $2583($1715($0));
 }
 
 function $1718($0) {
  $0 = $0 | 0;
  $1717(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0);
 }
 
 function $1719($0) {
  return $1860($0, 22940);
 }
 
 function $1722($0, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6 = 0, $7 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  $3_1 = $1694($2_1 + 24 | 0, $0);
  label$1 : {
   if (!HEAPU8[$3_1 | 0]) {
    break label$1
   }
   $1687($2_1 + 16 | 0, HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0);
   $4_1 = $1719($2_1 + 16 | 0);
   $1855($2_1 + 16 | 0);
   $6 = $311($2_1 + 8 | 0, $0);
   $5_1 = HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0;
   $7 = $313($5_1);
   (wasm2js_i32$0 = $2_1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 16 >> 2]]($4_1, HEAP32[$6 >> 2], $5_1, $7, $1_1) | 0), HEAP32[wasm2js_i32$0 + 16 >> 2] = wasm2js_i32$1;
   if (!$315($2_1 + 16 | 0)) {
    break label$1
   }
   $225(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0, 5);
  }
  $1695($3_1);
  global$0 = $2_1 + 32 | 0;
  return $0;
 }
 
 function $1723($0, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6 = 0, $7 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  $3_1 = $1694($2_1 + 24 | 0, $0);
  label$1 : {
   if (!HEAPU8[$3_1 | 0]) {
    break label$1
   }
   $1687($2_1 + 16 | 0, HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0);
   $4_1 = $1719($2_1 + 16 | 0);
   $1855($2_1 + 16 | 0);
   $6 = $311($2_1 + 8 | 0, $0);
   $5_1 = HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0;
   $7 = $313($5_1);
   (wasm2js_i32$0 = $2_1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 24 >> 2]]($4_1, HEAP32[$6 >> 2], $5_1, $7, $1_1) | 0), HEAP32[wasm2js_i32$0 + 16 >> 2] = wasm2js_i32$1;
   if (!$315($2_1 + 16 | 0)) {
    break label$1
   }
   $225(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0, 5);
  }
  $1695($3_1);
  global$0 = $2_1 + 32 | 0;
  return $0;
 }
 
 function $1724($0, $1_1) {
  var $2_1 = 0;
  label$1 : {
   $2_1 = HEAP32[$0 >> 2];
   if (!$2_1) {
    break label$1
   }
   if (!$290($361($2_1, $1_1), -1)) {
    break label$1
   }
   HEAP32[$0 >> 2] = 0;
  }
 }
 
 function $1725($0, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = $1694($2_1 + 8 | 0, $0);
  label$1 : {
   if (!HEAPU8[$3_1 | 0]) {
    break label$1
   }
   $4_1 = $311($2_1, $0);
   $1724($4_1, $1_1);
   if (!$315($4_1)) {
    break label$1
   }
   $225(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0, 1);
  }
  $1695($3_1);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1730($0, $1_1) {
  var $2_1 = 0;
  label$1 : {
   $2_1 = HEAP32[$0 >> 2];
   if (!$2_1) {
    break label$1
   }
   if (!$290($1714($2_1, $1_1), -1)) {
    break label$1
   }
   HEAP32[$0 >> 2] = 0;
  }
 }
 
 function $1731($0) {
  $0 = $0 | 0;
  $2583($1654($0));
 }
 
 function $1732($0, $1_1) {
  HEAP32[$0 + 20 >> 2] = 0;
  HEAP32[$0 + 24 >> 2] = $1_1;
  HEAP32[$0 + 12 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 4098;
  HEAP32[$0 + 8 >> 2] = 6;
  HEAP32[$0 + 16 >> 2] = !$1_1;
  $2592($0 + 32 | 0, 0, 40);
  $2285($0 + 28 | 0);
 }
 
 function $1733($0) {
  var $1_1 = 0;
  $1_1 = HEAP32[$0 >> 2];
  if ($1_1) {
   if (!$290($1697($1_1), -1)) {
    return !HEAP32[$0 >> 2]
   }
   HEAP32[$0 >> 2] = 0;
  }
  return 1;
 }
 
 function $1734($0) {
  var $1_1 = 0;
  $1_1 = HEAP32[$0 >> 2];
  if ($1_1) {
   if (!$290($1712($1_1), -1)) {
    return !HEAP32[$0 >> 2]
   }
   HEAP32[$0 >> 2] = 0;
  }
  return 1;
 }
 
 function $1735($0, $1_1) {
  return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 44 >> 2]]($0, $1_1) | 0;
 }
 
 function $1736($0, $1_1, $2_1, $3_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  i64toi32_i32$HIGH_BITS = 0;
  return 0;
 }
 
 function $1737($0, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $2_1 = -1;
  label$1 : {
   if (($0 | 0) == -1) {
    break label$1
   }
   $4_1 = HEAP32[$1_1 + 76 >> 2] >= 0 ? 1 : $4_1;
   label$3 : {
    $3_1 = HEAP32[$1_1 + 4 >> 2];
    label$4 : {
     if (!$3_1) {
      $1585($1_1);
      $3_1 = HEAP32[$1_1 + 4 >> 2];
      if (!$3_1) {
       break label$4
      }
     }
     if ($3_1 >>> 0 > HEAP32[$1_1 + 44 >> 2] + -8 >>> 0) {
      break label$3
     }
    }
    if (!$4_1) {
     break label$1
    }
    return -1;
   }
   $2_1 = $3_1 + -1 | 0;
   HEAP32[$1_1 + 4 >> 2] = $2_1;
   HEAP8[$2_1 | 0] = $0;
   HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] & -17;
   $2_1 = $0;
  }
  return $2_1;
 }
 
 function $1738($0) {
  var $1_1 = 0;
  if (HEAP32[$0 + 76 >> 2] < 0) {
   $1_1 = HEAP32[$0 + 4 >> 2];
   if ($1_1 >>> 0 < HEAPU32[$0 + 8 >> 2]) {
    HEAP32[$0 + 4 >> 2] = $1_1 + 1;
    return HEAPU8[$1_1 | 0];
   }
   return $1599($0);
  }
  $1_1 = HEAP32[$0 + 4 >> 2];
  label$4 : {
   if ($1_1 >>> 0 < HEAPU32[$0 + 8 >> 2]) {
    HEAP32[$0 + 4 >> 2] = $1_1 + 1;
    $0 = HEAPU8[$1_1 | 0];
    break label$4;
   }
   $0 = $1599($0);
  }
  return $0;
 }
 
 function $1741() {
  var $0 = 0;
  $0 = HEAP32[1371];
  $1742($0);
  $1743();
  $1744($0);
  $1745();
  $0 = HEAP32[1372];
  $1746(22652, $0, 22700);
  $1747(22016, 22652);
  $1748(22708, $0, 22756);
  $1749(22100, 22708);
  $0 = HEAP32[1373];
  $1746(22764, $0, 22812);
  $1747(22184, 22764);
  $1747(22352, HEAP32[(HEAP32[HEAP32[5546] + -12 >> 2] + 22184 | 0) + 24 >> 2]);
  $1748(22820, $0, 22868);
  $1749(22268, 22820);
  $1749(22436, HEAP32[(HEAP32[HEAP32[5567] + -12 >> 2] + 22268 | 0) + 24 >> 2]);
  $1750(HEAP32[HEAP32[5460] + -12 >> 2] + 21840 | 0, 22016);
  $1750(HEAP32[HEAP32[5482] + -12 >> 2] + 21928 | 0, 22100);
  $1754(HEAP32[HEAP32[5546] + -12 >> 2] + 22184 | 0);
  $1754(HEAP32[HEAP32[5567] + -12 >> 2] + 22268 | 0);
  $1750(HEAP32[HEAP32[5546] + -12 >> 2] + 22184 | 0, 22016);
  $1750(HEAP32[HEAP32[5567] + -12 >> 2] + 22268 | 0, 22100);
 }
 
 function $1742($0) {
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = $1659(22524);
  HEAP32[5641] = 22580;
  HEAP32[5639] = $0;
  HEAP32[5631] = 5504;
  HEAP8[22576] = 0;
  HEAP32[5643] = -1;
  $251($1_1 + 8 | 0, $2_1);
  FUNCTION_TABLE[HEAP32[HEAP32[5631] + 8 >> 2]](22524, $1_1 + 8 | 0);
  $1855($1_1 + 8 | 0);
  global$0 = $1_1 + 16 | 0;
 }
 
 function $1743() {
  var $0 = 0;
  $0 = $221(21848);
  HEAP32[5460] = 4692;
  HEAP32[$0 >> 2] = 4712;
  HEAP32[5461] = 0;
  $250(HEAP32[1170] + 21840 | 0, 22524);
 }
 
 function $1744($0) {
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = $1673(22588);
  HEAP32[5657] = 22644;
  HEAP32[5655] = $0;
  HEAP32[5647] = 5644;
  HEAP8[22640] = 0;
  HEAP32[5659] = -1;
  $251($1_1 + 8 | 0, $2_1);
  FUNCTION_TABLE[HEAP32[HEAP32[5647] + 8 >> 2]](22588, $1_1 + 8 | 0);
  $1855($1_1 + 8 | 0);
  global$0 = $1_1 + 16 | 0;
 }
 
 function $1745() {
  var $0 = 0;
  $0 = $1752(21936);
  HEAP32[5482] = 4740;
  HEAP32[$0 >> 2] = 4760;
  HEAP32[5483] = 0;
  $250(HEAP32[1182] + 21928 | 0, 22588);
 }
 
 function $1746($0, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = $1659($0);
  HEAP32[$0 + 32 >> 2] = $1_1;
  HEAP32[$0 >> 2] = 5744;
  $251($3_1 + 8 | 0, $4_1);
  $1_1 = $253($3_1 + 8 | 0);
  $1855($3_1 + 8 | 0);
  HEAP32[$0 + 40 >> 2] = $2_1;
  HEAP32[$0 + 36 >> 2] = $1_1;
  (wasm2js_i32$0 = $0, wasm2js_i32$1 = $254($1_1)), HEAP8[wasm2js_i32$0 + 44 | 0] = wasm2js_i32$1;
  global$0 = $3_1 + 16 | 0;
 }
 
 function $1747($0, $1_1) {
  var $2_1 = 0;
  $2_1 = $221($0 + 4 | 0);
  HEAP32[$0 >> 2] = 4788;
  HEAP32[$2_1 >> 2] = 4808;
  $250(HEAP32[1194] + $0 | 0, $1_1);
 }
 
 function $1748($0, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = $1673($0);
  HEAP32[$0 + 32 >> 2] = $1_1;
  HEAP32[$0 >> 2] = 5848;
  $251($3_1 + 8 | 0, $4_1);
  $1_1 = $1753($3_1 + 8 | 0);
  $1855($3_1 + 8 | 0);
  HEAP32[$0 + 40 >> 2] = $2_1;
  HEAP32[$0 + 36 >> 2] = $1_1;
  (wasm2js_i32$0 = $0, wasm2js_i32$1 = $254($1_1)), HEAP8[wasm2js_i32$0 + 44 | 0] = wasm2js_i32$1;
  global$0 = $3_1 + 16 | 0;
 }
 
 function $1749($0, $1_1) {
  var $2_1 = 0;
  $2_1 = $1752($0 + 4 | 0);
  HEAP32[$0 >> 2] = 4836;
  HEAP32[$2_1 >> 2] = 4856;
  $250(HEAP32[1206] + $0 | 0, $1_1);
 }
 
 function $1750($0, $1_1) {
  HEAP32[$0 + 72 >> 2] = $1_1;
 }
 
 function $1752($0) {
  $249($0);
  HEAP32[$0 >> 2] = 5012;
  return $0;
 }
 
 function $1753($0) {
  return $1860($0, 23128);
 }
 
 function $1754($0) {
  HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] | 8192;
 }
 
 function $1756($0) {
  $0 = $0 | 0;
  $1686(22016);
  $1703(22100);
  $1686(22352);
  $1703(22436);
 }
 
 function $1757($0) {
  $0 = $0 | 0;
  $1657($0);
  $2583($0);
 }
 
 function $1758($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $1_1 = $253($1_1);
  HEAP32[$0 + 36 >> 2] = $1_1;
  (wasm2js_i32$0 = $0, wasm2js_i32$1 = $270($1_1)), HEAP32[wasm2js_i32$0 + 44 >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $0, wasm2js_i32$1 = $254(HEAP32[$0 + 36 >> 2])), HEAP8[wasm2js_i32$0 + 53 | 0] = wasm2js_i32$1;
  if (HEAP32[$0 + 44 >> 2] >= 9) {
   $1643();
   abort();
  }
 }
 
 function $1759($0) {
  $0 = $0 | 0;
  return $1760($0, 0) | 0;
 }
 
 function $1760($0, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6 = 0, $7 = 0, $8 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  label$1 : {
   if (HEAPU8[$0 + 52 | 0]) {
    $3_1 = HEAP32[$0 + 48 >> 2];
    if (!$1_1) {
     break label$1
    }
    HEAP8[$0 + 52 | 0] = 0;
    HEAP32[$0 + 48 >> 2] = -1;
    break label$1;
   }
   HEAP32[$2_1 + 24 >> 2] = 1;
   $4_1 = HEAP32[$268($2_1 + 24 | 0, $0 + 44 | 0) >> 2];
   $7 = ($4_1 | 0) > 0 ? $4_1 : 0;
   label$3 : {
    label$4 : {
     label$5 : {
      while (1) {
       if (($3_1 | 0) != ($7 | 0)) {
        $5_1 = $1738(HEAP32[$0 + 32 >> 2]);
        if (($5_1 | 0) == -1) {
         break label$5
        }
        HEAP8[($2_1 + 24 | 0) + $3_1 | 0] = $5_1;
        $3_1 = $3_1 + 1 | 0;
        continue;
       }
       break;
      };
      label$8 : {
       if (HEAPU8[$0 + 53 | 0]) {
        HEAP8[$2_1 + 23 | 0] = HEAPU8[$2_1 + 24 | 0];
        break label$8;
       }
       $7 = $2_1 + 24 | 0;
       while (1) {
        label$11 : {
         $3_1 = HEAP32[$0 + 40 >> 2];
         $5_1 = HEAP32[$3_1 >> 2];
         $8 = HEAP32[$3_1 + 4 >> 2];
         label$12 : {
          $6 = $3_1;
          $3_1 = ($2_1 + 24 | 0) + $4_1 | 0;
          switch ($288(HEAP32[$0 + 36 >> 2], $6, $2_1 + 24 | 0, $3_1, $2_1 + 16 | 0, $2_1 + 23 | 0, $7, $2_1 + 12 | 0) + -1 | 0) {
          case 2:
           break label$11;
          case 0:
           break label$12;
          case 1:
           break label$5;
          default:
           break label$8;
          };
         }
         $6 = HEAP32[$0 + 40 >> 2];
         HEAP32[$6 >> 2] = $5_1;
         HEAP32[$6 + 4 >> 2] = $8;
         if (($4_1 | 0) == 8) {
          break label$5
         }
         $5_1 = $1738(HEAP32[$0 + 32 >> 2]);
         if (($5_1 | 0) == -1) {
          break label$5
         }
         HEAP8[$3_1 | 0] = $5_1;
         $4_1 = $4_1 + 1 | 0;
         continue;
        }
        break;
       };
       HEAP8[$2_1 + 23 | 0] = HEAPU8[$2_1 + 24 | 0];
      }
      if ($1_1) {
       break label$4
      }
      while (1) {
       if (($4_1 | 0) < 1) {
        break label$3
       }
       $4_1 = $4_1 + -1 | 0;
       if (($1737($287(HEAP8[$4_1 + ($2_1 + 24 | 0) | 0]), HEAP32[$0 + 32 >> 2]) | 0) != -1) {
        continue
       }
       break;
      };
     }
     $3_1 = -1;
     break label$1;
    }
    (wasm2js_i32$0 = $0, wasm2js_i32$1 = $287(HEAP8[$2_1 + 23 | 0])), HEAP32[wasm2js_i32$0 + 48 >> 2] = wasm2js_i32$1;
   }
   $3_1 = $287(HEAP8[$2_1 + 23 | 0]);
  }
  global$0 = $2_1 + 32 | 0;
  return $3_1;
 }
 
 function $1761($0) {
  $0 = $0 | 0;
  return $1760($0, 1) | 0;
 }
 
 function $1762($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  $3_1 = $290($1_1, -1);
  $4_1 = HEAPU8[$0 + 52 | 0];
  label$1 : {
   if ($3_1) {
    $3_1 = $1_1;
    if ($4_1) {
     break label$1
    }
    $3_1 = HEAP32[$0 + 48 >> 2];
    (wasm2js_i32$0 = $0, wasm2js_i32$1 = $290($3_1, -1) ^ 1), HEAP8[wasm2js_i32$0 + 52 | 0] = wasm2js_i32$1;
    break label$1;
   }
   if ($4_1) {
    (wasm2js_i32$0 = $2_1, wasm2js_i32$1 = $293(HEAP32[$0 + 48 >> 2])), HEAP8[wasm2js_i32$0 + 19 | 0] = wasm2js_i32$1;
    label$4 : {
     label$5 : {
      switch ($298(HEAP32[$0 + 36 >> 2], HEAP32[$0 + 40 >> 2], $2_1 + 19 | 0, $2_1 + 20 | 0, $2_1 + 12 | 0, $2_1 + 24 | 0, $2_1 + 32 | 0, $2_1 + 20 | 0) + -1 | 0) {
      case 2:
       $3_1 = HEAP32[$0 + 48 >> 2];
       HEAP32[$2_1 + 20 >> 2] = $2_1 + 25;
       HEAP8[$2_1 + 24 | 0] = $3_1;
      default:
       while (1) {
        $3_1 = HEAP32[$2_1 + 20 >> 2];
        $4_1 = 1;
        if ($3_1 >>> 0 <= $2_1 + 24 >>> 0) {
         break label$4
        }
        $3_1 = $3_1 + -1 | 0;
        HEAP32[$2_1 + 20 >> 2] = $3_1;
        if (($1737(HEAP8[$3_1 | 0], HEAP32[$0 + 32 >> 2]) | 0) != -1) {
         continue
        }
        break;
       };
       break;
      case 0:
      case 1:
       break label$5;
      };
     }
     $3_1 = -1;
     $4_1 = 0;
    }
    if (!$4_1) {
     break label$1
    }
   }
   HEAP8[$0 + 52 | 0] = 1;
   HEAP32[$0 + 48 >> 2] = $1_1;
   $3_1 = $1_1;
  }
  global$0 = $2_1 + 32 | 0;
  return $3_1 | 0;
 }
 
 function $1764($0) {
  $0 = $0 | 0;
  $1671($0);
  $2583($0);
 }
 
 function $1765($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $1_1 = $1753($1_1);
  HEAP32[$0 + 36 >> 2] = $1_1;
  (wasm2js_i32$0 = $0, wasm2js_i32$1 = $270($1_1)), HEAP32[wasm2js_i32$0 + 44 >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $0, wasm2js_i32$1 = $254(HEAP32[$0 + 36 >> 2])), HEAP8[wasm2js_i32$0 + 53 | 0] = wasm2js_i32$1;
  if (HEAP32[$0 + 44 >> 2] >= 9) {
   $1643();
   abort();
  }
 }
 
 function $1766($0) {
  $0 = $0 | 0;
  return $1767($0, 0) | 0;
 }
 
 function $1767($0, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6 = 0, $7 = 0, $8 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  label$1 : {
   if (HEAPU8[$0 + 52 | 0]) {
    $3_1 = HEAP32[$0 + 48 >> 2];
    if (!$1_1) {
     break label$1
    }
    HEAP8[$0 + 52 | 0] = 0;
    HEAP32[$0 + 48 >> 2] = -1;
    break label$1;
   }
   HEAP32[$2_1 + 24 >> 2] = 1;
   $4_1 = HEAP32[$268($2_1 + 24 | 0, $0 + 44 | 0) >> 2];
   $7 = ($4_1 | 0) > 0 ? $4_1 : 0;
   label$3 : {
    label$4 : {
     label$5 : {
      while (1) {
       if (($3_1 | 0) != ($7 | 0)) {
        $5_1 = $1738(HEAP32[$0 + 32 >> 2]);
        if (($5_1 | 0) == -1) {
         break label$5
        }
        HEAP8[($2_1 + 24 | 0) + $3_1 | 0] = $5_1;
        $3_1 = $3_1 + 1 | 0;
        continue;
       }
       break;
      };
      label$8 : {
       if (HEAPU8[$0 + 53 | 0]) {
        HEAP32[$2_1 + 20 >> 2] = HEAP8[$2_1 + 24 | 0];
        break label$8;
       }
       $7 = $2_1 + 24 | 0;
       while (1) {
        label$11 : {
         $3_1 = HEAP32[$0 + 40 >> 2];
         $5_1 = HEAP32[$3_1 >> 2];
         $8 = HEAP32[$3_1 + 4 >> 2];
         label$12 : {
          $6 = $3_1;
          $3_1 = ($2_1 + 24 | 0) + $4_1 | 0;
          switch ($288(HEAP32[$0 + 36 >> 2], $6, $2_1 + 24 | 0, $3_1, $2_1 + 16 | 0, $2_1 + 20 | 0, $7, $2_1 + 12 | 0) + -1 | 0) {
          case 2:
           break label$11;
          case 0:
           break label$12;
          case 1:
           break label$5;
          default:
           break label$8;
          };
         }
         $6 = HEAP32[$0 + 40 >> 2];
         HEAP32[$6 >> 2] = $5_1;
         HEAP32[$6 + 4 >> 2] = $8;
         if (($4_1 | 0) == 8) {
          break label$5
         }
         $5_1 = $1738(HEAP32[$0 + 32 >> 2]);
         if (($5_1 | 0) == -1) {
          break label$5
         }
         HEAP8[$3_1 | 0] = $5_1;
         $4_1 = $4_1 + 1 | 0;
         continue;
        }
        break;
       };
       HEAP32[$2_1 + 20 >> 2] = HEAP8[$2_1 + 24 | 0];
      }
      if ($1_1) {
       break label$4
      }
      while (1) {
       if (($4_1 | 0) < 1) {
        break label$3
       }
       $4_1 = $4_1 + -1 | 0;
       if (($1737(HEAP8[$4_1 + ($2_1 + 24 | 0) | 0], HEAP32[$0 + 32 >> 2]) | 0) != -1) {
        continue
       }
       break;
      };
     }
     $3_1 = -1;
     break label$1;
    }
    HEAP32[$0 + 48 >> 2] = HEAP32[$2_1 + 20 >> 2];
   }
   $3_1 = HEAP32[$2_1 + 20 >> 2];
  }
  global$0 = $2_1 + 32 | 0;
  return $3_1;
 }
 
 function $1768($0) {
  $0 = $0 | 0;
  return $1767($0, 1) | 0;
 }
 
 function $1769($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  $3_1 = $290($1_1, -1);
  $4_1 = HEAPU8[$0 + 52 | 0];
  label$1 : {
   if ($3_1) {
    $3_1 = $1_1;
    if ($4_1) {
     break label$1
    }
    $3_1 = HEAP32[$0 + 48 >> 2];
    (wasm2js_i32$0 = $0, wasm2js_i32$1 = $290($3_1, -1) ^ 1), HEAP8[wasm2js_i32$0 + 52 | 0] = wasm2js_i32$1;
    break label$1;
   }
   if ($4_1) {
    HEAP32[$2_1 + 16 >> 2] = HEAP32[$0 + 48 >> 2];
    label$4 : {
     label$5 : {
      switch ($298(HEAP32[$0 + 36 >> 2], HEAP32[$0 + 40 >> 2], $2_1 + 16 | 0, $2_1 + 20 | 0, $2_1 + 12 | 0, $2_1 + 24 | 0, $2_1 + 32 | 0, $2_1 + 20 | 0) + -1 | 0) {
      case 2:
       $3_1 = HEAP32[$0 + 48 >> 2];
       HEAP32[$2_1 + 20 >> 2] = $2_1 + 25;
       HEAP8[$2_1 + 24 | 0] = $3_1;
      default:
       while (1) {
        $3_1 = HEAP32[$2_1 + 20 >> 2];
        $4_1 = 1;
        if ($3_1 >>> 0 <= $2_1 + 24 >>> 0) {
         break label$4
        }
        $3_1 = $3_1 + -1 | 0;
        HEAP32[$2_1 + 20 >> 2] = $3_1;
        if (($1737(HEAP8[$3_1 | 0], HEAP32[$0 + 32 >> 2]) | 0) != -1) {
         continue
        }
        break;
       };
       break;
      case 0:
      case 1:
       break label$5;
      };
     }
     $3_1 = -1;
     $4_1 = 0;
    }
    if (!$4_1) {
     break label$1
    }
   }
   HEAP8[$0 + 52 | 0] = 1;
   HEAP32[$0 + 48 >> 2] = $1_1;
   $3_1 = $1_1;
  }
  global$0 = $2_1 + 32 | 0;
  return $3_1 | 0;
 }
 
 function $1770($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0) | 0;
  $1_1 = $253($1_1);
  HEAP32[$0 + 36 >> 2] = $1_1;
  (wasm2js_i32$0 = $0, wasm2js_i32$1 = $254($1_1)), HEAP8[wasm2js_i32$0 + 44 | 0] = wasm2js_i32$1;
 }
 
 function $1771($0) {
  $0 = $0 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $4_1 = $1_1 + 16 | 0;
  label$1 : {
   while (1) {
    $5_1 = $280(HEAP32[$0 + 36 >> 2], HEAP32[$0 + 40 >> 2], $1_1 + 8 | 0, $4_1, $1_1 + 4 | 0);
    $2_1 = -1;
    $3_1 = HEAP32[$1_1 + 4 >> 2] - ($1_1 + 8 | 0) | 0;
    if (($3_1 | 0) != ($2596($1_1 + 8 | 0, 1, $3_1, HEAP32[$0 + 32 >> 2]) | 0)) {
     break label$1
    }
    label$3 : {
     switch ($5_1 + -1 | 0) {
     case 1:
      break label$1;
     case 0:
      continue;
     default:
      break label$3;
     };
    }
    break;
   };
   $2_1 = $1574(HEAP32[$0 + 32 >> 2]) ? -1 : 0;
  }
  global$0 = $1_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $1772($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  label$1 : {
   if (!HEAPU8[$0 + 44 | 0]) {
    $2_1 = ($2_1 | 0) > 0 ? $2_1 : 0;
    while (1) {
     if (($2_1 | 0) == ($3_1 | 0)) {
      break label$1
     }
     if (((((wasm2js_i32$1 = $0, wasm2js_i32$2 = $287(HEAP8[$1_1 | 0])), wasm2js_i32$0 = HEAP32[HEAP32[$0 >> 2] + 52 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0) | 0) == -1) {
      return $3_1 | 0
     } else {
      $1_1 = $1_1 + 1 | 0;
      $3_1 = $3_1 + 1 | 0;
      continue;
     }
    };
   }
   $2_1 = $2596($1_1, 1, $2_1, HEAP32[$0 + 32 >> 2]);
  }
  return $2_1 | 0;
 }
 
 function $1773($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if ($290($1_1, -1)) {
      break label$3
     }
     (wasm2js_i32$0 = $2_1, wasm2js_i32$1 = $293($1_1)), HEAP8[wasm2js_i32$0 + 23 | 0] = wasm2js_i32$1;
     if (HEAPU8[$0 + 44 | 0]) {
      if (($2596($2_1 + 23 | 0, 1, 1, HEAP32[$0 + 32 >> 2]) | 0) != 1) {
       break label$2
      }
      break label$3;
     }
     HEAP32[$2_1 + 16 >> 2] = $2_1 + 24;
     $5_1 = $2_1 + 32 | 0;
     $6 = $2_1 + 24 | 0;
     $3_1 = $2_1 + 23 | 0;
     while (1) {
      $4_1 = $298(HEAP32[$0 + 36 >> 2], HEAP32[$0 + 40 >> 2], $3_1, $6, $2_1 + 12 | 0, $2_1 + 24 | 0, $5_1, $2_1 + 16 | 0);
      if (HEAP32[$2_1 + 12 >> 2] == ($3_1 | 0)) {
       break label$2
      }
      if (($4_1 | 0) == 3) {
       if (($2596($3_1, 1, 1, HEAP32[$0 + 32 >> 2]) | 0) == 1) {
        break label$3
       }
       break label$2;
      }
      if ($4_1 >>> 0 > 1) {
       break label$2
      }
      $3_1 = HEAP32[$2_1 + 16 >> 2] - ($2_1 + 24 | 0) | 0;
      if (($2596($2_1 + 24 | 0, 1, $3_1, HEAP32[$0 + 32 >> 2]) | 0) != ($3_1 | 0)) {
       break label$2
      }
      $3_1 = HEAP32[$2_1 + 12 >> 2];
      if (($4_1 | 0) == 1) {
       continue
      }
      break;
     };
    }
    $0 = $292($1_1);
    break label$1;
   }
   $0 = -1;
  }
  global$0 = $2_1 + 32 | 0;
  return $0 | 0;
 }
 
 function $1774($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0) | 0;
  $1_1 = $1753($1_1);
  HEAP32[$0 + 36 >> 2] = $1_1;
  (wasm2js_i32$0 = $0, wasm2js_i32$1 = $254($1_1)), HEAP8[wasm2js_i32$0 + 44 | 0] = wasm2js_i32$1;
 }
 
 function $1775($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  label$1 : {
   if (!HEAPU8[$0 + 44 | 0]) {
    $2_1 = ($2_1 | 0) > 0 ? $2_1 : 0;
    while (1) {
     if (($2_1 | 0) == ($3_1 | 0)) {
      break label$1
     }
     if ((FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 52 >> 2]]($0, HEAP32[$1_1 >> 2]) | 0) == -1) {
      return $3_1 | 0
     } else {
      $1_1 = $1_1 + 4 | 0;
      $3_1 = $3_1 + 1 | 0;
      continue;
     }
    };
   }
   $2_1 = $2596($1_1, 4, $2_1, HEAP32[$0 + 32 >> 2]);
  }
  return $2_1 | 0;
 }
 
 function $1776($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if ($290($1_1, -1)) {
      break label$3
     }
     HEAP32[$2_1 + 20 >> 2] = $1_1;
     if (HEAPU8[$0 + 44 | 0]) {
      if (($2596($2_1 + 20 | 0, 4, 1, HEAP32[$0 + 32 >> 2]) | 0) != 1) {
       break label$2
      }
      break label$3;
     }
     HEAP32[$2_1 + 16 >> 2] = $2_1 + 24;
     $5_1 = $2_1 + 32 | 0;
     $6 = $2_1 + 24 | 0;
     $3_1 = $2_1 + 20 | 0;
     while (1) {
      $4_1 = $298(HEAP32[$0 + 36 >> 2], HEAP32[$0 + 40 >> 2], $3_1, $6, $2_1 + 12 | 0, $2_1 + 24 | 0, $5_1, $2_1 + 16 | 0);
      if (HEAP32[$2_1 + 12 >> 2] == ($3_1 | 0)) {
       break label$2
      }
      if (($4_1 | 0) == 3) {
       if (($2596($3_1, 1, 1, HEAP32[$0 + 32 >> 2]) | 0) == 1) {
        break label$3
       }
       break label$2;
      }
      if ($4_1 >>> 0 > 1) {
       break label$2
      }
      $3_1 = HEAP32[$2_1 + 16 >> 2] - ($2_1 + 24 | 0) | 0;
      if (($2596($2_1 + 24 | 0, 1, $3_1, HEAP32[$0 + 32 >> 2]) | 0) != ($3_1 | 0)) {
       break label$2
      }
      $3_1 = HEAP32[$2_1 + 12 >> 2];
      if (($4_1 | 0) == 1) {
       continue
      }
      break;
     };
    }
    $0 = $292($1_1);
    break label$1;
   }
   $0 = -1;
  }
  global$0 = $2_1 + 32 | 0;
  return $0 | 0;
 }
 
 function $1778($0, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = 0, $6 = 0, $7 = 0, $8 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14 = 0, $15 = 0, $16_1 = 0, $17 = 0;
  $12_1 = global$0 - 16 | 0;
  global$0 = $12_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        if ($1_1 >>> 0 <= 36) {
         while (1) {
          $6 = HEAP32[$0 + 4 >> 2];
          label$9 : {
           if ($6 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
            HEAP32[$0 + 4 >> 2] = $6 + 1;
            $5_1 = HEAPU8[$6 | 0];
            break label$9;
           }
           $5_1 = $1601($0);
          }
          if ($1572($5_1)) {
           continue
          }
          break;
         };
         label$11 : {
          label$12 : {
           switch ($5_1 + -43 | 0) {
           case 0:
           case 2:
            break label$12;
           default:
            break label$11;
           };
          }
          $11_1 = ($5_1 | 0) == 45 ? -1 : 0;
          $6 = HEAP32[$0 + 4 >> 2];
          if ($6 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
           HEAP32[$0 + 4 >> 2] = $6 + 1;
           $5_1 = HEAPU8[$6 | 0];
           break label$11;
          }
          $5_1 = $1601($0);
         }
         label$14 : {
          if (!($1_1 & -17 | ($5_1 | 0) != 48)) {
           $6 = HEAP32[$0 + 4 >> 2];
           label$16 : {
            if ($6 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
             HEAP32[$0 + 4 >> 2] = $6 + 1;
             $5_1 = HEAPU8[$6 | 0];
             break label$16;
            }
            $5_1 = $1601($0);
           }
           if (($5_1 & -33) == 88) {
            $1_1 = 16;
            $6 = HEAP32[$0 + 4 >> 2];
            label$19 : {
             if ($6 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
              HEAP32[$0 + 4 >> 2] = $6 + 1;
              $5_1 = HEAPU8[$6 | 0];
              break label$19;
             }
             $5_1 = $1601($0);
            }
            if (HEAPU8[$5_1 + 5953 | 0] < 16) {
             break label$5
            }
            if (!HEAP32[$0 + 104 >> 2]) {
             $3_1 = 0;
             $4_1 = 0;
             if ($2_1) {
              break label$1
             }
             break label$2;
            }
            $1_1 = HEAP32[$0 + 4 >> 2];
            HEAP32[$0 + 4 >> 2] = $1_1 + -1;
            if (!$2_1) {
             break label$2
            }
            HEAP32[$0 + 4 >> 2] = $1_1 + -2;
            $3_1 = 0;
            $4_1 = 0;
            break label$1;
           }
           if ($1_1) {
            break label$14
           }
           $1_1 = 8;
           break label$5;
          }
          $1_1 = $1_1 ? $1_1 : 10;
          if ($1_1 >>> 0 > HEAPU8[$5_1 + 5953 | 0]) {
           break label$14
          }
          if (HEAP32[$0 + 104 >> 2]) {
           HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + -1
          }
          $3_1 = 0;
          $4_1 = 0;
          $1600($0, 0, 0);
          HEAP32[4914] = 28;
          break label$1;
         }
         if (($1_1 | 0) != 10) {
          break label$5
         }
         $2_1 = $5_1 + -48 | 0;
         if ($2_1 >>> 0 <= 9) {
          $1_1 = 0;
          while (1) {
           $1_1 = Math_imul($1_1, 10) + $2_1 | 0;
           $2_1 = HEAP32[$0 + 4 >> 2];
           label$25 : {
            if ($2_1 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
             HEAP32[$0 + 4 >> 2] = $2_1 + 1;
             $5_1 = HEAPU8[$2_1 | 0];
             break label$25;
            }
            $5_1 = $1601($0);
           }
           $2_1 = $5_1 + -48 | 0;
           if ($1_1 >>> 0 < 429496729 ? $2_1 >>> 0 <= 9 : 0) {
            continue
           }
           break;
          };
          $7 = $1_1;
         }
         if ($2_1 >>> 0 > 9) {
          break label$6
         }
         $6 = __wasm_i64_mul($7, 0, 10, 0);
         $1_1 = i64toi32_i32$HIGH_BITS;
         while (1) {
          $8 = $1_1;
          $7 = $2_1 + $6 | 0;
          if ($7 >>> 0 < $2_1 >>> 0) {
           $8 = $8 + 1 | 0
          }
          $10_1 = ($8 | 0) == 429496729 & $7 >>> 0 >= 2576980378 | $8 >>> 0 > 429496729;
          $1_1 = HEAP32[$0 + 4 >> 2];
          label$28 : {
           if ($1_1 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
            HEAP32[$0 + 4 >> 2] = $1_1 + 1;
            $5_1 = HEAPU8[$1_1 | 0];
            break label$28;
           }
           $5_1 = $1601($0);
          }
          $2_1 = $5_1 + -48 | 0;
          if ($10_1 | $2_1 >>> 0 > 9) {
           break label$6
          }
          $6 = __wasm_i64_mul($7, $8, 10, 0);
          $1_1 = i64toi32_i32$HIGH_BITS;
          if (($1_1 | 0) == -1 & $6 >>> 0 <= ($2_1 ^ -1) >>> 0 | $1_1 >>> 0 < 4294967295) {
           continue
          }
          break;
         };
         $1_1 = 10;
         break label$4;
        }
        HEAP32[4914] = 28;
        $3_1 = 0;
        $4_1 = 0;
        break label$1;
       }
       $1_1 = 10;
       if ($2_1 >>> 0 <= 9) {
        break label$4
       }
       break label$3;
      }
      if ($1_1 + -1 & $1_1) {
       $2_1 = HEAPU8[$5_1 + 5953 | 0];
       if ($1_1 >>> 0 > $2_1 >>> 0) {
        while (1) {
         $7 = Math_imul($1_1, $7) + $2_1 | 0;
         $9_1 = $7 >>> 0 <= 119304646;
         $10_1 = $1_1;
         $2_1 = HEAP32[$0 + 4 >> 2];
         label$33 : {
          if ($2_1 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
           HEAP32[$0 + 4 >> 2] = $2_1 + 1;
           $5_1 = HEAPU8[$2_1 | 0];
           break label$33;
          }
          $5_1 = $1601($0);
         }
         $2_1 = HEAPU8[$5_1 + 5953 | 0];
         if ($10_1 >>> 0 > $2_1 >>> 0 ? $9_1 : 0) {
          continue
         }
         break;
        }
       }
       if ($1_1 >>> 0 <= $2_1 >>> 0) {
        break label$4
       }
       $6 = $1_1;
       while (1) {
        $10_1 = __wasm_i64_mul($7, $8, $6, 0);
        $9_1 = i64toi32_i32$HIGH_BITS;
        $2_1 = $2_1 & 255;
        if (($9_1 | 0) == -1 & $10_1 >>> 0 > ($2_1 ^ -1) >>> 0 | $9_1 >>> 0 > 4294967295) {
         break label$4
        }
        $8 = $9_1;
        $7 = $2_1 + $10_1 | 0;
        if ($7 >>> 0 < $2_1 >>> 0) {
         $8 = $8 + 1 | 0
        }
        $10_1 = $1_1;
        $2_1 = HEAP32[$0 + 4 >> 2];
        label$36 : {
         if ($2_1 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
          HEAP32[$0 + 4 >> 2] = $2_1 + 1;
          $5_1 = HEAPU8[$2_1 | 0];
          break label$36;
         }
         $5_1 = $1601($0);
        }
        $2_1 = HEAPU8[$5_1 + 5953 | 0];
        if ($10_1 >>> 0 <= $2_1 >>> 0) {
         break label$4
        }
        $1634($12_1, $6, 0, $7, $8);
        if (!(HEAP32[$12_1 + 8 >> 2] | HEAP32[$12_1 + 12 >> 2])) {
         continue
        }
        break;
       };
       break label$4;
      }
      $14 = HEAP8[(Math_imul($1_1, 23) >>> 5 & 7) + 6209 | 0];
      $10_1 = $14;
      $2_1 = $10_1;
      $6 = $2_1 & 31;
      if (32 <= ($2_1 & 63) >>> 0) {
       $2_1 = 0;
       $13_1 = -1 >>> $6 | 0;
      } else {
       $2_1 = -1 >>> $6 | 0;
       $13_1 = (1 << $6) - 1 << 32 - $6 | -1 >>> $6;
      }
      $15 = $13_1;
      $6 = $2_1;
      $9_1 = $2_1;
      $2_1 = HEAPU8[$5_1 + 5953 | 0];
      if ($1_1 >>> 0 > $2_1 >>> 0) {
       while (1) {
        $7 = $7 << $14 | $2_1;
        $16_1 = $7 >>> 0 <= 134217727;
        $17 = $1_1;
        $2_1 = HEAP32[$0 + 4 >> 2];
        label$41 : {
         if ($2_1 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
          HEAP32[$0 + 4 >> 2] = $2_1 + 1;
          $5_1 = HEAPU8[$2_1 | 0];
          break label$41;
         }
         $5_1 = $1601($0);
        }
        $2_1 = HEAPU8[$5_1 + 5953 | 0];
        if ($17 >>> 0 > $2_1 >>> 0 ? $16_1 : 0) {
         continue
        }
        break;
       }
      }
      if (!$9_1 & $15 >>> 0 < $7 >>> 0 | $9_1 >>> 0 < 0 | $1_1 >>> 0 <= $2_1 >>> 0) {
       break label$4
      }
      while (1) {
       $9_1 = $10_1 & 31;
       if (32 <= ($10_1 & 63) >>> 0) {
        $8 = $7 << $9_1;
        $5_1 = 0;
       } else {
        $8 = (1 << $9_1) - 1 & $7 >>> 32 - $9_1 | $8 << $9_1;
        $5_1 = $7 << $9_1;
       }
       $7 = $5_1 | $2_1 & 255;
       $2_1 = HEAP32[$0 + 4 >> 2];
       label$44 : {
        if ($2_1 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
         HEAP32[$0 + 4 >> 2] = $2_1 + 1;
         $5_1 = HEAPU8[$2_1 | 0];
         break label$44;
        }
        $5_1 = $1601($0);
       }
       if (($6 | 0) == ($8 | 0) & $7 >>> 0 > $13_1 >>> 0 | $8 >>> 0 > $6 >>> 0) {
        break label$4
       }
       $2_1 = HEAPU8[$5_1 + 5953 | 0];
       if ($1_1 >>> 0 > $2_1 >>> 0) {
        continue
       }
       break;
      };
     }
     if ($1_1 >>> 0 <= HEAPU8[$5_1 + 5953 | 0]) {
      break label$3
     }
     while (1) {
      $5_1 = $1_1;
      $2_1 = HEAP32[$0 + 4 >> 2];
      label$47 : {
       if ($2_1 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
        HEAP32[$0 + 4 >> 2] = $2_1 + 1;
        $2_1 = HEAPU8[$2_1 | 0];
        break label$47;
       }
       $2_1 = $1601($0);
      }
      if ($5_1 >>> 0 > HEAPU8[$2_1 + 5953 | 0]) {
       continue
      }
      break;
     };
     HEAP32[4914] = 68;
     $11_1 = $3_1 & 1 ? 0 : $11_1;
     $7 = $3_1;
     $8 = $4_1;
    }
    if (HEAP32[$0 + 104 >> 2]) {
     HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + -1
    }
    label$50 : {
     if (($4_1 | 0) == ($8 | 0) & $7 >>> 0 < $3_1 >>> 0 | $8 >>> 0 < $4_1 >>> 0) {
      break label$50
     }
     if (!($11_1 | $3_1 & 1)) {
      HEAP32[4914] = 68;
      $4_1 = $4_1 + -1 | 0;
      $3_1 = $3_1 + -1 | 0;
      if ($3_1 >>> 0 < 4294967295) {
       $4_1 = $4_1 + 1 | 0
      }
      break label$1;
     }
     if (($4_1 | 0) == ($8 | 0) & $7 >>> 0 <= $3_1 >>> 0 | $8 >>> 0 < $4_1 >>> 0) {
      break label$50
     }
     HEAP32[4914] = 68;
     break label$1;
    }
    $0 = $7 ^ $11_1;
    $3_1 = $0 - $11_1 | 0;
    $1_1 = $11_1 >> 31;
    $4_1 = ($1_1 ^ $8) - ($1_1 + ($0 >>> 0 < $11_1 >>> 0) | 0) | 0;
    break label$1;
   }
   $3_1 = 0;
   $4_1 = 0;
   $1600($0, 0, 0);
  }
  global$0 = $12_1 + 16 | 0;
  i64toi32_i32$HIGH_BITS = $4_1;
  return $3_1;
 }
 
 function $1780($0, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = 0, $6 = 0, $7 = 0, $8 = 0, $9_1 = 0;
  $7 = global$0 - 16 | 0;
  global$0 = $7;
  $5_1 = $3_1 ? $3_1 : 22884;
  $3_1 = HEAP32[$5_1 >> 2];
  label$1 : {
   label$2 : {
    label$3 : {
     if (!$1_1) {
      if ($3_1) {
       break label$3
      }
      break label$1;
     }
     $4_1 = -2;
     if (!$2_1) {
      break label$1
     }
     $8 = $0 ? $0 : $7 + 12 | 0;
     label$5 : {
      if ($3_1) {
       $0 = $2_1;
       break label$5;
      }
      $0 = HEAPU8[$1_1 | 0];
      $3_1 = $0 << 24 >> 24;
      if (($3_1 | 0) >= 0) {
       HEAP32[$8 >> 2] = $0;
       $4_1 = ($3_1 | 0) != 0;
       break label$1;
      }
      $0 = HEAP8[$1_1 | 0];
      if (!HEAP32[HEAP32[4694] >> 2]) {
       HEAP32[$8 >> 2] = $0 & 57343;
       $4_1 = 1;
       break label$1;
      }
      $0 = ($0 & 255) + -194 | 0;
      if ($0 >>> 0 > 50) {
       break label$3
      }
      $3_1 = HEAP32[($0 << 2) + 6224 >> 2];
      $0 = $2_1 + -1 | 0;
      if (!$0) {
       break label$2
      }
      $1_1 = $1_1 + 1 | 0;
     }
     $6 = HEAPU8[$1_1 | 0];
     $9_1 = $6 >>> 3 | 0;
     if (($9_1 + -16 | ($3_1 >> 26) + $9_1) >>> 0 > 7) {
      break label$3
     }
     while (1) {
      $0 = $0 + -1 | 0;
      $3_1 = $6 + -128 | $3_1 << 6;
      if (($3_1 | 0) >= 0) {
       HEAP32[$5_1 >> 2] = 0;
       HEAP32[$8 >> 2] = $3_1;
       $4_1 = $2_1 - $0 | 0;
       break label$1;
      }
      if (!$0) {
       break label$2
      }
      $1_1 = $1_1 + 1 | 0;
      $6 = HEAPU8[$1_1 | 0];
      if (($6 & 192) == 128) {
       continue
      }
      break;
     };
    }
    HEAP32[$5_1 >> 2] = 0;
    HEAP32[4914] = 25;
    $4_1 = -1;
    break label$1;
   }
   HEAP32[$5_1 >> 2] = $3_1;
  }
  global$0 = $7 + 16 | 0;
  return $4_1;
 }
 
 function $1783($0, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6 = 0, $7 = 0, $8 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14 = 0, $15 = 0, $16_1 = 0, $17 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0), wasm2js_f64$0 = 0.0;
  $7 = global$0 - 304 | 0;
  global$0 = $7;
  $4_1 = HEAPU8[$1_1 | 0];
  label$2 : {
   if (!$4_1) {
    break label$2
   }
   $9_1 = $0 + 4 | 0;
   label$3 : {
    label$4 : {
     label$5 : {
      while (1) {
       label$7 : {
        label$8 : {
         if ($1572($4_1 & 255)) {
          while (1) {
           $4_1 = $1_1;
           $1_1 = $1_1 + 1 | 0;
           if ($1572(HEAPU8[$4_1 + 1 | 0])) {
            continue
           }
           break;
          };
          $1600($0, 0, 0);
          while (1) {
           $1_1 = HEAP32[$0 + 4 >> 2];
           label$12 : {
            if ($1_1 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
             HEAP32[$9_1 >> 2] = $1_1 + 1;
             $1_1 = HEAPU8[$1_1 | 0];
             break label$12;
            }
            $1_1 = $1601($0);
           }
           if ($1572($1_1)) {
            continue
           }
           break;
          };
          label$14 : {
           if (!HEAP32[$0 + 104 >> 2]) {
            $1_1 = HEAP32[$9_1 >> 2];
            break label$14;
           }
           $1_1 = HEAP32[$9_1 >> 2] + -1 | 0;
           HEAP32[$9_1 >> 2] = $1_1;
          }
          $1_1 = $1_1 - HEAP32[$0 + 8 >> 2] | 0;
          $3_1 = $1_1;
          $8 = $3_1 >> 31;
          $12_1 = $12_1 + HEAP32[$0 + 124 >> 2] | 0;
          $1_1 = $13_1 + HEAP32[$0 + 120 >> 2] | 0;
          if ($1_1 >>> 0 < $13_1 >>> 0) {
           $12_1 = $12_1 + 1 | 0
          }
          $13_1 = $1_1 + $3_1 | 0;
          $3_1 = $8 + $12_1 | 0;
          $12_1 = $13_1 >>> 0 < $1_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
          break label$8;
         }
         label$16 : {
          label$17 : {
           label$18 : {
            $4_1 = HEAPU8[$1_1 | 0];
            if (($4_1 | 0) == 37) {
             $3_1 = HEAPU8[$1_1 + 1 | 0];
             if (($3_1 | 0) == 42) {
              break label$18
             }
             if (($3_1 | 0) != 37) {
              break label$17
             }
            }
            $1600($0, 0, 0);
            $4_1 = (($4_1 | 0) == 37) + $1_1 | 0;
            $1_1 = HEAP32[$0 + 4 >> 2];
            label$20 : {
             if ($1_1 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
              HEAP32[$9_1 >> 2] = $1_1 + 1;
              $1_1 = HEAPU8[$1_1 | 0];
              break label$20;
             }
             $1_1 = $1601($0);
            }
            if (($1_1 | 0) != HEAPU8[$4_1 | 0]) {
             if (HEAP32[$0 + 104 >> 2]) {
              HEAP32[$9_1 >> 2] = HEAP32[$9_1 >> 2] + -1
             }
             $16_1 = 0;
             if (($1_1 | 0) >= 0) {
              break label$2
             }
             break label$4;
            }
            $13_1 = $13_1 + 1 | 0;
            if ($13_1 >>> 0 < 1) {
             $12_1 = $12_1 + 1 | 0
            }
            break label$8;
           }
           $8 = 0;
           $4_1 = $1_1 + 2 | 0;
           break label$16;
          }
          if (!(!$1596($3_1) | HEAPU8[$1_1 + 2 | 0] != 36)) {
           $8 = $1784($2_1, HEAPU8[$1_1 + 1 | 0] + -48 | 0);
           $4_1 = $1_1 + 3 | 0;
           break label$16;
          }
          $8 = HEAP32[$2_1 >> 2];
          $2_1 = $2_1 + 4 | 0;
          $4_1 = $1_1 + 1 | 0;
         }
         $16_1 = 0;
         $1_1 = 0;
         if ($1596(HEAPU8[$4_1 | 0])) {
          while (1) {
           $1_1 = (HEAPU8[$4_1 | 0] + Math_imul($1_1, 10) | 0) + -48 | 0;
           $3_1 = HEAPU8[$4_1 + 1 | 0];
           $4_1 = $4_1 + 1 | 0;
           if ($1596($3_1)) {
            continue
           }
           break;
          }
         }
         $5_1 = HEAPU8[$4_1 | 0];
         $3_1 = $4_1;
         label$27 : {
          if (($5_1 | 0) != 109) {
           break label$27
          }
          $11_1 = 0;
          $16_1 = ($8 | 0) != 0;
          $5_1 = HEAPU8[$4_1 + 1 | 0];
          $14 = 0;
          $3_1 = $4_1 + 1 | 0;
         }
         $4_1 = $3_1 + 1 | 0;
         $6 = 3;
         label$28 : {
          label$29 : {
           switch ($5_1 + -65 | 0) {
           case 39:
            $10_1 = $3_1 + 2 | 0;
            $3_1 = HEAPU8[$3_1 + 1 | 0] == 104;
            $4_1 = $3_1 ? $10_1 : $4_1;
            $6 = $3_1 ? -2 : -1;
            break label$28;
           case 43:
            $10_1 = $3_1 + 2 | 0;
            $3_1 = HEAPU8[$3_1 + 1 | 0] == 108;
            $4_1 = $3_1 ? $10_1 : $4_1;
            $6 = $3_1 ? 3 : 1;
            break label$28;
           case 51:
           case 57:
            $6 = 1;
            break label$28;
           case 11:
            $6 = 2;
            break label$28;
           case 41:
            break label$28;
           case 0:
           case 2:
           case 4:
           case 5:
           case 6:
           case 18:
           case 23:
           case 26:
           case 32:
           case 34:
           case 35:
           case 36:
           case 37:
           case 38:
           case 40:
           case 45:
           case 46:
           case 47:
           case 50:
           case 52:
           case 55:
            break label$29;
           default:
            break label$4;
           };
          }
          $6 = 0;
          $4_1 = $3_1;
         }
         $3_1 = HEAPU8[$4_1 | 0];
         $5_1 = ($3_1 & 47) == 3;
         $17 = $5_1 ? 1 : $6;
         $15 = $5_1 ? $3_1 | 32 : $3_1;
         label$34 : {
          if (($15 | 0) == 91) {
           break label$34
          }
          label$35 : {
           if (($15 | 0) != 110) {
            if (($15 | 0) != 99) {
             break label$35
            }
            $1_1 = ($1_1 | 0) > 1 ? $1_1 : 1;
            break label$34;
           }
           $1785($8, $17, $13_1, $12_1);
           break label$8;
          }
          $1600($0, 0, 0);
          while (1) {
           $3_1 = HEAP32[$0 + 4 >> 2];
           label$38 : {
            if ($3_1 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
             HEAP32[$9_1 >> 2] = $3_1 + 1;
             $3_1 = HEAPU8[$3_1 | 0];
             break label$38;
            }
            $3_1 = $1601($0);
           }
           if ($1572($3_1)) {
            continue
           }
           break;
          };
          label$40 : {
           if (!HEAP32[$0 + 104 >> 2]) {
            $3_1 = HEAP32[$9_1 >> 2];
            break label$40;
           }
           $3_1 = HEAP32[$9_1 >> 2] + -1 | 0;
           HEAP32[$9_1 >> 2] = $3_1;
          }
          $3_1 = $3_1 - HEAP32[$0 + 8 >> 2] | 0;
          $10_1 = $3_1;
          $19_1 = $3_1 >> 31;
          $5_1 = $12_1 + HEAP32[$0 + 124 >> 2] | 0;
          $3_1 = $13_1 + HEAP32[$0 + 120 >> 2] | 0;
          if ($3_1 >>> 0 < $13_1 >>> 0) {
           $5_1 = $5_1 + 1 | 0
          }
          $13_1 = $3_1 + $10_1 | 0;
          $5_1 = $5_1 + $19_1 | 0;
          $12_1 = $13_1 >>> 0 < $3_1 >>> 0 ? $5_1 + 1 | 0 : $5_1;
         }
         $19_1 = $1_1;
         $20_1 = $1_1 >> 31;
         $1600($0, $1_1, $20_1);
         $5_1 = HEAP32[$0 + 4 >> 2];
         $3_1 = HEAP32[$0 + 104 >> 2];
         label$42 : {
          if ($5_1 >>> 0 < $3_1 >>> 0) {
           HEAP32[$9_1 >> 2] = $5_1 + 1;
           break label$42;
          }
          if (($1601($0) | 0) < 0) {
           break label$4
          }
          $3_1 = HEAP32[$0 + 104 >> 2];
         }
         if ($3_1) {
          HEAP32[$9_1 >> 2] = HEAP32[$9_1 >> 2] + -1
         }
         $3_1 = 16;
         label$45 : {
          label$46 : {
           label$47 : {
            label$48 : {
             label$49 : {
              label$50 : {
               label$51 : {
                switch ($15 + -88 | 0) {
                default:
                 $1_1 = $15 + -65 | 0;
                 if ($1_1 >>> 0 > 6 | !(1 << $1_1 & 113)) {
                  break label$45
                 }
                case 9:
                case 13:
                case 14:
                case 15:
                 $1605($7, $0, $17, 0);
                 $1_1 = HEAP32[$0 + 4 >> 2] - HEAP32[$0 + 8 >> 2] | 0;
                 $3_1 = $1_1;
                 if (HEAP32[$0 + 120 >> 2] == (0 - $3_1 | 0) & HEAP32[$0 + 124 >> 2] == (0 - (($3_1 >> 31) + (0 < $3_1 >>> 0) | 0) | 0)) {
                  break label$3
                 }
                 if (!$8) {
                  break label$45
                 }
                 $1_1 = HEAP32[$7 + 8 >> 2];
                 $3_1 = HEAP32[$7 + 12 >> 2];
                 $5_1 = HEAP32[$7 >> 2];
                 $10_1 = HEAP32[$7 + 4 >> 2];
                 switch ($17 | 0) {
                 case 2:
                  break label$47;
                 case 1:
                  break label$48;
                 case 0:
                  break label$49;
                 default:
                  break label$45;
                 };
                case 3:
                case 11:
                case 27:
                 if (($15 & 239) == 99) {
                  $2592($7 + 32 | 0, -1, 257);
                  HEAP8[$7 + 32 | 0] = 0;
                  if (($15 | 0) != 115) {
                   break label$46
                  }
                  HEAP8[$7 + 65 | 0] = 0;
                  HEAP8[$7 + 46 | 0] = 0;
                  HEAP16[$7 + 42 >> 1] = 0;
                  HEAP16[$7 + 44 >> 1] = 0;
                  break label$46;
                 }
                 $3_1 = HEAPU8[$4_1 + 1 | 0];
                 $5_1 = ($3_1 | 0) == 94;
                 $2592($7 + 32 | 0, $5_1, 257);
                 HEAP8[$7 + 32 | 0] = 0;
                 $10_1 = $5_1 ? $4_1 + 2 | 0 : $4_1 + 1 | 0;
                 label$58 : {
                  label$59 : {
                   label$60 : {
                    $4_1 = HEAPU8[($5_1 ? 2 : 1) + $4_1 | 0];
                    if (($4_1 | 0) != 45) {
                     if (($4_1 | 0) == 93) {
                      break label$60
                     }
                     $6 = ($3_1 | 0) != 94;
                     $4_1 = $10_1;
                     break label$58;
                    }
                    $6 = ($3_1 | 0) != 94;
                    HEAP8[$7 + 78 | 0] = $6;
                    break label$59;
                   }
                   $6 = ($3_1 | 0) != 94;
                   HEAP8[$7 + 126 | 0] = $6;
                  }
                  $4_1 = $10_1 + 1 | 0;
                 }
                 while (1) {
                  $3_1 = HEAPU8[$4_1 | 0];
                  label$63 : {
                   if (($3_1 | 0) != 45) {
                    if (!$3_1) {
                     break label$4
                    }
                    if (($3_1 | 0) != 93) {
                     break label$63
                    }
                    break label$46;
                   }
                   $3_1 = 45;
                   $5_1 = HEAPU8[$4_1 + 1 | 0];
                   if (!$5_1 | ($5_1 | 0) == 93) {
                    break label$63
                   }
                   $10_1 = $4_1 + 1 | 0;
                   $4_1 = HEAPU8[$4_1 + -1 | 0];
                   label$65 : {
                    if ($4_1 >>> 0 >= $5_1 >>> 0) {
                     $3_1 = $5_1;
                     break label$65;
                    }
                    while (1) {
                     $4_1 = $4_1 + 1 | 0;
                     HEAP8[$4_1 + ($7 + 32 | 0) | 0] = $6;
                     $3_1 = HEAPU8[$10_1 | 0];
                     if ($4_1 >>> 0 < $3_1 >>> 0) {
                      continue
                     }
                     break;
                    };
                   }
                   $4_1 = $10_1;
                  }
                  HEAP8[($3_1 + $7 | 0) + 33 | 0] = $6;
                  $4_1 = $4_1 + 1 | 0;
                  continue;
                 };
                case 23:
                 $3_1 = 8;
                 break label$50;
                case 12:
                case 29:
                 $3_1 = 10;
                 break label$50;
                case 1:
                case 2:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 10:
                case 16:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 25:
                case 26:
                case 28:
                case 30:
                case 31:
                 break label$45;
                case 0:
                case 24:
                case 32:
                 break label$50;
                case 17:
                 break label$51;
                };
               }
               $3_1 = 0;
              }
              $1_1 = $1778($0, $3_1, 0, -1, -1);
              $3_1 = HEAP32[$0 + 4 >> 2] - HEAP32[$0 + 8 >> 2] | 0;
              if (HEAP32[$0 + 120 >> 2] == (0 - $3_1 | 0) & HEAP32[$0 + 124 >> 2] == (0 - (($3_1 >> 31) + (0 < $3_1 >>> 0) | 0) | 0)) {
               break label$3
              }
              if (!(!$8 | ($15 | 0) != 112)) {
               HEAP32[$8 >> 2] = $1_1;
               break label$45;
              }
              $1785($8, $17, $1_1, i64toi32_i32$HIGH_BITS);
              break label$45;
             }
             (wasm2js_i32$0 = $8, wasm2js_f32$0 = $1637($5_1, $10_1, $1_1, $3_1)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
             break label$45;
            }
            (wasm2js_i32$0 = $8, wasm2js_f64$0 = $1636($5_1, $10_1, $1_1, $3_1)), HEAPF64[wasm2js_i32$0 >> 3] = wasm2js_f64$0;
            break label$45;
           }
           HEAP32[$8 >> 2] = $5_1;
           HEAP32[$8 + 4 >> 2] = $10_1;
           HEAP32[$8 + 8 >> 2] = $1_1;
           HEAP32[$8 + 12 >> 2] = $3_1;
           break label$45;
          }
          $5_1 = ($15 | 0) == 99;
          $6 = $5_1 ? $1_1 + 1 | 0 : 31;
          $10_1 = ($17 | 0) != 1;
          label$69 : {
           if (!$10_1) {
            $3_1 = $8;
            if ($16_1) {
             $3_1 = $2582($6 << 2);
             if (!$3_1) {
              break label$5
             }
            }
            HEAP32[$7 + 296 >> 2] = 0;
            HEAP32[$7 + 300 >> 2] = 0;
            $1_1 = 0;
            while (1) {
             $14 = $3_1;
             label$73 : {
              while (1) {
               $3_1 = HEAP32[$0 + 4 >> 2];
               label$75 : {
                if ($3_1 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
                 HEAP32[$9_1 >> 2] = $3_1 + 1;
                 $3_1 = HEAPU8[$3_1 | 0];
                 break label$75;
                }
                $3_1 = $1601($0);
               }
               if (!HEAPU8[($3_1 + $7 | 0) + 33 | 0]) {
                break label$73
               }
               HEAP8[$7 + 27 | 0] = $3_1;
               $3_1 = $1780($7 + 28 | 0, $7 + 27 | 0, 1, $7 + 296 | 0);
               if (($3_1 | 0) == -2) {
                continue
               }
               if (($3_1 | 0) == -1) {
                break label$7
               }
               if ($14) {
                HEAP32[($1_1 << 2) + $14 >> 2] = HEAP32[$7 + 28 >> 2];
                $1_1 = $1_1 + 1 | 0;
               }
               if (!$16_1 | ($1_1 | 0) != ($6 | 0)) {
                continue
               }
               break;
              };
              $6 = $6 << 1 | 1;
              $3_1 = $2584($14, $6 << 2);
              if ($3_1) {
               continue
              }
              break label$7;
             }
             break;
            };
            $3_1 = $7 + 296 | 0;
            $11_1 = 1;
            __inlined_func$1782 : {
             if (!$3_1) {
              break __inlined_func$1782
             }
             $11_1 = !HEAP32[$3_1 >> 2];
            }
            if (!$11_1) {
             break label$7
            }
            $11_1 = 0;
            break label$69;
           }
           if ($16_1) {
            $1_1 = 0;
            $3_1 = $2582($6);
            if (!$3_1) {
             break label$5
            }
            while (1) {
             $11_1 = $3_1;
             while (1) {
              $3_1 = HEAP32[$0 + 4 >> 2];
              label$81 : {
               if ($3_1 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
                HEAP32[$9_1 >> 2] = $3_1 + 1;
                $3_1 = HEAPU8[$3_1 | 0];
                break label$81;
               }
               $3_1 = $1601($0);
              }
              if (!HEAPU8[($3_1 + $7 | 0) + 33 | 0]) {
               $14 = 0;
               break label$69;
              }
              HEAP8[$1_1 + $11_1 | 0] = $3_1;
              $1_1 = $1_1 + 1 | 0;
              if (($6 | 0) != ($1_1 | 0)) {
               continue
              }
              break;
             };
             $14 = 0;
             $6 = $6 << 1 | 1;
             $3_1 = $2584($11_1, $6);
             if ($3_1) {
              continue
             }
             break;
            };
            break label$4;
           }
           $1_1 = 0;
           if ($8) {
            while (1) {
             $3_1 = HEAP32[$0 + 4 >> 2];
             label$86 : {
              if ($3_1 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
               HEAP32[$9_1 >> 2] = $3_1 + 1;
               $3_1 = HEAPU8[$3_1 | 0];
               break label$86;
              }
              $3_1 = $1601($0);
             }
             if (HEAPU8[($3_1 + $7 | 0) + 33 | 0]) {
              HEAP8[$1_1 + $8 | 0] = $3_1;
              $1_1 = $1_1 + 1 | 0;
              continue;
             } else {
              $14 = 0;
              $11_1 = $8;
              break label$69;
             }
            }
           }
           while (1) {
            $1_1 = HEAP32[$0 + 4 >> 2];
            label$91 : {
             if ($1_1 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
              HEAP32[$9_1 >> 2] = $1_1 + 1;
              $1_1 = HEAPU8[$1_1 | 0];
              break label$91;
             }
             $1_1 = $1601($0);
            }
            if (HEAPU8[($1_1 + $7 | 0) + 33 | 0]) {
             continue
            }
            break;
           };
           $11_1 = 0;
           $14 = 0;
           $1_1 = 0;
          }
          label$93 : {
           if (!HEAP32[$0 + 104 >> 2]) {
            $3_1 = HEAP32[$9_1 >> 2];
            break label$93;
           }
           $3_1 = HEAP32[$9_1 >> 2] + -1 | 0;
           HEAP32[$9_1 >> 2] = $3_1;
          }
          $6 = $3_1 - HEAP32[$0 + 8 >> 2] | 0;
          $15 = $6;
          $3_1 = $6 + HEAP32[$0 + 120 >> 2] | 0;
          $6 = HEAP32[$0 + 124 >> 2] + ($6 >> 31) | 0;
          $6 = $3_1 >>> 0 < $15 >>> 0 ? $6 + 1 | 0 : $6;
          if (!($3_1 | $6) | ($5_1 ? ($3_1 | 0) != ($19_1 | 0) | ($6 | 0) != ($20_1 | 0) : 0)) {
           break label$3
          }
          label$95 : {
           if (!$16_1) {
            break label$95
           }
           if (!$10_1) {
            HEAP32[$8 >> 2] = $14;
            break label$95;
           }
           HEAP32[$8 >> 2] = $11_1;
          }
          if ($5_1) {
           break label$45
          }
          if ($14) {
           HEAP32[($1_1 << 2) + $14 >> 2] = 0
          }
          if (!$11_1) {
           $11_1 = 0;
           break label$45;
          }
          HEAP8[$1_1 + $11_1 | 0] = 0;
         }
         $1_1 = HEAP32[$0 + 4 >> 2] - HEAP32[$0 + 8 >> 2] | 0;
         $3_1 = $1_1;
         $5_1 = $3_1 >> 31;
         $12_1 = $12_1 + HEAP32[$0 + 124 >> 2] | 0;
         $1_1 = $13_1 + HEAP32[$0 + 120 >> 2] | 0;
         if ($1_1 >>> 0 < $13_1 >>> 0) {
          $12_1 = $12_1 + 1 | 0
         }
         $13_1 = $1_1 + $3_1 | 0;
         $3_1 = $5_1 + $12_1 | 0;
         $12_1 = $13_1 >>> 0 < $1_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
         $18_1 = (($8 | 0) != 0) + $18_1 | 0;
        }
        $1_1 = $4_1 + 1 | 0;
        $4_1 = HEAPU8[$4_1 + 1 | 0];
        if ($4_1) {
         continue
        }
        break label$2;
       }
       break;
      };
      $11_1 = 0;
      break label$4;
     }
     $11_1 = 0;
     $14 = 0;
    }
    $18_1 = $18_1 ? $18_1 : -1;
   }
   if (!$16_1) {
    break label$2
   }
   $2583($11_1);
   $2583($14);
  }
  global$0 = $7 + 304 | 0;
  return $18_1;
 }
 
 function $1784($0, $1_1) {
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  HEAP32[$2_1 + 12 >> 2] = $0;
  $0 = (($1_1 << 2) - ((($1_1 | 0) != 0) << 2) | 0) + $0 | 0;
  HEAP32[$2_1 + 8 >> 2] = $0 + 4;
  return HEAP32[$0 >> 2];
 }
 
 function $1785($0, $1_1, $2_1, $3_1) {
  label$1 : {
   if (!$0) {
    break label$1
   }
   label$2 : {
    switch ($1_1 + 2 | 0) {
    case 0:
     HEAP8[$0 | 0] = $2_1;
     return;
    case 1:
     HEAP16[$0 >> 1] = $2_1;
     return;
    case 2:
    case 3:
     HEAP32[$0 >> 2] = $2_1;
     return;
    case 5:
     break label$2;
    default:
     break label$1;
    };
   }
   HEAP32[$0 >> 2] = $2_1;
   HEAP32[$0 + 4 >> 2] = $3_1;
  }
 }
 
 function $1786($0, $1_1) {
  var $2_1 = 0;
  $2_1 = ($1_1 | 0) != 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if (!$1_1 | !($0 & 3)) {
      break label$3
     }
     while (1) {
      if (!HEAPU8[$0 | 0]) {
       break label$2
      }
      $0 = $0 + 1 | 0;
      $1_1 = $1_1 + -1 | 0;
      $2_1 = ($1_1 | 0) != 0;
      if (!$1_1) {
       break label$3
      }
      if ($0 & 3) {
       continue
      }
      break;
     };
    }
    if (!$2_1) {
     break label$1
    }
   }
   label$5 : {
    if (!HEAPU8[$0 | 0] | $1_1 >>> 0 < 4) {
     break label$5
    }
    while (1) {
     $2_1 = HEAP32[$0 >> 2];
     if (($2_1 ^ -1) & $2_1 + -16843009 & -2139062144) {
      break label$5
     }
     $0 = $0 + 4 | 0;
     $1_1 = $1_1 + -4 | 0;
     if ($1_1 >>> 0 > 3) {
      continue
     }
     break;
    };
   }
   if (!$1_1) {
    break label$1
   }
   while (1) {
    if (!HEAPU8[$0 | 0]) {
     return $0
    }
    $0 = $0 + 1 | 0;
    $1_1 = $1_1 + -1 | 0;
    if ($1_1) {
     continue
    }
    break;
   };
  }
  return 0;
 }
 
 function $1787($0, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $4_1 = HEAP32[$0 + 84 >> 2];
  $3_1 = $2_1 + 256 | 0;
  $5_1 = $1786($4_1, $3_1);
  $3_1 = $5_1 ? $5_1 - $4_1 | 0 : $3_1;
  $2_1 = $3_1 >>> 0 < $2_1 >>> 0 ? $3_1 : $2_1;
  $2591($1_1, $4_1, $2_1);
  $1_1 = $4_1 + $3_1 | 0;
  HEAP32[$0 + 84 >> 2] = $1_1;
  HEAP32[$0 + 8 >> 2] = $1_1;
  HEAP32[$0 + 4 >> 2] = $2_1 + $4_1;
  return $2_1;
 }
 
 function $1788($0, $1_1, $2_1) {
  var $3_1 = 0;
  $3_1 = global$0 - 144 | 0;
  global$0 = $3_1;
  $3_1 = $2592($3_1, 0, 144);
  HEAP32[$3_1 + 76 >> 2] = -1;
  HEAP32[$3_1 + 44 >> 2] = $0;
  HEAP32[$3_1 + 32 >> 2] = 135;
  HEAP32[$3_1 + 84 >> 2] = $0;
  $0 = $1783($3_1, $1_1, $2_1);
  global$0 = $3_1 + 144 | 0;
  return $0;
 }
 
 function $1789($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1787($0, $1_1, $2_1) | 0;
 }
 
 function $1790($0, $1_1) {
  var $2_1 = 0, $3_1 = 0;
  $2_1 = HEAPU8[$0 | 0];
  $3_1 = HEAPU8[$1_1 | 0];
  label$1 : {
   if (!$2_1 | ($2_1 | 0) != ($3_1 | 0)) {
    break label$1
   }
   while (1) {
    $3_1 = HEAPU8[$1_1 + 1 | 0];
    $2_1 = HEAPU8[$0 + 1 | 0];
    if (!$2_1) {
     break label$1
    }
    $1_1 = $1_1 + 1 | 0;
    $0 = $0 + 1 | 0;
    if (($2_1 | 0) == ($3_1 | 0)) {
     continue
    }
    break;
   };
  }
  return $2_1 - $3_1 | 0;
 }
 
 function $1791() {
  var $0 = 0, $1_1 = 0, $2_1 = 0;
  $0 = global$0 - 16 | 0;
  global$0 = $0;
  label$1 : {
   if (fimport$18($0 + 12 | 0, $0 + 8 | 0)) {
    break label$1
   }
   $1_1 = $2582((HEAP32[$0 + 12 >> 2] << 2) + 4 | 0);
   HEAP32[5722] = $1_1;
   if (!$1_1) {
    break label$1
   }
   label$2 : {
    $1_1 = $2582(HEAP32[$0 + 8 >> 2]);
    if ($1_1) {
     $2_1 = HEAP32[5722];
     if ($2_1) {
      break label$2
     }
    }
    HEAP32[5722] = 0;
    break label$1;
   }
   HEAP32[(HEAP32[$0 + 12 >> 2] << 2) + $2_1 >> 2] = 0;
   if (!fimport$19(HEAP32[5722], $1_1 | 0)) {
    break label$1
   }
   HEAP32[5722] = 0;
  }
  global$0 = $0 + 16 | 0;
 }
 
 function $1792($0, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  if (!$2_1) {
   return 0
  }
  $3_1 = HEAPU8[$0 | 0];
  label$2 : {
   if (!$3_1) {
    break label$2
   }
   while (1) {
    label$4 : {
     $4_1 = HEAPU8[$1_1 | 0];
     if (($4_1 | 0) != ($3_1 | 0)) {
      break label$4
     }
     $2_1 = $2_1 + -1 | 0;
     if (!$2_1 | !$4_1) {
      break label$4
     }
     $1_1 = $1_1 + 1 | 0;
     $3_1 = HEAPU8[$0 + 1 | 0];
     $0 = $0 + 1 | 0;
     if ($3_1) {
      continue
     }
     break label$2;
    }
    break;
   };
   $5_1 = $3_1;
  }
  return ($5_1 & 255) - HEAPU8[$1_1 | 0] | 0;
 }
 
 function $1793($0) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $4_1 = $2597($0);
  label$1 : {
   label$2 : {
    if (!HEAP32[5722] | !HEAPU8[$0 | 0]) {
     break label$2
    }
    if ($1617($0, 61)) {
     break label$2
    }
    $1_1 = HEAP32[HEAP32[5722] >> 2];
    if (!$1_1) {
     break label$2
    }
    while (1) {
     label$4 : {
      $3_1 = $1792($0, $1_1, $4_1);
      $1_1 = HEAP32[5722];
      if (!$3_1) {
       $3_1 = HEAP32[$1_1 + ($2_1 << 2) >> 2];
       $5_1 = $3_1 + $4_1 | 0;
       if (HEAPU8[$5_1 | 0] == 61) {
        break label$4
       }
      }
      $2_1 = $2_1 + 1 | 0;
      $1_1 = HEAP32[$1_1 + ($2_1 << 2) >> 2];
      if ($1_1) {
       continue
      }
      break label$1;
     }
     break;
    };
    if (!$3_1) {
     break label$1
    }
    $2_1 = $5_1 + 1 | 0;
   }
   return $2_1;
  }
  return 0;
 }
 
 function $1795($0, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6 = 0, $7 = 0, $8 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0;
  $4_1 = global$0 - 272 | 0;
  global$0 = $4_1;
  label$1 : {
   if (HEAPU8[$1_1 | 0]) {
    break label$1
   }
   $1_1 = $1793(6528);
   if (HEAPU8[$1_1 | 0] ? $1_1 : 0) {
    break label$1
   }
   $1_1 = $1793(Math_imul($0, 12) + 6544 | 0);
   if (HEAPU8[$1_1 | 0] ? $1_1 : 0) {
    break label$1
   }
   $1_1 = $1793(6616);
   if (HEAPU8[$1_1 | 0] ? $1_1 : 0) {
    break label$1
   }
   $1_1 = 6621;
  }
  label$5 : {
   while (1) {
    $3_1 = HEAPU8[$1_1 + $2_1 | 0];
    if (!(!$3_1 | ($3_1 | 0) == 47)) {
     $5_1 = 15;
     $2_1 = $2_1 + 1 | 0;
     if (($2_1 | 0) != 15) {
      continue
     }
     break label$5;
    }
    break;
   };
   $5_1 = $2_1;
  }
  $3_1 = 6621;
  label$8 : {
   label$9 : {
    $2_1 = HEAPU8[$1_1 | 0];
    label$10 : {
     label$11 : {
      if (!(HEAPU8[$1_1 + $5_1 | 0] | ($2_1 | 0) == 46)) {
       $3_1 = $1_1;
       if (($2_1 | 0) != 67) {
        break label$11
       }
      }
      if (!HEAPU8[$3_1 + 1 | 0]) {
       break label$10
      }
     }
     if (!$1790($3_1, 6621)) {
      break label$10
     }
     if ($1790($3_1, 6629)) {
      break label$9
     }
    }
    if (!$0) {
     $2_1 = 6452;
     if (HEAPU8[$3_1 + 1 | 0] == 46) {
      break label$8
     }
    }
    $2_1 = 0;
    break label$8;
   }
   $2_1 = HEAP32[5725];
   if ($2_1) {
    while (1) {
     if (!$1790($3_1, $2_1 + 8 | 0)) {
      break label$8
     }
     $2_1 = HEAP32[$2_1 + 24 >> 2];
     if ($2_1) {
      continue
     }
     break;
    }
   }
   $2_1 = HEAP32[5725];
   if ($2_1) {
    while (1) {
     if (!$1790($3_1, $2_1 + 8 | 0)) {
      break label$8
     }
     $2_1 = HEAP32[$2_1 + 24 >> 2];
     if ($2_1) {
      continue
     }
     break;
    }
   }
   $1_1 = 0;
   label$19 : {
    label$20 : {
     label$21 : {
      if (HEAP32[4917]) {
       break label$21
      }
      $2_1 = $1793(6635);
      if (!$2_1 | !HEAPU8[$2_1 | 0]) {
       break label$21
      }
      $9_1 = $5_1 + 1 | 0;
      $10_1 = 254 - $5_1 | 0;
      while (1) {
       $7 = $1618($2_1, 58);
       $8 = HEAPU8[$7 | 0];
       $11_1 = $7;
       $6 = ($7 - $2_1 | 0) - (($8 | 0) != 0) | 0;
       if ($6 >>> 0 < $10_1 >>> 0) {
        $2591($4_1 + 16 | 0, $2_1, $6);
        $2_1 = ($4_1 + 16 | 0) + $6 | 0;
        HEAP8[$2_1 | 0] = 47;
        $2591($2_1 + 1 | 0, $3_1, $5_1);
        HEAP8[$4_1 + 16 + ($6 + $9_1) | 0] = 0;
        $6 = fimport$20($4_1 + 16 | 0, $4_1 + 12 | 0) | 0;
        if ($6) {
         $2_1 = $2582(28);
         if ($2_1) {
          break label$20
         }
         $1578(fimport$21($6 | 0, HEAP32[$4_1 + 12 >> 2]) | 0);
         break label$21;
        }
        $8 = HEAPU8[$7 | 0];
       }
       $2_1 = $11_1 + (($8 | 0) != 0) | 0;
       if (HEAPU8[$2_1 | 0]) {
        continue
       }
       break;
      };
     }
     $2_1 = $2582(28);
     if (!$2_1) {
      break label$19
     }
     $1_1 = HEAP32[1614];
     HEAP32[$2_1 >> 2] = HEAP32[1613];
     HEAP32[$2_1 + 4 >> 2] = $1_1;
     $1_1 = $2_1 + 8 | 0;
     $2591($1_1, $3_1, $5_1);
     HEAP8[$1_1 + $5_1 | 0] = 0;
     HEAP32[$2_1 + 24 >> 2] = HEAP32[5725];
     HEAP32[5725] = $2_1;
     $1_1 = $2_1;
     break label$19;
    }
    HEAP32[$2_1 >> 2] = $6;
    HEAP32[$2_1 + 4 >> 2] = HEAP32[$4_1 + 12 >> 2];
    $1_1 = $2_1 + 8 | 0;
    $2591($1_1, $3_1, $5_1);
    HEAP8[$1_1 + $5_1 | 0] = 0;
    HEAP32[$2_1 + 24 >> 2] = HEAP32[5725];
    HEAP32[5725] = $2_1;
    $1_1 = $2_1;
   }
   $2_1 = $0 | $1_1 ? $1_1 : 6452;
  }
  global$0 = $4_1 + 272 | 0;
  return $2_1;
 }
 
 function $1796($0) {
  return ($0 | 0) != 0 & ($0 | 0) != 6480 & ($0 | 0) != 6504;
 }
 
 function $1797() {
  var $0 = 0, $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    if ($1796(0)) {
     while (1) {
      if (2147483647 >>> $0 & 1) {
       (wasm2js_i32$0 = $0 << 2, wasm2js_i32$1 = $1795($0, 11493)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1
      }
      $0 = $0 + 1 | 0;
      if (($0 | 0) != 6) {
       continue
      }
      break;
     };
     break label$2;
    }
    while (1) {
     $5_1 = ($2_1 + 8 | 0) + ($0 << 2) | 0;
     $1_1 = 1 << $0 & 2147483647;
     $3_1 = HEAP32[$0 << 2 >> 2];
     label$7 : {
      if (!($1_1 | 1)) {
       break label$7
      }
      $3_1 = $1795($0, $1_1 ? 11493 : 6648);
     }
     $1_1 = $3_1;
     HEAP32[$5_1 >> 2] = $1_1;
     $4_1 = (($1_1 | 0) != 0) + $4_1 | 0;
     $0 = $0 + 1 | 0;
     if (($0 | 0) != 6) {
      continue
     }
     break;
    };
    $0 = 6480;
    label$9 : {
     switch ($4_1 | 0) {
     case 0:
      break label$1;
     case 1:
      break label$9;
     default:
      break label$2;
     };
    }
    if (HEAP32[$2_1 + 8 >> 2] != 6452) {
     break label$2
    }
    $0 = 6504;
    break label$1;
   }
   $0 = 0;
  }
  global$0 = $2_1 + 32 | 0;
  return $0;
 }
 
 function $1798($0, $1_1) {
  label$1 : {
   if ($0) {
    if ($1_1 >>> 0 <= 127) {
     break label$1
    }
    label$3 : {
     if (!HEAP32[HEAP32[4694] >> 2]) {
      if (($1_1 & -128) == 57216) {
       break label$1
      }
      break label$3;
     }
     if ($1_1 >>> 0 <= 2047) {
      HEAP8[$0 + 1 | 0] = $1_1 & 63 | 128;
      HEAP8[$0 | 0] = $1_1 >>> 6 | 192;
      return 2;
     }
     if (!(($1_1 & -8192) != 57344 ? $1_1 >>> 0 >= 55296 : 0)) {
      HEAP8[$0 + 2 | 0] = $1_1 & 63 | 128;
      HEAP8[$0 | 0] = $1_1 >>> 12 | 224;
      HEAP8[$0 + 1 | 0] = $1_1 >>> 6 & 63 | 128;
      return 3;
     }
     if ($1_1 + -65536 >>> 0 <= 1048575) {
      HEAP8[$0 + 3 | 0] = $1_1 & 63 | 128;
      HEAP8[$0 | 0] = $1_1 >>> 18 | 240;
      HEAP8[$0 + 2 | 0] = $1_1 >>> 6 & 63 | 128;
      HEAP8[$0 + 1 | 0] = $1_1 >>> 12 & 63 | 128;
      return 4;
     }
    }
    HEAP32[4914] = 25;
    $0 = -1;
   } else {
    $0 = 1
   }
   return $0;
  }
  HEAP8[$0 | 0] = $1_1;
  return 1;
 }
 
 function $1799($0, $1_1) {
  if (!$0) {
   return 0
  }
  return $1798($0, $1_1);
 }
 
 function $1800($0, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  wasm2js_scratch_store_f64(+$0);
  $2_1 = wasm2js_scratch_load_i32(1) | 0;
  $3_1 = wasm2js_scratch_load_i32(0) | 0;
  $4_1 = $2_1;
  $2_1 = $2_1 >>> 20 & 2047;
  if (($2_1 | 0) != 2047) {
   if (!$2_1) {
    $2_1 = $1_1;
    if ($0 == 0.0) {
     $1_1 = 0
    } else {
     $0 = $1800($0 * 18446744073709551615.0, $1_1);
     $1_1 = HEAP32[$1_1 >> 2] + -64 | 0;
    }
    HEAP32[$2_1 >> 2] = $1_1;
    return $0;
   }
   HEAP32[$1_1 >> 2] = $2_1 + -1022;
   wasm2js_scratch_store_i32(0, $3_1 | 0);
   wasm2js_scratch_store_i32(1, $4_1 & -2146435073 | 1071644672);
   $0 = +wasm2js_scratch_load_f64();
  }
  return $0;
 }
 
 function $1801($0, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6 = 0;
  $3_1 = global$0 - 208 | 0;
  global$0 = $3_1;
  HEAP32[$3_1 + 204 >> 2] = $2_1;
  $2_1 = 0;
  $2592($3_1 + 160 | 0, 0, 40);
  HEAP32[$3_1 + 200 >> 2] = HEAP32[$3_1 + 204 >> 2];
  label$1 : {
   if (($1802(0, $1_1, $3_1 + 200 | 0, $3_1 + 80 | 0, $3_1 + 160 | 0) | 0) < 0) {
    $1_1 = -1;
    break label$1;
   }
   $2_1 = HEAP32[$0 + 76 >> 2] >= 0 ? 1 : $2_1;
   $4_1 = HEAP32[$0 >> 2];
   if (HEAP8[$0 + 74 | 0] <= 0) {
    HEAP32[$0 >> 2] = $4_1 & -33
   }
   $6 = $4_1 & 32;
   label$5 : {
    if (HEAP32[$0 + 48 >> 2]) {
     $5_1 = $1802($0, $1_1, $3_1 + 200 | 0, $3_1 + 80 | 0, $3_1 + 160 | 0);
     break label$5;
    }
    HEAP32[$0 + 48 >> 2] = 80;
    HEAP32[$0 + 16 >> 2] = $3_1 + 80;
    HEAP32[$0 + 28 >> 2] = $3_1;
    HEAP32[$0 + 20 >> 2] = $3_1;
    $4_1 = HEAP32[$0 + 44 >> 2];
    HEAP32[$0 + 44 >> 2] = $3_1;
    $1_1 = $1802($0, $1_1, $3_1 + 200 | 0, $3_1 + 80 | 0, $3_1 + 160 | 0);
    $5_1 = $1_1;
    if (!$4_1) {
     break label$5
    }
    FUNCTION_TABLE[HEAP32[$0 + 36 >> 2]]($0, 0, 0) | 0;
    HEAP32[$0 + 48 >> 2] = 0;
    HEAP32[$0 + 44 >> 2] = $4_1;
    HEAP32[$0 + 28 >> 2] = 0;
    HEAP32[$0 + 16 >> 2] = 0;
    $4_1 = HEAP32[$0 + 20 >> 2];
    HEAP32[$0 + 20 >> 2] = 0;
    $5_1 = $4_1 ? $1_1 : -1;
   }
   $1_1 = $5_1;
   $5_1 = $0;
   $0 = HEAP32[$0 >> 2];
   HEAP32[$5_1 >> 2] = $0 | $6;
   $1_1 = $0 & 32 ? -1 : $1_1;
   if (!$2_1) {
    break label$1
   }
  }
  global$0 = $3_1 + 208 | 0;
  return $1_1;
 }
 
 function $1802($0, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = 0, $6 = 0, $7 = 0, $8 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14 = 0, $15 = 0, $16_1 = 0, $17 = 0, $18_1 = 0, $19_1 = 0;
  $5_1 = global$0 - 80 | 0;
  global$0 = $5_1;
  HEAP32[$5_1 + 76 >> 2] = $1_1;
  $19_1 = $5_1 + 55 | 0;
  $16_1 = $5_1 + 56 | 0;
  $1_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : while (1) {
     label$4 : {
      if (($13_1 | 0) < 0) {
       break label$4
      }
      if (($1_1 | 0) > (2147483647 - $13_1 | 0)) {
       HEAP32[4914] = 61;
       $13_1 = -1;
       break label$4;
      }
      $13_1 = $1_1 + $13_1 | 0;
     }
     label$6 : {
      label$7 : {
       label$8 : {
        $8 = HEAP32[$5_1 + 76 >> 2];
        $1_1 = $8;
        $7 = HEAPU8[$1_1 | 0];
        if ($7) {
         while (1) {
          label$11 : {
           $6 = $7 & 255;
           label$12 : {
            if (!$6) {
             $7 = $1_1;
             break label$12;
            }
            if (($6 | 0) != 37) {
             break label$11
            }
            $7 = $1_1;
            while (1) {
             if (HEAPU8[$1_1 + 1 | 0] != 37) {
              break label$12
             }
             $6 = $1_1 + 2 | 0;
             HEAP32[$5_1 + 76 >> 2] = $6;
             $7 = $7 + 1 | 0;
             $9_1 = HEAPU8[$1_1 + 2 | 0];
             $1_1 = $6;
             if (($9_1 | 0) == 37) {
              continue
             }
             break;
            };
           }
           $1_1 = $7 - $8 | 0;
           if ($0) {
            $1803($0, $8, $1_1)
           }
           if ($1_1) {
            continue label$3
           }
           $14 = -1;
           $6 = $5_1;
           $7 = !$1596(HEAP8[HEAP32[$5_1 + 76 >> 2] + 1 | 0]);
           $1_1 = HEAP32[$5_1 + 76 >> 2];
           if ($7 | HEAPU8[$1_1 + 2 | 0] != 36) {
            $7 = 1
           } else {
            $14 = HEAP8[$1_1 + 1 | 0] + -48 | 0;
            $17 = 1;
            $7 = 3;
           }
           $1_1 = $7 + $1_1 | 0;
           HEAP32[$6 + 76 >> 2] = $1_1;
           $7 = 0;
           $15 = HEAP8[$1_1 | 0];
           $9_1 = $15 + -32 | 0;
           label$17 : {
            if ($9_1 >>> 0 > 31) {
             $6 = $1_1;
             break label$17;
            }
            $6 = $1_1;
            $9_1 = 1 << $9_1;
            if (!($9_1 & 75913)) {
             break label$17
            }
            while (1) {
             $6 = $1_1 + 1 | 0;
             HEAP32[$5_1 + 76 >> 2] = $6;
             $7 = $7 | $9_1;
             $15 = HEAP8[$1_1 + 1 | 0];
             $9_1 = $15 + -32 | 0;
             if ($9_1 >>> 0 > 31) {
              break label$17
             }
             $1_1 = $6;
             $9_1 = 1 << $9_1;
             if ($9_1 & 75913) {
              continue
             }
             break;
            };
           }
           label$20 : {
            if (($15 | 0) == 42) {
             $9_1 = $5_1;
             label$22 : {
              label$23 : {
               if (!$1596(HEAP8[$6 + 1 | 0])) {
                break label$23
               }
               $1_1 = HEAP32[$5_1 + 76 >> 2];
               if (HEAPU8[$1_1 + 2 | 0] != 36) {
                break label$23
               }
               HEAP32[((HEAP8[$1_1 + 1 | 0] << 2) + $4_1 | 0) + -192 >> 2] = 10;
               $12_1 = HEAP32[((HEAP8[$1_1 + 1 | 0] << 3) + $3_1 | 0) + -384 >> 2];
               $17 = 1;
               $1_1 = $1_1 + 3 | 0;
               break label$22;
              }
              if ($17) {
               break label$2
              }
              $17 = 0;
              $12_1 = 0;
              if ($0) {
               $1_1 = HEAP32[$2_1 >> 2];
               HEAP32[$2_1 >> 2] = $1_1 + 4;
               $12_1 = HEAP32[$1_1 >> 2];
              }
              $1_1 = HEAP32[$5_1 + 76 >> 2] + 1 | 0;
             }
             HEAP32[$9_1 + 76 >> 2] = $1_1;
             if (($12_1 | 0) > -1) {
              break label$20
             }
             $12_1 = 0 - $12_1 | 0;
             $7 = $7 | 8192;
             break label$20;
            }
            $12_1 = $1804($5_1 + 76 | 0);
            if (($12_1 | 0) < 0) {
             break label$2
            }
            $1_1 = HEAP32[$5_1 + 76 >> 2];
           }
           $10_1 = -1;
           label$25 : {
            if (HEAPU8[$1_1 | 0] != 46) {
             break label$25
            }
            if (HEAPU8[$1_1 + 1 | 0] == 42) {
             label$27 : {
              if (!$1596(HEAP8[$1_1 + 2 | 0])) {
               break label$27
              }
              $1_1 = HEAP32[$5_1 + 76 >> 2];
              if (HEAPU8[$1_1 + 3 | 0] != 36) {
               break label$27
              }
              HEAP32[((HEAP8[$1_1 + 2 | 0] << 2) + $4_1 | 0) + -192 >> 2] = 10;
              $10_1 = HEAP32[((HEAP8[$1_1 + 2 | 0] << 3) + $3_1 | 0) + -384 >> 2];
              $1_1 = $1_1 + 4 | 0;
              HEAP32[$5_1 + 76 >> 2] = $1_1;
              break label$25;
             }
             if ($17) {
              break label$2
             }
             if ($0) {
              $1_1 = HEAP32[$2_1 >> 2];
              HEAP32[$2_1 >> 2] = $1_1 + 4;
              $10_1 = HEAP32[$1_1 >> 2];
             } else {
              $10_1 = 0
             }
             $1_1 = HEAP32[$5_1 + 76 >> 2] + 2 | 0;
             HEAP32[$5_1 + 76 >> 2] = $1_1;
             break label$25;
            }
            HEAP32[$5_1 + 76 >> 2] = $1_1 + 1;
            $10_1 = $1804($5_1 + 76 | 0);
            $1_1 = HEAP32[$5_1 + 76 >> 2];
           }
           $6 = 0;
           while (1) {
            $18_1 = $6;
            $11_1 = -1;
            if (HEAP8[$1_1 | 0] + -65 >>> 0 > 57) {
             break label$1
            }
            $15 = $1_1 + 1 | 0;
            HEAP32[$5_1 + 76 >> 2] = $15;
            $6 = HEAP8[$1_1 | 0];
            $1_1 = $15;
            $6 = HEAPU8[($6 + Math_imul($18_1, 58) | 0) + 6607 | 0];
            if ($6 + -1 >>> 0 < 8) {
             continue
            }
            break;
           };
           if (!$6) {
            break label$1
           }
           label$31 : {
            label$32 : {
             label$33 : {
              if (($6 | 0) == 19) {
               if (($14 | 0) <= -1) {
                break label$33
               }
               break label$1;
              }
              if (($14 | 0) < 0) {
               break label$32
              }
              HEAP32[($14 << 2) + $4_1 >> 2] = $6;
              $1_1 = ($14 << 3) + $3_1 | 0;
              $6 = HEAP32[$1_1 + 4 >> 2];
              HEAP32[$5_1 + 64 >> 2] = HEAP32[$1_1 >> 2];
              HEAP32[$5_1 + 68 >> 2] = $6;
             }
             $1_1 = 0;
             if (!$0) {
              continue label$3
             }
             break label$31;
            }
            if (!$0) {
             break label$6
            }
            $1805($5_1 - -64 | 0, $6, $2_1);
            $15 = HEAP32[$5_1 + 76 >> 2];
           }
           $9_1 = $7 & -65537;
           $7 = $7 & 8192 ? $9_1 : $7;
           $11_1 = 0;
           $14 = 6649;
           $6 = $16_1;
           label$35 : {
            label$36 : {
             label$37 : {
              label$38 : {
               label$39 : {
                label$40 : {
                 label$41 : {
                  label$42 : {
                   label$43 : {
                    label$44 : {
                     label$45 : {
                      label$46 : {
                       label$47 : {
                        label$48 : {
                         label$49 : {
                          label$50 : {
                           $1_1 = HEAP8[$15 + -1 | 0];
                           $1_1 = $18_1 ? (($1_1 & 15) == 3 ? $1_1 & -33 : $1_1) : $1_1;
                           switch ($1_1 + -88 | 0) {
                           case 11:
                            break label$35;
                           case 9:
                           case 13:
                           case 14:
                           case 15:
                            break label$36;
                           case 27:
                            break label$41;
                           case 12:
                           case 17:
                            break label$44;
                           case 23:
                            break label$45;
                           case 0:
                           case 32:
                            break label$46;
                           case 24:
                            break label$47;
                           case 22:
                            break label$48;
                           case 29:
                            break label$49;
                           case 1:
                           case 2:
                           case 3:
                           case 4:
                           case 5:
                           case 6:
                           case 7:
                           case 8:
                           case 10:
                           case 16:
                           case 18:
                           case 19:
                           case 20:
                           case 21:
                           case 25:
                           case 26:
                           case 28:
                           case 30:
                           case 31:
                            break label$7;
                           default:
                            break label$50;
                           };
                          }
                          label$51 : {
                           switch ($1_1 + -65 | 0) {
                           case 0:
                           case 4:
                           case 5:
                           case 6:
                            break label$36;
                           case 2:
                            break label$39;
                           case 1:
                           case 3:
                            break label$7;
                           default:
                            break label$51;
                           };
                          }
                          if (($1_1 | 0) == 83) {
                           break label$40
                          }
                          break label$8;
                         }
                         $1_1 = HEAP32[$5_1 + 64 >> 2];
                         $6 = HEAP32[$5_1 + 68 >> 2];
                         $14 = 6649;
                         break label$43;
                        }
                        $1_1 = 0;
                        label$52 : {
                         switch ($18_1 & 255) {
                         case 0:
                          HEAP32[HEAP32[$5_1 + 64 >> 2] >> 2] = $13_1;
                          continue label$3;
                         case 1:
                          HEAP32[HEAP32[$5_1 + 64 >> 2] >> 2] = $13_1;
                          continue label$3;
                         case 2:
                          $6 = HEAP32[$5_1 + 64 >> 2];
                          HEAP32[$6 >> 2] = $13_1;
                          HEAP32[$6 + 4 >> 2] = $13_1 >> 31;
                          continue label$3;
                         case 3:
                          HEAP16[HEAP32[$5_1 + 64 >> 2] >> 1] = $13_1;
                          continue label$3;
                         case 4:
                          HEAP8[HEAP32[$5_1 + 64 >> 2]] = $13_1;
                          continue label$3;
                         case 6:
                          HEAP32[HEAP32[$5_1 + 64 >> 2] >> 2] = $13_1;
                          continue label$3;
                         case 7:
                          break label$52;
                         default:
                          continue label$3;
                         };
                        }
                        $6 = HEAP32[$5_1 + 64 >> 2];
                        HEAP32[$6 >> 2] = $13_1;
                        HEAP32[$6 + 4 >> 2] = $13_1 >> 31;
                        continue label$3;
                       }
                       $10_1 = $10_1 >>> 0 > 8 ? $10_1 : 8;
                       $7 = $7 | 8;
                       $1_1 = 120;
                      }
                      $8 = $1806(HEAP32[$5_1 + 64 >> 2], HEAP32[$5_1 + 68 >> 2], $16_1, $1_1 & 32);
                      if (!($7 & 8) | !(HEAP32[$5_1 + 64 >> 2] | HEAP32[$5_1 + 68 >> 2])) {
                       break label$42
                      }
                      $14 = ($1_1 >>> 4 | 0) + 6649 | 0;
                      $11_1 = 2;
                      break label$42;
                     }
                     $8 = $1807(HEAP32[$5_1 + 64 >> 2], HEAP32[$5_1 + 68 >> 2], $16_1);
                     if (!($7 & 8)) {
                      break label$42
                     }
                     $1_1 = $16_1 - $8 | 0;
                     $10_1 = ($10_1 | 0) > ($1_1 | 0) ? $10_1 : $1_1 + 1 | 0;
                     break label$42;
                    }
                    $8 = HEAP32[$5_1 + 68 >> 2];
                    $6 = $8;
                    $1_1 = HEAP32[$5_1 + 64 >> 2];
                    if (($6 | 0) < -1 ? 1 : ($6 | 0) <= -1 ? ($1_1 >>> 0 > 4294967295 ? 0 : 1) : 0) {
                     $6 = 0 - ($6 + (0 < $1_1 >>> 0) | 0) | 0;
                     $1_1 = 0 - $1_1 | 0;
                     HEAP32[$5_1 + 64 >> 2] = $1_1;
                     HEAP32[$5_1 + 68 >> 2] = $6;
                     $11_1 = 1;
                     $14 = 6649;
                     break label$43;
                    }
                    if ($7 & 2048) {
                     $11_1 = 1;
                     $14 = 6650;
                     break label$43;
                    }
                    $11_1 = $7 & 1;
                    $14 = $11_1 ? 6651 : 6649;
                   }
                   $8 = $1808($1_1, $6, $16_1);
                  }
                  $7 = ($10_1 | 0) > -1 ? $7 & -65537 : $7;
                  $1_1 = HEAP32[$5_1 + 64 >> 2];
                  $6 = HEAP32[$5_1 + 68 >> 2];
                  if (!(!!($1_1 | $6) | $10_1)) {
                   $10_1 = 0;
                   $8 = $16_1;
                   break label$8;
                  }
                  $1_1 = !($1_1 | $6) + ($16_1 - $8 | 0) | 0;
                  $10_1 = ($10_1 | 0) > ($1_1 | 0) ? $10_1 : $1_1;
                  break label$8;
                 }
                 $1_1 = HEAP32[$5_1 + 64 >> 2];
                 $8 = $1_1 ? $1_1 : 6659;
                 $1_1 = $1786($8, $10_1);
                 $6 = $1_1 ? $1_1 : $10_1 + $8 | 0;
                 $7 = $9_1;
                 $10_1 = $1_1 ? $1_1 - $8 | 0 : $10_1;
                 break label$7;
                }
                $6 = HEAP32[$5_1 + 64 >> 2];
                if ($10_1) {
                 break label$38
                }
                $1_1 = 0;
                $1809($0, 32, $12_1, 0, $7);
                break label$37;
               }
               HEAP32[$5_1 + 12 >> 2] = 0;
               HEAP32[$5_1 + 8 >> 2] = HEAP32[$5_1 + 64 >> 2];
               HEAP32[$5_1 + 64 >> 2] = $5_1 + 8;
               $10_1 = -1;
               $6 = $5_1 + 8 | 0;
              }
              $1_1 = 0;
              label$63 : {
               while (1) {
                $8 = HEAP32[$6 >> 2];
                if (!$8) {
                 break label$63
                }
                $8 = $1799($5_1 + 4 | 0, $8);
                $9_1 = ($8 | 0) < 0;
                if (!($9_1 | $8 >>> 0 > $10_1 - $1_1 >>> 0)) {
                 $6 = $6 + 4 | 0;
                 $1_1 = $1_1 + $8 | 0;
                 if ($10_1 >>> 0 > $1_1 >>> 0) {
                  continue
                 }
                 break label$63;
                }
                break;
               };
               $11_1 = -1;
               if ($9_1) {
                break label$1
               }
              }
              $1809($0, 32, $12_1, $1_1, $7);
              if (!$1_1) {
               $1_1 = 0;
               break label$37;
              }
              $9_1 = 0;
              $6 = HEAP32[$5_1 + 64 >> 2];
              while (1) {
               $8 = HEAP32[$6 >> 2];
               if (!$8) {
                break label$37
               }
               $8 = $1799($5_1 + 4 | 0, $8);
               $9_1 = $8 + $9_1 | 0;
               if (($9_1 | 0) > ($1_1 | 0)) {
                break label$37
               }
               $1803($0, $5_1 + 4 | 0, $8);
               $6 = $6 + 4 | 0;
               if ($9_1 >>> 0 < $1_1 >>> 0) {
                continue
               }
               break;
              };
             }
             $1809($0, 32, $12_1, $1_1, $7 ^ 8192);
             $1_1 = ($12_1 | 0) > ($1_1 | 0) ? $12_1 : $1_1;
             continue label$3;
            }
            $1_1 = FUNCTION_TABLE[136]($0, HEAPF64[$5_1 + 64 >> 3], $12_1, $10_1, $7, $1_1) | 0;
            continue label$3;
           }
           HEAP8[$5_1 + 55 | 0] = HEAP32[$5_1 + 64 >> 2];
           $10_1 = 1;
           $8 = $19_1;
           $7 = $9_1;
           break label$7;
          }
          $6 = $1_1 + 1 | 0;
          HEAP32[$5_1 + 76 >> 2] = $6;
          $7 = HEAPU8[$1_1 + 1 | 0];
          $1_1 = $6;
          continue;
         }
        }
        $11_1 = $13_1;
        if ($0) {
         break label$1
        }
        if (!$17) {
         break label$6
        }
        $1_1 = 1;
        while (1) {
         $0 = HEAP32[($1_1 << 2) + $4_1 >> 2];
         if ($0) {
          $1805(($1_1 << 3) + $3_1 | 0, $0, $2_1);
          $11_1 = 1;
          $1_1 = $1_1 + 1 | 0;
          if (($1_1 | 0) != 10) {
           continue
          }
          break label$1;
         }
         break;
        };
        $11_1 = 1;
        if ($1_1 >>> 0 > 9) {
         break label$1
        }
        $11_1 = -1;
        if (HEAP32[($1_1 << 2) + $4_1 >> 2]) {
         break label$1
        }
        while (1) {
         $0 = $1_1;
         $1_1 = $1_1 + 1 | 0;
         if (HEAP32[($1_1 << 2) + $4_1 >> 2] ? 0 : ($1_1 | 0) != 10) {
          continue
         }
         break;
        };
        $11_1 = $0 >>> 0 < 9 ? -1 : 1;
        break label$1;
       }
       $6 = $16_1;
      }
      $9_1 = $6 - $8 | 0;
      $15 = ($10_1 | 0) < ($9_1 | 0) ? $9_1 : $10_1;
      $6 = $15 + $11_1 | 0;
      $1_1 = ($12_1 | 0) < ($6 | 0) ? $6 : $12_1;
      $1809($0, 32, $1_1, $6, $7);
      $1803($0, $14, $11_1);
      $1809($0, 48, $1_1, $6, $7 ^ 65536);
      $1809($0, 48, $15, $9_1, 0);
      $1803($0, $8, $9_1);
      $1809($0, 32, $1_1, $6, $7 ^ 8192);
      continue;
     }
     break;
    };
    $11_1 = 0;
    break label$1;
   }
   $11_1 = -1;
  }
  global$0 = $5_1 + 80 | 0;
  return $11_1;
 }
 
 function $1803($0, $1_1, $2_1) {
  if (!(HEAPU8[$0 | 0] & 32)) {
   $2595($1_1, $2_1, $0)
  }
 }
 
 function $1804($0) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  if ($1596(HEAP8[HEAP32[$0 >> 2]])) {
   while (1) {
    $1_1 = HEAP32[$0 >> 2];
    $3_1 = HEAP8[$1_1 | 0];
    HEAP32[$0 >> 2] = $1_1 + 1;
    $2_1 = (Math_imul($2_1, 10) + $3_1 | 0) + -48 | 0;
    if ($1596(HEAP8[$1_1 + 1 | 0])) {
     continue
    }
    break;
   }
  }
  return $2_1;
 }
 
 function $1805($0, $1_1, $2_1) {
  folding_inner2 : {
   folding_inner1 : {
    folding_inner0 : {
     label$1 : {
      if ($1_1 >>> 0 > 20) {
       break label$1
      }
      label$2 : {
       switch ($1_1 + -9 | 0) {
       case 0:
        $1_1 = HEAP32[$2_1 >> 2];
        HEAP32[$2_1 >> 2] = $1_1 + 4;
        HEAP32[$0 >> 2] = HEAP32[$1_1 >> 2];
        return;
       case 1:
        $1_1 = HEAP32[$2_1 >> 2];
        HEAP32[$2_1 >> 2] = $1_1 + 4;
        $1_1 = HEAP32[$1_1 >> 2];
        HEAP32[$0 >> 2] = $1_1;
        break folding_inner1;
       case 2:
        $1_1 = HEAP32[$2_1 >> 2];
        HEAP32[$2_1 >> 2] = $1_1 + 4;
        HEAP32[$0 >> 2] = HEAP32[$1_1 >> 2];
        break folding_inner2;
       case 4:
        $1_1 = HEAP32[$2_1 >> 2];
        HEAP32[$2_1 >> 2] = $1_1 + 4;
        $1_1 = HEAP16[$1_1 >> 1];
        HEAP32[$0 >> 2] = $1_1;
        break folding_inner1;
       case 5:
        $1_1 = HEAP32[$2_1 >> 2];
        HEAP32[$2_1 >> 2] = $1_1 + 4;
        HEAP32[$0 >> 2] = HEAPU16[$1_1 >> 1];
        break folding_inner2;
       case 6:
        $1_1 = HEAP32[$2_1 >> 2];
        HEAP32[$2_1 >> 2] = $1_1 + 4;
        $1_1 = HEAP8[$1_1 | 0];
        HEAP32[$0 >> 2] = $1_1;
        break folding_inner1;
       case 7:
        $1_1 = HEAP32[$2_1 >> 2];
        HEAP32[$2_1 >> 2] = $1_1 + 4;
        HEAP32[$0 >> 2] = HEAPU8[$1_1 | 0];
        break folding_inner2;
       case 3:
       case 8:
        break folding_inner0;
       case 9:
        break label$2;
       default:
        break label$1;
       };
      }
      FUNCTION_TABLE[137]($0, $2_1);
     }
     return;
    }
    $1_1 = HEAP32[$2_1 >> 2] + 7 & -8;
    HEAP32[$2_1 >> 2] = $1_1 + 8;
    $2_1 = HEAP32[$1_1 + 4 >> 2];
    HEAP32[$0 >> 2] = HEAP32[$1_1 >> 2];
    HEAP32[$0 + 4 >> 2] = $2_1;
    return;
   }
   HEAP32[$0 + 4 >> 2] = $1_1 >> 31;
   return;
  }
  HEAP32[$0 + 4 >> 2] = 0;
 }
 
 function $1806($0, $1_1, $2_1, $3_1) {
  if ($0 | $1_1) {
   while (1) {
    $2_1 = $2_1 + -1 | 0;
    HEAP8[$2_1 | 0] = HEAPU8[($0 & 15) + 7136 | 0] | $3_1;
    $0 = ($1_1 & 15) << 28 | $0 >>> 4;
    $1_1 = $1_1 >>> 4 | 0;
    if ($0 | $1_1) {
     continue
    }
    break;
   }
  }
  return $2_1;
 }
 
 function $1807($0, $1_1, $2_1) {
  if ($0 | $1_1) {
   while (1) {
    $2_1 = $2_1 + -1 | 0;
    HEAP8[$2_1 | 0] = $0 & 7 | 48;
    $0 = ($1_1 & 7) << 29 | $0 >>> 3;
    $1_1 = $1_1 >>> 3 | 0;
    if ($0 | $1_1) {
     continue
    }
    break;
   }
  }
  return $2_1;
 }
 
 function $1808($0, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  label$1 : {
   if (($1_1 | 0) == 1 & $0 >>> 0 < 0 | $1_1 >>> 0 < 1) {
    $3_1 = $0;
    break label$1;
   }
   while (1) {
    $3_1 = __wasm_i64_udiv($0, $1_1, 10);
    $4_1 = i64toi32_i32$HIGH_BITS;
    $5_1 = $4_1;
    $4_1 = __wasm_i64_mul($3_1, $4_1, 10, 0);
    $2_1 = $2_1 + -1 | 0;
    HEAP8[$2_1 | 0] = $0 - $4_1 | 48;
    $4_1 = ($1_1 | 0) == 9 & $0 >>> 0 > 4294967295 | $1_1 >>> 0 > 9;
    $0 = $3_1;
    $1_1 = $5_1;
    if ($4_1) {
     continue
    }
    break;
   };
  }
  if ($3_1) {
   while (1) {
    $2_1 = $2_1 + -1 | 0;
    $0 = ($3_1 >>> 0) / 10 | 0;
    HEAP8[$2_1 | 0] = $3_1 - Math_imul($0, 10) | 48;
    $1_1 = $3_1 >>> 0 > 9;
    $3_1 = $0;
    if ($1_1) {
     continue
    }
    break;
   }
  }
  return $2_1;
 }
 
 function $1809($0, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = 0;
  $5_1 = global$0 - 256 | 0;
  global$0 = $5_1;
  if (!($4_1 & 73728 | ($2_1 | 0) <= ($3_1 | 0))) {
   $2_1 = $2_1 - $3_1 | 0;
   $3_1 = $2_1 >>> 0 < 256;
   $2592($5_1, $1_1, $3_1 ? $2_1 : 256);
   if (!$3_1) {
    while (1) {
     $1803($0, $5_1, 256);
     $2_1 = $2_1 + -256 | 0;
     if ($2_1 >>> 0 > 255) {
      continue
     }
     break;
    }
   }
   $1803($0, $5_1, $2_1);
  }
  global$0 = $5_1 + 256 | 0;
 }
 
 function $1811($0, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0 = $0 | 0;
  $1_1 = +$1_1;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6 = 0, $7 = 0, $8 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14 = 0, $15 = 0, $16_1 = 0, $17 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0.0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0;
  $10_1 = global$0 - 560 | 0;
  global$0 = $10_1;
  HEAP32[$10_1 + 44 >> 2] = 0;
  $7 = $1813($1_1);
  $9_1 = i64toi32_i32$HIGH_BITS;
  $6 = $9_1;
  label$1 : {
   if (($6 | 0) < -1 ? 1 : ($6 | 0) <= -1 ? ($7 >>> 0 > 4294967295 ? 0 : 1) : 0) {
    $21_1 = 1;
    $1_1 = -$1_1;
    $1813($1_1);
    $6 = i64toi32_i32$HIGH_BITS;
    $23_1 = 7152;
    break label$1;
   }
   if ($4_1 & 2048) {
    $21_1 = 1;
    $23_1 = 7155;
    break label$1;
   }
   $21_1 = $4_1 & 1;
   $23_1 = $21_1 ? 7158 : 7153;
  }
  label$4 : {
   if (($6 & 2146435072) == 2146435072) {
    $7 = $21_1 + 3 | 0;
    $1809($0, 32, $2_1, $7, $4_1 & -65537);
    $1803($0, $23_1, $21_1);
    $3_1 = $5_1 >>> 5 & 1;
    $1803($0, $1_1 != $1_1 ? ($3_1 ? 7179 : 7183) : $3_1 ? 7171 : 7175, 3);
    break label$4;
   }
   $18_1 = $10_1 + 16 | 0;
   label$6 : {
    label$7 : {
     label$8 : {
      $1_1 = $1800($1_1, $10_1 + 44 | 0);
      $1_1 = $1_1 + $1_1;
      if ($1_1 != 0.0) {
       $6 = HEAP32[$10_1 + 44 >> 2];
       HEAP32[$10_1 + 44 >> 2] = $6 + -1;
       $22_1 = $5_1 | 32;
       if (($22_1 | 0) != 97) {
        break label$8
       }
       break label$6;
      }
      $22_1 = $5_1 | 32;
      if (($22_1 | 0) == 97) {
       break label$6
      }
      $12_1 = HEAP32[$10_1 + 44 >> 2];
      $11_1 = ($3_1 | 0) < 0 ? 6 : $3_1;
      break label$7;
     }
     $12_1 = $6 + -29 | 0;
     HEAP32[$10_1 + 44 >> 2] = $12_1;
     $1_1 = $1_1 * 268435456.0;
     $11_1 = ($3_1 | 0) < 0 ? 6 : $3_1;
    }
    $15 = ($12_1 | 0) < 0 ? $10_1 + 48 | 0 : $10_1 + 336 | 0;
    $9_1 = $15;
    while (1) {
     $3_1 = $9_1;
     if ($1_1 < 4294967296.0 & $1_1 >= 0.0) {
      $6 = ~~$1_1 >>> 0
     } else {
      $6 = 0
     }
     HEAP32[$3_1 >> 2] = $6;
     $9_1 = $9_1 + 4 | 0;
     $1_1 = ($1_1 - +($6 >>> 0)) * 1.0e9;
     if ($1_1 != 0.0) {
      continue
     }
     break;
    };
    label$13 : {
     if (($12_1 | 0) < 1) {
      $3_1 = $12_1;
      $6 = $9_1;
      $8 = $15;
      break label$13;
     }
     $8 = $15;
     $3_1 = $12_1;
     while (1) {
      $13_1 = ($3_1 | 0) < 29 ? $3_1 : 29;
      $6 = $9_1 + -4 | 0;
      label$16 : {
       if ($6 >>> 0 < $8 >>> 0) {
        break label$16
       }
       $3_1 = $13_1;
       $7 = 0;
       while (1) {
        $14 = $6;
        $24_1 = $7;
        $17 = HEAP32[$6 >> 2];
        $16_1 = $3_1 & 31;
        if (32 <= ($3_1 & 63) >>> 0) {
         $7 = $17 << $16_1;
         $17 = 0;
        } else {
         $7 = (1 << $16_1) - 1 & $17 >>> 32 - $16_1;
         $17 = $17 << $16_1;
        }
        $16_1 = $24_1 + $17 | 0;
        $7 = $7 + $25_1 | 0;
        $7 = $16_1 >>> 0 < $17 >>> 0 ? $7 + 1 | 0 : $7;
        $7 = __wasm_i64_udiv($16_1, $7, 1e9);
        $17 = $14;
        $14 = __wasm_i64_mul($7, i64toi32_i32$HIGH_BITS, 1e9, 0);
        HEAP32[$17 >> 2] = $16_1 - $14;
        $6 = $6 + -4 | 0;
        if ($6 >>> 0 >= $8 >>> 0) {
         continue
        }
        break;
       };
       if (!$7) {
        break label$16
       }
       $8 = $8 + -4 | 0;
       HEAP32[$8 >> 2] = $7;
      }
      while (1) {
       $6 = $9_1;
       if ($6 >>> 0 > $8 >>> 0) {
        $9_1 = $6 + -4 | 0;
        if (!HEAP32[$9_1 >> 2]) {
         continue
        }
       }
       break;
      };
      $3_1 = HEAP32[$10_1 + 44 >> 2] - $13_1 | 0;
      HEAP32[$10_1 + 44 >> 2] = $3_1;
      $9_1 = $6;
      if (($3_1 | 0) > 0) {
       continue
      }
      break;
     };
    }
    if (($3_1 | 0) <= -1) {
     $19_1 = (($11_1 + 25 | 0) / 9 | 0) + 1 | 0;
     $13_1 = ($22_1 | 0) == 102;
     while (1) {
      $7 = ($3_1 | 0) < -9 ? 9 : 0 - $3_1 | 0;
      label$22 : {
       if ($8 >>> 0 >= $6 >>> 0) {
        $8 = HEAP32[$8 >> 2] ? $8 : $8 + 4 | 0;
        break label$22;
       }
       $14 = 1e9 >>> $7 | 0;
       $16_1 = -1 << $7 ^ -1;
       $3_1 = 0;
       $9_1 = $8;
       while (1) {
        $17 = $3_1;
        $3_1 = HEAP32[$9_1 >> 2];
        HEAP32[$9_1 >> 2] = $17 + ($3_1 >>> $7 | 0);
        $3_1 = Math_imul($14, $3_1 & $16_1);
        $9_1 = $9_1 + 4 | 0;
        if ($9_1 >>> 0 < $6 >>> 0) {
         continue
        }
        break;
       };
       $8 = HEAP32[$8 >> 2] ? $8 : $8 + 4 | 0;
       if (!$3_1) {
        break label$22
       }
       HEAP32[$6 >> 2] = $3_1;
       $6 = $6 + 4 | 0;
      }
      $3_1 = $7 + HEAP32[$10_1 + 44 >> 2] | 0;
      HEAP32[$10_1 + 44 >> 2] = $3_1;
      $9_1 = $13_1 ? $15 : $8;
      $6 = $6 - $9_1 >> 2 > ($19_1 | 0) ? $9_1 + ($19_1 << 2) | 0 : $6;
      if (($3_1 | 0) < 0) {
       continue
      }
      break;
     };
    }
    $9_1 = 0;
    label$25 : {
     if ($8 >>> 0 >= $6 >>> 0) {
      break label$25
     }
     $9_1 = Math_imul($15 - $8 >> 2, 9);
     $3_1 = 10;
     $7 = HEAP32[$8 >> 2];
     if ($7 >>> 0 < 10) {
      break label$25
     }
     while (1) {
      $9_1 = $9_1 + 1 | 0;
      $3_1 = Math_imul($3_1, 10);
      if ($7 >>> 0 >= $3_1 >>> 0) {
       continue
      }
      break;
     };
    }
    $3_1 = ($11_1 - (($22_1 | 0) == 102 ? 0 : $9_1) | 0) - (($22_1 | 0) == 103 & ($11_1 | 0) != 0) | 0;
    if (($3_1 | 0) < (Math_imul($6 - $15 >> 2, 9) + -9 | 0)) {
     $13_1 = $3_1 + 9216 | 0;
     $14 = ($13_1 | 0) / 9 | 0;
     $7 = (($14 << 2) + (($12_1 | 0) < 0 ? $10_1 + 48 | 4 : $10_1 + 340 | 0) | 0) + -4096 | 0;
     $3_1 = 10;
     $13_1 = $13_1 - Math_imul($14, 9) | 0;
     if (($13_1 | 0) <= 7) {
      while (1) {
       $3_1 = Math_imul($3_1, 10);
       $13_1 = $13_1 + 1 | 0;
       if (($13_1 | 0) != 8) {
        continue
       }
       break;
      }
     }
     $13_1 = HEAP32[$7 >> 2];
     $14 = ($13_1 >>> 0) / ($3_1 >>> 0) | 0;
     $19_1 = $7 + 4 | 0;
     $12_1 = $13_1 - Math_imul($3_1, $14) | 0;
     label$30 : {
      if ($12_1 ? 0 : ($19_1 | 0) == ($6 | 0)) {
       break label$30
      }
      $16_1 = $3_1 >>> 1 | 0;
      $20_1 = $12_1 >>> 0 < $16_1 >>> 0 ? .5 : ($6 | 0) == ($19_1 | 0) ? (($16_1 | 0) == ($12_1 | 0) ? 1.0 : 1.5) : 1.5;
      $1_1 = $14 & 1 ? 9007199254740994.0 : 9007199254740992.0;
      if (!(!$21_1 | HEAPU8[$23_1 | 0] != 45)) {
       $20_1 = -$20_1;
       $1_1 = -$1_1;
      }
      $12_1 = $13_1 - $12_1 | 0;
      HEAP32[$7 >> 2] = $12_1;
      if ($1_1 + $20_1 == $1_1) {
       break label$30
      }
      $3_1 = $3_1 + $12_1 | 0;
      HEAP32[$7 >> 2] = $3_1;
      if ($3_1 >>> 0 >= 1e9) {
       while (1) {
        HEAP32[$7 >> 2] = 0;
        $7 = $7 + -4 | 0;
        if ($7 >>> 0 < $8 >>> 0) {
         $8 = $8 + -4 | 0;
         HEAP32[$8 >> 2] = 0;
        }
        $3_1 = HEAP32[$7 >> 2] + 1 | 0;
        HEAP32[$7 >> 2] = $3_1;
        if ($3_1 >>> 0 > 999999999) {
         continue
        }
        break;
       }
      }
      $9_1 = Math_imul($15 - $8 >> 2, 9);
      $3_1 = 10;
      $12_1 = HEAP32[$8 >> 2];
      if ($12_1 >>> 0 < 10) {
       break label$30
      }
      while (1) {
       $9_1 = $9_1 + 1 | 0;
       $3_1 = Math_imul($3_1, 10);
       if ($12_1 >>> 0 >= $3_1 >>> 0) {
        continue
       }
       break;
      };
     }
     $3_1 = $7 + 4 | 0;
     $6 = $6 >>> 0 > $3_1 >>> 0 ? $3_1 : $6;
    }
    label$36 : {
     while (1) {
      $3_1 = $6;
      $12_1 = 0;
      if ($6 >>> 0 <= $8 >>> 0) {
       break label$36
      }
      $6 = $3_1 + -4 | 0;
      if (!HEAP32[$6 >> 2]) {
       continue
      }
      break;
     };
     $12_1 = 1;
    }
    label$38 : {
     if (($22_1 | 0) != 103) {
      $14 = $4_1 & 8;
      break label$38;
     }
     $6 = $11_1 ? $11_1 : 1;
     $7 = ($6 | 0) > ($9_1 | 0) & ($9_1 | 0) > -5;
     $11_1 = ($7 ? $9_1 ^ -1 : -1) + $6 | 0;
     $5_1 = ($7 ? -1 : -2) + $5_1 | 0;
     $14 = $4_1 & 8;
     if ($14) {
      break label$38
     }
     $6 = 9;
     label$40 : {
      if (!$12_1) {
       break label$40
      }
      $7 = HEAP32[$3_1 + -4 >> 2];
      if (!$7) {
       break label$40
      }
      $13_1 = 10;
      $6 = 0;
      if (($7 >>> 0) % 10) {
       break label$40
      }
      while (1) {
       $6 = $6 + 1 | 0;
       $13_1 = Math_imul($13_1, 10);
       if (!(($7 >>> 0) % ($13_1 >>> 0))) {
        continue
       }
       break;
      };
     }
     $7 = Math_imul($3_1 - $15 >> 2, 9) + -9 | 0;
     if (($5_1 & -33) == 70) {
      $14 = 0;
      $6 = $7 - $6 | 0;
      $6 = ($6 | 0) > 0 ? $6 : 0;
      $11_1 = ($11_1 | 0) < ($6 | 0) ? $11_1 : $6;
      break label$38;
     }
     $14 = 0;
     $6 = ($7 + $9_1 | 0) - $6 | 0;
     $6 = ($6 | 0) > 0 ? $6 : 0;
     $11_1 = ($11_1 | 0) < ($6 | 0) ? $11_1 : $6;
    }
    $16_1 = $11_1 | $14;
    $22_1 = ($16_1 | 0) != 0;
    $13_1 = $0;
    $24_1 = $2_1;
    $17 = $5_1 & -33;
    $6 = ($9_1 | 0) > 0 ? $9_1 : 0;
    label$43 : {
     if (($17 | 0) == 70) {
      break label$43
     }
     $6 = $9_1 >> 31;
     $6 = $1808($6 + $9_1 ^ $6, 0, $18_1);
     if (($18_1 - $6 | 0) <= 1) {
      while (1) {
       $6 = $6 + -1 | 0;
       HEAP8[$6 | 0] = 48;
       if (($18_1 - $6 | 0) < 2) {
        continue
       }
       break;
      }
     }
     $19_1 = $6 + -2 | 0;
     HEAP8[$19_1 | 0] = $5_1;
     HEAP8[$6 + -1 | 0] = ($9_1 | 0) < 0 ? 45 : 43;
     $6 = $18_1 - $19_1 | 0;
    }
    $7 = ($6 + ($22_1 + ($11_1 + $21_1 | 0) | 0) | 0) + 1 | 0;
    $1809($13_1, 32, $24_1, $7, $4_1);
    $1803($0, $23_1, $21_1);
    $1809($0, 48, $2_1, $7, $4_1 ^ 65536);
    label$46 : {
     label$47 : {
      label$48 : {
       if (($17 | 0) == 70) {
        $5_1 = $10_1 + 16 | 8;
        $9_1 = $10_1 + 16 | 9;
        $12_1 = $8 >>> 0 > $15 >>> 0 ? $15 : $8;
        $8 = $12_1;
        while (1) {
         $6 = $1808(HEAP32[$8 >> 2], 0, $9_1);
         label$51 : {
          if (($8 | 0) != ($12_1 | 0)) {
           if ($6 >>> 0 <= $10_1 + 16 >>> 0) {
            break label$51
           }
           while (1) {
            $6 = $6 + -1 | 0;
            HEAP8[$6 | 0] = 48;
            if ($6 >>> 0 > $10_1 + 16 >>> 0) {
             continue
            }
            break;
           };
           break label$51;
          }
          if (($6 | 0) != ($9_1 | 0)) {
           break label$51
          }
          HEAP8[$10_1 + 24 | 0] = 48;
          $6 = $5_1;
         }
         $1803($0, $6, $9_1 - $6 | 0);
         $8 = $8 + 4 | 0;
         if ($8 >>> 0 <= $15 >>> 0) {
          continue
         }
         break;
        };
        if ($16_1) {
         $1803($0, 7187, 1)
        }
        if (($11_1 | 0) < 1 | $8 >>> 0 >= $3_1 >>> 0) {
         break label$48
        }
        while (1) {
         $6 = $1808(HEAP32[$8 >> 2], 0, $9_1);
         if ($6 >>> 0 > $10_1 + 16 >>> 0) {
          while (1) {
           $6 = $6 + -1 | 0;
           HEAP8[$6 | 0] = 48;
           if ($6 >>> 0 > $10_1 + 16 >>> 0) {
            continue
           }
           break;
          }
         }
         $1803($0, $6, ($11_1 | 0) < 9 ? $11_1 : 9);
         $6 = $11_1 + -9 | 0;
         $8 = $8 + 4 | 0;
         if ($8 >>> 0 >= $3_1 >>> 0) {
          break label$47
         }
         $5_1 = ($11_1 | 0) > 9;
         $11_1 = $6;
         if ($5_1) {
          continue
         }
         break;
        };
        break label$47;
       }
       label$58 : {
        if (($11_1 | 0) < 0) {
         break label$58
        }
        $15 = $12_1 ? $3_1 : $8 + 4 | 0;
        $3_1 = $10_1 + 16 | 8;
        $5_1 = $10_1 + 16 | 9;
        $9_1 = $8;
        while (1) {
         $6 = $1808(HEAP32[$9_1 >> 2], 0, $5_1);
         if (($5_1 | 0) == ($6 | 0)) {
          HEAP8[$10_1 + 24 | 0] = 48;
          $6 = $3_1;
         }
         label$61 : {
          if (($9_1 | 0) != ($8 | 0)) {
           if ($6 >>> 0 <= $10_1 + 16 >>> 0) {
            break label$61
           }
           while (1) {
            $6 = $6 + -1 | 0;
            HEAP8[$6 | 0] = 48;
            if ($6 >>> 0 > $10_1 + 16 >>> 0) {
             continue
            }
            break;
           };
           break label$61;
          }
          $1803($0, $6, 1);
          $6 = $6 + 1 | 0;
          if (($11_1 | 0) < 1 ? !$14 : 0) {
           break label$61
          }
          $1803($0, 7187, 1);
         }
         $12_1 = $6;
         $6 = $5_1 - $6 | 0;
         $1803($0, $12_1, ($11_1 | 0) > ($6 | 0) ? $6 : $11_1);
         $11_1 = $11_1 - $6 | 0;
         $9_1 = $9_1 + 4 | 0;
         if ($9_1 >>> 0 >= $15 >>> 0) {
          break label$58
         }
         if (($11_1 | 0) > -1) {
          continue
         }
         break;
        };
       }
       $1809($0, 48, $11_1 + 18 | 0, 18, 0);
       $1803($0, $19_1, $18_1 - $19_1 | 0);
       break label$46;
      }
      $6 = $11_1;
     }
     $1809($0, 48, $6 + 9 | 0, 9, 0);
    }
    break label$4;
   }
   $11_1 = $5_1 & 32;
   $12_1 = $11_1 ? $23_1 + 9 | 0 : $23_1;
   label$64 : {
    if ($3_1 >>> 0 > 11) {
     break label$64
    }
    $6 = 12 - $3_1 | 0;
    if (!$6) {
     break label$64
    }
    $20_1 = 8.0;
    while (1) {
     $20_1 = $20_1 * 16.0;
     $6 = $6 + -1 | 0;
     if ($6) {
      continue
     }
     break;
    };
    if (HEAPU8[$12_1 | 0] == 45) {
     $1_1 = -($20_1 + (-$1_1 - $20_1));
     break label$64;
    }
    $1_1 = $1_1 + $20_1 - $20_1;
   }
   $9_1 = HEAP32[$10_1 + 44 >> 2];
   $6 = $9_1 >> 31;
   $6 = $1808($6 ^ $6 + $9_1, 0, $18_1);
   if (($18_1 | 0) == ($6 | 0)) {
    HEAP8[$10_1 + 15 | 0] = 48;
    $6 = $10_1 + 15 | 0;
   }
   $9_1 = $21_1 | 2;
   $8 = HEAP32[$10_1 + 44 >> 2];
   $15 = $6 + -2 | 0;
   HEAP8[$15 | 0] = $5_1 + 15;
   HEAP8[$6 + -1 | 0] = ($8 | 0) < 0 ? 45 : 43;
   $7 = $4_1 & 8;
   $8 = $10_1 + 16 | 0;
   while (1) {
    $5_1 = $8;
    $14 = $11_1;
    if (Math_abs($1_1) < 2147483648.0) {
     $6 = ~~$1_1
    } else {
     $6 = -2147483648
    }
    HEAP8[$8 | 0] = $14 | HEAPU8[$6 + 7136 | 0];
    $1_1 = ($1_1 - +($6 | 0)) * 16.0;
    $8 = $5_1 + 1 | 0;
    if (!(($8 - ($10_1 + 16 | 0) | 0) != 1 | ($1_1 == 0.0 ? !(($3_1 | 0) > 0 | $7) : 0))) {
     HEAP8[$5_1 + 1 | 0] = 46;
     $8 = $5_1 + 2 | 0;
    }
    if ($1_1 != 0.0) {
     continue
    }
    break;
   };
   $5_1 = $0;
   $11_1 = $2_1;
   if (!$3_1 | (($8 - $10_1 | 0) + -18 | 0) >= ($3_1 | 0)) {
    $6 = (($18_1 - ($10_1 + 16 | 0) | 0) - $15 | 0) + $8 | 0
   } else {
    $6 = (($3_1 + $18_1 | 0) - $15 | 0) + 2 | 0
   }
   $3_1 = $6;
   $7 = $3_1 + $9_1 | 0;
   $1809($5_1, 32, $11_1, $7, $4_1);
   $1803($0, $12_1, $9_1);
   $1809($0, 48, $2_1, $7, $4_1 ^ 65536);
   $5_1 = $8 - ($10_1 + 16 | 0) | 0;
   $1803($0, $10_1 + 16 | 0, $5_1);
   $3_1 = $18_1 - $15 | 0;
   $1809($0, 48, $6 - ($3_1 + $5_1 | 0) | 0, 0, 0);
   $1803($0, $15, $3_1);
  }
  $1809($0, 32, $2_1, $7, $4_1 ^ 8192);
  global$0 = $10_1 + 560 | 0;
  return (($7 | 0) < ($2_1 | 0) ? $2_1 : $7) | 0;
 }
 
 function $1812($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, wasm2js_i32$0 = 0, wasm2js_f64$0 = 0.0;
  $2_1 = $1_1;
  $1_1 = HEAP32[$1_1 >> 2] + 15 & -16;
  HEAP32[$2_1 >> 2] = $1_1 + 16;
  (wasm2js_i32$0 = $0, wasm2js_f64$0 = $1636(HEAP32[$1_1 >> 2], HEAP32[$1_1 + 4 >> 2], HEAP32[$1_1 + 8 >> 2], HEAP32[$1_1 + 12 >> 2])), HEAPF64[wasm2js_i32$0 >> 3] = wasm2js_f64$0;
 }
 
 function $1813($0) {
  var $1_1 = 0, $2_1 = 0;
  wasm2js_scratch_store_f64(+$0);
  $1_1 = wasm2js_scratch_load_i32(1) | 0;
  $2_1 = wasm2js_scratch_load_i32(0) | 0;
  i64toi32_i32$HIGH_BITS = $1_1;
  return $2_1;
 }
 
 function $1814($0, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 160 | 0;
  global$0 = $4_1;
  $2591($4_1 + 8 | 0, 7192, 144);
  label$1 : {
   label$2 : {
    if ($1_1 + -1 >>> 0 >= 2147483647) {
     if ($1_1) {
      break label$2
     }
     $1_1 = 1;
     $0 = $4_1 + 159 | 0;
    }
    HEAP32[$4_1 + 52 >> 2] = $0;
    HEAP32[$4_1 + 28 >> 2] = $0;
    $5_1 = -2 - $0 | 0;
    $1_1 = $1_1 >>> 0 > $5_1 >>> 0 ? $5_1 : $1_1;
    HEAP32[$4_1 + 56 >> 2] = $1_1;
    $0 = $0 + $1_1 | 0;
    HEAP32[$4_1 + 36 >> 2] = $0;
    HEAP32[$4_1 + 24 >> 2] = $0;
    $0 = $1801($4_1 + 8 | 0, $2_1, $3_1);
    if (!$1_1) {
     break label$1
    }
    $1_1 = HEAP32[$4_1 + 28 >> 2];
    HEAP8[$1_1 - (($1_1 | 0) == HEAP32[$4_1 + 24 >> 2]) | 0] = 0;
    break label$1;
   }
   HEAP32[4914] = 61;
   $0 = -1;
  }
  global$0 = $4_1 + 160 | 0;
  return $0;
 }
 
 function $1815($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $4_1 = HEAP32[$0 + 20 >> 2];
  $3_1 = HEAP32[$0 + 16 >> 2] - $4_1 | 0;
  $3_1 = $3_1 >>> 0 > $2_1 >>> 0 ? $2_1 : $3_1;
  $2591($4_1, $1_1, $3_1);
  HEAP32[$0 + 20 >> 2] = $3_1 + HEAP32[$0 + 20 >> 2];
  return $2_1 | 0;
 }
 
 function $1816($0, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[$3_1 + 12 >> 2] = $2_1;
  HEAP32[$3_1 + 8 >> 2] = $2_1;
  $4_1 = -1;
  $2_1 = $1814(0, 0, $1_1, $2_1);
  label$1 : {
   if (($2_1 | 0) < 0) {
    break label$1
   }
   $5_1 = $0;
   $2_1 = $2_1 + 1 | 0;
   $0 = $2582($2_1);
   HEAP32[$5_1 >> 2] = $0;
   if (!$0) {
    break label$1
   }
   $4_1 = $1814($0, $2_1, $1_1, HEAP32[$3_1 + 12 >> 2]);
  }
  global$0 = $3_1 + 16 | 0;
  return $4_1;
 }
 
 function $1818($0, $1_1) {
  return ($1596($0) | 0) != 0 | ($0 | 32) + -97 >>> 0 < 6;
 }
 
 function $1819($0, $1_1) {
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 + 12 >> 2] = $1_1;
  $0 = $1788($0, 11472, $1_1);
  global$0 = $2_1 + 16 | 0;
  return $0;
 }
 
 function $1820($0, $1_1) {
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 + 12 >> 2] = $1_1;
  $0 = $1814($0, 100, 11487, $1_1);
  global$0 = $2_1 + 16 | 0;
  return $0;
 }
 
 function $1823($0) {
  if ($1796($0)) {
   $2583($0)
  }
 }
 
 function $1824($0) {
  var $1_1 = 0, $2_1 = 0;
  $2_1 = $0;
  while (1) {
   $1_1 = $2_1;
   $2_1 = $1_1 + 4 | 0;
   if (HEAP32[$1_1 >> 2]) {
    continue
   }
   break;
  };
  return $1_1 - $0 >> 2;
 }
 
 function $1828($0, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6 = 0, $7 = 0;
  $7 = global$0 - 16 | 0;
  global$0 = $7;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if ($0) {
       if ($2_1 >>> 0 >= 4) {
        break label$4
       }
       $3_1 = $2_1;
       break label$3;
      }
      $2_1 = 0;
      $0 = HEAP32[$1_1 >> 2];
      $3_1 = HEAP32[$0 >> 2];
      if (!$3_1) {
       break label$1
      }
      while (1) {
       $5_1 = 1;
       if ($3_1 >>> 0 >= 128) {
        $6 = -1;
        $5_1 = $1798($7 + 12 | 0, $3_1);
        if (($5_1 | 0) == -1) {
         break label$1
        }
       }
       $3_1 = HEAP32[$0 + 4 >> 2];
       $0 = $0 + 4 | 0;
       $2_1 = $2_1 + $5_1 | 0;
       $6 = $2_1;
       if ($3_1) {
        continue
       }
       break;
      };
      break label$1;
     }
     $5_1 = HEAP32[$1_1 >> 2];
     $3_1 = $2_1;
     while (1) {
      $4_1 = HEAP32[$5_1 >> 2];
      label$10 : {
       if ($4_1 + -1 >>> 0 >= 127) {
        if (!$4_1) {
         HEAP8[$0 | 0] = 0;
         HEAP32[$1_1 >> 2] = 0;
         break label$2;
        }
        $6 = -1;
        $4_1 = $1798($0, $4_1);
        if (($4_1 | 0) == -1) {
         break label$1
        }
        $3_1 = $3_1 - $4_1 | 0;
        $0 = $0 + $4_1 | 0;
        break label$10;
       }
       HEAP8[$0 | 0] = $4_1;
       $3_1 = $3_1 + -1 | 0;
       $5_1 = HEAP32[$1_1 >> 2];
       $0 = $0 + 1 | 0;
      }
      $5_1 = $5_1 + 4 | 0;
      HEAP32[$1_1 >> 2] = $5_1;
      if ($3_1 >>> 0 > 3) {
       continue
      }
      break;
     };
    }
    if ($3_1) {
     $5_1 = HEAP32[$1_1 >> 2];
     while (1) {
      $4_1 = HEAP32[$5_1 >> 2];
      label$15 : {
       if ($4_1 + -1 >>> 0 >= 127) {
        if (!$4_1) {
         HEAP8[$0 | 0] = 0;
         HEAP32[$1_1 >> 2] = 0;
         break label$2;
        }
        $6 = -1;
        $4_1 = $1798($7 + 12 | 0, $4_1);
        if (($4_1 | 0) == -1) {
         break label$1
        }
        if ($3_1 >>> 0 < $4_1 >>> 0) {
         break label$2
        }
        $1798($0, HEAP32[$5_1 >> 2]);
        $3_1 = $3_1 - $4_1 | 0;
        $0 = $0 + $4_1 | 0;
        break label$15;
       }
       HEAP8[$0 | 0] = $4_1;
       $3_1 = $3_1 + -1 | 0;
       $5_1 = HEAP32[$1_1 >> 2];
       $0 = $0 + 1 | 0;
      }
      $5_1 = $5_1 + 4 | 0;
      HEAP32[$1_1 >> 2] = $5_1;
      if ($3_1) {
       continue
      }
      break;
     };
    }
    $6 = $2_1;
    break label$1;
   }
   $6 = $2_1 - $3_1 | 0;
  }
  global$0 = $7 + 16 | 0;
  return $6;
 }
 
 function $1829($0, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = 0, $6 = 0, $7 = 0, $8 = 0, $9_1 = 0;
  $5_1 = global$0 - 272 | 0;
  global$0 = $5_1;
  $6 = HEAP32[$1_1 >> 2];
  HEAP32[$5_1 + 12 >> 2] = $6;
  $7 = $0 ? $0 : $5_1 + 16 | 0;
  $3_1 = $0 ? $3_1 : 256;
  label$1 : {
   if (!$3_1 | !$6) {
    break label$1
   }
   $4_1 = $3_1 >>> 0 <= $2_1 >>> 0;
   if (!($4_1 | $2_1 >>> 0 > 32)) {
    break label$1
   }
   while (1) {
    $4_1 = $4_1 ? $3_1 : $2_1;
    $2_1 = $2_1 - $4_1 | 0;
    $4_1 = $1828($7, $5_1 + 12 | 0, $4_1);
    if (($4_1 | 0) == -1) {
     $3_1 = 0;
     $6 = HEAP32[$5_1 + 12 >> 2];
     $8 = -1;
     break label$1;
    }
    $6 = ($5_1 + 16 | 0) == ($7 | 0);
    $7 = $6 ? $7 : $4_1 + $7 | 0;
    $8 = $4_1 + $8 | 0;
    $3_1 = $3_1 - ($6 ? 0 : $4_1) | 0;
    $6 = HEAP32[$5_1 + 12 >> 2];
    if (!$3_1 | !$6) {
     break label$1
    }
    $4_1 = $2_1 >>> 0 >= $3_1 >>> 0;
    if ($4_1 | $2_1 >>> 0 >= 33) {
     continue
    }
    break;
   };
  }
  label$6 : {
   label$7 : {
    if (!$2_1 | (!$6 | !$3_1)) {
     break label$7
    }
    while (1) {
     $9_1 = $1798($7, HEAP32[$6 >> 2]);
     if ($9_1 + 1 >>> 0 <= 1) {
      $4_1 = -1;
      if ($9_1) {
       break label$6
      }
      HEAP32[$5_1 + 12 >> 2] = 0;
      break label$7;
     }
     $6 = HEAP32[$5_1 + 12 >> 2] + 4 | 0;
     HEAP32[$5_1 + 12 >> 2] = $6;
     $8 = $8 + $9_1 | 0;
     $3_1 = $3_1 - $9_1 | 0;
     if (!$3_1) {
      break label$7
     }
     $7 = $7 + $9_1 | 0;
     $4_1 = $8;
     $2_1 = $2_1 + -1 | 0;
     if ($2_1) {
      continue
     }
     break;
    };
    break label$6;
   }
   $4_1 = $8;
  }
  if ($0) {
   HEAP32[$1_1 >> 2] = HEAP32[$5_1 + 12 >> 2]
  }
  global$0 = $5_1 + 272 | 0;
  return $4_1;
 }
 
 function $1830($0, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = 0, $6 = 0, $7 = 0, $8 = 0, $9_1 = 0;
  $5_1 = HEAP32[$1_1 >> 2];
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            label$11 : {
             label$12 : {
              if (!$3_1) {
               break label$12
              }
              $6 = HEAP32[$3_1 >> 2];
              if (!$6) {
               break label$12
              }
              if (!$0) {
               $3_1 = $2_1;
               break label$10;
              }
              HEAP32[$3_1 >> 2] = 0;
              $3_1 = $2_1;
              break label$11;
             }
             label$14 : {
              if (!HEAP32[HEAP32[4694] >> 2]) {
               if (!$0) {
                break label$14
               }
               if (!$2_1) {
                break label$1
               }
               $6 = $2_1;
               while (1) {
                $3_1 = HEAP8[$5_1 | 0];
                if ($3_1) {
                 HEAP32[$0 >> 2] = $3_1 & 57343;
                 $0 = $0 + 4 | 0;
                 $5_1 = $5_1 + 1 | 0;
                 $6 = $6 + -1 | 0;
                 if ($6) {
                  continue
                 }
                 break label$1;
                }
                break;
               };
               HEAP32[$0 >> 2] = 0;
               HEAP32[$1_1 >> 2] = 0;
               return $2_1 - $6 | 0;
              }
              $3_1 = $2_1;
              if (!$0) {
               break label$9
              }
              break label$7;
             }
             return $2597($5_1);
            }
            $4_1 = 1;
            break label$7;
           }
           $4_1 = 0;
           break label$8;
          }
          $4_1 = 1;
         }
         while (1) {
          if (!$4_1) {
           $4_1 = HEAPU8[$5_1 | 0] >>> 3 | 0;
           if (($4_1 + -16 | $4_1 + ($6 >> 26)) >>> 0 > 7) {
            break label$6
           }
           $4_1 = $5_1 + 1 | 0;
           $8 = $4_1;
           label$20 : {
            if (!($6 & 33554432)) {
             break label$20
            }
            if ((HEAPU8[$4_1 | 0] & 192) != 128) {
             break label$6
            }
            $4_1 = $5_1 + 2 | 0;
            $8 = $4_1;
            if (!($6 & 524288)) {
             break label$20
            }
            if ((HEAPU8[$4_1 | 0] & 192) != 128) {
             break label$6
            }
            $8 = $5_1 + 3 | 0;
           }
           $5_1 = $8;
           $3_1 = $3_1 + -1 | 0;
           $4_1 = 1;
           continue;
          }
          while (1) {
           $6 = HEAPU8[$5_1 | 0];
           label$22 : {
            if ($5_1 & 3 | $6 + -1 >>> 0 > 126) {
             break label$22
            }
            $6 = HEAP32[$5_1 >> 2];
            if (($6 | $6 + -16843009) & -2139062144) {
             break label$22
            }
            while (1) {
             $3_1 = $3_1 + -4 | 0;
             $6 = HEAP32[$5_1 + 4 >> 2];
             $4_1 = $5_1 + 4 | 0;
             $5_1 = $4_1;
             if (!(($6 + -16843009 | $6) & -2139062144)) {
              continue
             }
             break;
            };
            $5_1 = $4_1;
           }
           $4_1 = $6 & 255;
           if ($4_1 + -1 >>> 0 <= 126) {
            $3_1 = $3_1 + -1 | 0;
            $5_1 = $5_1 + 1 | 0;
            continue;
           }
           break;
          };
          $4_1 = $4_1 + -194 | 0;
          if ($4_1 >>> 0 > 50) {
           break label$5
          }
          $5_1 = $5_1 + 1 | 0;
          $6 = HEAP32[($4_1 << 2) + 6224 >> 2];
          $4_1 = 0;
          continue;
         };
        }
        while (1) {
         if (!$4_1) {
          if (!$3_1) {
           break label$1
          }
          while (1) {
           label$28 : {
            $4_1 = HEAPU8[$5_1 | 0];
            $7 = $4_1 + -1 | 0;
            label$29 : {
             label$30 : {
              if ($7 >>> 0 > 126) {
               $6 = $4_1;
               break label$30;
              }
              if ($5_1 & 3 | $3_1 >>> 0 < 5) {
               break label$29
              }
              label$32 : {
               while (1) {
                $6 = HEAP32[$5_1 >> 2];
                if (($6 | $6 + -16843009) & -2139062144) {
                 break label$32
                }
                HEAP32[$0 >> 2] = $6 & 255;
                HEAP32[$0 + 4 >> 2] = HEAPU8[$5_1 + 1 | 0];
                HEAP32[$0 + 8 >> 2] = HEAPU8[$5_1 + 2 | 0];
                HEAP32[$0 + 12 >> 2] = HEAPU8[$5_1 + 3 | 0];
                $0 = $0 + 16 | 0;
                $5_1 = $5_1 + 4 | 0;
                $3_1 = $3_1 + -4 | 0;
                if ($3_1 >>> 0 > 4) {
                 continue
                }
                break;
               };
               $6 = HEAPU8[$5_1 | 0];
              }
              $4_1 = $6 & 255;
              $7 = $4_1 + -1 | 0;
             }
             if ($7 >>> 0 > 126) {
              break label$28
             }
            }
            HEAP32[$0 >> 2] = $4_1;
            $0 = $0 + 4 | 0;
            $5_1 = $5_1 + 1 | 0;
            $3_1 = $3_1 + -1 | 0;
            if ($3_1) {
             continue
            }
            break label$1;
           }
           break;
          };
          $4_1 = $4_1 + -194 | 0;
          if ($4_1 >>> 0 > 50) {
           break label$5
          }
          $5_1 = $5_1 + 1 | 0;
          $6 = HEAP32[($4_1 << 2) + 6224 >> 2];
          $4_1 = 1;
          continue;
         }
         $4_1 = HEAPU8[$5_1 | 0];
         $7 = $4_1 >>> 3 | 0;
         if (($7 + -16 | $7 + ($6 >> 26)) >>> 0 > 7) {
          break label$6
         }
         label$34 : {
          label$35 : {
           $7 = $5_1 + 1 | 0;
           $4_1 = $4_1 + -128 | $6 << 6;
           $8 = $7;
           label$36 : {
            if (($4_1 | 0) > -1) {
             break label$36
            }
            $7 = HEAPU8[$7 | 0] + -128 | 0;
            if ($7 >>> 0 > 63) {
             break label$35
            }
            $9_1 = $5_1 + 2 | 0;
            $4_1 = $7 | $4_1 << 6;
            $8 = $9_1;
            if (($4_1 | 0) > -1) {
             break label$36
            }
            $7 = HEAPU8[$9_1 | 0] + -128 | 0;
            if ($7 >>> 0 > 63) {
             break label$35
            }
            $4_1 = $7 | $4_1 << 6;
            $8 = $5_1 + 3 | 0;
           }
           $5_1 = $8;
           HEAP32[$0 >> 2] = $4_1;
           $3_1 = $3_1 + -1 | 0;
           $0 = $0 + 4 | 0;
           break label$34;
          }
          HEAP32[4914] = 25;
          $5_1 = $5_1 + -1 | 0;
          break label$3;
         }
         $4_1 = 0;
         continue;
        };
       }
       $5_1 = $5_1 + -1 | 0;
       if ($6) {
        break label$4
       }
       $6 = HEAPU8[$5_1 | 0];
      }
      if ($6 & 255) {
       break label$4
      }
      if ($0) {
       HEAP32[$0 >> 2] = 0;
       HEAP32[$1_1 >> 2] = 0;
      }
      return $2_1 - $3_1 | 0;
     }
     HEAP32[4914] = 25;
     if (!$0) {
      break label$2
     }
    }
    HEAP32[$1_1 >> 2] = $5_1;
   }
   return -1;
  }
  HEAP32[$1_1 >> 2] = $5_1;
  return $2_1;
 }
 
 function $1831($0, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = 0, $6 = 0, $7 = 0, $8 = 0, $9_1 = 0, $10_1 = 0;
  $6 = global$0 - 1040 | 0;
  global$0 = $6;
  $7 = HEAP32[$1_1 >> 2];
  HEAP32[$6 + 12 >> 2] = $7;
  $8 = $0 ? $0 : $6 + 16 | 0;
  $3_1 = $0 ? $3_1 : 256;
  label$1 : {
   if (!$3_1 | !$7) {
    break label$1
   }
   $5_1 = $2_1 >>> 2 | 0;
   $10_1 = $5_1 >>> 0 >= $3_1 >>> 0;
   if ($5_1 >>> 0 < $3_1 >>> 0 ? $2_1 >>> 0 <= 131 : 0) {
    break label$1
   }
   while (1) {
    $5_1 = $10_1 ? $3_1 : $5_1;
    $2_1 = $2_1 - $5_1 | 0;
    $5_1 = $1830($8, $6 + 12 | 0, $5_1, $4_1);
    if (($5_1 | 0) == -1) {
     $3_1 = 0;
     $7 = HEAP32[$6 + 12 >> 2];
     $9_1 = -1;
     break label$1;
    }
    $10_1 = ($6 + 16 | 0) == ($8 | 0);
    $8 = $10_1 ? $8 : ($5_1 << 2) + $8 | 0;
    $9_1 = $5_1 + $9_1 | 0;
    $3_1 = $3_1 - ($10_1 ? 0 : $5_1) | 0;
    $7 = HEAP32[$6 + 12 >> 2];
    if (!$3_1 | !$7) {
     break label$1
    }
    $5_1 = $2_1 >>> 2 | 0;
    $10_1 = $5_1 >>> 0 >= $3_1 >>> 0;
    if ($2_1 >>> 0 > 131 | $5_1 >>> 0 >= $3_1 >>> 0) {
     continue
    }
    break;
   };
  }
  label$4 : {
   label$5 : {
    if (!$2_1 | (!$7 | !$3_1)) {
     break label$5
    }
    while (1) {
     $5_1 = $1780($8, $7, $2_1, $4_1);
     if ($5_1 + 2 >>> 0 <= 2) {
      label$8 : {
       switch ($5_1 + 1 | 0) {
       case 1:
        HEAP32[$6 + 12 >> 2] = 0;
        break label$5;
       case 0:
        break label$4;
       default:
        break label$8;
       };
      }
      HEAP32[$4_1 >> 2] = 0;
      break label$5;
     }
     $7 = HEAP32[$6 + 12 >> 2] + $5_1 | 0;
     HEAP32[$6 + 12 >> 2] = $7;
     $9_1 = $9_1 + 1 | 0;
     $3_1 = $3_1 + -1 | 0;
     if (!$3_1) {
      break label$5
     }
     $8 = $8 + 4 | 0;
     $2_1 = $2_1 - $5_1 | 0;
     $5_1 = $9_1;
     if ($2_1) {
      continue
     }
     break;
    };
    break label$4;
   }
   $5_1 = $9_1;
  }
  if ($0) {
   HEAP32[$1_1 >> 2] = HEAP32[$6 + 12 >> 2]
  }
  global$0 = $6 + 1040 | 0;
  return $5_1;
 }
 
 function $1835($0) {
  var $1_1 = 0;
  $1_1 = HEAP32[4694];
  if ($0) {
   HEAP32[4694] = ($0 | 0) == -1 ? 19700 : $0
  }
  return ($1_1 | 0) == 19700 ? -1 : $1_1;
 }
 
 function $1837($0, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = 0;
  $5_1 = global$0 - 144 | 0;
  global$0 = $5_1;
  HEAP32[$5_1 + 44 >> 2] = $0;
  HEAP32[$5_1 + 4 >> 2] = $0;
  HEAP32[$5_1 >> 2] = 0;
  HEAP32[$5_1 + 76 >> 2] = -1;
  HEAP32[$5_1 + 8 >> 2] = ($0 | 0) < 0 ? -1 : $0 + 2147483647 | 0;
  $1600($5_1, 0, 0);
  $2_1 = $1778($5_1, $2_1, 1, $3_1, $4_1);
  $3_1 = i64toi32_i32$HIGH_BITS;
  if ($1_1) {
   HEAP32[$1_1 >> 2] = ((HEAP32[$5_1 + 4 >> 2] + HEAP32[$5_1 + 120 >> 2] | 0) - HEAP32[$5_1 + 8 >> 2] | 0) + $0
  }
  global$0 = $5_1 + 144 | 0;
  i64toi32_i32$HIGH_BITS = $3_1;
  return $2_1;
 }
 
 function $1839($0, $1_1, $2_1, $3_1) {
  return $1837($0, $1_1, $2_1, -1, -1);
 }
 
 function $1840($0, $1_1, $2_1, $3_1) {
  return $1837($0, $1_1, $2_1, 0, -2147483648);
 }
 
 function $1843($0, $1_1, $2_1, $3_1, $4_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6 = 0;
  label$1 : {
   while (1) {
    if (($3_1 | 0) != ($4_1 | 0)) {
     $0 = -1;
     if (($1_1 | 0) == ($2_1 | 0)) {
      break label$1
     }
     $5_1 = HEAP8[$1_1 | 0];
     $6 = HEAP8[$3_1 | 0];
     if (($5_1 | 0) < ($6 | 0)) {
      break label$1
     }
     if (($6 | 0) < ($5_1 | 0)) {
      return 1
     } else {
      $3_1 = $3_1 + 1 | 0;
      $1_1 = $1_1 + 1 | 0;
      continue;
     }
    }
    break;
   };
   $0 = ($1_1 | 0) != ($2_1 | 0);
  }
  return $0 | 0;
 }
 
 function $1844($0, $1_1, $2_1, $3_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $1846($0, $2_1, $3_1);
  global$0 = $1_1 + 16 | 0;
 }
 
 function $1846($0, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  $4_1 = $371($1_1, $2_1);
  if ($4_1 >>> 0 <= 4294967279) {
   label$2 : {
    if ($4_1 >>> 0 <= 10) {
     $324($0, $4_1);
     $3_1 = $0;
     break label$2;
    }
    $6 = $326($4_1) + 1 | 0;
    $3_1 = $328($0, $6);
    $331($0, $3_1);
    $332($0, $6);
    $333($0, $4_1);
   }
   while (1) {
    if (($1_1 | 0) != ($2_1 | 0)) {
     $335($3_1, $1_1);
     $3_1 = $3_1 + 1 | 0;
     $1_1 = $1_1 + 1 | 0;
     continue;
    }
    break;
   };
   HEAP8[$5_1 + 15 | 0] = 0;
   $335($3_1, $5_1 + 15 | 0);
   global$0 = $5_1 + 16 | 0;
   return;
  }
  $2506();
  abort();
 }
 
 function $1847($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $0 = 0;
  while (1) {
   if (($1_1 | 0) != ($2_1 | 0)) {
    $0 = HEAP8[$1_1 | 0] + ($0 << 4) | 0;
    $3_1 = $0 & -268435456;
    $0 = ($3_1 | $3_1 >>> 24) ^ $0;
    $1_1 = $1_1 + 1 | 0;
    continue;
   }
   break;
  };
  return $0 | 0;
 }
 
 function $1848($0, $1_1, $2_1, $3_1, $4_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6 = 0;
  label$1 : {
   while (1) {
    if (($3_1 | 0) != ($4_1 | 0)) {
     $0 = -1;
     if (($1_1 | 0) == ($2_1 | 0)) {
      break label$1
     }
     $5_1 = HEAP32[$1_1 >> 2];
     $6 = HEAP32[$3_1 >> 2];
     if (($5_1 | 0) < ($6 | 0)) {
      break label$1
     }
     if (($6 | 0) < ($5_1 | 0)) {
      return 1
     } else {
      $3_1 = $3_1 + 4 | 0;
      $1_1 = $1_1 + 4 | 0;
      continue;
     }
    }
    break;
   };
   $0 = ($1_1 | 0) != ($2_1 | 0);
  }
  return $0 | 0;
 }
 
 function $1849($0, $1_1, $2_1, $3_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $1852($0, $2_1, $3_1);
  global$0 = $1_1 + 16 | 0;
 }
 
 function $1852($0, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  $4_1 = $1645($1_1, $2_1);
  if ($4_1 >>> 0 <= 1073741807) {
   label$2 : {
    if ($4_1 >>> 0 <= 1) {
     $324($0, $4_1);
     $3_1 = $0;
     break label$2;
    }
    $6 = $2453($4_1) + 1 | 0;
    $3_1 = $2460($6);
    $331($0, $3_1);
    $332($0, $6);
    $333($0, $4_1);
   }
   while (1) {
    if (($1_1 | 0) != ($2_1 | 0)) {
     $175($3_1, $1_1);
     $3_1 = $3_1 + 4 | 0;
     $1_1 = $1_1 + 4 | 0;
     continue;
    }
    break;
   };
   HEAP32[$5_1 + 12 >> 2] = 0;
   $175($3_1, $5_1 + 12 | 0);
   global$0 = $5_1 + 16 | 0;
   return;
  }
  $2506();
  abort();
 }
 
 function $1853($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $0 = 0;
  while (1) {
   if (($1_1 | 0) != ($2_1 | 0)) {
    $0 = HEAP32[$1_1 >> 2] + ($0 << 4) | 0;
    $3_1 = $0 & -268435456;
    $0 = ($3_1 | $3_1 >>> 24) ^ $0;
    $1_1 = $1_1 + 4 | 0;
    continue;
   }
   break;
  };
  return $0 | 0;
 }
 
 function $1854($0, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $6 = global$0 - 32 | 0;
  global$0 = $6;
  HEAP32[$6 + 24 >> 2] = $1_1;
  label$1 : {
   if (!(HEAP32[$3_1 + 4 >> 2] & 1)) {
    HEAP32[$6 >> 2] = -1;
    $1_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $1_1, $2_1, $3_1, $4_1, $6) | 0;
    HEAP32[$6 + 24 >> 2] = $1_1;
    label$3 : {
     switch (HEAP32[$6 >> 2]) {
     case 0:
      HEAP8[$5_1 | 0] = 0;
      break label$1;
     case 1:
      HEAP8[$5_1 | 0] = 1;
      break label$1;
     default:
      break label$3;
     };
    }
    HEAP8[$5_1 | 0] = 1;
    HEAP32[$4_1 >> 2] = 4;
    break label$1;
   }
   $1687($6, $3_1);
   $1_1 = $343($6);
   $1855($6);
   $1687($6, $3_1);
   $0 = $1856($6);
   $1855($6);
   $1857($6, $0);
   $1858($6 | 12, $0);
   $3_1 = $6 + 24 | 0;
   (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = ($1859($6 + 24 | 0, $2_1, $6, $3_1, $1_1, $4_1, 1) | 0) == ($6 | 0)), HEAP8[wasm2js_i32$0 | 0] = wasm2js_i32$1;
   $1_1 = HEAP32[$6 + 24 >> 2];
   while (1) {
    $3_1 = $2512($3_1 + -12 | 0);
    if (($6 | 0) != ($3_1 | 0)) {
     continue
    }
    break;
   };
  }
  global$0 = $6 + 32 | 0;
  return $1_1 | 0;
 }
 
 function $1855($0) {
  $2269(HEAP32[$0 >> 2]);
 }
 
 function $1856($0) {
  return $1860($0, 23152);
 }
 
 function $1857($0, $1_1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 24 >> 2]]($0, $1_1);
 }
 
 function $1858($0, $1_1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 28 >> 2]]($0, $1_1);
 }
 
 function $1859($0, $1_1, $2_1, $3_1, $4_1, $5_1, $6) {
  var $7 = 0, $8 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14 = 0, $15 = 0, $16_1 = 0, $17 = 0, $18_1 = 0;
  $8 = global$0 - 128 | 0;
  global$0 = $8;
  HEAP32[$8 + 120 >> 2] = $1_1;
  $10_1 = $1861($2_1, $3_1);
  HEAP32[$8 + 16 >> 2] = 139;
  $15 = $299($8 + 8 | 0, 0, $8 + 16 | 0);
  $9_1 = $8 + 16 | 0;
  label$1 : {
   if ($10_1 >>> 0 >= 101) {
    $9_1 = $2582($10_1);
    if (!$9_1) {
     break label$1
    }
    $1863($15, $9_1);
   }
   $7 = $9_1;
   $1_1 = $2_1;
   while (1) if (($1_1 | 0) == ($3_1 | 0)) {
    label$5 : while (1) {
     label$6 : {
      if (!($1688($0, $8 + 120 | 0) ? $10_1 : 0)) {
       if ($1692($0, $8 + 120 | 0)) {
        HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 2
       }
       break label$6;
      }
      $12_1 = $1689($0);
      if (!$6) {
       $12_1 = $1864($4_1, $12_1)
      }
      $13_1 = $16_1 + 1 | 0;
      $17 = 0;
      $7 = $9_1;
      $1_1 = $2_1;
      while (1) if (($1_1 | 0) == ($3_1 | 0)) {
       $16_1 = $13_1;
       if (!$17) {
        continue label$5
       }
       $1691($0);
       $7 = $9_1;
       $1_1 = $2_1;
       if ($10_1 + $11_1 >>> 0 < 2) {
        continue label$5
       }
       while (1) if (($1_1 | 0) == ($3_1 | 0)) {
        continue label$5
       } else {
        label$15 : {
         if (HEAPU8[$7 | 0] != 2) {
          break label$15
         }
         if (($100($1_1) | 0) == ($13_1 | 0)) {
          break label$15
         }
         HEAP8[$7 | 0] = 0;
         $11_1 = $11_1 + -1 | 0;
        }
        $7 = $7 + 1 | 0;
        $1_1 = $1_1 + 12 | 0;
        continue;
       };
      } else {
       label$17 : {
        if (HEAPU8[$7 | 0] != 1) {
         break label$17
        }
        $14 = HEAPU8[$1865($1_1, $16_1) | 0];
        $18_1 = $12_1 & 255;
        if (!$6) {
         $14 = $1864($4_1, $14 << 24 >> 24)
        }
        label$18 : {
         if (($14 & 255) == ($18_1 | 0)) {
          $17 = 1;
          if (($100($1_1) | 0) != ($13_1 | 0)) {
           break label$17
          }
          HEAP8[$7 | 0] = 2;
          $11_1 = $11_1 + 1 | 0;
          break label$18;
         }
         HEAP8[$7 | 0] = 0;
        }
        $10_1 = $10_1 + -1 | 0;
       }
       $7 = $7 + 1 | 0;
       $1_1 = $1_1 + 12 | 0;
       continue;
      };
     }
     break;
    };
    label$22 : {
     label$23 : {
      while (1) {
       if (($2_1 | 0) == ($3_1 | 0)) {
        break label$23
       }
       if (HEAPU8[$9_1 | 0] != 2) {
        $9_1 = $9_1 + 1 | 0;
        $2_1 = $2_1 + 12 | 0;
        continue;
       }
       break;
      };
      $3_1 = $2_1;
      break label$22;
     }
     HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 4;
    }
    $1866($15);
    global$0 = $8 + 128 | 0;
    return $3_1;
   } else {
    label$27 : {
     if (!$772($1_1)) {
      HEAP8[$7 | 0] = 1;
      break label$27;
     }
     HEAP8[$7 | 0] = 2;
     $11_1 = $11_1 + 1 | 0;
     $10_1 = $10_1 + -1 | 0;
    }
    $7 = $7 + 1 | 0;
    $1_1 = $1_1 + 12 | 0;
    continue;
   };
  }
  $1643();
  abort();
 }
 
 function $1860($0, $1_1) {
  $0 = HEAP32[$0 >> 2];
  $1_1 = $2231($1_1);
  if (!$2280($0, $1_1)) {
   $273();
   abort();
  }
  return HEAP32[$530($0 + 16 | 0, $1_1) >> 2];
 }
 
 function $1861($0, $1_1) {
  return ($1_1 - $0 | 0) / 12 | 0;
 }
 
 function $1863($0, $1_1) {
  var $2_1 = 0;
  $2_1 = HEAP32[$0 >> 2];
  HEAP32[$0 >> 2] = $1_1;
  if ($2_1) {
   FUNCTION_TABLE[HEAP32[$305($0) >> 2]]($2_1)
  }
 }
 
 function $1864($0, $1_1) {
  return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0, $1_1) | 0;
 }
 
 function $1865($0, $1_1) {
  return $320($0) + $1_1 | 0;
 }
 
 function $1866($0) {
  $1863($0, 0);
 }
 
 function $1867($0, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $1868($1_1, $2_1, $3_1, $4_1, $5_1) | 0;
 }
 
 function $1868($0, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = 0, $6 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $5_1 = global$0 - 272 | 0;
  global$0 = $5_1;
  HEAP32[$5_1 + 256 >> 2] = $1_1;
  HEAP32[$5_1 + 264 >> 2] = $0;
  $6 = $1869($2_1);
  $1871($5_1 + 208 | 0, $2_1, $5_1 + 255 | 0);
  $0 = $189($5_1 + 192 | 0);
  $359($0, $358($0));
  $1_1 = $1865($0, 0);
  HEAP32[$5_1 + 188 >> 2] = $1_1;
  HEAP32[$5_1 + 12 >> 2] = $5_1 + 16;
  HEAP32[$5_1 + 8 >> 2] = 0;
  while (1) {
   label$2 : {
    if (!$1688($5_1 + 264 | 0, $5_1 + 256 | 0)) {
     break label$2
    }
    if (HEAP32[$5_1 + 188 >> 2] == ($100($0) + $1_1 | 0)) {
     $2_1 = $100($0);
     $359($0, $100($0) << 1);
     $359($0, $358($0));
     $1_1 = $1865($0, 0);
     HEAP32[$5_1 + 188 >> 2] = $2_1 + $1_1;
    }
    if ($1873($1689($5_1 + 264 | 0), $6, $1_1, $5_1 + 188 | 0, $5_1 + 8 | 0, HEAP8[$5_1 + 255 | 0], $5_1 + 208 | 0, $5_1 + 16 | 0, $5_1 + 12 | 0, 11216)) {
     break label$2
    }
    $1691($5_1 + 264 | 0);
    continue;
   }
   break;
  };
  label$4 : {
   if (!$100($5_1 + 208 | 0)) {
    break label$4
   }
   $2_1 = HEAP32[$5_1 + 12 >> 2];
   if (($2_1 - ($5_1 + 16 | 0) | 0) > 159) {
    break label$4
   }
   HEAP32[$5_1 + 12 >> 2] = $2_1 + 4;
   HEAP32[$2_1 >> 2] = HEAP32[$5_1 + 8 >> 2];
  }
  (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $1874($1_1, HEAP32[$5_1 + 188 >> 2], $3_1, $6)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  $1875($5_1 + 208 | 0, $5_1 + 16 | 0, HEAP32[$5_1 + 12 >> 2], $3_1);
  if ($1692($5_1 + 264 | 0, $5_1 + 256 | 0)) {
   HEAP32[$3_1 >> 2] = HEAP32[$3_1 >> 2] | 2
  }
  $1_1 = HEAP32[$5_1 + 264 >> 2];
  $2512($0);
  $2512($5_1 + 208 | 0);
  global$0 = $5_1 + 272 | 0;
  return $1_1;
 }
 
 function $1869($0) {
  label$1 : {
   $0 = HEAP32[$0 + 4 >> 2] & 74;
   if ($0) {
    if (($0 | 0) == 64) {
     return 8
    }
    if (($0 | 0) != 8) {
     break label$1
    }
    return 16;
   }
   return 0;
  }
  return 10;
 }
 
 function $1871($0, $1_1, $2_1) {
  var $3_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $1687($3_1 + 8 | 0, $1_1);
  $1_1 = $1856($3_1 + 8 | 0);
  (wasm2js_i32$0 = $2_1, wasm2js_i32$1 = $1942($1_1)), HEAP8[wasm2js_i32$0 | 0] = wasm2js_i32$1;
  $1943($0, $1_1);
  $1855($3_1 + 8 | 0);
  global$0 = $3_1 + 16 | 0;
 }
 
 function $1873($0, $1_1, $2_1, $3_1, $4_1, $5_1, $6, $7, $8, $9_1) {
  var $10_1 = 0, $11_1 = 0, $12_1 = 0;
  $10_1 = global$0 - 16 | 0;
  global$0 = $10_1;
  HEAP8[$10_1 + 15 | 0] = $0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if (HEAP32[$3_1 >> 2] != ($2_1 | 0)) {
       break label$4
      }
      $11_1 = $0 & 255;
      $12_1 = ($11_1 | 0) == HEAPU8[$9_1 + 24 | 0];
      if (HEAPU8[$9_1 + 25 | 0] != ($11_1 | 0) ? !$12_1 : 0) {
       break label$4
      }
      HEAP32[$3_1 >> 2] = $2_1 + 1;
      HEAP8[$2_1 | 0] = $12_1 ? 43 : 45;
      break label$3;
     }
     if (!$100($6) | ($0 | 0) != ($5_1 | 0)) {
      break label$2
     }
     $0 = 0;
     $1_1 = HEAP32[$8 >> 2];
     if (($1_1 - $7 | 0) > 159) {
      break label$1
     }
     $0 = HEAP32[$4_1 >> 2];
     HEAP32[$8 >> 2] = $1_1 + 4;
     HEAP32[$1_1 >> 2] = $0;
    }
    $0 = 0;
    HEAP32[$4_1 >> 2] = 0;
    break label$1;
   }
   $0 = -1;
   $5_1 = $1906($9_1, $9_1 + 26 | 0, $10_1 + 15 | 0) - $9_1 | 0;
   if (($5_1 | 0) > 23) {
    break label$1
   }
   label$6 : {
    label$7 : {
     switch ($1_1 + -8 | 0) {
     default:
      if (($1_1 | 0) != 16 | ($5_1 | 0) < 22) {
       break label$6
      }
      $1_1 = HEAP32[$3_1 >> 2];
      if (($1_1 | 0) == ($2_1 | 0) | ($1_1 - $2_1 | 0) > 2) {
       break label$1
      }
      if (HEAPU8[$1_1 + -1 | 0] != 48) {
       break label$1
      }
      $0 = 0;
      HEAP32[$4_1 >> 2] = 0;
      HEAP32[$3_1 >> 2] = $1_1 + 1;
      HEAP8[$1_1 | 0] = HEAPU8[$5_1 + 11216 | 0];
      break label$1;
     case 1:
      break label$6;
     case 0:
     case 2:
      break label$7;
     };
    }
    if (($5_1 | 0) >= ($1_1 | 0)) {
     break label$1
    }
   }
   $0 = HEAP32[$3_1 >> 2];
   HEAP32[$3_1 >> 2] = $0 + 1;
   HEAP8[$0 | 0] = HEAPU8[$5_1 + 11216 | 0];
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] + 1;
   $0 = 0;
  }
  global$0 = $10_1 + 16 | 0;
  return $0;
 }
 
 function $1874($0, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = 0, $6 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if (($0 | 0) != ($1_1 | 0)) {
      $6 = HEAP32[4914];
      HEAP32[4914] = 0;
      $0 = $1840($0, $4_1 + 12 | 0, $3_1, $1904());
      $3_1 = i64toi32_i32$HIGH_BITS;
      $5_1 = HEAP32[4914];
      label$6 : {
       if ($5_1) {
        if (HEAP32[$4_1 + 12 >> 2] != ($1_1 | 0)) {
         break label$6
        }
        if (($5_1 | 0) == 68) {
         break label$2
        }
        break label$3;
       }
       HEAP32[4914] = $6;
       if (HEAP32[$4_1 + 12 >> 2] == ($1_1 | 0)) {
        break label$3
       }
      }
     }
     HEAP32[$2_1 >> 2] = 4;
     $0 = 0;
     break label$1;
    }
    if ((($3_1 | 0) < -1 ? 1 : ($3_1 | 0) <= -1 ? ($0 >>> 0 >= 2147483648 ? 0 : 1) : 0) | (($3_1 | 0) > 0 ? 1 : ($3_1 | 0) >= 0 ? ($0 >>> 0 <= 2147483647 ? 0 : 1) : 0)) {
     break label$2
    }
    break label$1;
   }
   HEAP32[$2_1 >> 2] = 4;
   if (($3_1 | 0) > 0 ? 1 : ($3_1 | 0) >= 0 ? ($0 >>> 0 < 1 ? 0 : 1) : 0) {
    $0 = 2147483647;
    break label$1;
   }
   $0 = -2147483648;
  }
  global$0 = $4_1 + 16 | 0;
  return $0;
 }
 
 function $1875($0, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = 0;
  label$1 : {
   if (!$100($0) | ($2_1 - $1_1 | 0) < 5) {
    break label$1
   }
   $1975($1_1, $2_1);
   $4_1 = $2_1 + -4 | 0;
   $2_1 = $320($0);
   $5_1 = $2_1 + $100($0) | 0;
   while (1) {
    label$3 : {
     $0 = HEAP8[$2_1 | 0];
     if ($1_1 >>> 0 >= $4_1 >>> 0) {
      break label$3
     }
     if (HEAP32[$1_1 >> 2] == HEAP8[$2_1 | 0] | ($0 | 0) >= 127 | ($0 | 0) < 1) {
      $2_1 = ($5_1 - $2_1 | 0) > 1 ? $2_1 + 1 | 0 : $2_1;
      $1_1 = $1_1 + 4 | 0;
      continue;
     } else {
      HEAP32[$3_1 >> 2] = 4;
      return;
     }
    }
    break;
   };
   if (HEAP32[$4_1 >> 2] + -1 >>> 0 < HEAP8[$2_1 | 0] >>> 0 | ($0 | 0) >= 127 | ($0 | 0) < 1) {
    break label$1
   }
   HEAP32[$3_1 >> 2] = 4;
  }
 }
 
 function $1876($0, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $1877($1_1, $2_1, $3_1, $4_1, $5_1) | 0;
 }
 
 function $1877($0, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = 0, $6 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $5_1 = global$0 - 272 | 0;
  global$0 = $5_1;
  HEAP32[$5_1 + 256 >> 2] = $1_1;
  HEAP32[$5_1 + 264 >> 2] = $0;
  $6 = $1869($2_1);
  $1871($5_1 + 208 | 0, $2_1, $5_1 + 255 | 0);
  $0 = $189($5_1 + 192 | 0);
  $359($0, $358($0));
  $1_1 = $1865($0, 0);
  HEAP32[$5_1 + 188 >> 2] = $1_1;
  HEAP32[$5_1 + 12 >> 2] = $5_1 + 16;
  HEAP32[$5_1 + 8 >> 2] = 0;
  while (1) {
   label$2 : {
    if (!$1688($5_1 + 264 | 0, $5_1 + 256 | 0)) {
     break label$2
    }
    if (HEAP32[$5_1 + 188 >> 2] == ($100($0) + $1_1 | 0)) {
     $2_1 = $100($0);
     $359($0, $100($0) << 1);
     $359($0, $358($0));
     $1_1 = $1865($0, 0);
     HEAP32[$5_1 + 188 >> 2] = $2_1 + $1_1;
    }
    if ($1873($1689($5_1 + 264 | 0), $6, $1_1, $5_1 + 188 | 0, $5_1 + 8 | 0, HEAP8[$5_1 + 255 | 0], $5_1 + 208 | 0, $5_1 + 16 | 0, $5_1 + 12 | 0, 11216)) {
     break label$2
    }
    $1691($5_1 + 264 | 0);
    continue;
   }
   break;
  };
  label$4 : {
   if (!$100($5_1 + 208 | 0)) {
    break label$4
   }
   $2_1 = HEAP32[$5_1 + 12 >> 2];
   if (($2_1 - ($5_1 + 16 | 0) | 0) > 159) {
    break label$4
   }
   HEAP32[$5_1 + 12 >> 2] = $2_1 + 4;
   HEAP32[$2_1 >> 2] = HEAP32[$5_1 + 8 >> 2];
  }
  (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $1878($1_1, HEAP32[$5_1 + 188 >> 2], $3_1, $6)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  HEAP32[$4_1 + 4 >> 2] = i64toi32_i32$HIGH_BITS;
  $1875($5_1 + 208 | 0, $5_1 + 16 | 0, HEAP32[$5_1 + 12 >> 2], $3_1);
  if ($1692($5_1 + 264 | 0, $5_1 + 256 | 0)) {
   HEAP32[$3_1 >> 2] = HEAP32[$3_1 >> 2] | 2
  }
  $1_1 = HEAP32[$5_1 + 264 >> 2];
  $2512($0);
  $2512($5_1 + 208 | 0);
  global$0 = $5_1 + 272 | 0;
  return $1_1;
 }
 
 function $1878($0, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = 0, $6 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if (($0 | 0) != ($1_1 | 0)) {
      $6 = HEAP32[4914];
      HEAP32[4914] = 0;
      $3_1 = $1840($0, $5_1 + 12 | 0, $3_1, $1904());
      $0 = i64toi32_i32$HIGH_BITS;
      $4_1 = HEAP32[4914];
      label$6 : {
       if ($4_1) {
        if (HEAP32[$5_1 + 12 >> 2] != ($1_1 | 0)) {
         break label$6
        }
        if (($4_1 | 0) == 68) {
         break label$2
        }
        break label$3;
       }
       HEAP32[4914] = $6;
       if (HEAP32[$5_1 + 12 >> 2] == ($1_1 | 0)) {
        break label$3
       }
      }
     }
     HEAP32[$2_1 >> 2] = 4;
     $3_1 = 0;
     $0 = 0;
     break label$1;
    }
    $4_1 = $3_1 >>> 0 >= $2468() >>> 0 ? 0 : 1;
    $1_1 = i64toi32_i32$HIGH_BITS;
    if (($0 | 0) < ($1_1 | 0) ? 1 : ($0 | 0) <= ($1_1 | 0) ? $4_1 : 0) {
     break label$2
    }
    $4_1 = $2469() >>> 0 < $3_1 >>> 0 ? 0 : 1;
    $1_1 = i64toi32_i32$HIGH_BITS;
    if (($1_1 | 0) > ($0 | 0) ? 1 : ($1_1 | 0) >= ($0 | 0) ? $4_1 : 0) {
     break label$1
    }
   }
   HEAP32[$2_1 >> 2] = 4;
   if (($0 | 0) > 0 ? 1 : ($0 | 0) >= 0 ? ($3_1 >>> 0 < 1 ? 0 : 1) : 0) {
    $3_1 = $2469();
    $0 = i64toi32_i32$HIGH_BITS;
    break label$1;
   }
   $3_1 = $2468();
   $0 = i64toi32_i32$HIGH_BITS;
  }
  global$0 = $5_1 + 16 | 0;
  i64toi32_i32$HIGH_BITS = $0;
  return $3_1;
 }
 
 function $1879($0, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $1880($1_1, $2_1, $3_1, $4_1, $5_1) | 0;
 }
 
 function $1880($0, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = 0, $6 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $5_1 = global$0 - 272 | 0;
  global$0 = $5_1;
  HEAP32[$5_1 + 256 >> 2] = $1_1;
  HEAP32[$5_1 + 264 >> 2] = $0;
  $6 = $1869($2_1);
  $1871($5_1 + 208 | 0, $2_1, $5_1 + 255 | 0);
  $0 = $189($5_1 + 192 | 0);
  $359($0, $358($0));
  $1_1 = $1865($0, 0);
  HEAP32[$5_1 + 188 >> 2] = $1_1;
  HEAP32[$5_1 + 12 >> 2] = $5_1 + 16;
  HEAP32[$5_1 + 8 >> 2] = 0;
  while (1) {
   label$2 : {
    if (!$1688($5_1 + 264 | 0, $5_1 + 256 | 0)) {
     break label$2
    }
    if (HEAP32[$5_1 + 188 >> 2] == ($100($0) + $1_1 | 0)) {
     $2_1 = $100($0);
     $359($0, $100($0) << 1);
     $359($0, $358($0));
     $1_1 = $1865($0, 0);
     HEAP32[$5_1 + 188 >> 2] = $2_1 + $1_1;
    }
    if ($1873($1689($5_1 + 264 | 0), $6, $1_1, $5_1 + 188 | 0, $5_1 + 8 | 0, HEAP8[$5_1 + 255 | 0], $5_1 + 208 | 0, $5_1 + 16 | 0, $5_1 + 12 | 0, 11216)) {
     break label$2
    }
    $1691($5_1 + 264 | 0);
    continue;
   }
   break;
  };
  label$4 : {
   if (!$100($5_1 + 208 | 0)) {
    break label$4
   }
   $2_1 = HEAP32[$5_1 + 12 >> 2];
   if (($2_1 - ($5_1 + 16 | 0) | 0) > 159) {
    break label$4
   }
   HEAP32[$5_1 + 12 >> 2] = $2_1 + 4;
   HEAP32[$2_1 >> 2] = HEAP32[$5_1 + 8 >> 2];
  }
  (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $1881($1_1, HEAP32[$5_1 + 188 >> 2], $3_1, $6)), HEAP16[wasm2js_i32$0 >> 1] = wasm2js_i32$1;
  $1875($5_1 + 208 | 0, $5_1 + 16 | 0, HEAP32[$5_1 + 12 >> 2], $3_1);
  if ($1692($5_1 + 264 | 0, $5_1 + 256 | 0)) {
   HEAP32[$3_1 >> 2] = HEAP32[$3_1 >> 2] | 2
  }
  $1_1 = HEAP32[$5_1 + 264 >> 2];
  $2512($0);
  $2512($5_1 + 208 | 0);
  global$0 = $5_1 + 272 | 0;
  return $1_1;
 }
 
 function $1881($0, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = 0, $6 = 0, $7 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if (($0 | 0) != ($1_1 | 0)) {
       label$5 : {
        label$7 : {
         $5_1 = HEAPU8[$0 | 0];
         if (($5_1 | 0) != 45) {
          break label$7
         }
         $0 = $0 + 1 | 0;
         if (($1_1 | 0) != ($0 | 0)) {
          break label$7
         }
         break label$5;
        }
        $7 = HEAP32[4914];
        HEAP32[4914] = 0;
        $0 = $1839($0, $4_1 + 12 | 0, $3_1, $1904());
        $3_1 = i64toi32_i32$HIGH_BITS;
        $6 = HEAP32[4914];
        label$8 : {
         if ($6) {
          if (HEAP32[$4_1 + 12 >> 2] != ($1_1 | 0)) {
           break label$8
          }
          if (($6 | 0) == 68) {
           break label$3
          }
          break label$4;
         }
         HEAP32[4914] = $7;
         if (HEAP32[$4_1 + 12 >> 2] == ($1_1 | 0)) {
          break label$4
         }
        }
       }
      }
      HEAP32[$2_1 >> 2] = 4;
      $0 = 0;
      break label$1;
     }
     if (!$3_1 & $0 >>> 0 <= 65535 | $3_1 >>> 0 < 0) {
      break label$2
     }
    }
    HEAP32[$2_1 >> 2] = 4;
    $0 = 65535;
    break label$1;
   }
   $0 = ($5_1 | 0) == 45 ? 0 - $0 | 0 : $0;
  }
  global$0 = $4_1 + 16 | 0;
  return $0 & 65535;
 }
 
 function $1882($0, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $1883($1_1, $2_1, $3_1, $4_1, $5_1) | 0;
 }
 
 function $1883($0, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = 0, $6 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $5_1 = global$0 - 272 | 0;
  global$0 = $5_1;
  HEAP32[$5_1 + 256 >> 2] = $1_1;
  HEAP32[$5_1 + 264 >> 2] = $0;
  $6 = $1869($2_1);
  $1871($5_1 + 208 | 0, $2_1, $5_1 + 255 | 0);
  $0 = $189($5_1 + 192 | 0);
  $359($0, $358($0));
  $1_1 = $1865($0, 0);
  HEAP32[$5_1 + 188 >> 2] = $1_1;
  HEAP32[$5_1 + 12 >> 2] = $5_1 + 16;
  HEAP32[$5_1 + 8 >> 2] = 0;
  while (1) {
   label$2 : {
    if (!$1688($5_1 + 264 | 0, $5_1 + 256 | 0)) {
     break label$2
    }
    if (HEAP32[$5_1 + 188 >> 2] == ($100($0) + $1_1 | 0)) {
     $2_1 = $100($0);
     $359($0, $100($0) << 1);
     $359($0, $358($0));
     $1_1 = $1865($0, 0);
     HEAP32[$5_1 + 188 >> 2] = $2_1 + $1_1;
    }
    if ($1873($1689($5_1 + 264 | 0), $6, $1_1, $5_1 + 188 | 0, $5_1 + 8 | 0, HEAP8[$5_1 + 255 | 0], $5_1 + 208 | 0, $5_1 + 16 | 0, $5_1 + 12 | 0, 11216)) {
     break label$2
    }
    $1691($5_1 + 264 | 0);
    continue;
   }
   break;
  };
  label$4 : {
   if (!$100($5_1 + 208 | 0)) {
    break label$4
   }
   $2_1 = HEAP32[$5_1 + 12 >> 2];
   if (($2_1 - ($5_1 + 16 | 0) | 0) > 159) {
    break label$4
   }
   HEAP32[$5_1 + 12 >> 2] = $2_1 + 4;
   HEAP32[$2_1 >> 2] = HEAP32[$5_1 + 8 >> 2];
  }
  (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $1884($1_1, HEAP32[$5_1 + 188 >> 2], $3_1, $6)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  $1875($5_1 + 208 | 0, $5_1 + 16 | 0, HEAP32[$5_1 + 12 >> 2], $3_1);
  if ($1692($5_1 + 264 | 0, $5_1 + 256 | 0)) {
   HEAP32[$3_1 >> 2] = HEAP32[$3_1 >> 2] | 2
  }
  $1_1 = HEAP32[$5_1 + 264 >> 2];
  $2512($0);
  $2512($5_1 + 208 | 0);
  global$0 = $5_1 + 272 | 0;
  return $1_1;
 }
 
 function $1884($0, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = 0, $6 = 0, $7 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if (($0 | 0) != ($1_1 | 0)) {
       label$5 : {
        label$7 : {
         $5_1 = HEAPU8[$0 | 0];
         if (($5_1 | 0) != 45) {
          break label$7
         }
         $0 = $0 + 1 | 0;
         if (($1_1 | 0) != ($0 | 0)) {
          break label$7
         }
         break label$5;
        }
        $7 = HEAP32[4914];
        HEAP32[4914] = 0;
        $0 = $1839($0, $4_1 + 12 | 0, $3_1, $1904());
        $3_1 = i64toi32_i32$HIGH_BITS;
        $6 = HEAP32[4914];
        label$8 : {
         if ($6) {
          if (HEAP32[$4_1 + 12 >> 2] != ($1_1 | 0)) {
           break label$8
          }
          if (($6 | 0) == 68) {
           break label$3
          }
          break label$4;
         }
         HEAP32[4914] = $7;
         if (HEAP32[$4_1 + 12 >> 2] == ($1_1 | 0)) {
          break label$4
         }
        }
       }
      }
      HEAP32[$2_1 >> 2] = 4;
      $0 = 0;
      break label$1;
     }
     if (!$3_1 & $0 >>> 0 <= 4294967295 | $3_1 >>> 0 < 0) {
      break label$2
     }
    }
    HEAP32[$2_1 >> 2] = 4;
    $0 = -1;
    break label$1;
   }
   $0 = ($5_1 | 0) == 45 ? 0 - $0 | 0 : $0;
  }
  global$0 = $4_1 + 16 | 0;
  return $0;
 }
 
 function $1888($0, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $1889($1_1, $2_1, $3_1, $4_1, $5_1) | 0;
 }
 
 function $1889($0, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = 0, $6 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $5_1 = global$0 - 272 | 0;
  global$0 = $5_1;
  HEAP32[$5_1 + 256 >> 2] = $1_1;
  HEAP32[$5_1 + 264 >> 2] = $0;
  $6 = $1869($2_1);
  $1871($5_1 + 208 | 0, $2_1, $5_1 + 255 | 0);
  $0 = $189($5_1 + 192 | 0);
  $359($0, $358($0));
  $1_1 = $1865($0, 0);
  HEAP32[$5_1 + 188 >> 2] = $1_1;
  HEAP32[$5_1 + 12 >> 2] = $5_1 + 16;
  HEAP32[$5_1 + 8 >> 2] = 0;
  while (1) {
   label$2 : {
    if (!$1688($5_1 + 264 | 0, $5_1 + 256 | 0)) {
     break label$2
    }
    if (HEAP32[$5_1 + 188 >> 2] == ($100($0) + $1_1 | 0)) {
     $2_1 = $100($0);
     $359($0, $100($0) << 1);
     $359($0, $358($0));
     $1_1 = $1865($0, 0);
     HEAP32[$5_1 + 188 >> 2] = $2_1 + $1_1;
    }
    if ($1873($1689($5_1 + 264 | 0), $6, $1_1, $5_1 + 188 | 0, $5_1 + 8 | 0, HEAP8[$5_1 + 255 | 0], $5_1 + 208 | 0, $5_1 + 16 | 0, $5_1 + 12 | 0, 11216)) {
     break label$2
    }
    $1691($5_1 + 264 | 0);
    continue;
   }
   break;
  };
  label$4 : {
   if (!$100($5_1 + 208 | 0)) {
    break label$4
   }
   $2_1 = HEAP32[$5_1 + 12 >> 2];
   if (($2_1 - ($5_1 + 16 | 0) | 0) > 159) {
    break label$4
   }
   HEAP32[$5_1 + 12 >> 2] = $2_1 + 4;
   HEAP32[$2_1 >> 2] = HEAP32[$5_1 + 8 >> 2];
  }
  (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $1890($1_1, HEAP32[$5_1 + 188 >> 2], $3_1, $6)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  HEAP32[$4_1 + 4 >> 2] = i64toi32_i32$HIGH_BITS;
  $1875($5_1 + 208 | 0, $5_1 + 16 | 0, HEAP32[$5_1 + 12 >> 2], $3_1);
  if ($1692($5_1 + 264 | 0, $5_1 + 256 | 0)) {
   HEAP32[$3_1 >> 2] = HEAP32[$3_1 >> 2] | 2
  }
  $1_1 = HEAP32[$5_1 + 264 >> 2];
  $2512($0);
  $2512($5_1 + 208 | 0);
  global$0 = $5_1 + 272 | 0;
  return $1_1;
 }
 
 function $1890($0, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = 0, $6 = 0, $7 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if (($0 | 0) != ($1_1 | 0)) {
       label$5 : {
        label$7 : {
         $6 = HEAPU8[$0 | 0];
         if (($6 | 0) != 45) {
          break label$7
         }
         $0 = $0 + 1 | 0;
         if (($1_1 | 0) != ($0 | 0)) {
          break label$7
         }
         break label$5;
        }
        $7 = HEAP32[4914];
        HEAP32[4914] = 0;
        $3_1 = $1839($0, $4_1 + 12 | 0, $3_1, $1904());
        $5_1 = i64toi32_i32$HIGH_BITS;
        $0 = HEAP32[4914];
        label$8 : {
         if ($0) {
          if (HEAP32[$4_1 + 12 >> 2] != ($1_1 | 0)) {
           break label$8
          }
          if (($0 | 0) == 68) {
           break label$3
          }
          break label$4;
         }
         HEAP32[4914] = $7;
         if (HEAP32[$4_1 + 12 >> 2] == ($1_1 | 0)) {
          break label$4
         }
        }
       }
      }
      HEAP32[$2_1 >> 2] = 4;
      $0 = 0;
      $1_1 = 0;
      break label$1;
     }
     $0 = $2474();
     $1_1 = i64toi32_i32$HIGH_BITS;
     if (($5_1 | 0) == ($1_1 | 0) & $0 >>> 0 >= $3_1 >>> 0 | $1_1 >>> 0 > $5_1 >>> 0) {
      break label$2
     }
    }
    HEAP32[$2_1 >> 2] = 4;
    $0 = $2474();
    $1_1 = i64toi32_i32$HIGH_BITS;
    break label$1;
   }
   $1_1 = ($6 | 0) == 45;
   $0 = $1_1 ? 0 - $3_1 | 0 : $3_1;
   $1_1 = $1_1 ? 0 - ($5_1 + (0 < $3_1 >>> 0) | 0) | 0 : $5_1;
  }
  global$0 = $4_1 + 16 | 0;
  i64toi32_i32$HIGH_BITS = $1_1;
  return $0;
 }
 
 function $1891($0, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $1892($1_1, $2_1, $3_1, $4_1, $5_1) | 0;
 }
 
 function $1892($0, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
  $5_1 = global$0 - 272 | 0;
  global$0 = $5_1;
  HEAP32[$5_1 + 256 >> 2] = $1_1;
  HEAP32[$5_1 + 264 >> 2] = $0;
  $1893($5_1 + 208 | 0, $2_1, $5_1 + 224 | 0, $5_1 + 223 | 0, $5_1 + 222 | 0);
  $1_1 = $189($5_1 + 192 | 0);
  $359($1_1, $358($1_1));
  $0 = $1865($1_1, 0);
  HEAP32[$5_1 + 188 >> 2] = $0;
  HEAP32[$5_1 + 12 >> 2] = $5_1 + 16;
  HEAP32[$5_1 + 8 >> 2] = 0;
  HEAP8[$5_1 + 7 | 0] = 1;
  HEAP8[$5_1 + 6 | 0] = 69;
  while (1) {
   label$2 : {
    if (!$1688($5_1 + 264 | 0, $5_1 + 256 | 0)) {
     break label$2
    }
    if (HEAP32[$5_1 + 188 >> 2] == ($100($1_1) + $0 | 0)) {
     $2_1 = $100($1_1);
     $359($1_1, $100($1_1) << 1);
     $359($1_1, $358($1_1));
     $0 = $1865($1_1, 0);
     HEAP32[$5_1 + 188 >> 2] = $2_1 + $0;
    }
    if ($1894($1689($5_1 + 264 | 0), $5_1 + 7 | 0, $5_1 + 6 | 0, $0, $5_1 + 188 | 0, HEAP8[$5_1 + 223 | 0], HEAP8[$5_1 + 222 | 0], $5_1 + 208 | 0, $5_1 + 16 | 0, $5_1 + 12 | 0, $5_1 + 8 | 0, $5_1 + 224 | 0)) {
     break label$2
    }
    $1691($5_1 + 264 | 0);
    continue;
   }
   break;
  };
  label$4 : {
   if (!$100($5_1 + 208 | 0) | !HEAPU8[$5_1 + 7 | 0]) {
    break label$4
   }
   $2_1 = HEAP32[$5_1 + 12 >> 2];
   if (($2_1 - ($5_1 + 16 | 0) | 0) > 159) {
    break label$4
   }
   HEAP32[$5_1 + 12 >> 2] = $2_1 + 4;
   HEAP32[$2_1 >> 2] = HEAP32[$5_1 + 8 >> 2];
  }
  (wasm2js_i32$0 = $4_1, wasm2js_f32$0 = $1895($0, HEAP32[$5_1 + 188 >> 2], $3_1)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
  $1875($5_1 + 208 | 0, $5_1 + 16 | 0, HEAP32[$5_1 + 12 >> 2], $3_1);
  if ($1692($5_1 + 264 | 0, $5_1 + 256 | 0)) {
   HEAP32[$3_1 >> 2] = HEAP32[$3_1 >> 2] | 2
  }
  $0 = HEAP32[$5_1 + 264 >> 2];
  $2512($1_1);
  $2512($5_1 + 208 | 0);
  global$0 = $5_1 + 272 | 0;
  return $0;
 }
 
 function $1893($0, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  $1687($5_1 + 8 | 0, $1_1);
  $1903($343($5_1 + 8 | 0), 11216, 11248, $2_1);
  $1_1 = $1856($5_1 + 8 | 0);
  (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = $1941($1_1)), HEAP8[wasm2js_i32$0 | 0] = wasm2js_i32$1;
  (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $1942($1_1)), HEAP8[wasm2js_i32$0 | 0] = wasm2js_i32$1;
  $1943($0, $1_1);
  $1855($5_1 + 8 | 0);
  global$0 = $5_1 + 16 | 0;
 }
 
 function $1894($0, $1_1, $2_1, $3_1, $4_1, $5_1, $6, $7, $8, $9_1, $10_1, $11_1) {
  var $12_1 = 0;
  $12_1 = global$0 - 16 | 0;
  global$0 = $12_1;
  HEAP8[$12_1 + 15 | 0] = $0;
  label$1 : {
   label$2 : {
    if (($0 | 0) == ($5_1 | 0)) {
     if (!HEAPU8[$1_1 | 0]) {
      break label$2
     }
     $0 = 0;
     HEAP8[$1_1 | 0] = 0;
     $1_1 = HEAP32[$4_1 >> 2];
     HEAP32[$4_1 >> 2] = $1_1 + 1;
     HEAP8[$1_1 | 0] = 46;
     if (!$100($7)) {
      break label$1
     }
     $1_1 = HEAP32[$9_1 >> 2];
     if (($1_1 - $8 | 0) > 159) {
      break label$1
     }
     $2_1 = HEAP32[$10_1 >> 2];
     HEAP32[$9_1 >> 2] = $1_1 + 4;
     HEAP32[$1_1 >> 2] = $2_1;
     break label$1;
    }
    label$4 : {
     if (($0 | 0) != ($6 | 0)) {
      break label$4
     }
     if (!$100($7)) {
      break label$4
     }
     if (!HEAPU8[$1_1 | 0]) {
      break label$2
     }
     $0 = 0;
     $1_1 = HEAP32[$9_1 >> 2];
     if (($1_1 - $8 | 0) > 159) {
      break label$1
     }
     $0 = HEAP32[$10_1 >> 2];
     HEAP32[$9_1 >> 2] = $1_1 + 4;
     HEAP32[$1_1 >> 2] = $0;
     $0 = 0;
     HEAP32[$10_1 >> 2] = 0;
     break label$1;
    }
    $0 = -1;
    $5_1 = $1906($11_1, $11_1 + 32 | 0, $12_1 + 15 | 0) - $11_1 | 0;
    if (($5_1 | 0) > 31) {
     break label$1
    }
    $6 = HEAPU8[$5_1 + 11216 | 0];
    label$5 : {
     label$6 : {
      switch ($5_1 + -22 | 0) {
      case 2:
      case 3:
       $1_1 = HEAP32[$4_1 >> 2];
       if (($1_1 | 0) != ($3_1 | 0)) {
        if ((HEAPU8[$1_1 + -1 | 0] & 95) != (HEAPU8[$2_1 | 0] & 127)) {
         break label$1
        }
       }
       HEAP32[$4_1 >> 2] = $1_1 + 1;
       HEAP8[$1_1 | 0] = $6;
       $0 = 0;
       break label$1;
      case 0:
      case 1:
       HEAP8[$2_1 | 0] = 80;
       break label$5;
      default:
       break label$6;
      };
     }
     $0 = HEAP8[$2_1 | 0];
     if (($0 | 0) != ($6 & 95)) {
      break label$5
     }
     HEAP8[$2_1 | 0] = $0 | 128;
     if (!HEAPU8[$1_1 | 0]) {
      break label$5
     }
     HEAP8[$1_1 | 0] = 0;
     if (!$100($7)) {
      break label$5
     }
     $0 = HEAP32[$9_1 >> 2];
     if (($0 - $8 | 0) > 159) {
      break label$5
     }
     $1_1 = HEAP32[$10_1 >> 2];
     HEAP32[$9_1 >> 2] = $0 + 4;
     HEAP32[$0 >> 2] = $1_1;
    }
    $0 = HEAP32[$4_1 >> 2];
    HEAP32[$4_1 >> 2] = $0 + 1;
    HEAP8[$0 | 0] = $6;
    $0 = 0;
    if (($5_1 | 0) > 21) {
     break label$1
    }
    HEAP32[$10_1 >> 2] = HEAP32[$10_1 >> 2] + 1;
    break label$1;
   }
   $0 = -1;
  }
  global$0 = $12_1 + 16 | 0;
  return $0;
 }
 
 function $1895($0, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = Math_fround(0), $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   if (($0 | 0) != ($1_1 | 0)) {
    $5_1 = HEAP32[4914];
    HEAP32[4914] = 0;
    $1904();
    $4_1 = $1609($0, $3_1 + 12 | 0);
    $0 = HEAP32[4914];
    label$4 : {
     if ($0) {
      if (HEAP32[$3_1 + 12 >> 2] != ($1_1 | 0)) {
       break label$4
      }
      if (($0 | 0) != 68) {
       break label$1
      }
      HEAP32[$2_1 >> 2] = 4;
      break label$1;
     }
     HEAP32[4914] = $5_1;
     if (HEAP32[$3_1 + 12 >> 2] == ($1_1 | 0)) {
      break label$1
     }
    }
   }
   HEAP32[$2_1 >> 2] = 4;
   $4_1 = Math_fround(0.0);
  }
  global$0 = $3_1 + 16 | 0;
  return $4_1;
 }
 
 function $1896($0, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $1897($1_1, $2_1, $3_1, $4_1, $5_1) | 0;
 }
 
 function $1897($0, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = 0, wasm2js_i32$0 = 0, wasm2js_f64$0 = 0.0;
  $5_1 = global$0 - 272 | 0;
  global$0 = $5_1;
  HEAP32[$5_1 + 256 >> 2] = $1_1;
  HEAP32[$5_1 + 264 >> 2] = $0;
  $1893($5_1 + 208 | 0, $2_1, $5_1 + 224 | 0, $5_1 + 223 | 0, $5_1 + 222 | 0);
  $1_1 = $189($5_1 + 192 | 0);
  $359($1_1, $358($1_1));
  $0 = $1865($1_1, 0);
  HEAP32[$5_1 + 188 >> 2] = $0;
  HEAP32[$5_1 + 12 >> 2] = $5_1 + 16;
  HEAP32[$5_1 + 8 >> 2] = 0;
  HEAP8[$5_1 + 7 | 0] = 1;
  HEAP8[$5_1 + 6 | 0] = 69;
  while (1) {
   label$2 : {
    if (!$1688($5_1 + 264 | 0, $5_1 + 256 | 0)) {
     break label$2
    }
    if (HEAP32[$5_1 + 188 >> 2] == ($100($1_1) + $0 | 0)) {
     $2_1 = $100($1_1);
     $359($1_1, $100($1_1) << 1);
     $359($1_1, $358($1_1));
     $0 = $1865($1_1, 0);
     HEAP32[$5_1 + 188 >> 2] = $2_1 + $0;
    }
    if ($1894($1689($5_1 + 264 | 0), $5_1 + 7 | 0, $5_1 + 6 | 0, $0, $5_1 + 188 | 0, HEAP8[$5_1 + 223 | 0], HEAP8[$5_1 + 222 | 0], $5_1 + 208 | 0, $5_1 + 16 | 0, $5_1 + 12 | 0, $5_1 + 8 | 0, $5_1 + 224 | 0)) {
     break label$2
    }
    $1691($5_1 + 264 | 0);
    continue;
   }
   break;
  };
  label$4 : {
   if (!$100($5_1 + 208 | 0) | !HEAPU8[$5_1 + 7 | 0]) {
    break label$4
   }
   $2_1 = HEAP32[$5_1 + 12 >> 2];
   if (($2_1 - ($5_1 + 16 | 0) | 0) > 159) {
    break label$4
   }
   HEAP32[$5_1 + 12 >> 2] = $2_1 + 4;
   HEAP32[$2_1 >> 2] = HEAP32[$5_1 + 8 >> 2];
  }
  (wasm2js_i32$0 = $4_1, wasm2js_f64$0 = $1898($0, HEAP32[$5_1 + 188 >> 2], $3_1)), HEAPF64[wasm2js_i32$0 >> 3] = wasm2js_f64$0;
  $1875($5_1 + 208 | 0, $5_1 + 16 | 0, HEAP32[$5_1 + 12 >> 2], $3_1);
  if ($1692($5_1 + 264 | 0, $5_1 + 256 | 0)) {
   HEAP32[$3_1 >> 2] = HEAP32[$3_1 >> 2] | 2
  }
  $0 = HEAP32[$5_1 + 264 >> 2];
  $2512($1_1);
  $2512($5_1 + 208 | 0);
  global$0 = $5_1 + 272 | 0;
  return $0;
 }
 
 function $1898($0, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0.0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   if (($0 | 0) != ($1_1 | 0)) {
    $5_1 = HEAP32[4914];
    HEAP32[4914] = 0;
    $1904();
    $4_1 = $1611($0, $3_1 + 12 | 0);
    $0 = HEAP32[4914];
    label$4 : {
     if ($0) {
      if (HEAP32[$3_1 + 12 >> 2] != ($1_1 | 0)) {
       break label$4
      }
      if (($0 | 0) != 68) {
       break label$1
      }
      HEAP32[$2_1 >> 2] = 4;
      break label$1;
     }
     HEAP32[4914] = $5_1;
     if (HEAP32[$3_1 + 12 >> 2] == ($1_1 | 0)) {
      break label$1
     }
    }
   }
   HEAP32[$2_1 >> 2] = 4;
   $4_1 = 0.0;
  }
  global$0 = $3_1 + 16 | 0;
  return $4_1;
 }
 
 function $1899($0, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $1900($1_1, $2_1, $3_1, $4_1, $5_1) | 0;
 }
 
 function $1900($0, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = 0;
  $5_1 = global$0 - 288 | 0;
  global$0 = $5_1;
  HEAP32[$5_1 + 272 >> 2] = $1_1;
  HEAP32[$5_1 + 280 >> 2] = $0;
  $1893($5_1 + 224 | 0, $2_1, $5_1 + 240 | 0, $5_1 + 239 | 0, $5_1 + 238 | 0);
  $1_1 = $189($5_1 + 208 | 0);
  $359($1_1, $358($1_1));
  $0 = $1865($1_1, 0);
  HEAP32[$5_1 + 204 >> 2] = $0;
  HEAP32[$5_1 + 28 >> 2] = $5_1 + 32;
  HEAP32[$5_1 + 24 >> 2] = 0;
  HEAP8[$5_1 + 23 | 0] = 1;
  HEAP8[$5_1 + 22 | 0] = 69;
  while (1) {
   label$2 : {
    if (!$1688($5_1 + 280 | 0, $5_1 + 272 | 0)) {
     break label$2
    }
    if (HEAP32[$5_1 + 204 >> 2] == ($100($1_1) + $0 | 0)) {
     $2_1 = $100($1_1);
     $359($1_1, $100($1_1) << 1);
     $359($1_1, $358($1_1));
     $0 = $1865($1_1, 0);
     HEAP32[$5_1 + 204 >> 2] = $2_1 + $0;
    }
    if ($1894($1689($5_1 + 280 | 0), $5_1 + 23 | 0, $5_1 + 22 | 0, $0, $5_1 + 204 | 0, HEAP8[$5_1 + 239 | 0], HEAP8[$5_1 + 238 | 0], $5_1 + 224 | 0, $5_1 + 32 | 0, $5_1 + 28 | 0, $5_1 + 24 | 0, $5_1 + 240 | 0)) {
     break label$2
    }
    $1691($5_1 + 280 | 0);
    continue;
   }
   break;
  };
  label$4 : {
   if (!$100($5_1 + 224 | 0) | !HEAPU8[$5_1 + 23 | 0]) {
    break label$4
   }
   $2_1 = HEAP32[$5_1 + 28 >> 2];
   if (($2_1 - ($5_1 + 32 | 0) | 0) > 159) {
    break label$4
   }
   HEAP32[$5_1 + 28 >> 2] = $2_1 + 4;
   HEAP32[$2_1 >> 2] = HEAP32[$5_1 + 24 >> 2];
  }
  $1901($5_1, $0, HEAP32[$5_1 + 204 >> 2], $3_1);
  $0 = HEAP32[$5_1 + 4 >> 2];
  HEAP32[$4_1 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $0;
  $0 = HEAP32[$5_1 + 12 >> 2];
  HEAP32[$4_1 + 8 >> 2] = HEAP32[$5_1 + 8 >> 2];
  HEAP32[$4_1 + 12 >> 2] = $0;
  $1875($5_1 + 224 | 0, $5_1 + 32 | 0, HEAP32[$5_1 + 28 >> 2], $3_1);
  if ($1692($5_1 + 280 | 0, $5_1 + 272 | 0)) {
   HEAP32[$3_1 >> 2] = HEAP32[$3_1 >> 2] | 2
  }
  $0 = HEAP32[$5_1 + 280 >> 2];
  $2512($1_1);
  $2512($5_1 + 224 | 0);
  global$0 = $5_1 + 288 | 0;
  return $0;
 }
 
 function $1901($0, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = 0, $6 = 0, $7 = 0, $8 = 0, $9_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  label$1 : {
   if (($1_1 | 0) != ($2_1 | 0)) {
    $9_1 = HEAP32[4914];
    HEAP32[4914] = 0;
    $2478($4_1, $1_1, $4_1 + 28 | 0);
    $1_1 = HEAP32[$4_1 + 8 >> 2];
    $5_1 = HEAP32[$4_1 + 12 >> 2];
    $6 = HEAP32[$4_1 >> 2];
    $7 = HEAP32[$4_1 + 4 >> 2];
    $8 = HEAP32[4914];
    label$4 : {
     if ($8) {
      if (HEAP32[$4_1 + 28 >> 2] != ($2_1 | 0)) {
       break label$4
      }
      if (($8 | 0) != 68) {
       break label$1
      }
      HEAP32[$3_1 >> 2] = 4;
      break label$1;
     }
     HEAP32[4914] = $9_1;
     if (HEAP32[$4_1 + 28 >> 2] == ($2_1 | 0)) {
      break label$1
     }
    }
   }
   HEAP32[$3_1 >> 2] = 4;
   $6 = 0;
   $7 = 0;
   $1_1 = 0;
   $5_1 = 0;
  }
  HEAP32[$0 >> 2] = $6;
  HEAP32[$0 + 4 >> 2] = $7;
  HEAP32[$0 + 8 >> 2] = $1_1;
  HEAP32[$0 + 12 >> 2] = $5_1;
  global$0 = $4_1 + 32 | 0;
 }
 
 function $1902($0, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6 = 0;
  $0 = global$0 - 272 | 0;
  global$0 = $0;
  HEAP32[$0 + 256 >> 2] = $2_1;
  HEAP32[$0 + 264 >> 2] = $1_1;
  $6 = $189($0 + 208 | 0);
  $1687($0 + 16 | 0, $3_1);
  $1903($343($0 + 16 | 0), 11216, 11242, $0 + 224 | 0);
  $1855($0 + 16 | 0);
  $2_1 = $189($0 + 192 | 0);
  $359($2_1, $358($2_1));
  $1_1 = $1865($2_1, 0);
  HEAP32[$0 + 188 >> 2] = $1_1;
  HEAP32[$0 + 12 >> 2] = $0 + 16;
  HEAP32[$0 + 8 >> 2] = 0;
  while (1) {
   label$2 : {
    if (!$1688($0 + 264 | 0, $0 + 256 | 0)) {
     break label$2
    }
    if (HEAP32[$0 + 188 >> 2] == ($100($2_1) + $1_1 | 0)) {
     $3_1 = $100($2_1);
     $359($2_1, $100($2_1) << 1);
     $359($2_1, $358($2_1));
     $1_1 = $1865($2_1, 0);
     HEAP32[$0 + 188 >> 2] = $3_1 + $1_1;
    }
    if ($1873($1689($0 + 264 | 0), 16, $1_1, $0 + 188 | 0, $0 + 8 | 0, 0, $6, $0 + 16 | 0, $0 + 12 | 0, $0 + 224 | 0)) {
     break label$2
    }
    $1691($0 + 264 | 0);
    continue;
   }
   break;
  };
  $359($2_1, HEAP32[$0 + 188 >> 2] - $1_1 | 0);
  $1_1 = $320($2_1);
  $3_1 = $1904();
  HEAP32[$0 >> 2] = $5_1;
  if (($1905($1_1, $3_1, $0) | 0) != 1) {
   HEAP32[$4_1 >> 2] = 4
  }
  if ($1692($0 + 264 | 0, $0 + 256 | 0)) {
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 2
  }
  $1_1 = HEAP32[$0 + 264 >> 2];
  $2512($2_1);
  $2512($6);
  global$0 = $0 + 272 | 0;
  return $1_1 | 0;
 }
 
 function $1903($0, $1_1, $2_1, $3_1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 32 >> 2]]($0, $1_1, $2_1, $3_1) | 0;
 }
 
 function $1904() {
  var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  label$1 : {
   if (HEAP8[23072] & 1) {
    break label$1
   }
   if (!$2540(23072)) {
    break label$1
   }
   (wasm2js_i32$0 = 23068, wasm2js_i32$1 = $1797()), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
   $2546(23072);
  }
  return HEAP32[5767];
 }
 
 function $1905($0, $1_1, $2_1) {
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[$3_1 + 12 >> 2] = $1_1;
  HEAP32[$3_1 + 8 >> 2] = $2_1;
  $1_1 = $1907($3_1, $3_1 + 12 | 0);
  $0 = $1788($0, 11249, HEAP32[$3_1 + 8 >> 2]);
  $1908($1_1);
  global$0 = $3_1 + 16 | 0;
  return $0;
 }
 
 function $1906($0, $1_1, $2_1) {
  $2_1 = HEAPU8[$2_1 | 0];
  while (1) {
   label$2 : {
    if (($0 | 0) != ($1_1 | 0)) {
     if (($2_1 | 0) != HEAPU8[$0 | 0]) {
      break label$2
     }
    } else {
     $0 = $1_1
    }
    return $0;
   }
   $0 = $0 + 1 | 0;
   continue;
  };
 }
 
 function $1907($0, $1_1) {
  var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  (wasm2js_i32$0 = $0, wasm2js_i32$1 = $1835(HEAP32[$1_1 >> 2])), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  return $0;
 }
 
 function $1908($0) {
  $0 = HEAP32[$0 >> 2];
  if ($0) {
   $1835($0)
  }
 }
 
 function $1909($0, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $6 = global$0 - 32 | 0;
  global$0 = $6;
  HEAP32[$6 + 24 >> 2] = $1_1;
  label$1 : {
   if (!(HEAP32[$3_1 + 4 >> 2] & 1)) {
    HEAP32[$6 >> 2] = -1;
    $1_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $1_1, $2_1, $3_1, $4_1, $6) | 0;
    HEAP32[$6 + 24 >> 2] = $1_1;
    label$3 : {
     switch (HEAP32[$6 >> 2]) {
     case 0:
      HEAP8[$5_1 | 0] = 0;
      break label$1;
     case 1:
      HEAP8[$5_1 | 0] = 1;
      break label$1;
     default:
      break label$3;
     };
    }
    HEAP8[$5_1 | 0] = 1;
    HEAP32[$4_1 >> 2] = 4;
    break label$1;
   }
   $1687($6, $3_1);
   $1_1 = $1704($6);
   $1855($6);
   $1687($6, $3_1);
   $0 = $1910($6);
   $1855($6);
   $1857($6, $0);
   $1858($6 | 12, $0);
   $3_1 = $6 + 24 | 0;
   (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = ($1911($6 + 24 | 0, $2_1, $6, $3_1, $1_1, $4_1, 1) | 0) == ($6 | 0)), HEAP8[wasm2js_i32$0 | 0] = wasm2js_i32$1;
   $1_1 = HEAP32[$6 + 24 >> 2];
   while (1) {
    $3_1 = $2512($3_1 + -12 | 0);
    if (($6 | 0) != ($3_1 | 0)) {
     continue
    }
    break;
   };
  }
  global$0 = $6 + 32 | 0;
  return $1_1 | 0;
 }
 
 function $1910($0) {
  return $1860($0, 23160);
 }
 
 function $1911($0, $1_1, $2_1, $3_1, $4_1, $5_1, $6) {
  var $7 = 0, $8 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14 = 0, $15 = 0, $16_1 = 0, $17 = 0;
  $8 = global$0 - 128 | 0;
  global$0 = $8;
  HEAP32[$8 + 120 >> 2] = $1_1;
  $10_1 = $1861($2_1, $3_1);
  HEAP32[$8 + 16 >> 2] = 139;
  $15 = $299($8 + 8 | 0, 0, $8 + 16 | 0);
  $9_1 = $8 + 16 | 0;
  label$1 : {
   if ($10_1 >>> 0 >= 101) {
    $9_1 = $2582($10_1);
    if (!$9_1) {
     break label$1
    }
    $1863($15, $9_1);
   }
   $7 = $9_1;
   $1_1 = $2_1;
   while (1) if (($1_1 | 0) == ($3_1 | 0)) {
    label$5 : while (1) {
     label$6 : {
      if (!($1705($0, $8 + 120 | 0) ? $10_1 : 0)) {
       if ($1709($0, $8 + 120 | 0)) {
        HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 2
       }
       break label$6;
      }
      $12_1 = $1706($0);
      if (!$6) {
       $12_1 = $344($4_1, $12_1)
      }
      $13_1 = $16_1 + 1 | 0;
      $17 = 0;
      $7 = $9_1;
      $1_1 = $2_1;
      while (1) if (($1_1 | 0) == ($3_1 | 0)) {
       $16_1 = $13_1;
       if (!$17) {
        continue label$5
       }
       $1708($0);
       $7 = $9_1;
       $1_1 = $2_1;
       if ($10_1 + $11_1 >>> 0 < 2) {
        continue label$5
       }
       while (1) if (($1_1 | 0) == ($3_1 | 0)) {
        continue label$5
       } else {
        label$15 : {
         if (HEAPU8[$7 | 0] != 2) {
          break label$15
         }
         if (($100($1_1) | 0) == ($13_1 | 0)) {
          break label$15
         }
         HEAP8[$7 | 0] = 0;
         $11_1 = $11_1 + -1 | 0;
        }
        $7 = $7 + 1 | 0;
        $1_1 = $1_1 + 12 | 0;
        continue;
       };
      } else {
       label$17 : {
        if (HEAPU8[$7 | 0] != 1) {
         break label$17
        }
        $14 = HEAP32[$1913($1_1, $16_1) >> 2];
        if (!$6) {
         $14 = $344($4_1, $14)
        }
        label$18 : {
         if (($12_1 | 0) == ($14 | 0)) {
          $17 = 1;
          if (($100($1_1) | 0) != ($13_1 | 0)) {
           break label$17
          }
          HEAP8[$7 | 0] = 2;
          $11_1 = $11_1 + 1 | 0;
          break label$18;
         }
         HEAP8[$7 | 0] = 0;
        }
        $10_1 = $10_1 + -1 | 0;
       }
       $7 = $7 + 1 | 0;
       $1_1 = $1_1 + 12 | 0;
       continue;
      };
     }
     break;
    };
    label$22 : {
     label$23 : {
      while (1) {
       if (($2_1 | 0) == ($3_1 | 0)) {
        break label$23
       }
       if (HEAPU8[$9_1 | 0] != 2) {
        $9_1 = $9_1 + 1 | 0;
        $2_1 = $2_1 + 12 | 0;
        continue;
       }
       break;
      };
      $3_1 = $2_1;
      break label$22;
     }
     HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 4;
    }
    $1866($15);
    global$0 = $8 + 128 | 0;
    return $3_1;
   } else {
    label$27 : {
     if (!$772($1_1)) {
      HEAP8[$7 | 0] = 1;
      break label$27;
     }
     HEAP8[$7 | 0] = 2;
     $11_1 = $11_1 + 1 | 0;
     $10_1 = $10_1 + -1 | 0;
    }
    $7 = $7 + 1 | 0;
    $1_1 = $1_1 + 12 | 0;
    continue;
   };
  }
  $1643();
  abort();
 }
 
 function $1913($0, $1_1) {
  return $320($0) + ($1_1 << 2) | 0;
 }
 
 function $1915($0, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $1916($1_1, $2_1, $3_1, $4_1, $5_1) | 0;
 }
 
 function $1916($0, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = 0, $6 = 0, $7 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $5_1 = global$0 - 352 | 0;
  global$0 = $5_1;
  HEAP32[$5_1 + 336 >> 2] = $1_1;
  HEAP32[$5_1 + 344 >> 2] = $0;
  $6 = $1869($2_1);
  $7 = $1917($2_1, $5_1 + 224 | 0);
  $1918($5_1 + 208 | 0, $2_1, $5_1 + 332 | 0);
  $0 = $189($5_1 + 192 | 0);
  $359($0, $358($0));
  $1_1 = $1865($0, 0);
  HEAP32[$5_1 + 188 >> 2] = $1_1;
  HEAP32[$5_1 + 12 >> 2] = $5_1 + 16;
  HEAP32[$5_1 + 8 >> 2] = 0;
  while (1) {
   label$2 : {
    if (!$1705($5_1 + 344 | 0, $5_1 + 336 | 0)) {
     break label$2
    }
    if (HEAP32[$5_1 + 188 >> 2] == ($100($0) + $1_1 | 0)) {
     $2_1 = $100($0);
     $359($0, $100($0) << 1);
     $359($0, $358($0));
     $1_1 = $1865($0, 0);
     HEAP32[$5_1 + 188 >> 2] = $2_1 + $1_1;
    }
    if ($1919($1706($5_1 + 344 | 0), $6, $1_1, $5_1 + 188 | 0, $5_1 + 8 | 0, HEAP32[$5_1 + 332 >> 2], $5_1 + 208 | 0, $5_1 + 16 | 0, $5_1 + 12 | 0, $7)) {
     break label$2
    }
    $1708($5_1 + 344 | 0);
    continue;
   }
   break;
  };
  label$4 : {
   if (!$100($5_1 + 208 | 0)) {
    break label$4
   }
   $2_1 = HEAP32[$5_1 + 12 >> 2];
   if (($2_1 - ($5_1 + 16 | 0) | 0) > 159) {
    break label$4
   }
   HEAP32[$5_1 + 12 >> 2] = $2_1 + 4;
   HEAP32[$2_1 >> 2] = HEAP32[$5_1 + 8 >> 2];
  }
  (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $1874($1_1, HEAP32[$5_1 + 188 >> 2], $3_1, $6)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  $1875($5_1 + 208 | 0, $5_1 + 16 | 0, HEAP32[$5_1 + 12 >> 2], $3_1);
  if ($1709($5_1 + 344 | 0, $5_1 + 336 | 0)) {
   HEAP32[$3_1 >> 2] = HEAP32[$3_1 >> 2] | 2
  }
  $1_1 = HEAP32[$5_1 + 344 >> 2];
  $2512($0);
  $2512($5_1 + 208 | 0);
  global$0 = $5_1 + 352 | 0;
  return $1_1;
 }
 
 function $1917($0, $1_1) {
  return $1945($0, $1_1);
 }
 
 function $1918($0, $1_1, $2_1) {
  var $3_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $1687($3_1 + 8 | 0, $1_1);
  $1_1 = $1910($3_1 + 8 | 0);
  (wasm2js_i32$0 = $2_1, wasm2js_i32$1 = $1942($1_1)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  $1943($0, $1_1);
  $1855($3_1 + 8 | 0);
  global$0 = $3_1 + 16 | 0;
 }
 
 function $1919($0, $1_1, $2_1, $3_1, $4_1, $5_1, $6, $7, $8, $9_1) {
  var $10_1 = 0, $11_1 = 0;
  $10_1 = global$0 - 16 | 0;
  global$0 = $10_1;
  HEAP32[$10_1 + 12 >> 2] = $0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if (HEAP32[$3_1 >> 2] != ($2_1 | 0)) {
       break label$4
      }
      $11_1 = HEAP32[$9_1 + 96 >> 2] == ($0 | 0);
      if (HEAP32[$9_1 + 100 >> 2] != ($0 | 0) ? !$11_1 : 0) {
       break label$4
      }
      HEAP32[$3_1 >> 2] = $2_1 + 1;
      HEAP8[$2_1 | 0] = $11_1 ? 43 : 45;
      break label$3;
     }
     if (!$100($6) | ($0 | 0) != ($5_1 | 0)) {
      break label$2
     }
     $0 = 0;
     $1_1 = HEAP32[$8 >> 2];
     if (($1_1 - $7 | 0) > 159) {
      break label$1
     }
     $0 = HEAP32[$4_1 >> 2];
     HEAP32[$8 >> 2] = $1_1 + 4;
     HEAP32[$1_1 >> 2] = $0;
    }
    $0 = 0;
    HEAP32[$4_1 >> 2] = 0;
    break label$1;
   }
   $0 = -1;
   $6 = $1940($9_1, $9_1 + 104 | 0, $10_1 + 12 | 0) - $9_1 | 0;
   if (($6 | 0) > 92) {
    break label$1
   }
   $5_1 = $6 >> 2;
   label$6 : {
    label$7 : {
     switch ($1_1 + -8 | 0) {
     default:
      if (($1_1 | 0) != 16 | ($6 | 0) < 88) {
       break label$6
      }
      $1_1 = HEAP32[$3_1 >> 2];
      if (($1_1 | 0) == ($2_1 | 0) | ($1_1 - $2_1 | 0) > 2) {
       break label$1
      }
      if (HEAPU8[$1_1 + -1 | 0] != 48) {
       break label$1
      }
      $0 = 0;
      HEAP32[$4_1 >> 2] = 0;
      HEAP32[$3_1 >> 2] = $1_1 + 1;
      HEAP8[$1_1 | 0] = HEAPU8[$5_1 + 11216 | 0];
      break label$1;
     case 1:
      break label$6;
     case 0:
     case 2:
      break label$7;
     };
    }
    if (($5_1 | 0) >= ($1_1 | 0)) {
     break label$1
    }
   }
   $0 = HEAP32[$3_1 >> 2];
   HEAP32[$3_1 >> 2] = $0 + 1;
   HEAP8[$0 | 0] = HEAPU8[$5_1 + 11216 | 0];
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] + 1;
   $0 = 0;
  }
  global$0 = $10_1 + 16 | 0;
  return $0;
 }
 
 function $1920($0, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $1921($1_1, $2_1, $3_1, $4_1, $5_1) | 0;
 }
 
 function $1921($0, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = 0, $6 = 0, $7 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $5_1 = global$0 - 352 | 0;
  global$0 = $5_1;
  HEAP32[$5_1 + 336 >> 2] = $1_1;
  HEAP32[$5_1 + 344 >> 2] = $0;
  $6 = $1869($2_1);
  $7 = $1917($2_1, $5_1 + 224 | 0);
  $1918($5_1 + 208 | 0, $2_1, $5_1 + 332 | 0);
  $0 = $189($5_1 + 192 | 0);
  $359($0, $358($0));
  $1_1 = $1865($0, 0);
  HEAP32[$5_1 + 188 >> 2] = $1_1;
  HEAP32[$5_1 + 12 >> 2] = $5_1 + 16;
  HEAP32[$5_1 + 8 >> 2] = 0;
  while (1) {
   label$2 : {
    if (!$1705($5_1 + 344 | 0, $5_1 + 336 | 0)) {
     break label$2
    }
    if (HEAP32[$5_1 + 188 >> 2] == ($100($0) + $1_1 | 0)) {
     $2_1 = $100($0);
     $359($0, $100($0) << 1);
     $359($0, $358($0));
     $1_1 = $1865($0, 0);
     HEAP32[$5_1 + 188 >> 2] = $2_1 + $1_1;
    }
    if ($1919($1706($5_1 + 344 | 0), $6, $1_1, $5_1 + 188 | 0, $5_1 + 8 | 0, HEAP32[$5_1 + 332 >> 2], $5_1 + 208 | 0, $5_1 + 16 | 0, $5_1 + 12 | 0, $7)) {
     break label$2
    }
    $1708($5_1 + 344 | 0);
    continue;
   }
   break;
  };
  label$4 : {
   if (!$100($5_1 + 208 | 0)) {
    break label$4
   }
   $2_1 = HEAP32[$5_1 + 12 >> 2];
   if (($2_1 - ($5_1 + 16 | 0) | 0) > 159) {
    break label$4
   }
   HEAP32[$5_1 + 12 >> 2] = $2_1 + 4;
   HEAP32[$2_1 >> 2] = HEAP32[$5_1 + 8 >> 2];
  }
  (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $1878($1_1, HEAP32[$5_1 + 188 >> 2], $3_1, $6)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  HEAP32[$4_1 + 4 >> 2] = i64toi32_i32$HIGH_BITS;
  $1875($5_1 + 208 | 0, $5_1 + 16 | 0, HEAP32[$5_1 + 12 >> 2], $3_1);
  if ($1709($5_1 + 344 | 0, $5_1 + 336 | 0)) {
   HEAP32[$3_1 >> 2] = HEAP32[$3_1 >> 2] | 2
  }
  $1_1 = HEAP32[$5_1 + 344 >> 2];
  $2512($0);
  $2512($5_1 + 208 | 0);
  global$0 = $5_1 + 352 | 0;
  return $1_1;
 }
 
 function $1922($0, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $1923($1_1, $2_1, $3_1, $4_1, $5_1) | 0;
 }
 
 function $1923($0, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = 0, $6 = 0, $7 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $5_1 = global$0 - 352 | 0;
  global$0 = $5_1;
  HEAP32[$5_1 + 336 >> 2] = $1_1;
  HEAP32[$5_1 + 344 >> 2] = $0;
  $6 = $1869($2_1);
  $7 = $1917($2_1, $5_1 + 224 | 0);
  $1918($5_1 + 208 | 0, $2_1, $5_1 + 332 | 0);
  $0 = $189($5_1 + 192 | 0);
  $359($0, $358($0));
  $1_1 = $1865($0, 0);
  HEAP32[$5_1 + 188 >> 2] = $1_1;
  HEAP32[$5_1 + 12 >> 2] = $5_1 + 16;
  HEAP32[$5_1 + 8 >> 2] = 0;
  while (1) {
   label$2 : {
    if (!$1705($5_1 + 344 | 0, $5_1 + 336 | 0)) {
     break label$2
    }
    if (HEAP32[$5_1 + 188 >> 2] == ($100($0) + $1_1 | 0)) {
     $2_1 = $100($0);
     $359($0, $100($0) << 1);
     $359($0, $358($0));
     $1_1 = $1865($0, 0);
     HEAP32[$5_1 + 188 >> 2] = $2_1 + $1_1;
    }
    if ($1919($1706($5_1 + 344 | 0), $6, $1_1, $5_1 + 188 | 0, $5_1 + 8 | 0, HEAP32[$5_1 + 332 >> 2], $5_1 + 208 | 0, $5_1 + 16 | 0, $5_1 + 12 | 0, $7)) {
     break label$2
    }
    $1708($5_1 + 344 | 0);
    continue;
   }
   break;
  };
  label$4 : {
   if (!$100($5_1 + 208 | 0)) {
    break label$4
   }
   $2_1 = HEAP32[$5_1 + 12 >> 2];
   if (($2_1 - ($5_1 + 16 | 0) | 0) > 159) {
    break label$4
   }
   HEAP32[$5_1 + 12 >> 2] = $2_1 + 4;
   HEAP32[$2_1 >> 2] = HEAP32[$5_1 + 8 >> 2];
  }
  (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $1881($1_1, HEAP32[$5_1 + 188 >> 2], $3_1, $6)), HEAP16[wasm2js_i32$0 >> 1] = wasm2js_i32$1;
  $1875($5_1 + 208 | 0, $5_1 + 16 | 0, HEAP32[$5_1 + 12 >> 2], $3_1);
  if ($1709($5_1 + 344 | 0, $5_1 + 336 | 0)) {
   HEAP32[$3_1 >> 2] = HEAP32[$3_1 >> 2] | 2
  }
  $1_1 = HEAP32[$5_1 + 344 >> 2];
  $2512($0);
  $2512($5_1 + 208 | 0);
  global$0 = $5_1 + 352 | 0;
  return $1_1;
 }
 
 function $1924($0, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $1925($1_1, $2_1, $3_1, $4_1, $5_1) | 0;
 }
 
 function $1925($0, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = 0, $6 = 0, $7 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $5_1 = global$0 - 352 | 0;
  global$0 = $5_1;
  HEAP32[$5_1 + 336 >> 2] = $1_1;
  HEAP32[$5_1 + 344 >> 2] = $0;
  $6 = $1869($2_1);
  $7 = $1917($2_1, $5_1 + 224 | 0);
  $1918($5_1 + 208 | 0, $2_1, $5_1 + 332 | 0);
  $0 = $189($5_1 + 192 | 0);
  $359($0, $358($0));
  $1_1 = $1865($0, 0);
  HEAP32[$5_1 + 188 >> 2] = $1_1;
  HEAP32[$5_1 + 12 >> 2] = $5_1 + 16;
  HEAP32[$5_1 + 8 >> 2] = 0;
  while (1) {
   label$2 : {
    if (!$1705($5_1 + 344 | 0, $5_1 + 336 | 0)) {
     break label$2
    }
    if (HEAP32[$5_1 + 188 >> 2] == ($100($0) + $1_1 | 0)) {
     $2_1 = $100($0);
     $359($0, $100($0) << 1);
     $359($0, $358($0));
     $1_1 = $1865($0, 0);
     HEAP32[$5_1 + 188 >> 2] = $2_1 + $1_1;
    }
    if ($1919($1706($5_1 + 344 | 0), $6, $1_1, $5_1 + 188 | 0, $5_1 + 8 | 0, HEAP32[$5_1 + 332 >> 2], $5_1 + 208 | 0, $5_1 + 16 | 0, $5_1 + 12 | 0, $7)) {
     break label$2
    }
    $1708($5_1 + 344 | 0);
    continue;
   }
   break;
  };
  label$4 : {
   if (!$100($5_1 + 208 | 0)) {
    break label$4
   }
   $2_1 = HEAP32[$5_1 + 12 >> 2];
   if (($2_1 - ($5_1 + 16 | 0) | 0) > 159) {
    break label$4
   }
   HEAP32[$5_1 + 12 >> 2] = $2_1 + 4;
   HEAP32[$2_1 >> 2] = HEAP32[$5_1 + 8 >> 2];
  }
  (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $1884($1_1, HEAP32[$5_1 + 188 >> 2], $3_1, $6)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  $1875($5_1 + 208 | 0, $5_1 + 16 | 0, HEAP32[$5_1 + 12 >> 2], $3_1);
  if ($1709($5_1 + 344 | 0, $5_1 + 336 | 0)) {
   HEAP32[$3_1 >> 2] = HEAP32[$3_1 >> 2] | 2
  }
  $1_1 = HEAP32[$5_1 + 344 >> 2];
  $2512($0);
  $2512($5_1 + 208 | 0);
  global$0 = $5_1 + 352 | 0;
  return $1_1;
 }
 
 function $1928($0, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $1929($1_1, $2_1, $3_1, $4_1, $5_1) | 0;
 }
 
 function $1929($0, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = 0, $6 = 0, $7 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $5_1 = global$0 - 352 | 0;
  global$0 = $5_1;
  HEAP32[$5_1 + 336 >> 2] = $1_1;
  HEAP32[$5_1 + 344 >> 2] = $0;
  $6 = $1869($2_1);
  $7 = $1917($2_1, $5_1 + 224 | 0);
  $1918($5_1 + 208 | 0, $2_1, $5_1 + 332 | 0);
  $0 = $189($5_1 + 192 | 0);
  $359($0, $358($0));
  $1_1 = $1865($0, 0);
  HEAP32[$5_1 + 188 >> 2] = $1_1;
  HEAP32[$5_1 + 12 >> 2] = $5_1 + 16;
  HEAP32[$5_1 + 8 >> 2] = 0;
  while (1) {
   label$2 : {
    if (!$1705($5_1 + 344 | 0, $5_1 + 336 | 0)) {
     break label$2
    }
    if (HEAP32[$5_1 + 188 >> 2] == ($100($0) + $1_1 | 0)) {
     $2_1 = $100($0);
     $359($0, $100($0) << 1);
     $359($0, $358($0));
     $1_1 = $1865($0, 0);
     HEAP32[$5_1 + 188 >> 2] = $2_1 + $1_1;
    }
    if ($1919($1706($5_1 + 344 | 0), $6, $1_1, $5_1 + 188 | 0, $5_1 + 8 | 0, HEAP32[$5_1 + 332 >> 2], $5_1 + 208 | 0, $5_1 + 16 | 0, $5_1 + 12 | 0, $7)) {
     break label$2
    }
    $1708($5_1 + 344 | 0);
    continue;
   }
   break;
  };
  label$4 : {
   if (!$100($5_1 + 208 | 0)) {
    break label$4
   }
   $2_1 = HEAP32[$5_1 + 12 >> 2];
   if (($2_1 - ($5_1 + 16 | 0) | 0) > 159) {
    break label$4
   }
   HEAP32[$5_1 + 12 >> 2] = $2_1 + 4;
   HEAP32[$2_1 >> 2] = HEAP32[$5_1 + 8 >> 2];
  }
  (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $1890($1_1, HEAP32[$5_1 + 188 >> 2], $3_1, $6)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  HEAP32[$4_1 + 4 >> 2] = i64toi32_i32$HIGH_BITS;
  $1875($5_1 + 208 | 0, $5_1 + 16 | 0, HEAP32[$5_1 + 12 >> 2], $3_1);
  if ($1709($5_1 + 344 | 0, $5_1 + 336 | 0)) {
   HEAP32[$3_1 >> 2] = HEAP32[$3_1 >> 2] | 2
  }
  $1_1 = HEAP32[$5_1 + 344 >> 2];
  $2512($0);
  $2512($5_1 + 208 | 0);
  global$0 = $5_1 + 352 | 0;
  return $1_1;
 }
 
 function $1930($0, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $1931($1_1, $2_1, $3_1, $4_1, $5_1) | 0;
 }
 
 function $1931($0, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
  $5_1 = global$0 - 368 | 0;
  global$0 = $5_1;
  HEAP32[$5_1 + 352 >> 2] = $1_1;
  HEAP32[$5_1 + 360 >> 2] = $0;
  $1932($5_1 + 200 | 0, $2_1, $5_1 + 224 | 0, $5_1 + 220 | 0, $5_1 + 216 | 0);
  $1_1 = $189($5_1 + 184 | 0);
  $359($1_1, $358($1_1));
  $0 = $1865($1_1, 0);
  HEAP32[$5_1 + 180 >> 2] = $0;
  HEAP32[$5_1 + 12 >> 2] = $5_1 + 16;
  HEAP32[$5_1 + 8 >> 2] = 0;
  HEAP8[$5_1 + 7 | 0] = 1;
  HEAP8[$5_1 + 6 | 0] = 69;
  while (1) {
   label$2 : {
    if (!$1705($5_1 + 360 | 0, $5_1 + 352 | 0)) {
     break label$2
    }
    if (HEAP32[$5_1 + 180 >> 2] == ($100($1_1) + $0 | 0)) {
     $2_1 = $100($1_1);
     $359($1_1, $100($1_1) << 1);
     $359($1_1, $358($1_1));
     $0 = $1865($1_1, 0);
     HEAP32[$5_1 + 180 >> 2] = $2_1 + $0;
    }
    if ($1933($1706($5_1 + 360 | 0), $5_1 + 7 | 0, $5_1 + 6 | 0, $0, $5_1 + 180 | 0, HEAP32[$5_1 + 220 >> 2], HEAP32[$5_1 + 216 >> 2], $5_1 + 200 | 0, $5_1 + 16 | 0, $5_1 + 12 | 0, $5_1 + 8 | 0, $5_1 + 224 | 0)) {
     break label$2
    }
    $1708($5_1 + 360 | 0);
    continue;
   }
   break;
  };
  label$4 : {
   if (!$100($5_1 + 200 | 0) | !HEAPU8[$5_1 + 7 | 0]) {
    break label$4
   }
   $2_1 = HEAP32[$5_1 + 12 >> 2];
   if (($2_1 - ($5_1 + 16 | 0) | 0) > 159) {
    break label$4
   }
   HEAP32[$5_1 + 12 >> 2] = $2_1 + 4;
   HEAP32[$2_1 >> 2] = HEAP32[$5_1 + 8 >> 2];
  }
  (wasm2js_i32$0 = $4_1, wasm2js_f32$0 = $1895($0, HEAP32[$5_1 + 180 >> 2], $3_1)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
  $1875($5_1 + 200 | 0, $5_1 + 16 | 0, HEAP32[$5_1 + 12 >> 2], $3_1);
  if ($1709($5_1 + 360 | 0, $5_1 + 352 | 0)) {
   HEAP32[$3_1 >> 2] = HEAP32[$3_1 >> 2] | 2
  }
  $0 = HEAP32[$5_1 + 360 >> 2];
  $2512($1_1);
  $2512($5_1 + 200 | 0);
  global$0 = $5_1 + 368 | 0;
  return $0;
 }
 
 function $1932($0, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  $1687($5_1 + 8 | 0, $1_1);
  $1939($1704($5_1 + 8 | 0), 11216, 11248, $2_1);
  $1_1 = $1910($5_1 + 8 | 0);
  (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = $1941($1_1)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $1942($1_1)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  $1943($0, $1_1);
  $1855($5_1 + 8 | 0);
  global$0 = $5_1 + 16 | 0;
 }
 
 function $1933($0, $1_1, $2_1, $3_1, $4_1, $5_1, $6, $7, $8, $9_1, $10_1, $11_1) {
  var $12_1 = 0;
  $12_1 = global$0 - 16 | 0;
  global$0 = $12_1;
  HEAP32[$12_1 + 12 >> 2] = $0;
  label$1 : {
   label$2 : {
    if (($0 | 0) == ($5_1 | 0)) {
     if (!HEAPU8[$1_1 | 0]) {
      break label$2
     }
     $0 = 0;
     HEAP8[$1_1 | 0] = 0;
     $1_1 = HEAP32[$4_1 >> 2];
     HEAP32[$4_1 >> 2] = $1_1 + 1;
     HEAP8[$1_1 | 0] = 46;
     if (!$100($7)) {
      break label$1
     }
     $1_1 = HEAP32[$9_1 >> 2];
     if (($1_1 - $8 | 0) > 159) {
      break label$1
     }
     $2_1 = HEAP32[$10_1 >> 2];
     HEAP32[$9_1 >> 2] = $1_1 + 4;
     HEAP32[$1_1 >> 2] = $2_1;
     break label$1;
    }
    label$4 : {
     if (($0 | 0) != ($6 | 0)) {
      break label$4
     }
     if (!$100($7)) {
      break label$4
     }
     if (!HEAPU8[$1_1 | 0]) {
      break label$2
     }
     $0 = 0;
     $1_1 = HEAP32[$9_1 >> 2];
     if (($1_1 - $8 | 0) > 159) {
      break label$1
     }
     $0 = HEAP32[$10_1 >> 2];
     HEAP32[$9_1 >> 2] = $1_1 + 4;
     HEAP32[$1_1 >> 2] = $0;
     $0 = 0;
     HEAP32[$10_1 >> 2] = 0;
     break label$1;
    }
    $0 = -1;
    $5_1 = $1940($11_1, $11_1 + 128 | 0, $12_1 + 12 | 0) - $11_1 | 0;
    if (($5_1 | 0) > 124) {
     break label$1
    }
    $6 = HEAPU8[($5_1 >> 2) + 11216 | 0];
    label$5 : {
     label$6 : {
      switch (__wasm_rotl_i32($5_1 + -88 | 0, 30) | 0) {
      case 2:
      case 3:
       $1_1 = HEAP32[$4_1 >> 2];
       if (($1_1 | 0) != ($3_1 | 0)) {
        if ((HEAPU8[$1_1 + -1 | 0] & 95) != (HEAPU8[$2_1 | 0] & 127)) {
         break label$1
        }
       }
       HEAP32[$4_1 >> 2] = $1_1 + 1;
       HEAP8[$1_1 | 0] = $6;
       $0 = 0;
       break label$1;
      case 0:
      case 1:
       HEAP8[$2_1 | 0] = 80;
       break label$5;
      default:
       break label$6;
      };
     }
     $0 = HEAP8[$2_1 | 0];
     if (($0 | 0) != ($6 & 95)) {
      break label$5
     }
     HEAP8[$2_1 | 0] = $0 | 128;
     if (!HEAPU8[$1_1 | 0]) {
      break label$5
     }
     HEAP8[$1_1 | 0] = 0;
     if (!$100($7)) {
      break label$5
     }
     $0 = HEAP32[$9_1 >> 2];
     if (($0 - $8 | 0) > 159) {
      break label$5
     }
     $1_1 = HEAP32[$10_1 >> 2];
     HEAP32[$9_1 >> 2] = $0 + 4;
     HEAP32[$0 >> 2] = $1_1;
    }
    $0 = HEAP32[$4_1 >> 2];
    HEAP32[$4_1 >> 2] = $0 + 1;
    HEAP8[$0 | 0] = $6;
    $0 = 0;
    if (($5_1 | 0) > 84) {
     break label$1
    }
    HEAP32[$10_1 >> 2] = HEAP32[$10_1 >> 2] + 1;
    break label$1;
   }
   $0 = -1;
  }
  global$0 = $12_1 + 16 | 0;
  return $0;
 }
 
 function $1934($0, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $1935($1_1, $2_1, $3_1, $4_1, $5_1) | 0;
 }
 
 function $1935($0, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = 0, wasm2js_i32$0 = 0, wasm2js_f64$0 = 0.0;
  $5_1 = global$0 - 368 | 0;
  global$0 = $5_1;
  HEAP32[$5_1 + 352 >> 2] = $1_1;
  HEAP32[$5_1 + 360 >> 2] = $0;
  $1932($5_1 + 200 | 0, $2_1, $5_1 + 224 | 0, $5_1 + 220 | 0, $5_1 + 216 | 0);
  $1_1 = $189($5_1 + 184 | 0);
  $359($1_1, $358($1_1));
  $0 = $1865($1_1, 0);
  HEAP32[$5_1 + 180 >> 2] = $0;
  HEAP32[$5_1 + 12 >> 2] = $5_1 + 16;
  HEAP32[$5_1 + 8 >> 2] = 0;
  HEAP8[$5_1 + 7 | 0] = 1;
  HEAP8[$5_1 + 6 | 0] = 69;
  while (1) {
   label$2 : {
    if (!$1705($5_1 + 360 | 0, $5_1 + 352 | 0)) {
     break label$2
    }
    if (HEAP32[$5_1 + 180 >> 2] == ($100($1_1) + $0 | 0)) {
     $2_1 = $100($1_1);
     $359($1_1, $100($1_1) << 1);
     $359($1_1, $358($1_1));
     $0 = $1865($1_1, 0);
     HEAP32[$5_1 + 180 >> 2] = $2_1 + $0;
    }
    if ($1933($1706($5_1 + 360 | 0), $5_1 + 7 | 0, $5_1 + 6 | 0, $0, $5_1 + 180 | 0, HEAP32[$5_1 + 220 >> 2], HEAP32[$5_1 + 216 >> 2], $5_1 + 200 | 0, $5_1 + 16 | 0, $5_1 + 12 | 0, $5_1 + 8 | 0, $5_1 + 224 | 0)) {
     break label$2
    }
    $1708($5_1 + 360 | 0);
    continue;
   }
   break;
  };
  label$4 : {
   if (!$100($5_1 + 200 | 0) | !HEAPU8[$5_1 + 7 | 0]) {
    break label$4
   }
   $2_1 = HEAP32[$5_1 + 12 >> 2];
   if (($2_1 - ($5_1 + 16 | 0) | 0) > 159) {
    break label$4
   }
   HEAP32[$5_1 + 12 >> 2] = $2_1 + 4;
   HEAP32[$2_1 >> 2] = HEAP32[$5_1 + 8 >> 2];
  }
  (wasm2js_i32$0 = $4_1, wasm2js_f64$0 = $1898($0, HEAP32[$5_1 + 180 >> 2], $3_1)), HEAPF64[wasm2js_i32$0 >> 3] = wasm2js_f64$0;
  $1875($5_1 + 200 | 0, $5_1 + 16 | 0, HEAP32[$5_1 + 12 >> 2], $3_1);
  if ($1709($5_1 + 360 | 0, $5_1 + 352 | 0)) {
   HEAP32[$3_1 >> 2] = HEAP32[$3_1 >> 2] | 2
  }
  $0 = HEAP32[$5_1 + 360 >> 2];
  $2512($1_1);
  $2512($5_1 + 200 | 0);
  global$0 = $5_1 + 368 | 0;
  return $0;
 }
 
 function $1936($0, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $1937($1_1, $2_1, $3_1, $4_1, $5_1) | 0;
 }
 
 function $1937($0, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = 0;
  $5_1 = global$0 - 384 | 0;
  global$0 = $5_1;
  HEAP32[$5_1 + 368 >> 2] = $1_1;
  HEAP32[$5_1 + 376 >> 2] = $0;
  $1932($5_1 + 216 | 0, $2_1, $5_1 + 240 | 0, $5_1 + 236 | 0, $5_1 + 232 | 0);
  $1_1 = $189($5_1 + 200 | 0);
  $359($1_1, $358($1_1));
  $0 = $1865($1_1, 0);
  HEAP32[$5_1 + 196 >> 2] = $0;
  HEAP32[$5_1 + 28 >> 2] = $5_1 + 32;
  HEAP32[$5_1 + 24 >> 2] = 0;
  HEAP8[$5_1 + 23 | 0] = 1;
  HEAP8[$5_1 + 22 | 0] = 69;
  while (1) {
   label$2 : {
    if (!$1705($5_1 + 376 | 0, $5_1 + 368 | 0)) {
     break label$2
    }
    if (HEAP32[$5_1 + 196 >> 2] == ($100($1_1) + $0 | 0)) {
     $2_1 = $100($1_1);
     $359($1_1, $100($1_1) << 1);
     $359($1_1, $358($1_1));
     $0 = $1865($1_1, 0);
     HEAP32[$5_1 + 196 >> 2] = $2_1 + $0;
    }
    if ($1933($1706($5_1 + 376 | 0), $5_1 + 23 | 0, $5_1 + 22 | 0, $0, $5_1 + 196 | 0, HEAP32[$5_1 + 236 >> 2], HEAP32[$5_1 + 232 >> 2], $5_1 + 216 | 0, $5_1 + 32 | 0, $5_1 + 28 | 0, $5_1 + 24 | 0, $5_1 + 240 | 0)) {
     break label$2
    }
    $1708($5_1 + 376 | 0);
    continue;
   }
   break;
  };
  label$4 : {
   if (!$100($5_1 + 216 | 0) | !HEAPU8[$5_1 + 23 | 0]) {
    break label$4
   }
   $2_1 = HEAP32[$5_1 + 28 >> 2];
   if (($2_1 - ($5_1 + 32 | 0) | 0) > 159) {
    break label$4
   }
   HEAP32[$5_1 + 28 >> 2] = $2_1 + 4;
   HEAP32[$2_1 >> 2] = HEAP32[$5_1 + 24 >> 2];
  }
  $1901($5_1, $0, HEAP32[$5_1 + 196 >> 2], $3_1);
  $0 = HEAP32[$5_1 + 4 >> 2];
  HEAP32[$4_1 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $0;
  $0 = HEAP32[$5_1 + 12 >> 2];
  HEAP32[$4_1 + 8 >> 2] = HEAP32[$5_1 + 8 >> 2];
  HEAP32[$4_1 + 12 >> 2] = $0;
  $1875($5_1 + 216 | 0, $5_1 + 32 | 0, HEAP32[$5_1 + 28 >> 2], $3_1);
  if ($1709($5_1 + 376 | 0, $5_1 + 368 | 0)) {
   HEAP32[$3_1 >> 2] = HEAP32[$3_1 >> 2] | 2
  }
  $0 = HEAP32[$5_1 + 376 >> 2];
  $2512($1_1);
  $2512($5_1 + 216 | 0);
  global$0 = $5_1 + 384 | 0;
  return $0;
 }
 
 function $1938($0, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6 = 0;
  $0 = global$0 - 352 | 0;
  global$0 = $0;
  HEAP32[$0 + 336 >> 2] = $2_1;
  HEAP32[$0 + 344 >> 2] = $1_1;
  $6 = $189($0 + 208 | 0);
  $1687($0 + 16 | 0, $3_1);
  $1939($1704($0 + 16 | 0), 11216, 11242, $0 + 224 | 0);
  $1855($0 + 16 | 0);
  $2_1 = $189($0 + 192 | 0);
  $359($2_1, $358($2_1));
  $1_1 = $1865($2_1, 0);
  HEAP32[$0 + 188 >> 2] = $1_1;
  HEAP32[$0 + 12 >> 2] = $0 + 16;
  HEAP32[$0 + 8 >> 2] = 0;
  while (1) {
   label$2 : {
    if (!$1705($0 + 344 | 0, $0 + 336 | 0)) {
     break label$2
    }
    if (HEAP32[$0 + 188 >> 2] == ($100($2_1) + $1_1 | 0)) {
     $3_1 = $100($2_1);
     $359($2_1, $100($2_1) << 1);
     $359($2_1, $358($2_1));
     $1_1 = $1865($2_1, 0);
     HEAP32[$0 + 188 >> 2] = $3_1 + $1_1;
    }
    if ($1919($1706($0 + 344 | 0), 16, $1_1, $0 + 188 | 0, $0 + 8 | 0, 0, $6, $0 + 16 | 0, $0 + 12 | 0, $0 + 224 | 0)) {
     break label$2
    }
    $1708($0 + 344 | 0);
    continue;
   }
   break;
  };
  $359($2_1, HEAP32[$0 + 188 >> 2] - $1_1 | 0);
  $1_1 = $320($2_1);
  $3_1 = $1904();
  HEAP32[$0 >> 2] = $5_1;
  if (($1905($1_1, $3_1, $0) | 0) != 1) {
   HEAP32[$4_1 >> 2] = 4
  }
  if ($1709($0 + 344 | 0, $0 + 336 | 0)) {
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 2
  }
  $1_1 = HEAP32[$0 + 344 >> 2];
  $2512($2_1);
  $2512($6);
  global$0 = $0 + 352 | 0;
  return $1_1 | 0;
 }
 
 function $1939($0, $1_1, $2_1, $3_1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0, $1_1, $2_1, $3_1) | 0;
 }
 
 function $1940($0, $1_1, $2_1) {
  $2_1 = HEAP32[$2_1 >> 2];
  while (1) {
   label$2 : {
    if (($0 | 0) != ($1_1 | 0)) {
     if (($2_1 | 0) != HEAP32[$0 >> 2]) {
      break label$2
     }
    } else {
     $0 = $1_1
    }
    return $0;
   }
   $0 = $0 + 4 | 0;
   continue;
  };
 }
 
 function $1941($0) {
  return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0) | 0;
 }
 
 function $1942($0) {
  return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0) | 0;
 }
 
 function $1943($0, $1_1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 20 >> 2]]($0, $1_1);
 }
 
 function $1945($0, $1_1) {
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $1687($2_1 + 8 | 0, $0);
  $1939($1704($2_1 + 8 | 0), 11216, 11242, $1_1);
  $1855($2_1 + 8 | 0);
  global$0 = $2_1 + 16 | 0;
  return $1_1;
 }
 
 function $1946($0, $1_1, $2_1, $3_1, $4_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $5_1 = global$0 - 48 | 0;
  global$0 = $5_1;
  HEAP32[$5_1 + 40 >> 2] = $1_1;
  label$1 : {
   if (!(HEAP32[$2_1 + 4 >> 2] & 1)) {
    $2_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0, $1_1, $2_1, $3_1, $4_1) | 0;
    break label$1;
   }
   $1687($5_1 + 24 | 0, $2_1);
   $0 = $1856($5_1 + 24 | 0);
   $1855($5_1 + 24 | 0);
   label$3 : {
    if ($4_1) {
     $1857($5_1 + 24 | 0, $0);
     break label$3;
    }
    $1858($5_1 + 24 | 0, $0);
   }
   (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $779($5_1 + 24 | 0)), HEAP32[wasm2js_i32$0 + 16 >> 2] = wasm2js_i32$1;
   while (1) {
    (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $781($5_1 + 24 | 0)), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
    if ($31($5_1 + 16 | 0, $5_1 + 8 | 0)) {
     $1724($5_1 + 40 | 0, HEAP8[HEAP32[$5_1 + 16 >> 2]]);
     $795($5_1 + 16 | 0);
     continue;
    } else {
     $2_1 = HEAP32[$5_1 + 40 >> 2];
     $2512($5_1 + 24 | 0);
    }
    break;
   };
  }
  global$0 = $5_1 + 48 | 0;
  return $2_1 | 0;
 }
 
 function $1947($0, $1_1, $2_1, $3_1, $4_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6 = 0, $7 = 0;
  $0 = global$0 - 32 | 0;
  global$0 = $0;
  HEAP16[$0 + 28 >> 1] = HEAPU8[11264] | HEAPU8[11265] << 8;
  HEAP32[$0 + 24 >> 2] = HEAPU8[11260] | HEAPU8[11261] << 8 | (HEAPU8[11262] << 16 | HEAPU8[11263] << 24);
  $1948($0 + 24 | 1, 11252, 1, HEAP32[$2_1 + 4 >> 2]);
  $6 = HEAP32[$2_1 + 4 >> 2];
  $5_1 = $0 + -16 | 0;
  global$0 = $5_1;
  $7 = $1904();
  HEAP32[$0 >> 2] = $4_1;
  $6 = $1949($5_1, ($6 >>> 9 & 1) + 13 | 0, $7, $0 + 24 | 0, $0) + $5_1 | 0;
  $7 = $1950($5_1, $6, $2_1);
  $4_1 = $5_1 + -32 | 0;
  global$0 = $4_1;
  $1687($0 + 8 | 0, $2_1);
  $1951($5_1, $7, $6, $4_1, $0 + 20 | 0, $0 + 16 | 0, $0 + 8 | 0);
  $1855($0 + 8 | 0);
  $1_1 = $314($1_1, $4_1, HEAP32[$0 + 20 >> 2], HEAP32[$0 + 16 >> 2], $2_1, $3_1);
  global$0 = $0 + 32 | 0;
  return $1_1 | 0;
 }
 
 function $1948($0, $1_1, $2_1, $3_1) {
  var $4_1 = 0;
  if ($3_1 & 2048) {
   HEAP8[$0 | 0] = 43;
   $0 = $0 + 1 | 0;
  }
  if ($3_1 & 512) {
   HEAP8[$0 | 0] = 35;
   $0 = $0 + 1 | 0;
  }
  while (1) {
   $4_1 = HEAPU8[$1_1 | 0];
   if ($4_1) {
    HEAP8[$0 | 0] = $4_1;
    $0 = $0 + 1 | 0;
    $1_1 = $1_1 + 1 | 0;
    continue;
   }
   break;
  };
  $4_1 = $3_1 & 74;
  $1_1 = 111;
  label$5 : {
   if (($4_1 | 0) == 64) {
    break label$5
   }
   $1_1 = $3_1 & 16384 ? 88 : 120;
   if (($4_1 | 0) == 8) {
    break label$5
   }
   $1_1 = $2_1 ? 100 : 117;
  }
  HEAP8[$0 | 0] = $1_1;
 }
 
 function $1949($0, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[$5_1 + 12 >> 2] = $2_1;
  HEAP32[$5_1 + 8 >> 2] = $4_1;
  $2_1 = $1907($5_1, $5_1 + 12 | 0);
  $0 = $1814($0, $1_1, $3_1, HEAP32[$5_1 + 8 >> 2]);
  $1908($2_1);
  global$0 = $5_1 + 16 | 0;
  return $0;
 }
 
 function $1950($0, $1_1, $2_1) {
  $2_1 = HEAP32[$2_1 + 4 >> 2] & 176;
  if (($2_1 | 0) == 32) {
   return $1_1
  }
  label$2 : {
   if (($2_1 | 0) != 16) {
    break label$2
   }
   label$3 : {
    label$4 : {
     $2_1 = HEAPU8[$0 | 0];
     switch ($2_1 + -43 | 0) {
     case 0:
     case 2:
      break label$4;
     default:
      break label$3;
     };
    }
    return $0 + 1 | 0;
   }
   if (($2_1 | 0) != 48 | ($1_1 - $0 | 0) < 2 | (HEAPU8[$0 + 1 | 0] | 32) != 120) {
    break label$2
   }
   $0 = $0 + 2 | 0;
  }
  return $0;
 }
 
 function $1951($0, $1_1, $2_1, $3_1, $4_1, $5_1, $6) {
  var $7 = 0, $8 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14 = 0;
  $10_1 = global$0 - 16 | 0;
  global$0 = $10_1;
  $11_1 = $343($6);
  $6 = $1856($6);
  $1943($10_1, $6);
  label$1 : {
   if ($772($10_1)) {
    $1903($11_1, $0, $2_1, $3_1);
    $6 = ($2_1 - $0 | 0) + $3_1 | 0;
    HEAP32[$5_1 >> 2] = $6;
    break label$1;
   }
   HEAP32[$5_1 >> 2] = $3_1;
   label$3 : {
    label$4 : {
     $8 = $0;
     $7 = HEAPU8[$8 | 0];
     switch ($7 + -43 | 0) {
     case 0:
     case 2:
      break label$4;
     default:
      break label$3;
     };
    }
    $8 = $344($11_1, $7 << 24 >> 24);
    $7 = HEAP32[$5_1 >> 2];
    HEAP32[$5_1 >> 2] = $7 + 1;
    HEAP8[$7 | 0] = $8;
    $8 = $0 + 1 | 0;
   }
   if (!(HEAPU8[$8 | 0] != 48 | ($2_1 - $8 | 0) < 2 | (HEAPU8[$8 + 1 | 0] | 32) != 120)) {
    $7 = $344($11_1, 48);
    $9_1 = HEAP32[$5_1 >> 2];
    HEAP32[$5_1 >> 2] = $9_1 + 1;
    HEAP8[$9_1 | 0] = $7;
    $7 = $344($11_1, HEAP8[$8 + 1 | 0]);
    $9_1 = HEAP32[$5_1 >> 2];
    HEAP32[$5_1 >> 2] = $9_1 + 1;
    HEAP8[$9_1 | 0] = $7;
    $8 = $8 + 2 | 0;
   }
   $1952($8, $2_1);
   $9_1 = 0;
   $13_1 = $1942($6);
   $7 = 0;
   $6 = $8;
   while (1) {
    if ($6 >>> 0 >= $2_1 >>> 0) {
     $1952(($8 - $0 | 0) + $3_1 | 0, HEAP32[$5_1 >> 2]);
     $6 = HEAP32[$5_1 >> 2];
    } else {
     label$9 : {
      if (!HEAPU8[$1865($10_1, $7) | 0]) {
       break label$9
      }
      if (HEAP8[$1865($10_1, $7) | 0] != ($9_1 | 0)) {
       break label$9
      }
      $9_1 = HEAP32[$5_1 >> 2];
      HEAP32[$5_1 >> 2] = $9_1 + 1;
      HEAP8[$9_1 | 0] = $13_1;
      $7 = ($7 >>> 0 < $100($10_1) + -1 >>> 0) + $7 | 0;
      $9_1 = 0;
     }
     $14 = $344($11_1, HEAP8[$6 | 0]);
     $12_1 = HEAP32[$5_1 >> 2];
     HEAP32[$5_1 >> 2] = $12_1 + 1;
     HEAP8[$12_1 | 0] = $14;
     $6 = $6 + 1 | 0;
     $9_1 = $9_1 + 1 | 0;
     continue;
    }
    break;
   };
  }
  HEAP32[$4_1 >> 2] = ($1_1 | 0) == ($2_1 | 0) ? $6 : ($1_1 - $0 | 0) + $3_1 | 0;
  $2512($10_1);
  global$0 = $10_1 + 16 | 0;
 }
 
 function $1952($0, $1_1) {
  $1989($0, $1_1);
 }
 
 function $1954($0, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6 = 0, $7 = 0, $8 = 0;
  $0 = global$0 - 32 | 0;
  global$0 = $0;
  HEAP32[$0 + 24 >> 2] = 37;
  HEAP32[$0 + 28 >> 2] = 0;
  $1948($0 + 24 | 1, 11254, 1, HEAP32[$2_1 + 4 >> 2]);
  $7 = HEAP32[$2_1 + 4 >> 2];
  $6 = $0 + -32 | 0;
  global$0 = $6;
  $8 = $1904();
  HEAP32[$0 >> 2] = $4_1;
  HEAP32[$0 + 4 >> 2] = $5_1;
  $5_1 = $1949($6, ($7 >>> 9 & 1) + 23 | 0, $8, $0 + 24 | 0, $0) + $6 | 0;
  $7 = $1950($6, $5_1, $2_1);
  $4_1 = $6 + -48 | 0;
  global$0 = $4_1;
  $1687($0 + 8 | 0, $2_1);
  $1951($6, $7, $5_1, $4_1, $0 + 20 | 0, $0 + 16 | 0, $0 + 8 | 0);
  $1855($0 + 8 | 0);
  $1_1 = $314($1_1, $4_1, HEAP32[$0 + 20 >> 2], HEAP32[$0 + 16 >> 2], $2_1, $3_1);
  global$0 = $0 + 32 | 0;
  return $1_1 | 0;
 }
 
 function $1955($0, $1_1, $2_1, $3_1, $4_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6 = 0, $7 = 0;
  $0 = global$0 - 32 | 0;
  global$0 = $0;
  HEAP16[$0 + 28 >> 1] = HEAPU8[11264] | HEAPU8[11265] << 8;
  HEAP32[$0 + 24 >> 2] = HEAPU8[11260] | HEAPU8[11261] << 8 | (HEAPU8[11262] << 16 | HEAPU8[11263] << 24);
  $1948($0 + 24 | 1, 11252, 0, HEAP32[$2_1 + 4 >> 2]);
  $6 = HEAP32[$2_1 + 4 >> 2];
  $5_1 = $0 + -16 | 0;
  global$0 = $5_1;
  $7 = $1904();
  HEAP32[$0 >> 2] = $4_1;
  $6 = $1949($5_1, $6 >>> 9 & 1 | 12, $7, $0 + 24 | 0, $0) + $5_1 | 0;
  $7 = $1950($5_1, $6, $2_1);
  $4_1 = $5_1 + -32 | 0;
  global$0 = $4_1;
  $1687($0 + 8 | 0, $2_1);
  $1951($5_1, $7, $6, $4_1, $0 + 20 | 0, $0 + 16 | 0, $0 + 8 | 0);
  $1855($0 + 8 | 0);
  $1_1 = $314($1_1, $4_1, HEAP32[$0 + 20 >> 2], HEAP32[$0 + 16 >> 2], $2_1, $3_1);
  global$0 = $0 + 32 | 0;
  return $1_1 | 0;
 }
 
 function $1956($0, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6 = 0, $7 = 0, $8 = 0;
  $0 = global$0 - 32 | 0;
  global$0 = $0;
  HEAP32[$0 + 24 >> 2] = 37;
  HEAP32[$0 + 28 >> 2] = 0;
  $1948($0 + 24 | 1, 11254, 0, HEAP32[$2_1 + 4 >> 2]);
  $7 = HEAP32[$2_1 + 4 >> 2];
  $6 = $0 + -32 | 0;
  global$0 = $6;
  $8 = $1904();
  HEAP32[$0 >> 2] = $4_1;
  HEAP32[$0 + 4 >> 2] = $5_1;
  $5_1 = $1949($6, ($7 >>> 9 & 1 | 22) + 1 | 0, $8, $0 + 24 | 0, $0) + $6 | 0;
  $7 = $1950($6, $5_1, $2_1);
  $4_1 = $6 + -48 | 0;
  global$0 = $4_1;
  $1687($0 + 8 | 0, $2_1);
  $1951($6, $7, $5_1, $4_1, $0 + 20 | 0, $0 + 16 | 0, $0 + 8 | 0);
  $1855($0 + 8 | 0);
  $1_1 = $314($1_1, $4_1, HEAP32[$0 + 20 >> 2], HEAP32[$0 + 16 >> 2], $2_1, $3_1);
  global$0 = $0 + 32 | 0;
  return $1_1 | 0;
 }
 
 function $1957($0, $1_1, $2_1, $3_1, $4_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = +$4_1;
  var $5_1 = 0, $6 = 0, $7 = 0, $8 = 0, $9_1 = 0, $10_1 = 0;
  $0 = global$0 - 208 | 0;
  global$0 = $0;
  HEAP32[$0 + 200 >> 2] = 37;
  HEAP32[$0 + 204 >> 2] = 0;
  $6 = $1958($0 + 200 | 1, 11257, HEAP32[$2_1 + 4 >> 2]);
  HEAP32[$0 + 156 >> 2] = $0 + 160;
  $5_1 = $1904();
  label$1 : {
   if ($6) {
    $8 = HEAP32[$2_1 + 8 >> 2];
    HEAPF64[$0 + 40 >> 3] = $4_1;
    HEAP32[$0 + 32 >> 2] = $8;
    $5_1 = $1949($0 + 160 | 0, 30, $5_1, $0 + 200 | 0, $0 + 32 | 0);
    break label$1;
   }
   HEAPF64[$0 + 48 >> 3] = $4_1;
   $5_1 = $1949($0 + 160 | 0, 30, $5_1, $0 + 200 | 0, $0 + 48 | 0);
  }
  HEAP32[$0 + 80 >> 2] = 139;
  $8 = $299($0 + 144 | 0, 0, $0 + 80 | 0);
  label$3 : {
   if (($5_1 | 0) >= 30) {
    $5_1 = $1904();
    label$5 : {
     if ($6) {
      $6 = HEAP32[$2_1 + 8 >> 2];
      HEAPF64[$0 + 8 >> 3] = $4_1;
      HEAP32[$0 >> 2] = $6;
      $5_1 = $1960($0 + 156 | 0, $5_1, $0 + 200 | 0, $0);
      break label$5;
     }
     HEAPF64[$0 + 16 >> 3] = $4_1;
     $5_1 = $1960($0 + 156 | 0, $5_1, $0 + 200 | 0, $0 + 16 | 0);
    }
    $6 = HEAP32[$0 + 156 >> 2];
    if (!$6) {
     break label$3
    }
    $1863($8, $6);
   }
   $7 = HEAP32[$0 + 156 >> 2];
   $6 = $7 + $5_1 | 0;
   $10_1 = $1950($7, $6, $2_1);
   HEAP32[$0 + 80 >> 2] = 139;
   $7 = $299($0 + 72 | 0, 0, $0 + 80 | 0);
   label$7 : {
    if (HEAP32[$0 + 156 >> 2] == ($0 + 160 | 0)) {
     $5_1 = $0 + 80 | 0;
     $9_1 = $0 + 160 | 0;
     break label$7;
    }
    $5_1 = $2582($5_1 << 1);
    if (!$5_1) {
     break label$3
    }
    $1863($7, $5_1);
    $9_1 = HEAP32[$0 + 156 >> 2];
   }
   $1687($0 + 56 | 0, $2_1);
   $1962($9_1, $10_1, $6, $5_1, $0 + 68 | 0, $0 - -64 | 0, $0 + 56 | 0);
   $1855($0 + 56 | 0);
   $1_1 = $314($1_1, $5_1, HEAP32[$0 + 68 >> 2], HEAP32[$0 + 64 >> 2], $2_1, $3_1);
   $1866($7);
   $1866($8);
   global$0 = $0 + 208 | 0;
   return $1_1 | 0;
  }
  $1643();
  abort();
 }
 
 function $1958($0, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  if ($2_1 & 2048) {
   HEAP8[$0 | 0] = 43;
   $0 = $0 + 1 | 0;
  }
  if ($2_1 & 1024) {
   HEAP8[$0 | 0] = 35;
   $0 = $0 + 1 | 0;
  }
  $3_1 = $2_1 & 260;
  if (($3_1 | 0) != 260) {
   HEAP8[$0 | 0] = 10798;
   HEAP8[$0 + 1 | 0] = 42;
   $5_1 = 1;
   $0 = $0 + 2 | 0;
  }
  $2_1 = $2_1 & 16384;
  while (1) {
   $4_1 = HEAPU8[$1_1 | 0];
   if ($4_1) {
    HEAP8[$0 | 0] = $4_1;
    $0 = $0 + 1 | 0;
    $1_1 = $1_1 + 1 | 0;
    continue;
   }
   break;
  };
  label$6 : {
   label$7 : {
    if (($3_1 | 0) != 256) {
     if (($3_1 | 0) != 4) {
      break label$7
     }
     $1_1 = $2_1 ? 70 : 102;
     break label$6;
    }
    $1_1 = $2_1 ? 69 : 101;
    break label$6;
   }
   $1_1 = $2_1 ? 65 : 97;
   if (($3_1 | 0) == 260) {
    break label$6
   }
   $1_1 = $2_1 ? 71 : 103;
  }
  HEAP8[$0 | 0] = $1_1;
  return $5_1;
 }
 
 function $1960($0, $1_1, $2_1, $3_1) {
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[$4_1 + 12 >> 2] = $1_1;
  HEAP32[$4_1 + 8 >> 2] = $3_1;
  $1_1 = $1907($4_1, $4_1 + 12 | 0);
  $0 = $1816($0, $2_1, HEAP32[$4_1 + 8 >> 2]);
  $1908($1_1);
  global$0 = $4_1 + 16 | 0;
  return $0;
 }
 
 function $1962($0, $1_1, $2_1, $3_1, $4_1, $5_1, $6) {
  var $7 = 0, $8 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14 = 0, $15 = 0, $16_1 = 0;
  $9_1 = global$0 - 16 | 0;
  global$0 = $9_1;
  $11_1 = $343($6);
  $13_1 = $1856($6);
  $1943($9_1, $13_1);
  HEAP32[$5_1 >> 2] = $3_1;
  label$1 : {
   label$2 : {
    $7 = $0;
    $6 = HEAPU8[$7 | 0];
    switch ($6 + -43 | 0) {
    case 0:
    case 2:
     break label$2;
    default:
     break label$1;
    };
   }
   $6 = $344($11_1, $6 << 24 >> 24);
   $7 = HEAP32[$5_1 >> 2];
   HEAP32[$5_1 >> 2] = $7 + 1;
   HEAP8[$7 | 0] = $6;
   $7 = $0 + 1 | 0;
  }
  label$3 : {
   $6 = $7;
   if (!(HEAPU8[$6 | 0] != 48 | ($2_1 - $6 | 0) <= 1 | (HEAPU8[$6 + 1 | 0] | 32) != 120)) {
    $6 = $344($11_1, 48);
    $8 = HEAP32[$5_1 >> 2];
    HEAP32[$5_1 >> 2] = $8 + 1;
    HEAP8[$8 | 0] = $6;
    $6 = $344($11_1, HEAP8[$7 + 1 | 0]);
    $8 = HEAP32[$5_1 >> 2];
    HEAP32[$5_1 >> 2] = $8 + 1;
    HEAP8[$8 | 0] = $6;
    $7 = $7 + 2 | 0;
    $6 = $7;
    while (1) {
     if ($6 >>> 0 >= $2_1 >>> 0) {
      break label$3
     }
     if (!$1818(HEAP8[$6 | 0], $1904())) {
      break label$3
     }
     $6 = $6 + 1 | 0;
     continue;
    };
   }
   while (1) {
    if ($6 >>> 0 >= $2_1 >>> 0) {
     break label$3
    }
    $8 = HEAP8[$6 | 0];
    $1904();
    if (!$1596($8)) {
     break label$3
    }
    $6 = $6 + 1 | 0;
    continue;
   };
  }
  label$7 : {
   if ($772($9_1)) {
    $1903($11_1, $7, $6, HEAP32[$5_1 >> 2]);
    HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] + ($6 - $7 | 0);
    break label$7;
   }
   $1952($7, $6);
   $15 = $1942($13_1);
   $8 = $7;
   while (1) {
    if ($8 >>> 0 >= $6 >>> 0) {
     $1952(($7 - $0 | 0) + $3_1 | 0, HEAP32[$5_1 >> 2])
    } else {
     label$12 : {
      if (HEAP8[$1865($9_1, $12_1) | 0] < 1) {
       break label$12
      }
      if (HEAP8[$1865($9_1, $12_1) | 0] != ($10_1 | 0)) {
       break label$12
      }
      $10_1 = HEAP32[$5_1 >> 2];
      HEAP32[$5_1 >> 2] = $10_1 + 1;
      HEAP8[$10_1 | 0] = $15;
      $12_1 = ($12_1 >>> 0 < $100($9_1) + -1 >>> 0) + $12_1 | 0;
      $10_1 = 0;
     }
     $16_1 = $344($11_1, HEAP8[$8 | 0]);
     $14 = HEAP32[$5_1 >> 2];
     HEAP32[$5_1 >> 2] = $14 + 1;
     HEAP8[$14 | 0] = $16_1;
     $8 = $8 + 1 | 0;
     $10_1 = $10_1 + 1 | 0;
     continue;
    }
    break;
   };
  }
  while (1) {
   label$14 : {
    $10_1 = $11_1;
    if ($6 >>> 0 < $2_1 >>> 0) {
     $7 = HEAPU8[$6 | 0];
     if (($7 | 0) != 46) {
      break label$14
     }
     $7 = $1941($13_1);
     $8 = HEAP32[$5_1 >> 2];
     HEAP32[$5_1 >> 2] = $8 + 1;
     HEAP8[$8 | 0] = $7;
     $6 = $6 + 1 | 0;
    }
    $1903($10_1, $6, $2_1, HEAP32[$5_1 >> 2]);
    $7 = $5_1;
    $5_1 = HEAP32[$5_1 >> 2] + ($2_1 - $6 | 0) | 0;
    HEAP32[$7 >> 2] = $5_1;
    HEAP32[$4_1 >> 2] = ($1_1 | 0) == ($2_1 | 0) ? $5_1 : ($1_1 - $0 | 0) + $3_1 | 0;
    $2512($9_1);
    global$0 = $9_1 + 16 | 0;
    return;
   }
   $7 = $344($11_1, $7 << 24 >> 24);
   $8 = HEAP32[$5_1 >> 2];
   HEAP32[$5_1 >> 2] = $8 + 1;
   HEAP8[$8 | 0] = $7;
   $6 = $6 + 1 | 0;
   continue;
  };
 }
 
 function $1965($0, $1_1, $2_1, $3_1, $4_1, $5_1, $6, $7) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  var $8 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0;
  $0 = global$0 - 256 | 0;
  global$0 = $0;
  HEAP32[$0 + 248 >> 2] = 37;
  HEAP32[$0 + 252 >> 2] = 0;
  $9_1 = $1958($0 + 248 | 1, 11258, HEAP32[$2_1 + 4 >> 2]);
  HEAP32[$0 + 204 >> 2] = $0 + 208;
  $8 = $1904();
  label$1 : {
   if ($9_1) {
    $10_1 = HEAP32[$2_1 + 8 >> 2];
    HEAP32[$0 + 72 >> 2] = $6;
    HEAP32[$0 + 76 >> 2] = $7;
    $11_1 = $0 - -64 | 0;
    HEAP32[$11_1 >> 2] = $4_1;
    HEAP32[$11_1 + 4 >> 2] = $5_1;
    HEAP32[$0 + 48 >> 2] = $10_1;
    $8 = $1949($0 + 208 | 0, 30, $8, $0 + 248 | 0, $0 + 48 | 0);
    break label$1;
   }
   HEAP32[$0 + 80 >> 2] = $4_1;
   HEAP32[$0 + 84 >> 2] = $5_1;
   HEAP32[$0 + 88 >> 2] = $6;
   HEAP32[$0 + 92 >> 2] = $7;
   $8 = $1949($0 + 208 | 0, 30, $8, $0 + 248 | 0, $0 + 80 | 0);
  }
  HEAP32[$0 + 128 >> 2] = 139;
  $10_1 = $299($0 + 192 | 0, 0, $0 + 128 | 0);
  label$3 : {
   if (($8 | 0) >= 30) {
    $8 = $1904();
    label$5 : {
     if ($9_1) {
      $9_1 = HEAP32[$2_1 + 8 >> 2];
      HEAP32[$0 + 24 >> 2] = $6;
      HEAP32[$0 + 28 >> 2] = $7;
      HEAP32[$0 + 16 >> 2] = $4_1;
      HEAP32[$0 + 20 >> 2] = $5_1;
      HEAP32[$0 >> 2] = $9_1;
      $8 = $1960($0 + 204 | 0, $8, $0 + 248 | 0, $0);
      break label$5;
     }
     HEAP32[$0 + 32 >> 2] = $4_1;
     HEAP32[$0 + 36 >> 2] = $5_1;
     HEAP32[$0 + 40 >> 2] = $6;
     HEAP32[$0 + 44 >> 2] = $7;
     $8 = $1960($0 + 204 | 0, $8, $0 + 248 | 0, $0 + 32 | 0);
    }
    $4_1 = HEAP32[$0 + 204 >> 2];
    if (!$4_1) {
     break label$3
    }
    $1863($10_1, $4_1);
   }
   $5_1 = HEAP32[$0 + 204 >> 2];
   $4_1 = $5_1 + $8 | 0;
   $6 = $1950($5_1, $4_1, $2_1);
   HEAP32[$0 + 128 >> 2] = 139;
   $5_1 = $299($0 + 120 | 0, 0, $0 + 128 | 0);
   label$7 : {
    if (HEAP32[$0 + 204 >> 2] == ($0 + 208 | 0)) {
     $8 = $0 + 128 | 0;
     $7 = $0 + 208 | 0;
     break label$7;
    }
    $8 = $2582($8 << 1);
    if (!$8) {
     break label$3
    }
    $1863($5_1, $8);
    $7 = HEAP32[$0 + 204 >> 2];
   }
   $1687($0 + 104 | 0, $2_1);
   $1962($7, $6, $4_1, $8, $0 + 116 | 0, $0 + 112 | 0, $0 + 104 | 0);
   $1855($0 + 104 | 0);
   $1_1 = $314($1_1, $8, HEAP32[$0 + 116 >> 2], HEAP32[$0 + 112 >> 2], $2_1, $3_1);
   $1866($5_1);
   $1866($10_1);
   global$0 = $0 + 256 | 0;
   return $1_1 | 0;
  }
  $1643();
  abort();
 }
 
 function $1966($0, $1_1, $2_1, $3_1, $4_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6 = 0, $7 = 0;
  $0 = global$0 - 96 | 0;
  global$0 = $0;
  HEAP16[$0 + 92 >> 1] = HEAPU8[11270] | HEAPU8[11271] << 8;
  HEAP32[$0 + 88 >> 2] = HEAPU8[11266] | HEAPU8[11267] << 8 | (HEAPU8[11268] << 16 | HEAPU8[11269] << 24);
  $5_1 = $1904();
  HEAP32[$0 >> 2] = $4_1;
  $7 = $1949($0 - -64 | 0, 20, $5_1, $0 + 88 | 0, $0);
  $4_1 = $7 + ($0 - -64 | 0) | 0;
  $5_1 = $1950($0 - -64 | 0, $4_1, $2_1);
  $1687($0 + 16 | 0, $2_1);
  $6 = $343($0 + 16 | 0);
  $1855($0 + 16 | 0);
  $1903($6, $0 - -64 | 0, $4_1, $0 + 16 | 0);
  $6 = $1_1;
  $1_1 = $7 + ($0 + 16 | 0) | 0;
  $1_1 = $314($6, $0 + 16 | 0, ($4_1 | 0) == ($5_1 | 0) ? $1_1 : (($5_1 - $0 | 0) + $0 | 0) + -48 | 0, $1_1, $2_1, $3_1);
  global$0 = $0 + 96 | 0;
  return $1_1 | 0;
 }
 
 function $1967($0, $1_1, $2_1, $3_1, $4_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $5_1 = global$0 - 48 | 0;
  global$0 = $5_1;
  HEAP32[$5_1 + 40 >> 2] = $1_1;
  label$1 : {
   if (!(HEAP32[$2_1 + 4 >> 2] & 1)) {
    $2_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0, $1_1, $2_1, $3_1, $4_1) | 0;
    break label$1;
   }
   $1687($5_1 + 24 | 0, $2_1);
   $0 = $1910($5_1 + 24 | 0);
   $1855($5_1 + 24 | 0);
   label$3 : {
    if ($4_1) {
     $1857($5_1 + 24 | 0, $0);
     break label$3;
    }
    $1858($5_1 + 24 | 0, $0);
   }
   (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $779($5_1 + 24 | 0)), HEAP32[wasm2js_i32$0 + 16 >> 2] = wasm2js_i32$1;
   while (1) {
    (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $1969($5_1 + 24 | 0)), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
    if ($31($5_1 + 16 | 0, $5_1 + 8 | 0)) {
     $1730($5_1 + 40 | 0, HEAP32[HEAP32[$5_1 + 16 >> 2] >> 2]);
     $84($5_1 + 16 | 0);
     continue;
    } else {
     $2_1 = HEAP32[$5_1 + 40 >> 2];
     $2512($5_1 + 24 | 0);
    }
    break;
   };
  }
  global$0 = $5_1 + 48 | 0;
  return $2_1 | 0;
 }
 
 function $1969($0) {
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $0 = HEAP32[$431($1_1 + 8 | 0, $320($0) + ($100($0) << 2) | 0) >> 2];
  global$0 = $1_1 + 16 | 0;
  return $0;
 }
 
 function $1972($0, $1_1, $2_1, $3_1, $4_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6 = 0, $7 = 0;
  $0 = global$0 - 32 | 0;
  global$0 = $0;
  HEAP16[$0 + 28 >> 1] = HEAPU8[11264] | HEAPU8[11265] << 8;
  HEAP32[$0 + 24 >> 2] = HEAPU8[11260] | HEAPU8[11261] << 8 | (HEAPU8[11262] << 16 | HEAPU8[11263] << 24);
  $1948($0 + 24 | 1, 11252, 1, HEAP32[$2_1 + 4 >> 2]);
  $6 = HEAP32[$2_1 + 4 >> 2];
  $5_1 = $0 + -16 | 0;
  global$0 = $5_1;
  $7 = $1904();
  HEAP32[$0 >> 2] = $4_1;
  $4_1 = $6 >>> 9 & 1;
  $6 = $1949($5_1, $4_1 + 13 | 0, $7, $0 + 24 | 0, $0) + $5_1 | 0;
  $7 = $1950($5_1, $6, $2_1);
  $4_1 = $5_1 - (($4_1 << 3 | 96) + 11 & 112) | 0;
  global$0 = $4_1;
  $1687($0 + 8 | 0, $2_1);
  $1973($5_1, $7, $6, $4_1, $0 + 20 | 0, $0 + 16 | 0, $0 + 8 | 0);
  $1855($0 + 8 | 0);
  $1_1 = $1974($1_1, $4_1, HEAP32[$0 + 20 >> 2], HEAP32[$0 + 16 >> 2], $2_1, $3_1);
  global$0 = $0 + 32 | 0;
  return $1_1 | 0;
 }
 
 function $1973($0, $1_1, $2_1, $3_1, $4_1, $5_1, $6) {
  var $7 = 0, $8 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14 = 0;
  $10_1 = global$0 - 16 | 0;
  global$0 = $10_1;
  $11_1 = $1704($6);
  $6 = $1910($6);
  $1943($10_1, $6);
  label$1 : {
   if ($772($10_1)) {
    $1939($11_1, $0, $2_1, $3_1);
    $6 = ($2_1 - $0 << 2) + $3_1 | 0;
    HEAP32[$5_1 >> 2] = $6;
    break label$1;
   }
   HEAP32[$5_1 >> 2] = $3_1;
   label$3 : {
    label$4 : {
     $8 = $0;
     $7 = HEAPU8[$8 | 0];
     switch ($7 + -43 | 0) {
     case 0:
     case 2:
      break label$4;
     default:
      break label$3;
     };
    }
    $8 = $1735($11_1, $7 << 24 >> 24);
    $7 = HEAP32[$5_1 >> 2];
    HEAP32[$5_1 >> 2] = $7 + 4;
    HEAP32[$7 >> 2] = $8;
    $8 = $0 + 1 | 0;
   }
   if (!(HEAPU8[$8 | 0] != 48 | ($2_1 - $8 | 0) < 2 | (HEAPU8[$8 + 1 | 0] | 32) != 120)) {
    $7 = $1735($11_1, 48);
    $9_1 = HEAP32[$5_1 >> 2];
    HEAP32[$5_1 >> 2] = $9_1 + 4;
    HEAP32[$9_1 >> 2] = $7;
    $7 = $1735($11_1, HEAP8[$8 + 1 | 0]);
    $9_1 = HEAP32[$5_1 >> 2];
    HEAP32[$5_1 >> 2] = $9_1 + 4;
    HEAP32[$9_1 >> 2] = $7;
    $8 = $8 + 2 | 0;
   }
   $1952($8, $2_1);
   $9_1 = 0;
   $13_1 = $1942($6);
   $7 = 0;
   $6 = $8;
   while (1) {
    if ($6 >>> 0 >= $2_1 >>> 0) {
     $1975(($8 - $0 << 2) + $3_1 | 0, HEAP32[$5_1 >> 2]);
     $6 = HEAP32[$5_1 >> 2];
    } else {
     label$9 : {
      if (!HEAPU8[$1865($10_1, $7) | 0]) {
       break label$9
      }
      if (HEAP8[$1865($10_1, $7) | 0] != ($9_1 | 0)) {
       break label$9
      }
      $9_1 = HEAP32[$5_1 >> 2];
      HEAP32[$5_1 >> 2] = $9_1 + 4;
      HEAP32[$9_1 >> 2] = $13_1;
      $7 = ($7 >>> 0 < $100($10_1) + -1 >>> 0) + $7 | 0;
      $9_1 = 0;
     }
     $14 = $1735($11_1, HEAP8[$6 | 0]);
     $12_1 = HEAP32[$5_1 >> 2];
     HEAP32[$5_1 >> 2] = $12_1 + 4;
     HEAP32[$12_1 >> 2] = $14;
     $6 = $6 + 1 | 0;
     $9_1 = $9_1 + 1 | 0;
     continue;
    }
    break;
   };
  }
  HEAP32[$4_1 >> 2] = ($1_1 | 0) == ($2_1 | 0) ? $6 : ($1_1 - $0 << 2) + $3_1 | 0;
  $2512($10_1);
  global$0 = $10_1 + 16 | 0;
 }
 
 function $1974($0, $1_1, $2_1, $3_1, $4_1, $5_1) {
  var $6 = 0, $7 = 0, $8 = 0, $9_1 = 0;
  $8 = global$0 - 16 | 0;
  global$0 = $8;
  label$1 : {
   if (!$0) {
    break label$1
   }
   $7 = HEAP32[$4_1 + 12 >> 2];
   $6 = $2_1 - $1_1 | 0;
   if (($6 | 0) >= 1) {
    $6 = $6 >> 2;
    if (($316($0, $1_1, $6) | 0) != ($6 | 0)) {
     break label$1
    }
   }
   $1_1 = $3_1 - $1_1 >> 2;
   $1_1 = ($7 | 0) > ($1_1 | 0) ? $7 - $1_1 | 0 : 0;
   if (($1_1 | 0) >= 1) {
    $5_1 = $1976($8, $1_1, $5_1);
    $7 = $316($0, $320($5_1), $1_1);
    $2512($5_1);
    if (($1_1 | 0) != ($7 | 0)) {
     break label$1
    }
   }
   $1_1 = $3_1 - $2_1 | 0;
   if (($1_1 | 0) >= 1) {
    $1_1 = $1_1 >> 2;
    if (($316($0, $2_1, $1_1) | 0) != ($1_1 | 0)) {
     break label$1
    }
   }
   $318($4_1);
   $9_1 = $0;
  }
  global$0 = $8 + 16 | 0;
  return $9_1;
 }
 
 function $1975($0, $1_1) {
  $1990($0, $1_1);
 }
 
 function $1976($0, $1_1, $2_1) {
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $2537($0, $1_1, $2_1);
  global$0 = $3_1 + 16 | 0;
  return $0;
 }
 
 function $1978($0, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6 = 0, $7 = 0, $8 = 0;
  $0 = global$0 - 32 | 0;
  global$0 = $0;
  HEAP32[$0 + 24 >> 2] = 37;
  HEAP32[$0 + 28 >> 2] = 0;
  $1948($0 + 24 | 1, 11254, 1, HEAP32[$2_1 + 4 >> 2]);
  $7 = HEAP32[$2_1 + 4 >> 2];
  $6 = $0 + -32 | 0;
  global$0 = $6;
  $8 = $1904();
  HEAP32[$0 >> 2] = $4_1;
  HEAP32[$0 + 4 >> 2] = $5_1;
  $4_1 = $7 >>> 9 & 1;
  $5_1 = $1949($6, $4_1 + 23 | 0, $8, $0 + 24 | 0, $0) + $6 | 0;
  $7 = $1950($6, $5_1, $2_1);
  $4_1 = $6 - (($4_1 << 3 | 176) + 11 & 240) | 0;
  global$0 = $4_1;
  $1687($0 + 8 | 0, $2_1);
  $1973($6, $7, $5_1, $4_1, $0 + 20 | 0, $0 + 16 | 0, $0 + 8 | 0);
  $1855($0 + 8 | 0);
  $1_1 = $1974($1_1, $4_1, HEAP32[$0 + 20 >> 2], HEAP32[$0 + 16 >> 2], $2_1, $3_1);
  global$0 = $0 + 32 | 0;
  return $1_1 | 0;
 }
 
 function $1979($0, $1_1, $2_1, $3_1, $4_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6 = 0, $7 = 0;
  $0 = global$0 - 32 | 0;
  global$0 = $0;
  HEAP16[$0 + 28 >> 1] = HEAPU8[11264] | HEAPU8[11265] << 8;
  HEAP32[$0 + 24 >> 2] = HEAPU8[11260] | HEAPU8[11261] << 8 | (HEAPU8[11262] << 16 | HEAPU8[11263] << 24);
  $1948($0 + 24 | 1, 11252, 0, HEAP32[$2_1 + 4 >> 2]);
  $6 = HEAP32[$2_1 + 4 >> 2];
  $5_1 = $0 + -16 | 0;
  global$0 = $5_1;
  $7 = $1904();
  HEAP32[$0 >> 2] = $4_1;
  $6 = $1949($5_1, $6 >>> 9 & 1 | 12, $7, $0 + 24 | 0, $0) + $5_1 | 0;
  $7 = $1950($5_1, $6, $2_1);
  $4_1 = $5_1 + -96 | 0;
  global$0 = $4_1;
  $1687($0 + 8 | 0, $2_1);
  $1973($5_1, $7, $6, $4_1, $0 + 20 | 0, $0 + 16 | 0, $0 + 8 | 0);
  $1855($0 + 8 | 0);
  $1_1 = $1974($1_1, $4_1, HEAP32[$0 + 20 >> 2], HEAP32[$0 + 16 >> 2], $2_1, $3_1);
  global$0 = $0 + 32 | 0;
  return $1_1 | 0;
 }
 
 function $1980($0, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6 = 0, $7 = 0, $8 = 0;
  $0 = global$0 - 32 | 0;
  global$0 = $0;
  HEAP32[$0 + 24 >> 2] = 37;
  HEAP32[$0 + 28 >> 2] = 0;
  $1948($0 + 24 | 1, 11254, 0, HEAP32[$2_1 + 4 >> 2]);
  $7 = HEAP32[$2_1 + 4 >> 2];
  $6 = $0 + -32 | 0;
  global$0 = $6;
  $8 = $1904();
  HEAP32[$0 >> 2] = $4_1;
  HEAP32[$0 + 4 >> 2] = $5_1;
  $4_1 = $7 >>> 9 & 1 | 22;
  $5_1 = $1949($6, $4_1 + 1 | 0, $8, $0 + 24 | 0, $0) + $6 | 0;
  $7 = $1950($6, $5_1, $2_1);
  $4_1 = $6 - (($4_1 << 3) + 11 & 240) | 0;
  global$0 = $4_1;
  $1687($0 + 8 | 0, $2_1);
  $1973($6, $7, $5_1, $4_1, $0 + 20 | 0, $0 + 16 | 0, $0 + 8 | 0);
  $1855($0 + 8 | 0);
  $1_1 = $1974($1_1, $4_1, HEAP32[$0 + 20 >> 2], HEAP32[$0 + 16 >> 2], $2_1, $3_1);
  global$0 = $0 + 32 | 0;
  return $1_1 | 0;
 }
 
 function $1981($0, $1_1, $2_1, $3_1, $4_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = +$4_1;
  var $5_1 = 0, $6 = 0, $7 = 0, $8 = 0, $9_1 = 0, $10_1 = 0;
  $0 = global$0 - 384 | 0;
  global$0 = $0;
  HEAP32[$0 + 376 >> 2] = 37;
  HEAP32[$0 + 380 >> 2] = 0;
  $6 = $1958($0 + 376 | 1, 11257, HEAP32[$2_1 + 4 >> 2]);
  HEAP32[$0 + 332 >> 2] = $0 + 336;
  $5_1 = $1904();
  label$1 : {
   if ($6) {
    $8 = HEAP32[$2_1 + 8 >> 2];
    HEAPF64[$0 + 40 >> 3] = $4_1;
    HEAP32[$0 + 32 >> 2] = $8;
    $5_1 = $1949($0 + 336 | 0, 30, $5_1, $0 + 376 | 0, $0 + 32 | 0);
    break label$1;
   }
   HEAPF64[$0 + 48 >> 3] = $4_1;
   $5_1 = $1949($0 + 336 | 0, 30, $5_1, $0 + 376 | 0, $0 + 48 | 0);
  }
  HEAP32[$0 + 80 >> 2] = 139;
  $8 = $299($0 + 320 | 0, 0, $0 + 80 | 0);
  label$3 : {
   if (($5_1 | 0) >= 30) {
    $5_1 = $1904();
    label$5 : {
     if ($6) {
      $6 = HEAP32[$2_1 + 8 >> 2];
      HEAPF64[$0 + 8 >> 3] = $4_1;
      HEAP32[$0 >> 2] = $6;
      $5_1 = $1960($0 + 332 | 0, $5_1, $0 + 376 | 0, $0);
      break label$5;
     }
     HEAPF64[$0 + 16 >> 3] = $4_1;
     $5_1 = $1960($0 + 332 | 0, $5_1, $0 + 376 | 0, $0 + 16 | 0);
    }
    $6 = HEAP32[$0 + 332 >> 2];
    if (!$6) {
     break label$3
    }
    $1863($8, $6);
   }
   $7 = HEAP32[$0 + 332 >> 2];
   $6 = $7 + $5_1 | 0;
   $10_1 = $1950($7, $6, $2_1);
   HEAP32[$0 + 80 >> 2] = 139;
   $7 = $299($0 + 72 | 0, 0, $0 + 80 | 0);
   label$7 : {
    if (HEAP32[$0 + 332 >> 2] == ($0 + 336 | 0)) {
     $5_1 = $0 + 80 | 0;
     $9_1 = $0 + 336 | 0;
     break label$7;
    }
    $5_1 = $2582($5_1 << 3);
    if (!$5_1) {
     break label$3
    }
    $1863($7, $5_1);
    $9_1 = HEAP32[$0 + 332 >> 2];
   }
   $1687($0 + 56 | 0, $2_1);
   $1984($9_1, $10_1, $6, $5_1, $0 + 68 | 0, $0 - -64 | 0, $0 + 56 | 0);
   $1855($0 + 56 | 0);
   $1_1 = $1974($1_1, $5_1, HEAP32[$0 + 68 >> 2], HEAP32[$0 + 64 >> 2], $2_1, $3_1);
   $1866($7);
   $1866($8);
   global$0 = $0 + 384 | 0;
   return $1_1 | 0;
  }
  $1643();
  abort();
 }
 
 function $1984($0, $1_1, $2_1, $3_1, $4_1, $5_1, $6) {
  var $7 = 0, $8 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14 = 0, $15 = 0, $16_1 = 0;
  $9_1 = global$0 - 16 | 0;
  global$0 = $9_1;
  $10_1 = $1704($6);
  $13_1 = $1910($6);
  $1943($9_1, $13_1);
  HEAP32[$5_1 >> 2] = $3_1;
  label$1 : {
   label$2 : {
    $7 = $0;
    $6 = HEAPU8[$7 | 0];
    switch ($6 + -43 | 0) {
    case 0:
    case 2:
     break label$2;
    default:
     break label$1;
    };
   }
   $6 = $1735($10_1, $6 << 24 >> 24);
   $7 = HEAP32[$5_1 >> 2];
   HEAP32[$5_1 >> 2] = $7 + 4;
   HEAP32[$7 >> 2] = $6;
   $7 = $0 + 1 | 0;
  }
  label$3 : {
   $6 = $7;
   if (!(HEAPU8[$6 | 0] != 48 | ($2_1 - $6 | 0) <= 1 | (HEAPU8[$6 + 1 | 0] | 32) != 120)) {
    $6 = $1735($10_1, 48);
    $8 = HEAP32[$5_1 >> 2];
    HEAP32[$5_1 >> 2] = $8 + 4;
    HEAP32[$8 >> 2] = $6;
    $6 = $1735($10_1, HEAP8[$7 + 1 | 0]);
    $8 = HEAP32[$5_1 >> 2];
    HEAP32[$5_1 >> 2] = $8 + 4;
    HEAP32[$8 >> 2] = $6;
    $7 = $7 + 2 | 0;
    $6 = $7;
    while (1) {
     if ($6 >>> 0 >= $2_1 >>> 0) {
      break label$3
     }
     if (!$1818(HEAP8[$6 | 0], $1904())) {
      break label$3
     }
     $6 = $6 + 1 | 0;
     continue;
    };
   }
   while (1) {
    if ($6 >>> 0 >= $2_1 >>> 0) {
     break label$3
    }
    $8 = HEAP8[$6 | 0];
    $1904();
    if (!$1596($8)) {
     break label$3
    }
    $6 = $6 + 1 | 0;
    continue;
   };
  }
  label$7 : {
   if ($772($9_1)) {
    $1939($10_1, $7, $6, HEAP32[$5_1 >> 2]);
    HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] + ($6 - $7 << 2);
    break label$7;
   }
   $1952($7, $6);
   $15 = $1942($13_1);
   $8 = $7;
   while (1) {
    if ($8 >>> 0 >= $6 >>> 0) {
     $1975(($7 - $0 << 2) + $3_1 | 0, HEAP32[$5_1 >> 2])
    } else {
     label$12 : {
      if (HEAP8[$1865($9_1, $11_1) | 0] < 1) {
       break label$12
      }
      if (HEAP8[$1865($9_1, $11_1) | 0] != ($12_1 | 0)) {
       break label$12
      }
      $12_1 = HEAP32[$5_1 >> 2];
      HEAP32[$5_1 >> 2] = $12_1 + 4;
      HEAP32[$12_1 >> 2] = $15;
      $11_1 = ($11_1 >>> 0 < $100($9_1) + -1 >>> 0) + $11_1 | 0;
      $12_1 = 0;
     }
     $16_1 = $1735($10_1, HEAP8[$8 | 0]);
     $14 = HEAP32[$5_1 >> 2];
     HEAP32[$5_1 >> 2] = $14 + 4;
     HEAP32[$14 >> 2] = $16_1;
     $8 = $8 + 1 | 0;
     $12_1 = $12_1 + 1 | 0;
     continue;
    }
    break;
   };
  }
  label$13 : {
   label$14 : {
    while (1) {
     if ($6 >>> 0 >= $2_1 >>> 0) {
      break label$14
     }
     $7 = HEAPU8[$6 | 0];
     if (($7 | 0) != 46) {
      $7 = $1735($10_1, $7 << 24 >> 24);
      $8 = HEAP32[$5_1 >> 2];
      HEAP32[$5_1 >> 2] = $8 + 4;
      HEAP32[$8 >> 2] = $7;
      $6 = $6 + 1 | 0;
      continue;
     }
     break;
    };
    $7 = $1941($13_1);
    $11_1 = HEAP32[$5_1 >> 2];
    $8 = $11_1 + 4 | 0;
    HEAP32[$5_1 >> 2] = $8;
    HEAP32[$11_1 >> 2] = $7;
    $6 = $6 + 1 | 0;
    break label$13;
   }
   $8 = HEAP32[$5_1 >> 2];
  }
  $1939($10_1, $6, $2_1, $8);
  $7 = $5_1;
  $5_1 = HEAP32[$5_1 >> 2] + ($2_1 - $6 << 2) | 0;
  HEAP32[$7 >> 2] = $5_1;
  HEAP32[$4_1 >> 2] = ($1_1 | 0) == ($2_1 | 0) ? $5_1 : ($1_1 - $0 << 2) + $3_1 | 0;
  $2512($9_1);
  global$0 = $9_1 + 16 | 0;
 }
 
 function $1987($0, $1_1, $2_1, $3_1, $4_1, $5_1, $6, $7) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  var $8 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0;
  $0 = global$0 - 432 | 0;
  global$0 = $0;
  HEAP32[$0 + 424 >> 2] = 37;
  HEAP32[$0 + 428 >> 2] = 0;
  $9_1 = $1958($0 + 424 | 1, 11258, HEAP32[$2_1 + 4 >> 2]);
  HEAP32[$0 + 380 >> 2] = $0 + 384;
  $8 = $1904();
  label$1 : {
   if ($9_1) {
    $10_1 = HEAP32[$2_1 + 8 >> 2];
    HEAP32[$0 + 72 >> 2] = $6;
    HEAP32[$0 + 76 >> 2] = $7;
    $11_1 = $0 - -64 | 0;
    HEAP32[$11_1 >> 2] = $4_1;
    HEAP32[$11_1 + 4 >> 2] = $5_1;
    HEAP32[$0 + 48 >> 2] = $10_1;
    $8 = $1949($0 + 384 | 0, 30, $8, $0 + 424 | 0, $0 + 48 | 0);
    break label$1;
   }
   HEAP32[$0 + 80 >> 2] = $4_1;
   HEAP32[$0 + 84 >> 2] = $5_1;
   HEAP32[$0 + 88 >> 2] = $6;
   HEAP32[$0 + 92 >> 2] = $7;
   $8 = $1949($0 + 384 | 0, 30, $8, $0 + 424 | 0, $0 + 80 | 0);
  }
  HEAP32[$0 + 128 >> 2] = 139;
  $10_1 = $299($0 + 368 | 0, 0, $0 + 128 | 0);
  label$3 : {
   if (($8 | 0) >= 30) {
    $8 = $1904();
    label$5 : {
     if ($9_1) {
      $9_1 = HEAP32[$2_1 + 8 >> 2];
      HEAP32[$0 + 24 >> 2] = $6;
      HEAP32[$0 + 28 >> 2] = $7;
      HEAP32[$0 + 16 >> 2] = $4_1;
      HEAP32[$0 + 20 >> 2] = $5_1;
      HEAP32[$0 >> 2] = $9_1;
      $8 = $1960($0 + 380 | 0, $8, $0 + 424 | 0, $0);
      break label$5;
     }
     HEAP32[$0 + 32 >> 2] = $4_1;
     HEAP32[$0 + 36 >> 2] = $5_1;
     HEAP32[$0 + 40 >> 2] = $6;
     HEAP32[$0 + 44 >> 2] = $7;
     $8 = $1960($0 + 380 | 0, $8, $0 + 424 | 0, $0 + 32 | 0);
    }
    $4_1 = HEAP32[$0 + 380 >> 2];
    if (!$4_1) {
     break label$3
    }
    $1863($10_1, $4_1);
   }
   $5_1 = HEAP32[$0 + 380 >> 2];
   $4_1 = $5_1 + $8 | 0;
   $6 = $1950($5_1, $4_1, $2_1);
   HEAP32[$0 + 128 >> 2] = 139;
   $5_1 = $299($0 + 120 | 0, 0, $0 + 128 | 0);
   label$7 : {
    if (HEAP32[$0 + 380 >> 2] == ($0 + 384 | 0)) {
     $8 = $0 + 128 | 0;
     $7 = $0 + 384 | 0;
     break label$7;
    }
    $8 = $2582($8 << 3);
    if (!$8) {
     break label$3
    }
    $1863($5_1, $8);
    $7 = HEAP32[$0 + 380 >> 2];
   }
   $1687($0 + 104 | 0, $2_1);
   $1984($7, $6, $4_1, $8, $0 + 116 | 0, $0 + 112 | 0, $0 + 104 | 0);
   $1855($0 + 104 | 0);
   $1_1 = $1974($1_1, $8, HEAP32[$0 + 116 >> 2], HEAP32[$0 + 112 >> 2], $2_1, $3_1);
   $1866($5_1);
   $1866($10_1);
   global$0 = $0 + 432 | 0;
   return $1_1 | 0;
  }
  $1643();
  abort();
 }
 
 function $1988($0, $1_1, $2_1, $3_1, $4_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6 = 0, $7 = 0;
  $0 = global$0 - 208 | 0;
  global$0 = $0;
  HEAP16[$0 + 204 >> 1] = HEAPU8[11270] | HEAPU8[11271] << 8;
  HEAP32[$0 + 200 >> 2] = HEAPU8[11266] | HEAPU8[11267] << 8 | (HEAPU8[11268] << 16 | HEAPU8[11269] << 24);
  $5_1 = $1904();
  HEAP32[$0 >> 2] = $4_1;
  $7 = $1949($0 + 176 | 0, 20, $5_1, $0 + 200 | 0, $0);
  $4_1 = $7 + ($0 + 176 | 0) | 0;
  $5_1 = $1950($0 + 176 | 0, $4_1, $2_1);
  $1687($0 + 16 | 0, $2_1);
  $6 = $1704($0 + 16 | 0);
  $1855($0 + 16 | 0);
  $1939($6, $0 + 176 | 0, $4_1, $0 + 16 | 0);
  $6 = $1_1;
  $1_1 = ($0 + 16 | 0) + ($7 << 2) | 0;
  $1_1 = $1974($6, $0 + 16 | 0, ($4_1 | 0) == ($5_1 | 0) ? $1_1 : (($5_1 - $0 << 2) + $0 | 0) + -688 | 0, $1_1, $2_1, $3_1);
  global$0 = $0 + 208 | 0;
  return $1_1 | 0;
 }
 
 function $1989($0, $1_1) {
  label$1 : {
   if (($0 | 0) == ($1_1 | 0)) {
    break label$1
   }
   while (1) {
    $1_1 = $1_1 + -1 | 0;
    if ($0 >>> 0 >= $1_1 >>> 0) {
     break label$1
    }
    $2048($0, $1_1);
    $0 = $0 + 1 | 0;
    continue;
   };
  }
 }
 
 function $1990($0, $1_1) {
  label$1 : {
   if (($0 | 0) == ($1_1 | 0)) {
    break label$1
   }
   while (1) {
    $1_1 = $1_1 + -4 | 0;
    if ($0 >>> 0 >= $1_1 >>> 0) {
     break label$1
    }
    $420($0, $1_1);
    $0 = $0 + 4 | 0;
    continue;
   };
  }
 }
 
 function $1991($0, $1_1, $2_1, $3_1, $4_1, $5_1, $6, $7) {
  var $8 = 0, $9_1 = 0, $10_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $8 = global$0 - 32 | 0;
  global$0 = $8;
  HEAP32[$8 + 16 >> 2] = $2_1;
  HEAP32[$8 + 24 >> 2] = $1_1;
  $1687($8 + 8 | 0, $3_1);
  $9_1 = $343($8 + 8 | 0);
  $1855($8 + 8 | 0);
  HEAP32[$4_1 >> 2] = 0;
  $2_1 = 0;
  label$1 : {
   while (1) {
    if ($2_1 | ($6 | 0) == ($7 | 0)) {
     break label$1
    }
    label$3 : {
     if ($1692($8 + 24 | 0, $8 + 16 | 0)) {
      break label$3
     }
     label$4 : {
      if (($1992($9_1, HEAP8[$6 | 0]) | 0) == 37) {
       $2_1 = $6 + 1 | 0;
       if (($7 | 0) == ($2_1 | 0)) {
        break label$3
       }
       $10_1 = 0;
       $1_1 = $1992($9_1, HEAP8[$2_1 | 0]);
       label$6 : {
        if (!(($1_1 | 0) == 69 | ($1_1 & 255) == 48)) {
         $2_1 = $6;
         break label$6;
        }
        $6 = $6 + 2 | 0;
        if (($6 | 0) == ($7 | 0)) {
         break label$3
        }
        $10_1 = $1_1;
        $1_1 = $1992($9_1, HEAP8[$6 | 0]);
       }
       (wasm2js_i32$0 = $8, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 36 >> 2]]($0, HEAP32[$8 + 24 >> 2], HEAP32[$8 + 16 >> 2], $3_1, $4_1, $5_1, $1_1, $10_1) | 0), HEAP32[wasm2js_i32$0 + 24 >> 2] = wasm2js_i32$1;
       $6 = $2_1 + 2 | 0;
       break label$4;
      }
      if ($1690($9_1, 8192, HEAP8[$6 | 0])) {
       while (1) {
        label$10 : {
         $6 = $6 + 1 | 0;
         if (($7 | 0) == ($6 | 0)) {
          $6 = $7;
          break label$10;
         }
         if ($1690($9_1, 8192, HEAP8[$6 | 0])) {
          continue
         }
        }
        break;
       };
       while (1) {
        if (!$1688($8 + 24 | 0, $8 + 16 | 0)) {
         break label$4
        }
        if (!$1690($9_1, 8192, $1689($8 + 24 | 0))) {
         break label$4
        }
        $1691($8 + 24 | 0);
        continue;
       };
      }
      if (($1864($9_1, $1689($8 + 24 | 0)) | 0) == ($1864($9_1, HEAP8[$6 | 0]) | 0)) {
       $6 = $6 + 1 | 0;
       $1691($8 + 24 | 0);
       break label$4;
      }
      HEAP32[$4_1 >> 2] = 4;
     }
     $2_1 = HEAP32[$4_1 >> 2];
     continue;
    }
    break;
   };
   HEAP32[$4_1 >> 2] = 4;
  }
  if ($1692($8 + 24 | 0, $8 + 16 | 0)) {
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 2
  }
  global$0 = $8 + 32 | 0;
  return HEAP32[$8 + 24 >> 2];
 }
 
 function $1992($0, $1_1) {
  return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 36 >> 2]]($0, $1_1, 0) | 0;
 }
 
 function $1993($0) {
  $0 = $0 | 0;
  return 2;
 }
 
 function $1994($0, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6 = 0;
  $6 = global$0 - 16 | 0;
  global$0 = $6;
  HEAP32[$6 + 8 >> 2] = 624576549;
  HEAP32[$6 + 12 >> 2] = 1394948685;
  $0 = $1991($0, $1_1, $2_1, $3_1, $4_1, $5_1, $6 + 8 | 0, $6 + 16 | 0);
  global$0 = $6 + 16 | 0;
  return $0 | 0;
 }
 
 function $1995($0, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6 = 0;
  $6 = $0;
  $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 8 >> 2] + 20 >> 2]]($0 + 8 | 0) | 0;
  return $1991($6, $1_1, $2_1, $3_1, $4_1, $5_1, $320($0), $320($0) + $100($0) | 0) | 0;
 }
 
 function $1996($0, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6 = 0;
  $6 = global$0 - 16 | 0;
  global$0 = $6;
  HEAP32[$6 + 8 >> 2] = $1_1;
  $1687($6, $3_1);
  $1_1 = $343($6);
  $1855($6);
  $1997($0, $5_1 + 24 | 0, $6 + 8 | 0, $2_1, $4_1, $1_1);
  global$0 = $6 + 16 | 0;
  return HEAP32[$6 + 8 >> 2];
 }
 
 function $1997($0, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 8 >> 2] >> 2]]($0 + 8 | 0) | 0;
  $0 = $1859($2_1, $3_1, $0, $0 + 168 | 0, $5_1, $4_1, 0) - $0 | 0;
  if (($0 | 0) <= 167) {
   HEAP32[$1_1 >> 2] = (($0 | 0) / 12 | 0) % 7
  }
 }
 
 function $1998($0, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6 = 0;
  $6 = global$0 - 16 | 0;
  global$0 = $6;
  HEAP32[$6 + 8 >> 2] = $1_1;
  $1687($6, $3_1);
  $1_1 = $343($6);
  $1855($6);
  $1999($0, $5_1 + 16 | 0, $6 + 8 | 0, $2_1, $4_1, $1_1);
  global$0 = $6 + 16 | 0;
  return HEAP32[$6 + 8 >> 2];
 }
 
 function $1999($0, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 8 >> 2] + 4 >> 2]]($0 + 8 | 0) | 0;
  $0 = $1859($2_1, $3_1, $0, $0 + 288 | 0, $5_1, $4_1, 0) - $0 | 0;
  if (($0 | 0) <= 287) {
   HEAP32[$1_1 >> 2] = (($0 | 0) / 12 | 0) % 12
  }
 }
 
 function $2000($0, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $0 = global$0 - 16 | 0;
  global$0 = $0;
  HEAP32[$0 + 8 >> 2] = $1_1;
  $1687($0, $3_1);
  $1_1 = $343($0);
  $1855($0);
  $2001($5_1 + 20 | 0, $0 + 8 | 0, $2_1, $4_1, $1_1);
  global$0 = $0 + 16 | 0;
  return HEAP32[$0 + 8 >> 2];
 }
 
 function $2001($0, $1_1, $2_1, $3_1, $4_1) {
  $1_1 = $2002($1_1, $2_1, $3_1, $4_1, 4);
  if (!(HEAPU8[$3_1 | 0] & 4)) {
   HEAP32[$0 >> 2] = (($1_1 | 0) < 69 ? $1_1 + 2e3 | 0 : ($1_1 | 0) < 100 ? $1_1 + 1900 | 0 : $1_1) + -1900
  }
 }
 
 function $2002($0, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = 0, $6 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[$5_1 + 8 >> 2] = $1_1;
  label$1 : {
   if ($1692($0, $5_1 + 8 | 0)) {
    HEAP32[$2_1 >> 2] = HEAP32[$2_1 >> 2] | 6;
    $1_1 = 0;
    break label$1;
   }
   $1_1 = $1689($0);
   if (!$1690($3_1, 2048, $1_1)) {
    HEAP32[$2_1 >> 2] = HEAP32[$2_1 >> 2] | 4;
    $1_1 = 0;
    break label$1;
   }
   $1_1 = $1992($3_1, $1_1);
   while (1) {
    label$5 : {
     $1691($0);
     $1_1 = $1_1 + -48 | 0;
     if (!$1688($0, $5_1 + 8 | 0) | ($4_1 | 0) < 2) {
      break label$5
     }
     $6 = $1689($0);
     if (!$1690($3_1, 2048, $6)) {
      break label$1
     }
     $4_1 = $4_1 + -1 | 0;
     $1_1 = $1992($3_1, $6) + Math_imul($1_1, 10) | 0;
     continue;
    }
    break;
   };
   if (!$1692($0, $5_1 + 8 | 0)) {
    break label$1
   }
   HEAP32[$2_1 >> 2] = HEAP32[$2_1 >> 2] | 2;
  }
  global$0 = $5_1 + 16 | 0;
  return $1_1;
 }
 
 function $2003($0, $1_1, $2_1, $3_1, $4_1, $5_1, $6, $7) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  var $8 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $7 = global$0 - 32 | 0;
  global$0 = $7;
  HEAP32[$7 + 24 >> 2] = $1_1;
  HEAP32[$4_1 >> 2] = 0;
  $1687($7 + 8 | 0, $3_1);
  $8 = $343($7 + 8 | 0);
  $1855($7 + 8 | 0);
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      switch ($6 + -65 | 0) {
      case 0:
      case 32:
       $1997($0, $5_1 + 24 | 0, $7 + 24 | 0, $2_1, $4_1, $8);
       break label$2;
      case 1:
      case 33:
      case 39:
       $1999($0, $5_1 + 16 | 0, $7 + 24 | 0, $2_1, $4_1, $8);
       break label$2;
      case 34:
       $1_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 8 >> 2] + 12 >> 2]]($0 + 8 | 0) | 0;
       (wasm2js_i32$0 = $7, wasm2js_i32$1 = $1991($0, HEAP32[$7 + 24 >> 2], $2_1, $3_1, $4_1, $5_1, $320($1_1), $320($1_1) + $100($1_1) | 0)), HEAP32[wasm2js_i32$0 + 24 >> 2] = wasm2js_i32$1;
       break label$2;
      case 35:
      case 36:
       $2004($5_1 + 12 | 0, $7 + 24 | 0, $2_1, $4_1, $8);
       break label$2;
      case 3:
       HEAP32[$7 + 8 >> 2] = 623865125;
       HEAP32[$7 + 12 >> 2] = 2032480100;
       (wasm2js_i32$0 = $7, wasm2js_i32$1 = $1991($0, $1_1, $2_1, $3_1, $4_1, $5_1, $7 + 8 | 0, $7 + 16 | 0)), HEAP32[wasm2js_i32$0 + 24 >> 2] = wasm2js_i32$1;
       break label$2;
      case 5:
       HEAP32[$7 + 8 >> 2] = 623728933;
       HEAP32[$7 + 12 >> 2] = 1680158061;
       (wasm2js_i32$0 = $7, wasm2js_i32$1 = $1991($0, $1_1, $2_1, $3_1, $4_1, $5_1, $7 + 8 | 0, $7 + 16 | 0)), HEAP32[wasm2js_i32$0 + 24 >> 2] = wasm2js_i32$1;
       break label$2;
      case 7:
       $2005($5_1 + 8 | 0, $7 + 24 | 0, $2_1, $4_1, $8);
       break label$2;
      case 8:
       $2006($5_1 + 8 | 0, $7 + 24 | 0, $2_1, $4_1, $8);
       break label$2;
      case 41:
       $2007($5_1 + 28 | 0, $7 + 24 | 0, $2_1, $4_1, $8);
       break label$2;
      case 44:
       $2008($5_1 + 16 | 0, $7 + 24 | 0, $2_1, $4_1, $8);
       break label$2;
      case 12:
       $2009($5_1 + 4 | 0, $7 + 24 | 0, $2_1, $4_1, $8);
       break label$2;
      case 45:
      case 51:
       $2010($7 + 24 | 0, $2_1, $4_1, $8);
       break label$2;
      case 47:
       $2011($0, $5_1 + 8 | 0, $7 + 24 | 0, $2_1, $4_1, $8);
       break label$2;
      case 49:
       $6 = HEAPU8[11279] | HEAPU8[11280] << 8 | (HEAPU8[11281] << 16 | HEAPU8[11282] << 24);
       HEAP8[$7 + 15 | 0] = $6;
       HEAP8[$7 + 16 | 0] = $6 >>> 8;
       HEAP8[$7 + 17 | 0] = $6 >>> 16;
       HEAP8[$7 + 18 | 0] = $6 >>> 24;
       $6 = HEAPU8[11276] | HEAPU8[11277] << 8 | (HEAPU8[11278] << 16 | HEAPU8[11279] << 24);
       HEAP32[$7 + 8 >> 2] = HEAPU8[11272] | HEAPU8[11273] << 8 | (HEAPU8[11274] << 16 | HEAPU8[11275] << 24);
       HEAP32[$7 + 12 >> 2] = $6;
       (wasm2js_i32$0 = $7, wasm2js_i32$1 = $1991($0, $1_1, $2_1, $3_1, $4_1, $5_1, $7 + 8 | 0, $7 + 19 | 0)), HEAP32[wasm2js_i32$0 + 24 >> 2] = wasm2js_i32$1;
       break label$2;
      case 17:
       HEAP8[$7 + 12 | 0] = HEAPU8[11287];
       HEAP32[$7 + 8 >> 2] = HEAPU8[11283] | HEAPU8[11284] << 8 | (HEAPU8[11285] << 16 | HEAPU8[11286] << 24);
       (wasm2js_i32$0 = $7, wasm2js_i32$1 = $1991($0, $1_1, $2_1, $3_1, $4_1, $5_1, $7 + 8 | 0, $7 + 13 | 0)), HEAP32[wasm2js_i32$0 + 24 >> 2] = wasm2js_i32$1;
       break label$2;
      case 18:
       $2012($5_1, $7 + 24 | 0, $2_1, $4_1, $8);
       break label$2;
      case 19:
       HEAP32[$7 + 8 >> 2] = 624576549;
       HEAP32[$7 + 12 >> 2] = 1394948685;
       (wasm2js_i32$0 = $7, wasm2js_i32$1 = $1991($0, $1_1, $2_1, $3_1, $4_1, $5_1, $7 + 8 | 0, $7 + 16 | 0)), HEAP32[wasm2js_i32$0 + 24 >> 2] = wasm2js_i32$1;
       break label$2;
      case 54:
       $2013($5_1 + 24 | 0, $7 + 24 | 0, $2_1, $4_1, $8);
       break label$2;
      case 55:
       $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, $1_1, $2_1, $3_1, $4_1, $5_1) | 0;
       break label$1;
      case 23:
       $1_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 8 >> 2] + 24 >> 2]]($0 + 8 | 0) | 0;
       (wasm2js_i32$0 = $7, wasm2js_i32$1 = $1991($0, HEAP32[$7 + 24 >> 2], $2_1, $3_1, $4_1, $5_1, $320($1_1), $320($1_1) + $100($1_1) | 0)), HEAP32[wasm2js_i32$0 + 24 >> 2] = wasm2js_i32$1;
       break label$2;
      case 56:
       $2001($5_1 + 20 | 0, $7 + 24 | 0, $2_1, $4_1, $8);
       break label$2;
      case 24:
       $2014($5_1 + 20 | 0, $7 + 24 | 0, $2_1, $4_1, $8);
       break label$2;
      case 2:
      case 4:
      case 6:
      case 9:
      case 10:
      case 11:
      case 13:
      case 14:
      case 15:
      case 16:
      case 20:
      case 21:
      case 22:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 37:
      case 38:
      case 40:
      case 42:
      case 43:
      case 46:
      case 48:
      case 50:
      case 52:
      case 53:
       break label$3;
      default:
       break label$4;
      };
     }
     if (($6 | 0) != 37) {
      break label$3
     }
     $2015($7 + 24 | 0, $2_1, $4_1, $8);
     break label$2;
    }
    HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 4;
   }
   $0 = HEAP32[$7 + 24 >> 2];
  }
  global$0 = $7 + 32 | 0;
  return $0 | 0;
 }
 
 function $2004($0, $1_1, $2_1, $3_1, $4_1) {
  $1_1 = $2002($1_1, $2_1, $3_1, $4_1, 2);
  $2_1 = HEAP32[$3_1 >> 2];
  if (!($1_1 + -1 >>> 0 > 30 | $2_1 & 4)) {
   HEAP32[$0 >> 2] = $1_1;
   return;
  }
  HEAP32[$3_1 >> 2] = $2_1 | 4;
 }
 
 function $2005($0, $1_1, $2_1, $3_1, $4_1) {
  $1_1 = $2002($1_1, $2_1, $3_1, $4_1, 2);
  $2_1 = HEAP32[$3_1 >> 2];
  if (!(($1_1 | 0) > 23 | $2_1 & 4)) {
   HEAP32[$0 >> 2] = $1_1;
   return;
  }
  HEAP32[$3_1 >> 2] = $2_1 | 4;
 }
 
 function $2006($0, $1_1, $2_1, $3_1, $4_1) {
  $1_1 = $2002($1_1, $2_1, $3_1, $4_1, 2);
  $2_1 = HEAP32[$3_1 >> 2];
  if (!($1_1 + -1 >>> 0 > 11 | $2_1 & 4)) {
   HEAP32[$0 >> 2] = $1_1;
   return;
  }
  HEAP32[$3_1 >> 2] = $2_1 | 4;
 }
 
 function $2007($0, $1_1, $2_1, $3_1, $4_1) {
  $1_1 = $2002($1_1, $2_1, $3_1, $4_1, 3);
  $2_1 = HEAP32[$3_1 >> 2];
  if (!(($1_1 | 0) > 365 | $2_1 & 4)) {
   HEAP32[$0 >> 2] = $1_1;
   return;
  }
  HEAP32[$3_1 >> 2] = $2_1 | 4;
 }
 
 function $2008($0, $1_1, $2_1, $3_1, $4_1) {
  $1_1 = $2002($1_1, $2_1, $3_1, $4_1, 2);
  $2_1 = HEAP32[$3_1 >> 2];
  if (!(($1_1 | 0) > 12 | $2_1 & 4)) {
   HEAP32[$0 >> 2] = $1_1 + -1;
   return;
  }
  HEAP32[$3_1 >> 2] = $2_1 | 4;
 }
 
 function $2009($0, $1_1, $2_1, $3_1, $4_1) {
  $1_1 = $2002($1_1, $2_1, $3_1, $4_1, 2);
  $2_1 = HEAP32[$3_1 >> 2];
  if (!(($1_1 | 0) > 59 | $2_1 & 4)) {
   HEAP32[$0 >> 2] = $1_1;
   return;
  }
  HEAP32[$3_1 >> 2] = $2_1 | 4;
 }
 
 function $2010($0, $1_1, $2_1, $3_1) {
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[$4_1 + 8 >> 2] = $1_1;
  while (1) {
   label$2 : {
    if (!$1688($0, $4_1 + 8 | 0)) {
     break label$2
    }
    if (!$1690($3_1, 8192, $1689($0))) {
     break label$2
    }
    $1691($0);
    continue;
   }
   break;
  };
  if ($1692($0, $4_1 + 8 | 0)) {
   HEAP32[$2_1 >> 2] = HEAP32[$2_1 >> 2] | 2
  }
  global$0 = $4_1 + 16 | 0;
 }
 
 function $2011($0, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 8 >> 2] + 8 >> 2]]($0 + 8 | 0) | 0;
  if (($100($0) | 0) == (0 - $100($0 + 12 | 0) | 0)) {
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 4;
   return;
  }
  $0 = $1859($2_1, $3_1, $0, $0 + 24 | 0, $5_1, $4_1, 0) - $0 | 0;
  $2_1 = HEAP32[$1_1 >> 2];
  if (!($0 | ($2_1 | 0) != 12)) {
   HEAP32[$1_1 >> 2] = 0;
   return;
  }
  if (!(($0 | 0) != 12 | ($2_1 | 0) > 11)) {
   HEAP32[$1_1 >> 2] = $2_1 + 12
  }
 }
 
 function $2012($0, $1_1, $2_1, $3_1, $4_1) {
  $1_1 = $2002($1_1, $2_1, $3_1, $4_1, 2);
  $2_1 = HEAP32[$3_1 >> 2];
  if (!(($1_1 | 0) > 60 | $2_1 & 4)) {
   HEAP32[$0 >> 2] = $1_1;
   return;
  }
  HEAP32[$3_1 >> 2] = $2_1 | 4;
 }
 
 function $2013($0, $1_1, $2_1, $3_1, $4_1) {
  $1_1 = $2002($1_1, $2_1, $3_1, $4_1, 1);
  $2_1 = HEAP32[$3_1 >> 2];
  if (!(($1_1 | 0) > 6 | $2_1 & 4)) {
   HEAP32[$0 >> 2] = $1_1;
   return;
  }
  HEAP32[$3_1 >> 2] = $2_1 | 4;
 }
 
 function $2014($0, $1_1, $2_1, $3_1, $4_1) {
  $1_1 = $2002($1_1, $2_1, $3_1, $4_1, 4);
  if (!(HEAPU8[$3_1 | 0] & 4)) {
   HEAP32[$0 >> 2] = $1_1 + -1900
  }
 }
 
 function $2015($0, $1_1, $2_1, $3_1) {
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[$4_1 + 8 >> 2] = $1_1;
  $1_1 = 6;
  label$1 : {
   label$2 : {
    if ($1692($0, $4_1 + 8 | 0)) {
     break label$2
    }
    $1_1 = 4;
    if (($1992($3_1, $1689($0)) | 0) != 37) {
     break label$2
    }
    $1_1 = 2;
    if (!$1692($1691($0), $4_1 + 8 | 0)) {
     break label$1
    }
   }
   HEAP32[$2_1 >> 2] = HEAP32[$2_1 >> 2] | $1_1;
  }
  global$0 = $4_1 + 16 | 0;
 }
 
 function $2016($0, $1_1, $2_1, $3_1, $4_1, $5_1, $6, $7) {
  var $8 = 0, $9_1 = 0, $10_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $8 = global$0 - 32 | 0;
  global$0 = $8;
  HEAP32[$8 + 16 >> 2] = $2_1;
  HEAP32[$8 + 24 >> 2] = $1_1;
  $1687($8 + 8 | 0, $3_1);
  $9_1 = $1704($8 + 8 | 0);
  $1855($8 + 8 | 0);
  HEAP32[$4_1 >> 2] = 0;
  $2_1 = 0;
  label$1 : {
   while (1) {
    if ($2_1 | ($6 | 0) == ($7 | 0)) {
     break label$1
    }
    label$3 : {
     if ($1709($8 + 24 | 0, $8 + 16 | 0)) {
      break label$3
     }
     label$4 : {
      if (($2017($9_1, HEAP32[$6 >> 2]) | 0) == 37) {
       $2_1 = $6 + 4 | 0;
       if (($7 | 0) == ($2_1 | 0)) {
        break label$3
       }
       $10_1 = 0;
       $1_1 = $2017($9_1, HEAP32[$2_1 >> 2]);
       label$6 : {
        if (!(($1_1 | 0) == 69 | ($1_1 & 255) == 48)) {
         $2_1 = $6;
         break label$6;
        }
        $6 = $6 + 8 | 0;
        if (($6 | 0) == ($7 | 0)) {
         break label$3
        }
        $10_1 = $1_1;
        $1_1 = $2017($9_1, HEAP32[$6 >> 2]);
       }
       (wasm2js_i32$0 = $8, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 36 >> 2]]($0, HEAP32[$8 + 24 >> 2], HEAP32[$8 + 16 >> 2], $3_1, $4_1, $5_1, $1_1, $10_1) | 0), HEAP32[wasm2js_i32$0 + 24 >> 2] = wasm2js_i32$1;
       $6 = $2_1 + 8 | 0;
       break label$4;
      }
      if ($1707($9_1, 8192, HEAP32[$6 >> 2])) {
       while (1) {
        label$10 : {
         $6 = $6 + 4 | 0;
         if (($7 | 0) == ($6 | 0)) {
          $6 = $7;
          break label$10;
         }
         if ($1707($9_1, 8192, HEAP32[$6 >> 2])) {
          continue
         }
        }
        break;
       };
       while (1) {
        if (!$1705($8 + 24 | 0, $8 + 16 | 0)) {
         break label$4
        }
        if (!$1707($9_1, 8192, $1706($8 + 24 | 0))) {
         break label$4
        }
        $1708($8 + 24 | 0);
        continue;
       };
      }
      if (($344($9_1, $1706($8 + 24 | 0)) | 0) == ($344($9_1, HEAP32[$6 >> 2]) | 0)) {
       $6 = $6 + 4 | 0;
       $1708($8 + 24 | 0);
       break label$4;
      }
      HEAP32[$4_1 >> 2] = 4;
     }
     $2_1 = HEAP32[$4_1 >> 2];
     continue;
    }
    break;
   };
   HEAP32[$4_1 >> 2] = 4;
  }
  if ($1709($8 + 24 | 0, $8 + 16 | 0)) {
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 2
  }
  global$0 = $8 + 32 | 0;
  return HEAP32[$8 + 24 >> 2];
 }
 
 function $2017($0, $1_1) {
  return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 52 >> 2]]($0, $1_1, 0) | 0;
 }
 
 function $2018($0, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6 = 0, $7 = 0;
  $6 = global$0 - 32 | 0;
  global$0 = $6;
  $7 = HEAP32[2867];
  HEAP32[$6 + 24 >> 2] = HEAP32[2866];
  HEAP32[$6 + 28 >> 2] = $7;
  $7 = HEAP32[2865];
  HEAP32[$6 + 16 >> 2] = HEAP32[2864];
  HEAP32[$6 + 20 >> 2] = $7;
  $7 = HEAP32[2863];
  HEAP32[$6 + 8 >> 2] = HEAP32[2862];
  HEAP32[$6 + 12 >> 2] = $7;
  $7 = HEAP32[2861];
  HEAP32[$6 >> 2] = HEAP32[2860];
  HEAP32[$6 + 4 >> 2] = $7;
  $0 = $2016($0, $1_1, $2_1, $3_1, $4_1, $5_1, $6, $6 + 32 | 0);
  global$0 = $6 + 32 | 0;
  return $0 | 0;
 }
 
 function $2019($0, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6 = 0;
  $6 = $0;
  $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 8 >> 2] + 20 >> 2]]($0 + 8 | 0) | 0;
  return $2016($6, $1_1, $2_1, $3_1, $4_1, $5_1, $320($0), $320($0) + ($100($0) << 2) | 0) | 0;
 }
 
 function $2025($0, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6 = 0;
  $6 = global$0 - 16 | 0;
  global$0 = $6;
  HEAP32[$6 + 8 >> 2] = $1_1;
  $1687($6, $3_1);
  $1_1 = $1704($6);
  $1855($6);
  $2026($0, $5_1 + 24 | 0, $6 + 8 | 0, $2_1, $4_1, $1_1);
  global$0 = $6 + 16 | 0;
  return HEAP32[$6 + 8 >> 2];
 }
 
 function $2026($0, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 8 >> 2] >> 2]]($0 + 8 | 0) | 0;
  $0 = $1911($2_1, $3_1, $0, $0 + 168 | 0, $5_1, $4_1, 0) - $0 | 0;
  if (($0 | 0) <= 167) {
   HEAP32[$1_1 >> 2] = (($0 | 0) / 12 | 0) % 7
  }
 }
 
 function $2027($0, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6 = 0;
  $6 = global$0 - 16 | 0;
  global$0 = $6;
  HEAP32[$6 + 8 >> 2] = $1_1;
  $1687($6, $3_1);
  $1_1 = $1704($6);
  $1855($6);
  $2028($0, $5_1 + 16 | 0, $6 + 8 | 0, $2_1, $4_1, $1_1);
  global$0 = $6 + 16 | 0;
  return HEAP32[$6 + 8 >> 2];
 }
 
 function $2028($0, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 8 >> 2] + 4 >> 2]]($0 + 8 | 0) | 0;
  $0 = $1911($2_1, $3_1, $0, $0 + 288 | 0, $5_1, $4_1, 0) - $0 | 0;
  if (($0 | 0) <= 287) {
   HEAP32[$1_1 >> 2] = (($0 | 0) / 12 | 0) % 12
  }
 }
 
 function $2029($0, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $0 = global$0 - 16 | 0;
  global$0 = $0;
  HEAP32[$0 + 8 >> 2] = $1_1;
  $1687($0, $3_1);
  $1_1 = $1704($0);
  $1855($0);
  $2030($5_1 + 20 | 0, $0 + 8 | 0, $2_1, $4_1, $1_1);
  global$0 = $0 + 16 | 0;
  return HEAP32[$0 + 8 >> 2];
 }
 
 function $2030($0, $1_1, $2_1, $3_1, $4_1) {
  $1_1 = $2031($1_1, $2_1, $3_1, $4_1, 4);
  if (!(HEAPU8[$3_1 | 0] & 4)) {
   HEAP32[$0 >> 2] = (($1_1 | 0) < 69 ? $1_1 + 2e3 | 0 : ($1_1 | 0) < 100 ? $1_1 + 1900 | 0 : $1_1) + -1900
  }
 }
 
 function $2031($0, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = 0, $6 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[$5_1 + 8 >> 2] = $1_1;
  label$1 : {
   if ($1709($0, $5_1 + 8 | 0)) {
    HEAP32[$2_1 >> 2] = HEAP32[$2_1 >> 2] | 6;
    $1_1 = 0;
    break label$1;
   }
   $1_1 = $1706($0);
   if (!$1707($3_1, 2048, $1_1)) {
    HEAP32[$2_1 >> 2] = HEAP32[$2_1 >> 2] | 4;
    $1_1 = 0;
    break label$1;
   }
   $1_1 = $2017($3_1, $1_1);
   while (1) {
    label$5 : {
     $1708($0);
     $1_1 = $1_1 + -48 | 0;
     if (!$1705($0, $5_1 + 8 | 0) | ($4_1 | 0) < 2) {
      break label$5
     }
     $6 = $1706($0);
     if (!$1707($3_1, 2048, $6)) {
      break label$1
     }
     $4_1 = $4_1 + -1 | 0;
     $1_1 = $2017($3_1, $6) + Math_imul($1_1, 10) | 0;
     continue;
    }
    break;
   };
   if (!$1709($0, $5_1 + 8 | 0)) {
    break label$1
   }
   HEAP32[$2_1 >> 2] = HEAP32[$2_1 >> 2] | 2;
  }
  global$0 = $5_1 + 16 | 0;
  return $1_1;
 }
 
 function $2032($0, $1_1, $2_1, $3_1, $4_1, $5_1, $6, $7) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  var $8 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $7 = global$0 + -64 | 0;
  global$0 = $7;
  HEAP32[$7 + 56 >> 2] = $1_1;
  HEAP32[$4_1 >> 2] = 0;
  $1687($7, $3_1);
  $8 = $1704($7);
  $1855($7);
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      switch ($6 + -65 | 0) {
      case 0:
      case 32:
       $2026($0, $5_1 + 24 | 0, $7 + 56 | 0, $2_1, $4_1, $8);
       break label$2;
      case 1:
      case 33:
      case 39:
       $2028($0, $5_1 + 16 | 0, $7 + 56 | 0, $2_1, $4_1, $8);
       break label$2;
      case 34:
       $1_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 8 >> 2] + 12 >> 2]]($0 + 8 | 0) | 0;
       (wasm2js_i32$0 = $7, wasm2js_i32$1 = $2016($0, HEAP32[$7 + 56 >> 2], $2_1, $3_1, $4_1, $5_1, $320($1_1), $320($1_1) + ($100($1_1) << 2) | 0)), HEAP32[wasm2js_i32$0 + 56 >> 2] = wasm2js_i32$1;
       break label$2;
      case 35:
      case 36:
       $2033($5_1 + 12 | 0, $7 + 56 | 0, $2_1, $4_1, $8);
       break label$2;
      case 3:
       $6 = HEAP32[2831];
       HEAP32[$7 + 24 >> 2] = HEAP32[2830];
       HEAP32[$7 + 28 >> 2] = $6;
       $6 = HEAP32[2829];
       HEAP32[$7 + 16 >> 2] = HEAP32[2828];
       HEAP32[$7 + 20 >> 2] = $6;
       $6 = HEAP32[2827];
       HEAP32[$7 + 8 >> 2] = HEAP32[2826];
       HEAP32[$7 + 12 >> 2] = $6;
       $6 = HEAP32[2825];
       HEAP32[$7 >> 2] = HEAP32[2824];
       HEAP32[$7 + 4 >> 2] = $6;
       (wasm2js_i32$0 = $7, wasm2js_i32$1 = $2016($0, $1_1, $2_1, $3_1, $4_1, $5_1, $7, $7 + 32 | 0)), HEAP32[wasm2js_i32$0 + 56 >> 2] = wasm2js_i32$1;
       break label$2;
      case 5:
       $6 = HEAP32[2839];
       HEAP32[$7 + 24 >> 2] = HEAP32[2838];
       HEAP32[$7 + 28 >> 2] = $6;
       $6 = HEAP32[2837];
       HEAP32[$7 + 16 >> 2] = HEAP32[2836];
       HEAP32[$7 + 20 >> 2] = $6;
       $6 = HEAP32[2835];
       HEAP32[$7 + 8 >> 2] = HEAP32[2834];
       HEAP32[$7 + 12 >> 2] = $6;
       $6 = HEAP32[2833];
       HEAP32[$7 >> 2] = HEAP32[2832];
       HEAP32[$7 + 4 >> 2] = $6;
       (wasm2js_i32$0 = $7, wasm2js_i32$1 = $2016($0, $1_1, $2_1, $3_1, $4_1, $5_1, $7, $7 + 32 | 0)), HEAP32[wasm2js_i32$0 + 56 >> 2] = wasm2js_i32$1;
       break label$2;
      case 7:
       $2034($5_1 + 8 | 0, $7 + 56 | 0, $2_1, $4_1, $8);
       break label$2;
      case 8:
       $2035($5_1 + 8 | 0, $7 + 56 | 0, $2_1, $4_1, $8);
       break label$2;
      case 41:
       $2036($5_1 + 28 | 0, $7 + 56 | 0, $2_1, $4_1, $8);
       break label$2;
      case 44:
       $2037($5_1 + 16 | 0, $7 + 56 | 0, $2_1, $4_1, $8);
       break label$2;
      case 12:
       $2038($5_1 + 4 | 0, $7 + 56 | 0, $2_1, $4_1, $8);
       break label$2;
      case 45:
      case 51:
       $2039($7 + 56 | 0, $2_1, $4_1, $8);
       break label$2;
      case 47:
       $2040($0, $5_1 + 8 | 0, $7 + 56 | 0, $2_1, $4_1, $8);
       break label$2;
      case 49:
       $6 = $2591($7, 11360, 44);
       (wasm2js_i32$0 = $6, wasm2js_i32$1 = $2016($0, $1_1, $2_1, $3_1, $4_1, $5_1, $6, $6 + 44 | 0)), HEAP32[wasm2js_i32$0 + 56 >> 2] = wasm2js_i32$1;
       break label$2;
      case 17:
       HEAP32[$7 + 16 >> 2] = HEAP32[2856];
       $6 = HEAP32[2855];
       HEAP32[$7 + 8 >> 2] = HEAP32[2854];
       HEAP32[$7 + 12 >> 2] = $6;
       $6 = HEAP32[2853];
       HEAP32[$7 >> 2] = HEAP32[2852];
       HEAP32[$7 + 4 >> 2] = $6;
       (wasm2js_i32$0 = $7, wasm2js_i32$1 = $2016($0, $1_1, $2_1, $3_1, $4_1, $5_1, $7, $7 + 20 | 0)), HEAP32[wasm2js_i32$0 + 56 >> 2] = wasm2js_i32$1;
       break label$2;
      case 18:
       $2041($5_1, $7 + 56 | 0, $2_1, $4_1, $8);
       break label$2;
      case 19:
       $6 = HEAP32[2867];
       HEAP32[$7 + 24 >> 2] = HEAP32[2866];
       HEAP32[$7 + 28 >> 2] = $6;
       $6 = HEAP32[2865];
       HEAP32[$7 + 16 >> 2] = HEAP32[2864];
       HEAP32[$7 + 20 >> 2] = $6;
       $6 = HEAP32[2863];
       HEAP32[$7 + 8 >> 2] = HEAP32[2862];
       HEAP32[$7 + 12 >> 2] = $6;
       $6 = HEAP32[2861];
       HEAP32[$7 >> 2] = HEAP32[2860];
       HEAP32[$7 + 4 >> 2] = $6;
       (wasm2js_i32$0 = $7, wasm2js_i32$1 = $2016($0, $1_1, $2_1, $3_1, $4_1, $5_1, $7, $7 + 32 | 0)), HEAP32[wasm2js_i32$0 + 56 >> 2] = wasm2js_i32$1;
       break label$2;
      case 54:
       $2042($5_1 + 24 | 0, $7 + 56 | 0, $2_1, $4_1, $8);
       break label$2;
      case 55:
       $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, $1_1, $2_1, $3_1, $4_1, $5_1) | 0;
       break label$1;
      case 23:
       $1_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 8 >> 2] + 24 >> 2]]($0 + 8 | 0) | 0;
       (wasm2js_i32$0 = $7, wasm2js_i32$1 = $2016($0, HEAP32[$7 + 56 >> 2], $2_1, $3_1, $4_1, $5_1, $320($1_1), $320($1_1) + ($100($1_1) << 2) | 0)), HEAP32[wasm2js_i32$0 + 56 >> 2] = wasm2js_i32$1;
       break label$2;
      case 56:
       $2030($5_1 + 20 | 0, $7 + 56 | 0, $2_1, $4_1, $8);
       break label$2;
      case 24:
       $2043($5_1 + 20 | 0, $7 + 56 | 0, $2_1, $4_1, $8);
       break label$2;
      case 2:
      case 4:
      case 6:
      case 9:
      case 10:
      case 11:
      case 13:
      case 14:
      case 15:
      case 16:
      case 20:
      case 21:
      case 22:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 37:
      case 38:
      case 40:
      case 42:
      case 43:
      case 46:
      case 48:
      case 50:
      case 52:
      case 53:
       break label$3;
      default:
       break label$4;
      };
     }
     if (($6 | 0) != 37) {
      break label$3
     }
     $2044($7 + 56 | 0, $2_1, $4_1, $8);
     break label$2;
    }
    HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 4;
   }
   $0 = HEAP32[$7 + 56 >> 2];
  }
  global$0 = $7 - -64 | 0;
  return $0 | 0;
 }
 
 function $2033($0, $1_1, $2_1, $3_1, $4_1) {
  $1_1 = $2031($1_1, $2_1, $3_1, $4_1, 2);
  $2_1 = HEAP32[$3_1 >> 2];
  if (!($1_1 + -1 >>> 0 > 30 | $2_1 & 4)) {
   HEAP32[$0 >> 2] = $1_1;
   return;
  }
  HEAP32[$3_1 >> 2] = $2_1 | 4;
 }
 
 function $2034($0, $1_1, $2_1, $3_1, $4_1) {
  $1_1 = $2031($1_1, $2_1, $3_1, $4_1, 2);
  $2_1 = HEAP32[$3_1 >> 2];
  if (!(($1_1 | 0) > 23 | $2_1 & 4)) {
   HEAP32[$0 >> 2] = $1_1;
   return;
  }
  HEAP32[$3_1 >> 2] = $2_1 | 4;
 }
 
 function $2035($0, $1_1, $2_1, $3_1, $4_1) {
  $1_1 = $2031($1_1, $2_1, $3_1, $4_1, 2);
  $2_1 = HEAP32[$3_1 >> 2];
  if (!($1_1 + -1 >>> 0 > 11 | $2_1 & 4)) {
   HEAP32[$0 >> 2] = $1_1;
   return;
  }
  HEAP32[$3_1 >> 2] = $2_1 | 4;
 }
 
 function $2036($0, $1_1, $2_1, $3_1, $4_1) {
  $1_1 = $2031($1_1, $2_1, $3_1, $4_1, 3);
  $2_1 = HEAP32[$3_1 >> 2];
  if (!(($1_1 | 0) > 365 | $2_1 & 4)) {
   HEAP32[$0 >> 2] = $1_1;
   return;
  }
  HEAP32[$3_1 >> 2] = $2_1 | 4;
 }
 
 function $2037($0, $1_1, $2_1, $3_1, $4_1) {
  $1_1 = $2031($1_1, $2_1, $3_1, $4_1, 2);
  $2_1 = HEAP32[$3_1 >> 2];
  if (!(($1_1 | 0) > 12 | $2_1 & 4)) {
   HEAP32[$0 >> 2] = $1_1 + -1;
   return;
  }
  HEAP32[$3_1 >> 2] = $2_1 | 4;
 }
 
 function $2038($0, $1_1, $2_1, $3_1, $4_1) {
  $1_1 = $2031($1_1, $2_1, $3_1, $4_1, 2);
  $2_1 = HEAP32[$3_1 >> 2];
  if (!(($1_1 | 0) > 59 | $2_1 & 4)) {
   HEAP32[$0 >> 2] = $1_1;
   return;
  }
  HEAP32[$3_1 >> 2] = $2_1 | 4;
 }
 
 function $2039($0, $1_1, $2_1, $3_1) {
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[$4_1 + 8 >> 2] = $1_1;
  while (1) {
   label$2 : {
    if (!$1705($0, $4_1 + 8 | 0)) {
     break label$2
    }
    if (!$1707($3_1, 8192, $1706($0))) {
     break label$2
    }
    $1708($0);
    continue;
   }
   break;
  };
  if ($1709($0, $4_1 + 8 | 0)) {
   HEAP32[$2_1 >> 2] = HEAP32[$2_1 >> 2] | 2
  }
  global$0 = $4_1 + 16 | 0;
 }
 
 function $2040($0, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 8 >> 2] + 8 >> 2]]($0 + 8 | 0) | 0;
  if (($100($0) | 0) == (0 - $100($0 + 12 | 0) | 0)) {
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 4;
   return;
  }
  $0 = $1911($2_1, $3_1, $0, $0 + 24 | 0, $5_1, $4_1, 0) - $0 | 0;
  $2_1 = HEAP32[$1_1 >> 2];
  if (!($0 | ($2_1 | 0) != 12)) {
   HEAP32[$1_1 >> 2] = 0;
   return;
  }
  if (!(($0 | 0) != 12 | ($2_1 | 0) > 11)) {
   HEAP32[$1_1 >> 2] = $2_1 + 12
  }
 }
 
 function $2041($0, $1_1, $2_1, $3_1, $4_1) {
  $1_1 = $2031($1_1, $2_1, $3_1, $4_1, 2);
  $2_1 = HEAP32[$3_1 >> 2];
  if (!(($1_1 | 0) > 60 | $2_1 & 4)) {
   HEAP32[$0 >> 2] = $1_1;
   return;
  }
  HEAP32[$3_1 >> 2] = $2_1 | 4;
 }
 
 function $2042($0, $1_1, $2_1, $3_1, $4_1) {
  $1_1 = $2031($1_1, $2_1, $3_1, $4_1, 1);
  $2_1 = HEAP32[$3_1 >> 2];
  if (!(($1_1 | 0) > 6 | $2_1 & 4)) {
   HEAP32[$0 >> 2] = $1_1;
   return;
  }
  HEAP32[$3_1 >> 2] = $2_1 | 4;
 }
 
 function $2043($0, $1_1, $2_1, $3_1, $4_1) {
  $1_1 = $2031($1_1, $2_1, $3_1, $4_1, 4);
  if (!(HEAPU8[$3_1 | 0] & 4)) {
   HEAP32[$0 >> 2] = $1_1 + -1900
  }
 }
 
 function $2044($0, $1_1, $2_1, $3_1) {
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[$4_1 + 8 >> 2] = $1_1;
  $1_1 = 6;
  label$1 : {
   label$2 : {
    if ($1709($0, $4_1 + 8 | 0)) {
     break label$2
    }
    $1_1 = 4;
    if (($2017($3_1, $1706($0)) | 0) != 37) {
     break label$2
    }
    $1_1 = 2;
    if (!$1709($1708($0), $4_1 + 8 | 0)) {
     break label$1
    }
   }
   HEAP32[$2_1 >> 2] = HEAP32[$2_1 >> 2] | $1_1;
  }
  global$0 = $4_1 + 16 | 0;
 }
 
 function $2045($0, $1_1, $2_1, $3_1, $4_1, $5_1, $6) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6 = $6 | 0;
  $2_1 = global$0 - 128 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 + 12 >> 2] = $2_1 + 116;
  $2046($0 + 8 | 0, $2_1 + 16 | 0, $2_1 + 12 | 0, $4_1, $5_1, $6);
  $0 = $2483($2_1 + 16 | 0, HEAP32[$2_1 + 12 >> 2], $1_1);
  global$0 = $2_1 + 128 | 0;
  return $0 | 0;
 }
 
 function $2046($0, $1_1, $2_1, $3_1, $4_1, $5_1) {
  var $6 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $6 = global$0 - 16 | 0;
  global$0 = $6;
  HEAP8[$6 + 15 | 0] = 0;
  HEAP8[$6 + 14 | 0] = $5_1;
  HEAP8[$6 + 13 | 0] = $4_1;
  HEAP8[$6 + 12 | 0] = 37;
  if ($5_1) {
   $2048($6 + 13 | 0, $6 + 14 | 0)
  }
  (wasm2js_i32$0 = $2_1, wasm2js_i32$1 = (fimport$22($1_1 | 0, $372($1_1, HEAP32[$2_1 >> 2]) | 0, $6 + 12 | 0, $3_1 | 0, HEAP32[$0 >> 2]) | 0) + $1_1 | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  global$0 = $6 + 16 | 0;
 }
 
 function $2048($0, $1_1) {
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP8[$2_1 + 15 | 0] = HEAPU8[$0 | 0];
  HEAP8[$0 | 0] = HEAPU8[$1_1 | 0];
  HEAP8[$1_1 | 0] = HEAPU8[$2_1 + 15 | 0];
  global$0 = $2_1 + 16 | 0;
 }
 
 function $2050($0, $1_1, $2_1, $3_1, $4_1, $5_1, $6) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6 = $6 | 0;
  $2_1 = global$0 - 416 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 + 12 >> 2] = $2_1 + 416;
  $2051($0 + 8 | 0, $2_1 + 16 | 0, $2_1 + 12 | 0, $4_1, $5_1, $6);
  $0 = $2484($2_1 + 16 | 0, HEAP32[$2_1 + 12 >> 2], $1_1);
  global$0 = $2_1 + 416 | 0;
  return $0 | 0;
 }
 
 function $2051($0, $1_1, $2_1, $3_1, $4_1, $5_1) {
  var $6 = 0;
  $6 = global$0 - 144 | 0;
  global$0 = $6;
  HEAP32[$6 + 28 >> 2] = $6 + 132;
  $2046($0, $6 + 32 | 0, $6 + 28 | 0, $3_1, $4_1, $5_1);
  HEAP32[$6 + 16 >> 2] = 0;
  HEAP32[$6 + 20 >> 2] = 0;
  HEAP32[$6 + 12 >> 2] = $6 + 32;
  $0 = $2053($1_1, $6 + 12 | 0, $1648($1_1, HEAP32[$2_1 >> 2]), $6 + 16 | 0, HEAP32[$0 >> 2]);
  if (($0 | 0) == -1) {
   $1643();
   abort();
  }
  HEAP32[$2_1 >> 2] = ($0 << 2) + $1_1;
  global$0 = $6 + 144 | 0;
 }
 
 function $2053($0, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[$5_1 + 12 >> 2] = $4_1;
  $4_1 = $1907($5_1 + 8 | 0, $5_1 + 12 | 0);
  $0 = $1830($0, $1_1, $2_1, $3_1);
  $1908($4_1);
  global$0 = $5_1 + 16 | 0;
  return $0;
 }
 
 function $2055($0) {
  $0 = $0 | 0;
  return 127;
 }
 
 function $2058($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $189($0);
 }
 
 function $2059($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $317($0, 1, 45);
 }
 
 function $2060($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  HEAP8[$0 | 0] = 67109634;
  HEAP8[$0 + 1 | 0] = 262147;
  HEAP8[$0 + 2 | 0] = 1024;
  HEAP8[$0 + 3 | 0] = 4;
 }
 
 function $2061($0) {
  $0 = $0 | 0;
  return 2147483647;
 }
 
 function $2062($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2063($0);
 }
 
 function $2063($0) {
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2064($0);
  global$0 = $1_1 + 16 | 0;
  return $0;
 }
 
 function $2064($0) {
  var $1_1 = 0;
  $1_1 = $0;
  $0 = 0;
  while (1) {
   if (($0 | 0) != 3) {
    HEAP32[($0 << 2) + $1_1 >> 2] = 0;
    $0 = $0 + 1 | 0;
    continue;
   }
   break;
  };
 }
 
 function $2065($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $1976($0, 1, 45);
 }
 
 function $2066($0, $1_1, $2_1, $3_1, $4_1, $5_1, $6) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6 = $6 | 0;
  var $7 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $0 = global$0 - 288 | 0;
  global$0 = $0;
  HEAP32[$0 + 272 >> 2] = $2_1;
  HEAP32[$0 + 280 >> 2] = $1_1;
  HEAP32[$0 + 16 >> 2] = 140;
  $1_1 = $299($0 + 152 | 0, $0 + 160 | 0, $0 + 16 | 0);
  $1687($0 + 144 | 0, $4_1);
  $7 = $343($0 + 144 | 0);
  HEAP8[$0 + 143 | 0] = 0;
  label$1 : {
   if (!$2067($0 + 280 | 0, $2_1, $3_1, $0 + 144 | 0, HEAP32[$4_1 + 4 >> 2], $5_1, $0 + 143 | 0, $7, $1_1, $0 + 148 | 0, $0 + 260 | 0)) {
    break label$1
   }
   $2_1 = HEAPU8[11483] | HEAPU8[11484] << 8 | (HEAPU8[11485] << 16 | HEAPU8[11486] << 24);
   HEAP8[$0 + 135 | 0] = $2_1;
   HEAP8[$0 + 136 | 0] = $2_1 >>> 8;
   HEAP8[$0 + 137 | 0] = $2_1 >>> 16;
   HEAP8[$0 + 138 | 0] = $2_1 >>> 24;
   $2_1 = HEAPU8[11480] | HEAPU8[11481] << 8 | (HEAPU8[11482] << 16 | HEAPU8[11483] << 24);
   HEAP32[$0 + 128 >> 2] = HEAPU8[11476] | HEAPU8[11477] << 8 | (HEAPU8[11478] << 16 | HEAPU8[11479] << 24);
   HEAP32[$0 + 132 >> 2] = $2_1;
   $1903($7, $0 + 128 | 0, $0 + 138 | 0, $0 + 118 | 0);
   HEAP32[$0 + 16 >> 2] = 139;
   $3_1 = $299($0 + 8 | 0, 0, $0 + 16 | 0);
   $2_1 = $0 + 16 | 0;
   label$2 : {
    if ((HEAP32[$0 + 148 >> 2] - HEAP32[$1_1 >> 2] | 0) >= 99) {
     $1863($3_1, $2582((HEAP32[$0 + 148 >> 2] - HEAP32[$1_1 >> 2] | 0) + 2 | 0));
     if (!HEAP32[$3_1 >> 2]) {
      break label$2
     }
     $2_1 = HEAP32[$3_1 >> 2];
    }
    if (HEAPU8[$0 + 143 | 0]) {
     HEAP8[$2_1 | 0] = 45;
     $2_1 = $2_1 + 1 | 0;
    }
    $4_1 = HEAP32[$1_1 >> 2];
    while (1) {
     if ($4_1 >>> 0 >= HEAPU32[$0 + 148 >> 2]) {
      label$7 : {
       HEAP8[$2_1 | 0] = 0;
       HEAP32[$0 >> 2] = $6;
       if (($1819($0 + 16 | 0, $0) | 0) != 1) {
        break label$7
       }
       $1866($3_1);
       break label$1;
      }
     } else {
      (wasm2js_i32$0 = $2_1, wasm2js_i32$1 = HEAPU8[(($1906($0 + 118 | 0, $0 + 128 | 0, $4_1) - $0 | 0) + $0 | 0) + 10 | 0]), HEAP8[wasm2js_i32$0 | 0] = wasm2js_i32$1;
      $2_1 = $2_1 + 1 | 0;
      $4_1 = $4_1 + 1 | 0;
      continue;
     }
     break;
    };
    $1643();
    abort();
   }
   $1643();
   abort();
  }
  if ($1692($0 + 280 | 0, $0 + 272 | 0)) {
   HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 2
  }
  $2_1 = HEAP32[$0 + 280 >> 2];
  $1855($0 + 144 | 0);
  $1866($1_1);
  global$0 = $0 + 288 | 0;
  return $2_1 | 0;
 }
 
 function $2067($0, $1_1, $2_1, $3_1, $4_1, $5_1, $6, $7, $8, $9_1, $10_1) {
  var $11_1 = 0, $12_1 = 0, $13_1 = 0, $14 = 0, $15 = 0, $16_1 = 0, $17 = 0, $18_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $11_1 = global$0 - 560 | 0;
  global$0 = $11_1;
  HEAP32[$11_1 + 548 >> 2] = $10_1;
  HEAP32[$11_1 + 552 >> 2] = $1_1;
  HEAP32[$11_1 + 104 >> 2] = 140;
  $15 = $299($11_1 + 136 | 0, $11_1 + 144 | 0, $11_1 + 104 | 0);
  $1_1 = HEAP32[$15 >> 2];
  HEAP32[$11_1 + 132 >> 2] = $1_1;
  HEAP32[$11_1 + 128 >> 2] = $1_1 + 400;
  $17 = $189($11_1 + 104 | 0);
  $14 = $189($11_1 + 88 | 0);
  $12_1 = $189($11_1 + 72 | 0);
  $13_1 = $189($11_1 + 56 | 0);
  $16_1 = $189($11_1 + 40 | 0);
  $2072($2_1, $3_1, $11_1 + 120 | 0, $11_1 + 119 | 0, $11_1 + 118 | 0, $17, $14, $12_1, $13_1, $11_1 + 36 | 0);
  HEAP32[$9_1 >> 2] = HEAP32[$8 >> 2];
  $18_1 = $4_1 & 512;
  $1_1 = 0;
  $2_1 = 0;
  while (1) {
   $10_1 = $2_1;
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       if (($1_1 | 0) == 4) {
        break label$5
       }
       if (!$1688($0, $11_1 + 552 | 0)) {
        break label$5
       }
       $4_1 = 0;
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            switch (HEAP8[($11_1 + 120 | 0) + $1_1 | 0]) {
            case 1:
             if (($1_1 | 0) == 3) {
              break label$3
             }
             if ($1690($7, 8192, $1689($0))) {
              $2073($11_1 + 24 | 0, $0);
              $2522($16_1, HEAP8[$11_1 + 24 | 0]);
              break label$9;
             }
             HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 4;
             $0 = 0;
             break label$4;
            case 0:
             break label$10;
            case 4:
             break label$6;
            case 2:
             break label$7;
            case 3:
             break label$8;
            default:
             break label$2;
            };
           }
           if (($1_1 | 0) == 3) {
            break label$3
           }
          }
          while (1) {
           if (!$1688($0, $11_1 + 552 | 0)) {
            break label$3
           }
           if (!$1690($7, 8192, $1689($0))) {
            break label$3
           }
           $2073($11_1 + 24 | 0, $0);
           $2522($16_1, HEAP8[$11_1 + 24 | 0]);
           continue;
          };
         }
         if (($100($12_1) | 0) == (0 - $100($13_1) | 0)) {
          break label$3
         }
         label$14 : {
          if ($100($12_1)) {
           if ($100($13_1)) {
            break label$14
           }
          }
          $3_1 = $100($12_1);
          $2_1 = $1689($0);
          if ($3_1) {
           if (HEAPU8[$1865($12_1, 0) | 0] == ($2_1 & 255)) {
            $1691($0);
            $2_1 = $100($12_1) >>> 0 > 1 ? $12_1 : $10_1;
            break label$2;
           }
           HEAP8[$6 | 0] = 1;
           break label$3;
          }
          if (HEAPU8[$1865($13_1, 0) | 0] != ($2_1 & 255)) {
           break label$3
          }
          $1691($0);
          HEAP8[$6 | 0] = 1;
          $2_1 = $100($13_1) >>> 0 > 1 ? $13_1 : $10_1;
          break label$2;
         }
         if (($1689($0) & 255) == HEAPU8[$1865($12_1, 0) | 0]) {
          $1691($0);
          $2_1 = $100($12_1) >>> 0 > 1 ? $12_1 : $10_1;
          break label$2;
         }
         if (($1689($0) & 255) == HEAPU8[$1865($13_1, 0) | 0]) {
          $1691($0);
          HEAP8[$6 | 0] = 1;
          $2_1 = $100($13_1) >>> 0 > 1 ? $13_1 : $10_1;
          break label$2;
         }
         HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 4;
         $0 = 0;
         break label$4;
        }
        if (!($18_1 | ($10_1 | $1_1 >>> 0 < 2))) {
         $2_1 = 0;
         if (!(($1_1 | 0) == 2 & HEAPU8[$11_1 + 123 | 0] != 0)) {
          break label$2
         }
        }
        (wasm2js_i32$0 = $11_1, wasm2js_i32$1 = $779($14)), HEAP32[wasm2js_i32$0 + 16 >> 2] = wasm2js_i32$1;
        $2_1 = $780($11_1 + 24 | 0, $11_1 + 16 | 0);
        label$21 : {
         if (!$1_1 | HEAPU8[($1_1 + $11_1 | 0) + 119 | 0] > 1) {
          break label$21
         }
         while (1) {
          label$23 : {
           (wasm2js_i32$0 = $11_1, wasm2js_i32$1 = $781($14)), HEAP32[wasm2js_i32$0 + 16 >> 2] = wasm2js_i32$1;
           if (!$31($2_1, $11_1 + 16 | 0)) {
            break label$23
           }
           if (!$1690($7, 8192, HEAP8[HEAP32[$2_1 >> 2]])) {
            break label$23
           }
           $795($2_1);
           continue;
          }
          break;
         };
         (wasm2js_i32$0 = $11_1, wasm2js_i32$1 = $779($14)), HEAP32[wasm2js_i32$0 + 16 >> 2] = wasm2js_i32$1;
         $2_1 = $790($2_1, $11_1 + 16 | 0);
         if ($2_1 >>> 0 <= $100($16_1) >>> 0) {
          (wasm2js_i32$0 = $11_1, wasm2js_i32$1 = $781($16_1)), HEAP32[wasm2js_i32$0 + 16 >> 2] = wasm2js_i32$1;
          if ($2091($791($11_1 + 16 | 0, 0 - $2_1 | 0), $781($16_1), $779($14))) {
           break label$21
          }
         }
         (wasm2js_i32$0 = $11_1, wasm2js_i32$1 = $779($14)), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
         $780($11_1 + 16 | 0, $11_1 + 8 | 0);
         HEAP32[$11_1 + 24 >> 2] = HEAP32[$11_1 + 16 >> 2];
        }
        HEAP32[$11_1 + 16 >> 2] = HEAP32[$11_1 + 24 >> 2];
        while (1) {
         label$26 : {
          (wasm2js_i32$0 = $11_1, wasm2js_i32$1 = $781($14)), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
          if (!$31($11_1 + 16 | 0, $11_1 + 8 | 0)) {
           break label$26
          }
          if (!$1688($0, $11_1 + 552 | 0)) {
           break label$26
          }
          if (($1689($0) & 255) != HEAPU8[HEAP32[$11_1 + 16 >> 2]]) {
           break label$26
          }
          $1691($0);
          $795($11_1 + 16 | 0);
          continue;
         }
         break;
        };
        if (!$18_1) {
         break label$3
        }
        (wasm2js_i32$0 = $11_1, wasm2js_i32$1 = $781($14)), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
        if (!$31($11_1 + 16 | 0, $11_1 + 8 | 0)) {
         break label$3
        }
        HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 4;
        $0 = 0;
        break label$4;
       }
       while (1) {
        label$28 : {
         if (!$1688($0, $11_1 + 552 | 0)) {
          break label$28
         }
         $2_1 = $1689($0);
         label$29 : {
          if ($1690($7, 2048, $2_1)) {
           $3_1 = HEAP32[$9_1 >> 2];
           if (($3_1 | 0) == HEAP32[$11_1 + 548 >> 2]) {
            $2078($8, $9_1, $11_1 + 548 | 0);
            $3_1 = HEAP32[$9_1 >> 2];
           }
           HEAP32[$9_1 >> 2] = $3_1 + 1;
           HEAP8[$3_1 | 0] = $2_1;
           $4_1 = $4_1 + 1 | 0;
           break label$29;
          }
          if (!$4_1 | !$100($17) | HEAPU8[$11_1 + 118 | 0] != ($2_1 & 255)) {
           break label$28
          }
          $2_1 = HEAP32[$11_1 + 132 >> 2];
          if (($2_1 | 0) == HEAP32[$11_1 + 128 >> 2]) {
           $2079($15, $11_1 + 132 | 0, $11_1 + 128 | 0);
           $2_1 = HEAP32[$11_1 + 132 >> 2];
          }
          HEAP32[$11_1 + 132 >> 2] = $2_1 + 4;
          HEAP32[$2_1 >> 2] = $4_1;
          $4_1 = 0;
         }
         $1691($0);
         continue;
        }
        break;
       };
       $3_1 = HEAP32[$15 >> 2];
       label$33 : {
        if (!$4_1) {
         break label$33
        }
        $2_1 = HEAP32[$11_1 + 132 >> 2];
        if (($3_1 | 0) == ($2_1 | 0)) {
         break label$33
        }
        if (HEAP32[$11_1 + 128 >> 2] == ($2_1 | 0)) {
         $2079($15, $11_1 + 132 | 0, $11_1 + 128 | 0);
         $2_1 = HEAP32[$11_1 + 132 >> 2];
        }
        HEAP32[$11_1 + 132 >> 2] = $2_1 + 4;
        HEAP32[$2_1 >> 2] = $4_1;
       }
       label$35 : {
        if (HEAP32[$11_1 + 36 >> 2] < 1) {
         break label$35
        }
        label$36 : {
         if (!$1692($0, $11_1 + 552 | 0)) {
          if (($1689($0) & 255) == HEAPU8[$11_1 + 119 | 0]) {
           break label$36
          }
         }
         HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 4;
         $0 = 0;
         break label$4;
        }
        while (1) {
         $1691($0);
         if (HEAP32[$11_1 + 36 >> 2] < 1) {
          break label$35
         }
         label$39 : {
          if (!$1692($0, $11_1 + 552 | 0)) {
           if ($1690($7, 2048, $1689($0))) {
            break label$39
           }
          }
          HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 4;
          $0 = 0;
          break label$4;
         }
         if (HEAP32[$9_1 >> 2] == HEAP32[$11_1 + 548 >> 2]) {
          $2078($8, $9_1, $11_1 + 548 | 0)
         }
         $2_1 = $1689($0);
         $3_1 = HEAP32[$9_1 >> 2];
         HEAP32[$9_1 >> 2] = $3_1 + 1;
         HEAP8[$3_1 | 0] = $2_1;
         HEAP32[$11_1 + 36 >> 2] = HEAP32[$11_1 + 36 >> 2] + -1;
         continue;
        };
       }
       $2_1 = $10_1;
       if (HEAP32[$8 >> 2] != HEAP32[$9_1 >> 2]) {
        break label$2
       }
       HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 4;
       $0 = 0;
       break label$4;
      }
      label$42 : {
       if (!$10_1) {
        break label$42
       }
       $4_1 = 1;
       while (1) {
        if ($4_1 >>> 0 >= $100($10_1) >>> 0) {
         break label$42
        }
        label$44 : {
         if (!$1692($0, $11_1 + 552 | 0)) {
          if (($1689($0) & 255) == HEAPU8[$1865($10_1, $4_1) | 0]) {
           break label$44
          }
         }
         HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 4;
         $0 = 0;
         break label$4;
        }
        $1691($0);
        $4_1 = $4_1 + 1 | 0;
        continue;
       };
      }
      $0 = 1;
      if (HEAP32[$15 >> 2] == HEAP32[$11_1 + 132 >> 2]) {
       break label$4
      }
      $0 = 0;
      HEAP32[$11_1 + 24 >> 2] = 0;
      $1875($17, HEAP32[$15 >> 2], HEAP32[$11_1 + 132 >> 2], $11_1 + 24 | 0);
      if (HEAP32[$11_1 + 24 >> 2]) {
       HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 4;
       break label$4;
      }
      $0 = 1;
     }
     $2512($16_1);
     $2512($13_1);
     $2512($12_1);
     $2512($14);
     $2512($17);
     $1866($15);
     global$0 = $11_1 + 560 | 0;
     return $0;
    }
    $2_1 = $10_1;
   }
   $1_1 = $1_1 + 1 | 0;
   continue;
  };
 }
 
 function $2072($0, $1_1, $2_1, $3_1, $4_1, $5_1, $6, $7, $8, $9_1) {
  var $10_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $10_1 = global$0 - 16 | 0;
  global$0 = $10_1;
  label$1 : {
   if ($0) {
    $0 = $2085($1_1);
    $2086($10_1, $0);
    $1_1 = HEAP32[$10_1 >> 2];
    HEAP8[$2_1 | 0] = $1_1;
    HEAP8[$2_1 + 1 | 0] = $1_1 >>> 8;
    HEAP8[$2_1 + 2 | 0] = $1_1 >>> 16;
    HEAP8[$2_1 + 3 | 0] = $1_1 >>> 24;
    $2087($10_1, $0);
    $241($8, $10_1);
    $2512($10_1);
    $1858($10_1, $0);
    $241($7, $10_1);
    $2512($10_1);
    (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = $1941($0)), HEAP8[wasm2js_i32$0 | 0] = wasm2js_i32$1;
    (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $1942($0)), HEAP8[wasm2js_i32$0 | 0] = wasm2js_i32$1;
    $1943($10_1, $0);
    $241($5_1, $10_1);
    $2512($10_1);
    $1857($10_1, $0);
    $241($6, $10_1);
    $2512($10_1);
    $0 = $2088($0);
    break label$1;
   }
   $0 = $2089($1_1);
   $2086($10_1, $0);
   $1_1 = HEAP32[$10_1 >> 2];
   HEAP8[$2_1 | 0] = $1_1;
   HEAP8[$2_1 + 1 | 0] = $1_1 >>> 8;
   HEAP8[$2_1 + 2 | 0] = $1_1 >>> 16;
   HEAP8[$2_1 + 3 | 0] = $1_1 >>> 24;
   $2087($10_1, $0);
   $241($8, $10_1);
   $2512($10_1);
   $1858($10_1, $0);
   $241($7, $10_1);
   $2512($10_1);
   (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = $1941($0)), HEAP8[wasm2js_i32$0 | 0] = wasm2js_i32$1;
   (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $1942($0)), HEAP8[wasm2js_i32$0 | 0] = wasm2js_i32$1;
   $1943($10_1, $0);
   $241($5_1, $10_1);
   $2512($10_1);
   $1857($10_1, $0);
   $241($6, $10_1);
   $2512($10_1);
   $0 = $2088($0);
  }
  HEAP32[$9_1 >> 2] = $0;
  global$0 = $10_1 + 16 | 0;
 }
 
 function $2073($0, $1_1) {
  var $2_1 = 0;
  $2_1 = $375(HEAP32[$1_1 >> 2]) << 24 >> 24;
  HEAP32[$0 + 4 >> 2] = HEAP32[$1_1 >> 2];
  HEAP8[$0 | 0] = $2_1;
 }
 
 function $2078($0, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6 = 0, $7 = 0, $8 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $5_1 = HEAP32[$305($0) >> 2];
  $7 = HEAP32[$1_1 >> 2];
  $8 = HEAP32[$0 >> 2];
  $6 = ($5_1 | 0) == 140 ? 0 : HEAP32[$0 >> 2];
  $3_1 = HEAP32[$2_1 >> 2] - HEAP32[$0 >> 2] | 0;
  label$1 : {
   if ($3_1 >>> 0 < 2147483647) {
    $3_1 = $3_1 << 1;
    break label$1;
   }
   $3_1 = -1;
  }
  $3_1 = $3_1 ? $3_1 : 1;
  $6 = $2584($6, $3_1);
  if ($6) {
   if (($5_1 | 0) != 140) {
    $300($0)
   }
   HEAP32[$4_1 + 4 >> 2] = 139;
   $5_1 = $299($4_1 + 8 | 0, $6, $4_1 + 4 | 0);
   $2095($0, $5_1);
   $1866($5_1);
   HEAP32[$1_1 >> 2] = HEAP32[$0 >> 2] + ($7 - $8 | 0);
   HEAP32[$2_1 >> 2] = $3_1 + HEAP32[$0 >> 2];
   global$0 = $4_1 + 16 | 0;
   return;
  }
  $1643();
  abort();
 }
 
 function $2079($0, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6 = 0, $7 = 0, $8 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $5_1 = HEAP32[$305($0) >> 2];
  $7 = HEAP32[$1_1 >> 2];
  $8 = HEAP32[$0 >> 2];
  $6 = ($5_1 | 0) == 140 ? 0 : HEAP32[$0 >> 2];
  $3_1 = HEAP32[$2_1 >> 2] - HEAP32[$0 >> 2] | 0;
  label$1 : {
   if ($3_1 >>> 0 < 2147483647) {
    $3_1 = $3_1 << 1;
    break label$1;
   }
   $3_1 = -1;
  }
  $3_1 = $3_1 ? $3_1 : 4;
  $6 = $2584($6, $3_1);
  if ($6) {
   if (($5_1 | 0) != 140) {
    $300($0)
   }
   HEAP32[$4_1 + 4 >> 2] = 139;
   $5_1 = $299($4_1 + 8 | 0, $6, $4_1 + 4 | 0);
   $2095($0, $5_1);
   $1866($5_1);
   HEAP32[$1_1 >> 2] = HEAP32[$0 >> 2] + ($7 - $8 | 0);
   HEAP32[$2_1 >> 2] = HEAP32[$0 >> 2] + ($3_1 & -4);
   global$0 = $4_1 + 16 | 0;
   return;
  }
  $1643();
  abort();
 }
 
 function $2081($0, $1_1, $2_1, $3_1, $4_1, $5_1, $6) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6 = $6 | 0;
  var $7 = 0, $8 = 0, $9_1 = 0;
  $0 = global$0 - 160 | 0;
  global$0 = $0;
  HEAP32[$0 + 144 >> 2] = $2_1;
  HEAP32[$0 + 152 >> 2] = $1_1;
  HEAP32[$0 + 20 >> 2] = 140;
  $7 = $299($0 + 24 | 0, $0 + 32 | 0, $0 + 20 | 0);
  $1687($0 + 16 | 0, $4_1);
  $1_1 = $343($0 + 16 | 0);
  HEAP8[$0 + 15 | 0] = 0;
  label$1 : {
   if (!$2067($0 + 152 | 0, $2_1, $3_1, $0 + 16 | 0, HEAP32[$4_1 + 4 >> 2], $5_1, $0 + 15 | 0, $1_1, $7, $0 + 20 | 0, $0 + 132 | 0)) {
    break label$1
   }
   $374($6);
   if (HEAPU8[$0 + 15 | 0]) {
    $2522($6, $344($1_1, 45))
   }
   $2_1 = $344($1_1, 48);
   $4_1 = HEAP32[$7 >> 2];
   $8 = HEAP32[$0 + 20 >> 2];
   $3_1 = $8 + -1 | 0;
   $1_1 = $4_1 >>> 0 > $3_1 >>> 0 ? $4_1 : $3_1;
   $9_1 = $2_1 & 255;
   while (1) {
    $2_1 = $6;
    label$4 : {
     if ($4_1 >>> 0 < $3_1 >>> 0) {
      if (($9_1 | 0) == HEAPU8[$4_1 | 0]) {
       break label$4
      }
     } else {
      $4_1 = $1_1
     }
     $2083($2_1, $4_1, $8);
     break label$1;
    }
    $4_1 = $4_1 + 1 | 0;
    continue;
   };
  }
  if ($1692($0 + 152 | 0, $0 + 144 | 0)) {
   HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 2
  }
  $1_1 = HEAP32[$0 + 152 >> 2];
  $1855($0 + 16 | 0);
  $1866($7);
  global$0 = $0 + 160 | 0;
  return $1_1 | 0;
 }
 
 function $2083($0, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  $4_1 = $100($0);
  $3_1 = $358($0);
  $6 = $371($1_1, $2_1);
  label$1 : {
   if (!$6) {
    break label$1
   }
   if ($2485($1_1, $320($0), $320($0) + $100($0) | 0)) {
    $3_1 = $0;
    $0 = $366($5_1 + 16 | 0, $1_1, $2_1, $0);
    $2521($3_1, $320($0), $100($0));
    $2512($0);
    break label$1;
   }
   if ($3_1 - $4_1 >>> 0 < $6 >>> 0) {
    $2520($0, $3_1, ($4_1 + $6 | 0) - $3_1 | 0, $4_1, $4_1)
   }
   $3_1 = $320($0) + $4_1 | 0;
   while (1) {
    if (($1_1 | 0) != ($2_1 | 0)) {
     $335($3_1, $1_1);
     $1_1 = $1_1 + 1 | 0;
     $3_1 = $3_1 + 1 | 0;
     continue;
    }
    break;
   };
   HEAP8[$5_1 + 15 | 0] = 0;
   $335($3_1, $5_1 + 15 | 0);
   $2402($0, $4_1 + $6 | 0);
  }
  global$0 = $5_1 + 32 | 0;
 }
 
 function $2085($0) {
  return $1860($0, 22996);
 }
 
 function $2086($0, $1_1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 44 >> 2]]($0, $1_1);
 }
 
 function $2087($0, $1_1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 32 >> 2]]($0, $1_1);
 }
 
 function $2088($0) {
  return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 36 >> 2]]($0) | 0;
 }
 
 function $2089($0) {
  return $1860($0, 22988);
 }
 
 function $2091($0, $1_1, $2_1) {
  var $3_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  HEAP32[$3_1 + 16 >> 2] = $1_1;
  HEAP32[$3_1 + 24 >> 2] = $0;
  HEAP32[$3_1 + 8 >> 2] = $2_1;
  while (1) {
   label$2 : {
    $0 = 1;
    label$3 : {
     if (!$31($3_1 + 24 | 0, $3_1 + 16 | 0)) {
      break label$3
     }
     if (HEAPU8[HEAP32[$3_1 + 24 >> 2]] == HEAPU8[HEAP32[$3_1 + 8 >> 2]]) {
      break label$2
     }
     $0 = 0;
    }
    global$0 = $3_1 + 32 | 0;
    return $0;
   }
   $795($3_1 + 24 | 0);
   $795($3_1 + 8 | 0);
   continue;
  };
 }
 
 function $2095($0, $1_1) {
  var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $1863($0, $300($1_1));
  $1_1 = HEAP32[$305($1_1) >> 2];
  (wasm2js_i32$0 = $305($0), wasm2js_i32$1 = $1_1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 }
 
 function $2100($0, $1_1, $2_1, $3_1, $4_1, $5_1, $6) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6 = $6 | 0;
  var $7 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $0 = global$0 - 624 | 0;
  global$0 = $0;
  HEAP32[$0 + 608 >> 2] = $2_1;
  HEAP32[$0 + 616 >> 2] = $1_1;
  HEAP32[$0 + 16 >> 2] = 140;
  $1_1 = $299($0 + 200 | 0, $0 + 208 | 0, $0 + 16 | 0);
  $1687($0 + 192 | 0, $4_1);
  $7 = $1704($0 + 192 | 0);
  HEAP8[$0 + 191 | 0] = 0;
  label$1 : {
   if (!$2101($0 + 616 | 0, $2_1, $3_1, $0 + 192 | 0, HEAP32[$4_1 + 4 >> 2], $5_1, $0 + 191 | 0, $7, $1_1, $0 + 196 | 0, $0 + 608 | 0)) {
    break label$1
   }
   $2_1 = HEAPU8[11483] | HEAPU8[11484] << 8 | (HEAPU8[11485] << 16 | HEAPU8[11486] << 24);
   HEAP8[$0 + 183 | 0] = $2_1;
   HEAP8[$0 + 184 | 0] = $2_1 >>> 8;
   HEAP8[$0 + 185 | 0] = $2_1 >>> 16;
   HEAP8[$0 + 186 | 0] = $2_1 >>> 24;
   $2_1 = HEAPU8[11480] | HEAPU8[11481] << 8 | (HEAPU8[11482] << 16 | HEAPU8[11483] << 24);
   HEAP32[$0 + 176 >> 2] = HEAPU8[11476] | HEAPU8[11477] << 8 | (HEAPU8[11478] << 16 | HEAPU8[11479] << 24);
   HEAP32[$0 + 180 >> 2] = $2_1;
   $1939($7, $0 + 176 | 0, $0 + 186 | 0, $0 + 128 | 0);
   HEAP32[$0 + 16 >> 2] = 139;
   $3_1 = $299($0 + 8 | 0, 0, $0 + 16 | 0);
   $2_1 = $0 + 16 | 0;
   label$2 : {
    if ((HEAP32[$0 + 196 >> 2] - HEAP32[$1_1 >> 2] | 0) >= 393) {
     $1863($3_1, $2582((HEAP32[$0 + 196 >> 2] - HEAP32[$1_1 >> 2] >> 2) + 2 | 0));
     if (!HEAP32[$3_1 >> 2]) {
      break label$2
     }
     $2_1 = HEAP32[$3_1 >> 2];
    }
    if (HEAPU8[$0 + 191 | 0]) {
     HEAP8[$2_1 | 0] = 45;
     $2_1 = $2_1 + 1 | 0;
    }
    $4_1 = HEAP32[$1_1 >> 2];
    while (1) {
     if ($4_1 >>> 0 >= HEAPU32[$0 + 196 >> 2]) {
      label$7 : {
       HEAP8[$2_1 | 0] = 0;
       HEAP32[$0 >> 2] = $6;
       if (($1819($0 + 16 | 0, $0) | 0) != 1) {
        break label$7
       }
       $1866($3_1);
       break label$1;
      }
     } else {
      (wasm2js_i32$0 = $2_1, wasm2js_i32$1 = HEAPU8[($0 + 176 | 0) + ($1940($0 + 128 | 0, $0 + 168 | 0, $4_1) - ($0 + 128 | 0) >> 2) | 0]), HEAP8[wasm2js_i32$0 | 0] = wasm2js_i32$1;
      $2_1 = $2_1 + 1 | 0;
      $4_1 = $4_1 + 4 | 0;
      continue;
     }
     break;
    };
    $1643();
    abort();
   }
   $1643();
   abort();
  }
  if ($1709($0 + 616 | 0, $0 + 608 | 0)) {
   HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 2
  }
  $2_1 = HEAP32[$0 + 616 >> 2];
  $1855($0 + 192 | 0);
  $1866($1_1);
  global$0 = $0 + 624 | 0;
  return $2_1 | 0;
 }
 
 function $2101($0, $1_1, $2_1, $3_1, $4_1, $5_1, $6, $7, $8, $9_1, $10_1) {
  var $11_1 = 0, $12_1 = 0, $13_1 = 0, $14 = 0, $15 = 0, $16_1 = 0, $17 = 0, $18_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $11_1 = global$0 - 560 | 0;
  global$0 = $11_1;
  HEAP32[$11_1 + 548 >> 2] = $10_1;
  HEAP32[$11_1 + 552 >> 2] = $1_1;
  HEAP32[$11_1 + 96 >> 2] = 140;
  $15 = $299($11_1 + 136 | 0, $11_1 + 144 | 0, $11_1 + 96 | 0);
  $1_1 = HEAP32[$15 >> 2];
  HEAP32[$11_1 + 132 >> 2] = $1_1;
  HEAP32[$11_1 + 128 >> 2] = $1_1 + 400;
  $17 = $189($11_1 + 96 | 0);
  $14 = $2063($11_1 + 80 | 0);
  $12_1 = $2063($11_1 - -64 | 0);
  $13_1 = $2063($11_1 + 48 | 0);
  $16_1 = $2063($11_1 + 32 | 0);
  $2104($2_1, $3_1, $11_1 + 120 | 0, $11_1 + 116 | 0, $11_1 + 112 | 0, $17, $14, $12_1, $13_1, $11_1 + 28 | 0);
  HEAP32[$9_1 >> 2] = HEAP32[$8 >> 2];
  $18_1 = $4_1 & 512;
  $1_1 = 0;
  $2_1 = 0;
  while (1) {
   $10_1 = $2_1;
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       if (($1_1 | 0) == 4) {
        break label$5
       }
       if (!$1705($0, $11_1 + 552 | 0)) {
        break label$5
       }
       $4_1 = 0;
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            switch (HEAP8[($11_1 + 120 | 0) + $1_1 | 0]) {
            case 1:
             if (($1_1 | 0) == 3) {
              break label$3
             }
             if ($1707($7, 8192, $1706($0))) {
              $2105($11_1 + 16 | 0, $0);
              $2535($16_1, HEAP32[$11_1 + 16 >> 2]);
              break label$9;
             }
             HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 4;
             $0 = 0;
             break label$4;
            case 0:
             break label$10;
            case 4:
             break label$6;
            case 2:
             break label$7;
            case 3:
             break label$8;
            default:
             break label$2;
            };
           }
           if (($1_1 | 0) == 3) {
            break label$3
           }
          }
          while (1) {
           if (!$1705($0, $11_1 + 552 | 0)) {
            break label$3
           }
           if (!$1707($7, 8192, $1706($0))) {
            break label$3
           }
           $2105($11_1 + 16 | 0, $0);
           $2535($16_1, HEAP32[$11_1 + 16 >> 2]);
           continue;
          };
         }
         if (($100($12_1) | 0) == (0 - $100($13_1) | 0)) {
          break label$3
         }
         label$14 : {
          if ($100($12_1)) {
           if ($100($13_1)) {
            break label$14
           }
          }
          $3_1 = $100($12_1);
          $2_1 = $1706($0);
          if ($3_1) {
           if (($2_1 | 0) == HEAP32[$320($12_1) >> 2]) {
            $1708($0);
            $2_1 = $100($12_1) >>> 0 > 1 ? $12_1 : $10_1;
            break label$2;
           }
           HEAP8[$6 | 0] = 1;
           break label$3;
          }
          if (($2_1 | 0) != HEAP32[$320($13_1) >> 2]) {
           break label$3
          }
          $1708($0);
          HEAP8[$6 | 0] = 1;
          $2_1 = $100($13_1) >>> 0 > 1 ? $13_1 : $10_1;
          break label$2;
         }
         if (($1706($0) | 0) == HEAP32[$320($12_1) >> 2]) {
          $1708($0);
          $2_1 = $100($12_1) >>> 0 > 1 ? $12_1 : $10_1;
          break label$2;
         }
         if (($1706($0) | 0) == HEAP32[$320($13_1) >> 2]) {
          $1708($0);
          HEAP8[$6 | 0] = 1;
          $2_1 = $100($13_1) >>> 0 > 1 ? $13_1 : $10_1;
          break label$2;
         }
         HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 4;
         $0 = 0;
         break label$4;
        }
        if (!($18_1 | ($10_1 | $1_1 >>> 0 < 2))) {
         $2_1 = 0;
         if (!(($1_1 | 0) == 2 & HEAPU8[$11_1 + 123 | 0] != 0)) {
          break label$2
         }
        }
        (wasm2js_i32$0 = $11_1, wasm2js_i32$1 = $779($14)), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
        $2_1 = $780($11_1 + 16 | 0, $11_1 + 8 | 0);
        label$21 : {
         if (!$1_1 | HEAPU8[($1_1 + $11_1 | 0) + 119 | 0] > 1) {
          break label$21
         }
         while (1) {
          label$23 : {
           (wasm2js_i32$0 = $11_1, wasm2js_i32$1 = $1969($14)), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
           if (!$31($2_1, $11_1 + 8 | 0)) {
            break label$23
           }
           if (!$1707($7, 8192, HEAP32[HEAP32[$2_1 >> 2] >> 2])) {
            break label$23
           }
           $84($2_1);
           continue;
          }
          break;
         };
         (wasm2js_i32$0 = $11_1, wasm2js_i32$1 = $779($14)), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
         $2_1 = $1421($2_1, $11_1 + 8 | 0);
         if ($2_1 >>> 0 <= $100($16_1) >>> 0) {
          (wasm2js_i32$0 = $11_1, wasm2js_i32$1 = $1969($16_1)), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
          if ($2123($2124($11_1 + 8 | 0, 0 - $2_1 | 0), $1969($16_1), $779($14))) {
           break label$21
          }
         }
         (wasm2js_i32$0 = $11_1, wasm2js_i32$1 = $779($14)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
         $780($11_1 + 8 | 0, $11_1);
         HEAP32[$11_1 + 16 >> 2] = HEAP32[$11_1 + 8 >> 2];
        }
        HEAP32[$11_1 + 8 >> 2] = HEAP32[$11_1 + 16 >> 2];
        while (1) {
         label$26 : {
          (wasm2js_i32$0 = $11_1, wasm2js_i32$1 = $1969($14)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
          if (!$31($11_1 + 8 | 0, $11_1)) {
           break label$26
          }
          if (!$1705($0, $11_1 + 552 | 0)) {
           break label$26
          }
          if (($1706($0) | 0) != HEAP32[HEAP32[$11_1 + 8 >> 2] >> 2]) {
           break label$26
          }
          $1708($0);
          $84($11_1 + 8 | 0);
          continue;
         }
         break;
        };
        if (!$18_1) {
         break label$3
        }
        (wasm2js_i32$0 = $11_1, wasm2js_i32$1 = $1969($14)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
        if (!$31($11_1 + 8 | 0, $11_1)) {
         break label$3
        }
        HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 4;
        $0 = 0;
        break label$4;
       }
       while (1) {
        label$28 : {
         if (!$1705($0, $11_1 + 552 | 0)) {
          break label$28
         }
         $2_1 = $1706($0);
         label$29 : {
          if ($1707($7, 2048, $2_1)) {
           $3_1 = HEAP32[$9_1 >> 2];
           if (($3_1 | 0) == HEAP32[$11_1 + 548 >> 2]) {
            $2079($8, $9_1, $11_1 + 548 | 0);
            $3_1 = HEAP32[$9_1 >> 2];
           }
           HEAP32[$9_1 >> 2] = $3_1 + 4;
           HEAP32[$3_1 >> 2] = $2_1;
           $4_1 = $4_1 + 1 | 0;
           break label$29;
          }
          if (!$4_1 | !$100($17) | ($2_1 | 0) != HEAP32[$11_1 + 112 >> 2]) {
           break label$28
          }
          $2_1 = HEAP32[$11_1 + 132 >> 2];
          if (($2_1 | 0) == HEAP32[$11_1 + 128 >> 2]) {
           $2079($15, $11_1 + 132 | 0, $11_1 + 128 | 0);
           $2_1 = HEAP32[$11_1 + 132 >> 2];
          }
          HEAP32[$11_1 + 132 >> 2] = $2_1 + 4;
          HEAP32[$2_1 >> 2] = $4_1;
          $4_1 = 0;
         }
         $1708($0);
         continue;
        }
        break;
       };
       $3_1 = HEAP32[$15 >> 2];
       label$33 : {
        if (!$4_1) {
         break label$33
        }
        $2_1 = HEAP32[$11_1 + 132 >> 2];
        if (($3_1 | 0) == ($2_1 | 0)) {
         break label$33
        }
        if (HEAP32[$11_1 + 128 >> 2] == ($2_1 | 0)) {
         $2079($15, $11_1 + 132 | 0, $11_1 + 128 | 0);
         $2_1 = HEAP32[$11_1 + 132 >> 2];
        }
        HEAP32[$11_1 + 132 >> 2] = $2_1 + 4;
        HEAP32[$2_1 >> 2] = $4_1;
       }
       label$35 : {
        if (HEAP32[$11_1 + 28 >> 2] < 1) {
         break label$35
        }
        label$36 : {
         if (!$1709($0, $11_1 + 552 | 0)) {
          if (($1706($0) | 0) == HEAP32[$11_1 + 116 >> 2]) {
           break label$36
          }
         }
         HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 4;
         $0 = 0;
         break label$4;
        }
        while (1) {
         $1708($0);
         if (HEAP32[$11_1 + 28 >> 2] < 1) {
          break label$35
         }
         label$39 : {
          if (!$1709($0, $11_1 + 552 | 0)) {
           if ($1707($7, 2048, $1706($0))) {
            break label$39
           }
          }
          HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 4;
          $0 = 0;
          break label$4;
         }
         if (HEAP32[$9_1 >> 2] == HEAP32[$11_1 + 548 >> 2]) {
          $2079($8, $9_1, $11_1 + 548 | 0)
         }
         $2_1 = $1706($0);
         $3_1 = HEAP32[$9_1 >> 2];
         HEAP32[$9_1 >> 2] = $3_1 + 4;
         HEAP32[$3_1 >> 2] = $2_1;
         HEAP32[$11_1 + 28 >> 2] = HEAP32[$11_1 + 28 >> 2] + -1;
         continue;
        };
       }
       $2_1 = $10_1;
       if (HEAP32[$8 >> 2] != HEAP32[$9_1 >> 2]) {
        break label$2
       }
       HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 4;
       $0 = 0;
       break label$4;
      }
      label$42 : {
       if (!$10_1) {
        break label$42
       }
       $4_1 = 1;
       while (1) {
        if ($4_1 >>> 0 >= $100($10_1) >>> 0) {
         break label$42
        }
        label$44 : {
         if (!$1709($0, $11_1 + 552 | 0)) {
          if (($1706($0) | 0) == HEAP32[$1913($10_1, $4_1) >> 2]) {
           break label$44
          }
         }
         HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 4;
         $0 = 0;
         break label$4;
        }
        $1708($0);
        $4_1 = $4_1 + 1 | 0;
        continue;
       };
      }
      $0 = 1;
      if (HEAP32[$15 >> 2] == HEAP32[$11_1 + 132 >> 2]) {
       break label$4
      }
      $0 = 0;
      HEAP32[$11_1 + 16 >> 2] = 0;
      $1875($17, HEAP32[$15 >> 2], HEAP32[$11_1 + 132 >> 2], $11_1 + 16 | 0);
      if (HEAP32[$11_1 + 16 >> 2]) {
       HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 4;
       break label$4;
      }
      $0 = 1;
     }
     $2512($16_1);
     $2512($13_1);
     $2512($12_1);
     $2512($14);
     $2512($17);
     $1866($15);
     global$0 = $11_1 + 560 | 0;
     return $0;
    }
    $2_1 = $10_1;
   }
   $1_1 = $1_1 + 1 | 0;
   continue;
  };
 }
 
 function $2104($0, $1_1, $2_1, $3_1, $4_1, $5_1, $6, $7, $8, $9_1) {
  var $10_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $10_1 = global$0 - 16 | 0;
  global$0 = $10_1;
  label$1 : {
   if ($0) {
    $0 = $2120($1_1);
    $2086($10_1, $0);
    $1_1 = HEAP32[$10_1 >> 2];
    HEAP8[$2_1 | 0] = $1_1;
    HEAP8[$2_1 + 1 | 0] = $1_1 >>> 8;
    HEAP8[$2_1 + 2 | 0] = $1_1 >>> 16;
    HEAP8[$2_1 + 3 | 0] = $1_1 >>> 24;
    $2087($10_1, $0);
    $2121($8, $10_1);
    $2512($10_1);
    $1858($10_1, $0);
    $2121($7, $10_1);
    $2512($10_1);
    (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = $1941($0)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $1942($0)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    $1943($10_1, $0);
    $241($5_1, $10_1);
    $2512($10_1);
    $1857($10_1, $0);
    $2121($6, $10_1);
    $2512($10_1);
    $0 = $2088($0);
    break label$1;
   }
   $0 = $2122($1_1);
   $2086($10_1, $0);
   $1_1 = HEAP32[$10_1 >> 2];
   HEAP8[$2_1 | 0] = $1_1;
   HEAP8[$2_1 + 1 | 0] = $1_1 >>> 8;
   HEAP8[$2_1 + 2 | 0] = $1_1 >>> 16;
   HEAP8[$2_1 + 3 | 0] = $1_1 >>> 24;
   $2087($10_1, $0);
   $2121($8, $10_1);
   $2512($10_1);
   $1858($10_1, $0);
   $2121($7, $10_1);
   $2512($10_1);
   (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = $1941($0)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
   (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $1942($0)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
   $1943($10_1, $0);
   $241($5_1, $10_1);
   $2512($10_1);
   $1857($10_1, $0);
   $2121($6, $10_1);
   $2512($10_1);
   $0 = $2088($0);
  }
  HEAP32[$9_1 >> 2] = $0;
  global$0 = $10_1 + 16 | 0;
 }
 
 function $2105($0, $1_1) {
  $458($0, $1713(HEAP32[$1_1 >> 2]), HEAP32[$1_1 >> 2]);
 }
 
 function $2111($0, $1_1, $2_1, $3_1, $4_1, $5_1, $6) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6 = $6 | 0;
  var $7 = 0;
  $0 = global$0 - 448 | 0;
  global$0 = $0;
  HEAP32[$0 + 432 >> 2] = $2_1;
  HEAP32[$0 + 440 >> 2] = $1_1;
  HEAP32[$0 + 20 >> 2] = 140;
  $1_1 = $299($0 + 24 | 0, $0 + 32 | 0, $0 + 20 | 0);
  $1687($0 + 16 | 0, $4_1);
  $7 = $1704($0 + 16 | 0);
  HEAP8[$0 + 15 | 0] = 0;
  if ($2101($0 + 440 | 0, $2_1, $3_1, $0 + 16 | 0, HEAP32[$4_1 + 4 >> 2], $5_1, $0 + 15 | 0, $7, $1_1, $0 + 20 | 0, $0 + 432 | 0)) {
   $2112($6);
   if (HEAPU8[$0 + 15 | 0]) {
    $2535($6, $1735($7, 45))
   }
   $2_1 = $1735($7, 48);
   $4_1 = HEAP32[$1_1 >> 2];
   $3_1 = HEAP32[$0 + 20 >> 2];
   $7 = $3_1 + -4 | 0;
   while (1) {
    if (!(($2_1 | 0) != HEAP32[$4_1 >> 2] | $4_1 >>> 0 >= $7 >>> 0)) {
     $4_1 = $4_1 + 4 | 0;
     continue;
    }
    break;
   };
   $2119($6, $4_1, $3_1);
  }
  if ($1709($0 + 440 | 0, $0 + 432 | 0)) {
   HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 2
  }
  $2_1 = HEAP32[$0 + 440 >> 2];
  $1855($0 + 16 | 0);
  $1866($1_1);
  global$0 = $0 + 448 | 0;
  return $2_1 | 0;
 }
 
 function $2112($0) {
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  label$1 : {
   if ($207($0)) {
    $2_1 = HEAP32[$0 >> 2];
    HEAP32[$1_1 + 12 >> 2] = 0;
    $175($2_1, $1_1 + 12 | 0);
    $333($0, 0);
    break label$1;
   }
   HEAP32[$1_1 + 8 >> 2] = 0;
   $175($0, $1_1 + 8 | 0);
   $324($0, 0);
  }
  global$0 = $1_1 + 16 | 0;
 }
 
 function $2119($0, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $5_1 = $100($0);
  $3_1 = $2401($0);
  $6 = $1645($1_1, $2_1);
  label$1 : {
   if (!$6) {
    break label$1
   }
   if ($2485($1_1, $320($0), $320($0) + ($100($0) << 2) | 0)) {
    $3_1 = $0;
    $0 = global$0 - 16 | 0;
    global$0 = $0;
    $1852($4_1, $1_1, $2_1);
    global$0 = $0 + 16 | 0;
    $0 = $4_1;
    $2534($3_1, $320($0), $100($0));
    $2512($0);
    break label$1;
   }
   if ($3_1 - $5_1 >>> 0 < $6 >>> 0) {
    $2532($0, $3_1, ($5_1 + $6 | 0) - $3_1 | 0, $5_1, $5_1)
   }
   $3_1 = $320($0) + ($5_1 << 2) | 0;
   while (1) {
    if (($1_1 | 0) != ($2_1 | 0)) {
     $175($3_1, $1_1);
     $1_1 = $1_1 + 4 | 0;
     $3_1 = $3_1 + 4 | 0;
     continue;
    }
    break;
   };
   HEAP32[$4_1 >> 2] = 0;
   $175($3_1, $4_1);
   $2402($0, $5_1 + $6 | 0);
  }
  global$0 = $4_1 + 16 | 0;
 }
 
 function $2120($0) {
  return $1860($0, 23012);
 }
 
 function $2121($0, $1_1) {
  $2127($0, $1_1);
 }
 
 function $2122($0) {
  return $1860($0, 23004);
 }
 
 function $2123($0, $1_1, $2_1) {
  var $3_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  HEAP32[$3_1 + 16 >> 2] = $1_1;
  HEAP32[$3_1 + 24 >> 2] = $0;
  HEAP32[$3_1 + 8 >> 2] = $2_1;
  while (1) {
   label$2 : {
    $0 = 1;
    label$3 : {
     if (!$31($3_1 + 24 | 0, $3_1 + 16 | 0)) {
      break label$3
     }
     if ($533($3_1, HEAP32[$3_1 + 24 >> 2], HEAP32[$3_1 + 8 >> 2])) {
      break label$2
     }
     $0 = 0;
    }
    global$0 = $3_1 + 32 | 0;
    return $0;
   }
   $84($3_1 + 24 | 0);
   $84($3_1 + 8 | 0);
   continue;
  };
 }
 
 function $2124($0, $1_1) {
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 + 8 >> 2] = HEAP32[$0 >> 2];
  $0 = $2_1 + 8 | 0;
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + ($1_1 << 2);
  global$0 = $2_1 + 16 | 0;
  return HEAP32[$2_1 + 8 >> 2];
 }
 
 function $2127($0, $1_1) {
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  if ($207($0)) {
   $3_1 = HEAP32[$0 >> 2];
   $362($0);
   $2583($3_1);
  }
  HEAP32[$0 + 8 >> 2] = HEAP32[$1_1 + 8 >> 2];
  $3_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$0 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0 + 4 >> 2] = $3_1;
  $324($1_1, 0);
  HEAP32[$2_1 + 12 >> 2] = 0;
  $175($1_1, $2_1 + 12 | 0);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $2128($0, $1_1, $2_1, $3_1, $4_1, $5_1, $6, $7, $8) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  $8 = $8 | 0;
  var $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14 = 0, $15 = 0;
  $0 = global$0 - 464 | 0;
  global$0 = $0;
  HEAP32[$0 + 16 >> 2] = $5_1;
  HEAP32[$0 + 20 >> 2] = $6;
  HEAP32[$0 + 24 >> 2] = $7;
  HEAP32[$0 + 28 >> 2] = $8;
  HEAP32[$0 + 348 >> 2] = $0 + 352;
  $9_1 = $1820($0 + 352 | 0, $0 + 16 | 0);
  HEAP32[$0 + 240 >> 2] = 139;
  $13_1 = $299($0 + 232 | 0, 0, $0 + 240 | 0);
  HEAP32[$0 + 240 >> 2] = 139;
  $11_1 = $299($0 + 224 | 0, 0, $0 + 240 | 0);
  $12_1 = $0 + 240 | 0;
  label$1 : {
   if ($9_1 >>> 0 >= 100) {
    $9_1 = $1904();
    HEAP32[$0 >> 2] = $5_1;
    HEAP32[$0 + 4 >> 2] = $6;
    HEAP32[$0 + 8 >> 2] = $7;
    HEAP32[$0 + 12 >> 2] = $8;
    $9_1 = $1960($0 + 348 | 0, $9_1, 11487, $0);
    $5_1 = HEAP32[$0 + 348 >> 2];
    if (!$5_1) {
     break label$1
    }
    $1863($13_1, $5_1);
    $1863($11_1, $2582($9_1));
    if ($2129($11_1)) {
     break label$1
    }
    $12_1 = HEAP32[$11_1 >> 2];
   }
   $1687($0 + 216 | 0, $3_1);
   $14 = $343($0 + 216 | 0);
   $5_1 = HEAP32[$0 + 348 >> 2];
   $1903($14, $5_1, $5_1 + $9_1 | 0, $12_1);
   $15 = $9_1 ? HEAPU8[HEAP32[$0 + 348 >> 2]] == 45 : 0;
   $8 = $189($0 + 192 | 0);
   $6 = $189($0 + 176 | 0);
   $5_1 = $189($0 + 160 | 0);
   $2130($2_1, $15, $0 + 216 | 0, $0 + 208 | 0, $0 + 207 | 0, $0 + 206 | 0, $8, $6, $5_1, $0 + 156 | 0);
   HEAP32[$0 + 48 >> 2] = 139;
   $7 = $299($0 + 40 | 0, 0, $0 + 48 | 0);
   $2_1 = HEAP32[$0 + 156 >> 2];
   label$5 : {
    if (($9_1 | 0) > ($2_1 | 0)) {
     $10_1 = $100($5_1) + ($9_1 - $2_1 << 1 | 1) | 0;
     break label$5;
    }
    $10_1 = $100($5_1) + 2 | 0;
   }
   $2_1 = $0 + 48 | 0;
   $10_1 = ($100($6) + $10_1 | 0) + HEAP32[$0 + 156 >> 2] | 0;
   if ($10_1 >>> 0 >= 101) {
    $1863($7, $2582($10_1));
    $2_1 = HEAP32[$7 >> 2];
    if (!$2_1) {
     break label$1
    }
   }
   $2131($2_1, $0 + 36 | 0, $0 + 32 | 0, HEAP32[$3_1 + 4 >> 2], $12_1, $9_1 + $12_1 | 0, $14, $15, $0 + 208 | 0, HEAP8[$0 + 207 | 0], HEAP8[$0 + 206 | 0], $8, $6, $5_1, HEAP32[$0 + 156 >> 2]);
   $1_1 = $314($1_1, $2_1, HEAP32[$0 + 36 >> 2], HEAP32[$0 + 32 >> 2], $3_1, $4_1);
   $1866($7);
   $2512($5_1);
   $2512($6);
   $2512($8);
   $1855($0 + 216 | 0);
   $1866($11_1);
   $1866($13_1);
   global$0 = $0 + 464 | 0;
   return $1_1 | 0;
  }
  $1643();
  abort();
 }
 
 function $2129($0) {
  return HEAP32[$0 >> 2] != 0 ^ 1;
 }
 
 function $2130($0, $1_1, $2_1, $3_1, $4_1, $5_1, $6, $7, $8, $9_1) {
  var $10_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $10_1 = global$0 - 16 | 0;
  global$0 = $10_1;
  label$1 : {
   if ($0) {
    $0 = $2085($2_1);
    label$3 : {
     if ($1_1) {
      $2086($10_1, $0);
      $1_1 = HEAP32[$10_1 >> 2];
      HEAP8[$3_1 | 0] = $1_1;
      HEAP8[$3_1 + 1 | 0] = $1_1 >>> 8;
      HEAP8[$3_1 + 2 | 0] = $1_1 >>> 16;
      HEAP8[$3_1 + 3 | 0] = $1_1 >>> 24;
      $2087($10_1, $0);
      break label$3;
     }
     $2133($10_1, $0);
     $1_1 = HEAP32[$10_1 >> 2];
     HEAP8[$3_1 | 0] = $1_1;
     HEAP8[$3_1 + 1 | 0] = $1_1 >>> 8;
     HEAP8[$3_1 + 2 | 0] = $1_1 >>> 16;
     HEAP8[$3_1 + 3 | 0] = $1_1 >>> 24;
     $1858($10_1, $0);
    }
    $241($8, $10_1);
    $2512($10_1);
    (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $1941($0)), HEAP8[wasm2js_i32$0 | 0] = wasm2js_i32$1;
    (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $1942($0)), HEAP8[wasm2js_i32$0 | 0] = wasm2js_i32$1;
    $1943($10_1, $0);
    $241($6, $10_1);
    $2512($10_1);
    $1857($10_1, $0);
    $241($7, $10_1);
    $2512($10_1);
    $0 = $2088($0);
    break label$1;
   }
   $0 = $2089($2_1);
   label$5 : {
    if ($1_1) {
     $2086($10_1, $0);
     $1_1 = HEAP32[$10_1 >> 2];
     HEAP8[$3_1 | 0] = $1_1;
     HEAP8[$3_1 + 1 | 0] = $1_1 >>> 8;
     HEAP8[$3_1 + 2 | 0] = $1_1 >>> 16;
     HEAP8[$3_1 + 3 | 0] = $1_1 >>> 24;
     $2087($10_1, $0);
     break label$5;
    }
    $2133($10_1, $0);
    $1_1 = HEAP32[$10_1 >> 2];
    HEAP8[$3_1 | 0] = $1_1;
    HEAP8[$3_1 + 1 | 0] = $1_1 >>> 8;
    HEAP8[$3_1 + 2 | 0] = $1_1 >>> 16;
    HEAP8[$3_1 + 3 | 0] = $1_1 >>> 24;
    $1858($10_1, $0);
   }
   $241($8, $10_1);
   $2512($10_1);
   (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $1941($0)), HEAP8[wasm2js_i32$0 | 0] = wasm2js_i32$1;
   (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $1942($0)), HEAP8[wasm2js_i32$0 | 0] = wasm2js_i32$1;
   $1943($10_1, $0);
   $241($6, $10_1);
   $2512($10_1);
   $1857($10_1, $0);
   $241($7, $10_1);
   $2512($10_1);
   $0 = $2088($0);
  }
  HEAP32[$9_1 >> 2] = $0;
  global$0 = $10_1 + 16 | 0;
 }
 
 function $2131($0, $1_1, $2_1, $3_1, $4_1, $5_1, $6, $7, $8, $9_1, $10_1, $11_1, $12_1, $13_1, $14) {
  var $15 = 0, $16_1 = 0, $17 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $20_1 = global$0 - 16 | 0;
  global$0 = $20_1;
  HEAP32[$2_1 >> 2] = $0;
  $23_1 = $3_1 & 512;
  while (1) {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       if (($21_1 | 0) == 4) {
        if ($100($13_1) >>> 0 > 1) {
         (wasm2js_i32$0 = $20_1, wasm2js_i32$1 = $779($13_1)), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
         (wasm2js_i32$0 = $2_1, wasm2js_i32$1 = $2136($791($20_1 + 8 | 0, 1), $781($13_1), HEAP32[$2_1 >> 2])), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
        }
        $3_1 = $3_1 & 176;
        if (($3_1 | 0) == 16) {
         break label$4
        }
        if (($3_1 | 0) != 32) {
         break label$5
        }
        HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
        break label$4;
       }
       label$8 : {
        switch (HEAP8[$8 + $21_1 | 0]) {
        case 0:
         HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
         break label$2;
        case 1:
         HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
         $16_1 = $344($6, 32);
         $15 = HEAP32[$2_1 >> 2];
         HEAP32[$2_1 >> 2] = $15 + 1;
         HEAP8[$15 | 0] = $16_1;
         break label$2;
        case 3:
         if ($772($13_1)) {
          break label$2
         }
         $16_1 = HEAPU8[$1865($13_1, 0) | 0];
         $15 = HEAP32[$2_1 >> 2];
         HEAP32[$2_1 >> 2] = $15 + 1;
         HEAP8[$15 | 0] = $16_1;
         break label$2;
        case 2:
         if ($772($12_1) | !$23_1) {
          break label$2
         }
         (wasm2js_i32$0 = $2_1, wasm2js_i32$1 = $2136($779($12_1), $781($12_1), HEAP32[$2_1 >> 2])), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
         break label$2;
        case 4:
         break label$8;
        default:
         break label$2;
        };
       }
       $24_1 = HEAP32[$2_1 >> 2];
       $4_1 = $7 ? $4_1 + 1 | 0 : $4_1;
       $17 = $4_1;
       while (1) {
        label$14 : {
         if ($17 >>> 0 >= $5_1 >>> 0) {
          break label$14
         }
         if (!$1690($6, 2048, HEAP8[$17 | 0])) {
          break label$14
         }
         $17 = $17 + 1 | 0;
         continue;
        }
        break;
       };
       $16_1 = $14;
       if (($16_1 | 0) >= 1) {
        while (1) {
         $15 = ($16_1 | 0) < 1;
         if (!($15 | $17 >>> 0 <= $4_1 >>> 0)) {
          $17 = $17 + -1 | 0;
          $15 = HEAPU8[$17 | 0];
          $18_1 = HEAP32[$2_1 >> 2];
          HEAP32[$2_1 >> 2] = $18_1 + 1;
          HEAP8[$18_1 | 0] = $15;
          $16_1 = $16_1 + -1 | 0;
          continue;
         }
         break;
        };
        if ($15) {
         $18_1 = 0
        } else {
         $18_1 = $344($6, 48)
        }
        while (1) {
         $15 = HEAP32[$2_1 >> 2];
         HEAP32[$2_1 >> 2] = $15 + 1;
         if (($16_1 | 0) >= 1) {
          HEAP8[$15 | 0] = $18_1;
          $16_1 = $16_1 + -1 | 0;
          continue;
         }
         break;
        };
        HEAP8[$15 | 0] = $9_1;
       }
       if (($4_1 | 0) == ($17 | 0)) {
        $16_1 = $344($6, 48);
        $15 = HEAP32[$2_1 >> 2];
        HEAP32[$2_1 >> 2] = $15 + 1;
        HEAP8[$15 | 0] = $16_1;
        break label$3;
       }
       $15 = -1;
       label$23 : {
        if ($772($11_1)) {
         break label$23
        }
        $15 = HEAP8[$1865($11_1, 0) | 0];
       }
       $16_1 = 0;
       $19_1 = 0;
       while (1) {
        if (($4_1 | 0) == ($17 | 0)) {
         break label$3
        }
        label$26 : {
         if (($16_1 | 0) != ($15 | 0)) {
          $18_1 = $16_1;
          break label$26;
         }
         $15 = HEAP32[$2_1 >> 2];
         HEAP32[$2_1 >> 2] = $15 + 1;
         HEAP8[$15 | 0] = $10_1;
         $18_1 = 0;
         $19_1 = $19_1 + 1 | 0;
         if ($19_1 >>> 0 >= $100($11_1) >>> 0) {
          $15 = $16_1;
          break label$26;
         }
         if (HEAPU8[$1865($11_1, $19_1) | 0] == 127) {
          $15 = -1;
          break label$26;
         }
         $15 = HEAP8[$1865($11_1, $19_1) | 0];
        }
        $17 = $17 + -1 | 0;
        $16_1 = HEAPU8[$17 | 0];
        $22_1 = HEAP32[$2_1 >> 2];
        HEAP32[$2_1 >> 2] = $22_1 + 1;
        HEAP8[$22_1 | 0] = $16_1;
        $16_1 = $18_1 + 1 | 0;
        continue;
       };
      }
      HEAP32[$1_1 >> 2] = $0;
     }
     global$0 = $20_1 + 16 | 0;
     return;
    }
    $1952($24_1, HEAP32[$2_1 >> 2]);
   }
   $21_1 = $21_1 + 1 | 0;
   continue;
  };
 }
 
 function $2133($0, $1_1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 40 >> 2]]($0, $1_1);
 }
 
 function $2136($0, $1_1, $2_1) {
  return $1416($2147($0), $2147($1_1), $2_1);
 }
 
 function $2137($0, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6 = 0, $7 = 0, $8 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0;
  $0 = global$0 - 192 | 0;
  global$0 = $0;
  $1687($0 + 184 | 0, $3_1);
  $11_1 = $343($0 + 184 | 0);
  if ($100($5_1)) {
   $12_1 = HEAPU8[$1865($5_1, 0) | 0] == ($344($11_1, 45) & 255)
  }
  $9_1 = $189($0 + 160 | 0);
  $8 = $189($0 + 144 | 0);
  $7 = $189($0 + 128 | 0);
  $2130($2_1, $12_1, $0 + 184 | 0, $0 + 176 | 0, $0 + 175 | 0, $0 + 174 | 0, $9_1, $8, $7, $0 + 124 | 0);
  HEAP32[$0 + 16 >> 2] = 139;
  $10_1 = $299($0 + 8 | 0, 0, $0 + 16 | 0);
  label$3 : {
   if (($100($5_1) | 0) > HEAP32[$0 + 124 >> 2]) {
    $2_1 = $100($5_1);
    $6 = HEAP32[$0 + 124 >> 2];
    $6 = ($100($7) + ($2_1 - $6 << 1) | 0) + 1 | 0;
    break label$3;
   }
   $6 = $100($7) + 2 | 0;
  }
  $2_1 = $0 + 16 | 0;
  label$5 : {
   $6 = ($100($8) + $6 | 0) + HEAP32[$0 + 124 >> 2] | 0;
   if ($6 >>> 0 < 101) {
    break label$5
   }
   $1863($10_1, $2582($6));
   $2_1 = HEAP32[$10_1 >> 2];
   if ($2_1) {
    break label$5
   }
   $1643();
   abort();
  }
  $2131($2_1, $0 + 4 | 0, $0, HEAP32[$3_1 + 4 >> 2], $320($5_1), $320($5_1) + $100($5_1) | 0, $11_1, $12_1, $0 + 176 | 0, HEAP8[$0 + 175 | 0], HEAP8[$0 + 174 | 0], $9_1, $8, $7, HEAP32[$0 + 124 >> 2]);
  $1_1 = $314($1_1, $2_1, HEAP32[$0 + 4 >> 2], HEAP32[$0 >> 2], $3_1, $4_1);
  $1866($10_1);
  $2512($7);
  $2512($8);
  $2512($9_1);
  $1855($0 + 184 | 0);
  global$0 = $0 + 192 | 0;
  return $1_1 | 0;
 }
 
 function $2138($0, $1_1, $2_1, $3_1, $4_1, $5_1, $6, $7, $8) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  $8 = $8 | 0;
  var $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14 = 0, $15 = 0;
  $0 = global$0 - 1072 | 0;
  global$0 = $0;
  HEAP32[$0 + 16 >> 2] = $5_1;
  HEAP32[$0 + 20 >> 2] = $6;
  HEAP32[$0 + 24 >> 2] = $7;
  HEAP32[$0 + 28 >> 2] = $8;
  HEAP32[$0 + 956 >> 2] = $0 + 960;
  $9_1 = $1820($0 + 960 | 0, $0 + 16 | 0);
  HEAP32[$0 + 544 >> 2] = 139;
  $13_1 = $299($0 + 536 | 0, 0, $0 + 544 | 0);
  HEAP32[$0 + 544 >> 2] = 139;
  $11_1 = $299($0 + 528 | 0, 0, $0 + 544 | 0);
  $12_1 = $0 + 544 | 0;
  label$1 : {
   if ($9_1 >>> 0 >= 100) {
    $9_1 = $1904();
    HEAP32[$0 >> 2] = $5_1;
    HEAP32[$0 + 4 >> 2] = $6;
    HEAP32[$0 + 8 >> 2] = $7;
    HEAP32[$0 + 12 >> 2] = $8;
    $9_1 = $1960($0 + 956 | 0, $9_1, 11487, $0);
    $5_1 = HEAP32[$0 + 956 >> 2];
    if (!$5_1) {
     break label$1
    }
    $1863($13_1, $5_1);
    $1863($11_1, $2582($9_1 << 2));
    if ($2129($11_1)) {
     break label$1
    }
    $12_1 = HEAP32[$11_1 >> 2];
   }
   $1687($0 + 520 | 0, $3_1);
   $14 = $1704($0 + 520 | 0);
   $5_1 = HEAP32[$0 + 956 >> 2];
   $1939($14, $5_1, $5_1 + $9_1 | 0, $12_1);
   $15 = $9_1 ? HEAPU8[HEAP32[$0 + 956 >> 2]] == 45 : 0;
   $8 = $189($0 + 488 | 0);
   $6 = $2063($0 + 472 | 0);
   $5_1 = $2063($0 + 456 | 0);
   $2140($2_1, $15, $0 + 520 | 0, $0 + 512 | 0, $0 + 508 | 0, $0 + 504 | 0, $8, $6, $5_1, $0 + 452 | 0);
   HEAP32[$0 + 48 >> 2] = 139;
   $7 = $299($0 + 40 | 0, 0, $0 + 48 | 0);
   $2_1 = HEAP32[$0 + 452 >> 2];
   label$5 : {
    if (($9_1 | 0) > ($2_1 | 0)) {
     $10_1 = $100($5_1) + ($9_1 - $2_1 << 1 | 1) | 0;
     break label$5;
    }
    $10_1 = $100($5_1) + 2 | 0;
   }
   $2_1 = $0 + 48 | 0;
   $10_1 = ($100($6) + $10_1 | 0) + HEAP32[$0 + 452 >> 2] | 0;
   if ($10_1 >>> 0 >= 101) {
    $1863($7, $2582($10_1 << 2));
    $2_1 = HEAP32[$7 >> 2];
    if (!$2_1) {
     break label$1
    }
   }
   $2141($2_1, $0 + 36 | 0, $0 + 32 | 0, HEAP32[$3_1 + 4 >> 2], $12_1, ($9_1 << 2) + $12_1 | 0, $14, $15, $0 + 512 | 0, HEAP32[$0 + 508 >> 2], HEAP32[$0 + 504 >> 2], $8, $6, $5_1, HEAP32[$0 + 452 >> 2]);
   $1_1 = $1974($1_1, $2_1, HEAP32[$0 + 36 >> 2], HEAP32[$0 + 32 >> 2], $3_1, $4_1);
   $1866($7);
   $2512($5_1);
   $2512($6);
   $2512($8);
   $1855($0 + 520 | 0);
   $1866($11_1);
   $1866($13_1);
   global$0 = $0 + 1072 | 0;
   return $1_1 | 0;
  }
  $1643();
  abort();
 }
 
 function $2140($0, $1_1, $2_1, $3_1, $4_1, $5_1, $6, $7, $8, $9_1) {
  var $10_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $10_1 = global$0 - 16 | 0;
  global$0 = $10_1;
  label$1 : {
   if ($0) {
    $0 = $2120($2_1);
    label$3 : {
     if ($1_1) {
      $2086($10_1, $0);
      $1_1 = HEAP32[$10_1 >> 2];
      HEAP8[$3_1 | 0] = $1_1;
      HEAP8[$3_1 + 1 | 0] = $1_1 >>> 8;
      HEAP8[$3_1 + 2 | 0] = $1_1 >>> 16;
      HEAP8[$3_1 + 3 | 0] = $1_1 >>> 24;
      $2087($10_1, $0);
      break label$3;
     }
     $2133($10_1, $0);
     $1_1 = HEAP32[$10_1 >> 2];
     HEAP8[$3_1 | 0] = $1_1;
     HEAP8[$3_1 + 1 | 0] = $1_1 >>> 8;
     HEAP8[$3_1 + 2 | 0] = $1_1 >>> 16;
     HEAP8[$3_1 + 3 | 0] = $1_1 >>> 24;
     $1858($10_1, $0);
    }
    $2121($8, $10_1);
    $2512($10_1);
    (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $1941($0)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $1942($0)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    $1943($10_1, $0);
    $241($6, $10_1);
    $2512($10_1);
    $1857($10_1, $0);
    $2121($7, $10_1);
    $2512($10_1);
    $0 = $2088($0);
    break label$1;
   }
   $0 = $2122($2_1);
   label$5 : {
    if ($1_1) {
     $2086($10_1, $0);
     $1_1 = HEAP32[$10_1 >> 2];
     HEAP8[$3_1 | 0] = $1_1;
     HEAP8[$3_1 + 1 | 0] = $1_1 >>> 8;
     HEAP8[$3_1 + 2 | 0] = $1_1 >>> 16;
     HEAP8[$3_1 + 3 | 0] = $1_1 >>> 24;
     $2087($10_1, $0);
     break label$5;
    }
    $2133($10_1, $0);
    $1_1 = HEAP32[$10_1 >> 2];
    HEAP8[$3_1 | 0] = $1_1;
    HEAP8[$3_1 + 1 | 0] = $1_1 >>> 8;
    HEAP8[$3_1 + 2 | 0] = $1_1 >>> 16;
    HEAP8[$3_1 + 3 | 0] = $1_1 >>> 24;
    $1858($10_1, $0);
   }
   $2121($8, $10_1);
   $2512($10_1);
   (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $1941($0)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
   (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $1942($0)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
   $1943($10_1, $0);
   $241($6, $10_1);
   $2512($10_1);
   $1857($10_1, $0);
   $2121($7, $10_1);
   $2512($10_1);
   $0 = $2088($0);
  }
  HEAP32[$9_1 >> 2] = $0;
  global$0 = $10_1 + 16 | 0;
 }
 
 function $2141($0, $1_1, $2_1, $3_1, $4_1, $5_1, $6, $7, $8, $9_1, $10_1, $11_1, $12_1, $13_1, $14) {
  var $15 = 0, $16_1 = 0, $17 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $20_1 = global$0 - 16 | 0;
  global$0 = $20_1;
  HEAP32[$2_1 >> 2] = $0;
  $23_1 = $3_1 & 512;
  label$1 : {
   while (1) {
    if (($21_1 | 0) == 4) {
     label$4 : {
      if ($100($13_1) >>> 0 > 1) {
       (wasm2js_i32$0 = $20_1, wasm2js_i32$1 = $779($13_1)), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
       (wasm2js_i32$0 = $2_1, wasm2js_i32$1 = $2136($2124($20_1 + 8 | 0, 1), $1969($13_1), HEAP32[$2_1 >> 2])), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
      }
      $3_1 = $3_1 & 176;
      if (($3_1 | 0) == 16) {
       break label$1
      }
      if (($3_1 | 0) != 32) {
       break label$4
      }
      HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
      break label$1;
     }
    } else {
     label$7 : {
      label$8 : {
       switch (HEAP8[$8 + $21_1 | 0]) {
       case 0:
        HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
        break label$7;
       case 1:
        HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
        $16_1 = $1735($6, 32);
        $15 = HEAP32[$2_1 >> 2];
        HEAP32[$2_1 >> 2] = $15 + 4;
        HEAP32[$15 >> 2] = $16_1;
        break label$7;
       case 3:
        if ($772($13_1)) {
         break label$7
        }
        $16_1 = HEAP32[$1913($13_1, 0) >> 2];
        $15 = HEAP32[$2_1 >> 2];
        HEAP32[$2_1 >> 2] = $15 + 4;
        HEAP32[$15 >> 2] = $16_1;
        break label$7;
       case 2:
        if ($772($12_1) | !$23_1) {
         break label$7
        }
        (wasm2js_i32$0 = $2_1, wasm2js_i32$1 = $2136($779($12_1), $1969($12_1), HEAP32[$2_1 >> 2])), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
        break label$7;
       case 4:
        break label$8;
       default:
        break label$7;
       };
      }
      $24_1 = HEAP32[$2_1 >> 2];
      $4_1 = $7 ? $4_1 + 4 | 0 : $4_1;
      $17 = $4_1;
      while (1) {
       label$14 : {
        if ($17 >>> 0 >= $5_1 >>> 0) {
         break label$14
        }
        if (!$1707($6, 2048, HEAP32[$17 >> 2])) {
         break label$14
        }
        $17 = $17 + 4 | 0;
        continue;
       }
       break;
      };
      $16_1 = $14;
      if (($16_1 | 0) >= 1) {
       while (1) {
        $15 = ($16_1 | 0) < 1;
        if (!($15 | $17 >>> 0 <= $4_1 >>> 0)) {
         $17 = $17 + -4 | 0;
         $15 = HEAP32[$17 >> 2];
         $18_1 = HEAP32[$2_1 >> 2];
         HEAP32[$2_1 >> 2] = $18_1 + 4;
         HEAP32[$18_1 >> 2] = $15;
         $16_1 = $16_1 + -1 | 0;
         continue;
        }
        break;
       };
       if ($15) {
        $19_1 = 0
       } else {
        $19_1 = $1735($6, 48)
       }
       $15 = HEAP32[$2_1 >> 2];
       while (1) {
        $18_1 = $15 + 4 | 0;
        if (($16_1 | 0) >= 1) {
         HEAP32[$15 >> 2] = $19_1;
         $16_1 = $16_1 + -1 | 0;
         $15 = $18_1;
         continue;
        }
        break;
       };
       HEAP32[$2_1 >> 2] = $18_1;
       HEAP32[$15 >> 2] = $9_1;
      }
      label$22 : {
       if (($4_1 | 0) == ($17 | 0)) {
        $16_1 = $1735($6, 48);
        $15 = HEAP32[$2_1 >> 2];
        $17 = $15 + 4 | 0;
        HEAP32[$2_1 >> 2] = $17;
        HEAP32[$15 >> 2] = $16_1;
        break label$22;
       }
       $18_1 = -1;
       label$24 : {
        if ($772($11_1)) {
         break label$24
        }
        $18_1 = HEAP8[$1865($11_1, 0) | 0];
       }
       $16_1 = 0;
       $19_1 = 0;
       while (1) {
        if (($4_1 | 0) != ($17 | 0)) {
         label$28 : {
          if (($16_1 | 0) != ($18_1 | 0)) {
           $15 = $16_1;
           break label$28;
          }
          $15 = HEAP32[$2_1 >> 2];
          HEAP32[$2_1 >> 2] = $15 + 4;
          HEAP32[$15 >> 2] = $10_1;
          $15 = 0;
          $19_1 = $19_1 + 1 | 0;
          if ($19_1 >>> 0 >= $100($11_1) >>> 0) {
           $18_1 = $16_1;
           break label$28;
          }
          if (HEAPU8[$1865($11_1, $19_1) | 0] == 127) {
           $18_1 = -1;
           break label$28;
          }
          $18_1 = HEAP8[$1865($11_1, $19_1) | 0];
         }
         $17 = $17 + -4 | 0;
         $16_1 = HEAP32[$17 >> 2];
         $22_1 = HEAP32[$2_1 >> 2];
         HEAP32[$2_1 >> 2] = $22_1 + 4;
         HEAP32[$22_1 >> 2] = $16_1;
         $16_1 = $15 + 1 | 0;
         continue;
        }
        break;
       };
       $17 = HEAP32[$2_1 >> 2];
      }
      $1975($24_1, $17);
     }
     $21_1 = $21_1 + 1 | 0;
     continue;
    }
    break;
   };
   HEAP32[$1_1 >> 2] = $0;
  }
  global$0 = $20_1 + 16 | 0;
 }
 
 function $2146($0, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6 = 0, $7 = 0, $8 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0;
  $0 = global$0 - 496 | 0;
  global$0 = $0;
  $1687($0 + 488 | 0, $3_1);
  $11_1 = $1704($0 + 488 | 0);
  if ($100($5_1)) {
   $12_1 = HEAP32[$1913($5_1, 0) >> 2] == ($1735($11_1, 45) | 0)
  }
  $9_1 = $189($0 + 456 | 0);
  $8 = $2063($0 + 440 | 0);
  $7 = $2063($0 + 424 | 0);
  $2140($2_1, $12_1, $0 + 488 | 0, $0 + 480 | 0, $0 + 476 | 0, $0 + 472 | 0, $9_1, $8, $7, $0 + 420 | 0);
  HEAP32[$0 + 16 >> 2] = 139;
  $10_1 = $299($0 + 8 | 0, 0, $0 + 16 | 0);
  label$3 : {
   if (($100($5_1) | 0) > HEAP32[$0 + 420 >> 2]) {
    $2_1 = $100($5_1);
    $6 = HEAP32[$0 + 420 >> 2];
    $6 = ($100($7) + ($2_1 - $6 << 1) | 0) + 1 | 0;
    break label$3;
   }
   $6 = $100($7) + 2 | 0;
  }
  $2_1 = $0 + 16 | 0;
  label$5 : {
   $6 = ($100($8) + $6 | 0) + HEAP32[$0 + 420 >> 2] | 0;
   if ($6 >>> 0 < 101) {
    break label$5
   }
   $1863($10_1, $2582($6 << 2));
   $2_1 = HEAP32[$10_1 >> 2];
   if ($2_1) {
    break label$5
   }
   $1643();
   abort();
  }
  $2141($2_1, $0 + 4 | 0, $0, HEAP32[$3_1 + 4 >> 2], $320($5_1), $320($5_1) + ($100($5_1) << 2) | 0, $11_1, $12_1, $0 + 480 | 0, HEAP32[$0 + 476 >> 2], HEAP32[$0 + 472 >> 2], $9_1, $8, $7, HEAP32[$0 + 420 >> 2]);
  $1_1 = $1974($1_1, $2_1, HEAP32[$0 + 4 >> 2], HEAP32[$0 >> 2], $3_1, $4_1);
  $1866($10_1);
  $2512($7);
  $2512($8);
  $2512($9_1);
  $1855($0 + 488 | 0);
  global$0 = $0 + 496 | 0;
  return $1_1 | 0;
 }
 
 function $2147($0) {
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[$1_1 + 8 >> 2] = $0;
  global$0 = $1_1 + 16 | 0;
  return HEAP32[$1_1 + 8 >> 2];
 }
 
 function $2149($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $320($1_1);
  return (1 ? -1 : 2147483647) | 0;
 }
 
 function $2150($0, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $1_1 = global$0 - 32 | 0;
  global$0 = $1_1;
  $3_1 = $189($1_1 + 16 | 0);
  $2152($38($3_1), $320($5_1), $320($5_1) + $100($5_1) | 0);
  $2_1 = $320($3_1);
  $2152($38($189($0)), $2_1, $2597($2_1) + $2_1 | 0);
  $2512($3_1);
  global$0 = $1_1 + 32 | 0;
 }
 
 function $2152($0, $1_1, $2_1) {
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[$3_1 + 8 >> 2] = $0;
  while (1) {
   if ($1_1 >>> 0 < $2_1 >>> 0) {
    $2153($3_1 + 8 | 0, $1_1);
    $1_1 = $1_1 + 1 | 0;
    continue;
   }
   break;
  };
  global$0 = $3_1 + 16 | 0;
 }
 
 function $2153($0, $1_1) {
  $2522(HEAP32[$0 >> 2], HEAP8[$1_1 | 0]);
 }
 
 function $2155($0, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $1_1 = global$0 - 32 | 0;
  global$0 = $1_1;
  $4_1 = $189($1_1 + 16 | 0);
  $2_1 = $1_1 + 8 | 0;
  $2162($2_1);
  HEAP32[$2_1 >> 2] = 12612;
  $2158($2_1, $38($4_1), $320($5_1), $320($5_1) + ($100($5_1) << 2) | 0);
  $2_1 = $320($4_1);
  $3_1 = $2063($0);
  $0 = $1_1 + 8 | 0;
  $2162($0);
  HEAP32[$0 >> 2] = 12708;
  $2161($0, $38($3_1), $2_1, $2597($2_1) + $2_1 | 0);
  $2512($4_1);
  global$0 = $1_1 + 32 | 0;
 }
 
 function $2158($0, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 + -64 | 0;
  global$0 = $4_1;
  HEAP32[$4_1 + 56 >> 2] = $1_1;
  $5_1 = $4_1 + 48 | 0;
  label$1 : {
   label$2 : while (1) {
    if ($2_1 >>> 0 < $3_1 >>> 0) {
     HEAP32[$4_1 + 8 >> 2] = $2_1;
     if ((FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0, $4_1 + 48 | 0, $2_1, $3_1, $4_1 + 8 | 0, $4_1 + 16 | 0, $5_1, $4_1 + 12 | 0) | 0) == 2) {
      break label$1
     }
     $1_1 = $4_1 + 16 | 0;
     if (HEAP32[$4_1 + 8 >> 2] == ($2_1 | 0)) {
      break label$1
     }
     while (1) if ($1_1 >>> 0 >= HEAPU32[$4_1 + 12 >> 2]) {
      $2_1 = HEAP32[$4_1 + 8 >> 2];
      continue label$2;
     } else {
      $2153($4_1 + 56 | 0, $1_1);
      $1_1 = $1_1 + 1 | 0;
      continue;
     };
    }
    break;
   };
   global$0 = $4_1 - -64 | 0;
   return;
  }
  $1643();
  abort();
 }
 
 function $2161($0, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 160 | 0;
  global$0 = $4_1;
  HEAP32[$4_1 + 152 >> 2] = $1_1;
  $5_1 = $4_1 + 144 | 0;
  label$1 : {
   label$2 : while (1) {
    if ($2_1 >>> 0 < $3_1 >>> 0) {
     HEAP32[$4_1 + 8 >> 2] = $2_1;
     if ((FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $4_1 + 144 | 0, $2_1, ($3_1 - $2_1 | 0) > 32 ? $2_1 + 32 | 0 : $3_1, $4_1 + 8 | 0, $4_1 + 16 | 0, $5_1, $4_1 + 12 | 0) | 0) == 2) {
      break label$1
     }
     $1_1 = $4_1 + 16 | 0;
     if (HEAP32[$4_1 + 8 >> 2] == ($2_1 | 0)) {
      break label$1
     }
     while (1) if ($1_1 >>> 0 >= HEAPU32[$4_1 + 12 >> 2]) {
      $2_1 = HEAP32[$4_1 + 8 >> 2];
      continue label$2;
     } else {
      HEAP32[$4_1 + 4 >> 2] = HEAP32[$1_1 >> 2];
      $2535(HEAP32[$4_1 + 152 >> 2], HEAP32[$4_1 + 4 >> 2]);
      $1_1 = $1_1 + 4 | 0;
      continue;
     };
    }
    break;
   };
   global$0 = $4_1 + 160 | 0;
   return;
  }
  $1643();
  abort();
 }
 
 function $2162($0) {
  $2166($0);
  HEAP32[$0 >> 2] = 12496;
 }
 
 function $2164($0) {
  $0 = $0 | 0;
  HEAP32[$0 >> 2] = 11576;
  if (HEAP32[$0 + 8 >> 2] != ($1904() | 0)) {
   $1823(HEAP32[$0 + 8 >> 2])
  }
  return $0 | 0;
 }
 
 function $2165() {
  var $0 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $2166(24688);
  HEAP32[6172] = 11504;
  $2226();
  $2227();
  $2228(28);
  $3(24864, 11493);
  $0 = $133(24704);
  $2229(24704);
  $2230(24704, $0);
  $2166(24368);
  HEAP32[6092] = 13096;
  $2232(24368, $2231(22908));
  $2166(24376);
  HEAP32[6094] = 13128;
  $2232(24376, $2231(22916));
  $2235();
  $2232(24384, $2231(23112));
  $2166(24400);
  HEAP32[6100] = 12084;
  $2232(24400, $2231(23104));
  $2166(24408);
  HEAP32[6102] = 12232;
  $2232(24408, $2231(23120));
  $2166(24416);
  HEAP32[6104] = 11576;
  (wasm2js_i32$0 = 24424, wasm2js_i32$1 = $1904()), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  $2232(24416, $2231(23128));
  $2166(24432);
  HEAP32[6108] = 12380;
  $2232(24432, $2231(23136));
  $2162(24440);
  $2232(24440, $2231(23144));
  $2166(24448);
  HEAP16[12228] = 11310;
  HEAP32[6112] = 11624;
  $189(24460);
  $2232(24448, $2231(23152));
  $2166(24480);
  HEAP32[6122] = 46;
  HEAP32[6123] = 44;
  HEAP32[6120] = 11664;
  $189(24496);
  $2232(24480, $2231(23160));
  $2166(24512);
  HEAP32[6128] = 13160;
  $2232(24512, $2231(22924));
  $2166(24520);
  HEAP32[6130] = 13404;
  $2232(24520, $2231(22932));
  $2166(24528);
  HEAP32[6132] = 13616;
  $2232(24528, $2231(22940));
  $2166(24536);
  HEAP32[6134] = 13848;
  $2232(24536, $2231(22948));
  $2166(24544);
  HEAP32[6136] = 14832;
  $2232(24544, $2231(22988));
  $2166(24552);
  HEAP32[6138] = 14980;
  $2232(24552, $2231(22996));
  $2166(24560);
  HEAP32[6140] = 15096;
  $2232(24560, $2231(23004));
  $2166(24568);
  HEAP32[6142] = 15212;
  $2232(24568, $2231(23012));
  $2166(24576);
  HEAP32[6144] = 15328;
  $2232(24576, $2231(23020));
  $2166(24584);
  HEAP32[6146] = 15492;
  $2232(24584, $2231(23028));
  $2166(24592);
  HEAP32[6148] = 15656;
  $2232(24592, $2231(23036));
  $2166(24600);
  HEAP32[6150] = 15820;
  $2232(24600, $2231(23044));
  $2166(24608);
  HEAP32[6154] = 17372;
  HEAP32[6152] = 14048;
  HEAP32[6154] = 14096;
  $2232(24608, $2231(22956));
  $2166(24624);
  HEAP32[6158] = 17408;
  HEAP32[6156] = 14312;
  HEAP32[6158] = 14360;
  $2232(24624, $2231(22964));
  $2166(24640);
  $2432(24648);
  HEAP32[6160] = 14548;
  $2232(24640, $2231(22972));
  $2166(24656);
  $2432(24664);
  HEAP32[6164] = 14704;
  $2232(24656, $2231(22980));
  $2166(24672);
  HEAP32[6168] = 15984;
  $2232(24672, $2231(23052));
  $2166(24680);
  HEAP32[6170] = 16104;
  $2232(24680, $2231(23060));
 }
 
 function $2166($0) {
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$0 >> 2] = 17444;
  HEAP32[$0 >> 2] = 12028;
 }
 
 function $2226() {
  var $0 = 0;
  $0 = global$0 - 16 | 0;
  global$0 = $0;
  HEAP32[6176] = 0;
  HEAP32[6177] = 0;
  HEAP32[$0 + 12 >> 2] = 0;
  $170(24720, $0 + 12 | 0);
  HEAP8[24848] = 0;
  global$0 = $0 + 16 | 0;
 }
 
 function $2227() {
  var $0 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  if ($2412() >>> 0 < 28) {
   $2538();
   abort();
  }
  $0 = $2414($2413(24704), 28);
  HEAP32[6176] = $0;
  HEAP32[6177] = $0;
  (wasm2js_i32$0 = $531(24704), wasm2js_i32$1 = $0 + 112 | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  $2416(0);
 }
 
 function $2228($0) {
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $0 = $2417($1_1, $0);
  $2_1 = HEAP32[$0 + 4 >> 2];
  while (1) {
   if (($2_1 | 0) != HEAP32[$0 + 8 >> 2]) {
    $2413(24704);
    $1198(HEAP32[$0 + 4 >> 2]);
    $2_1 = HEAP32[$0 + 4 >> 2] + 4 | 0;
    HEAP32[$0 + 4 >> 2] = $2_1;
    continue;
   }
   break;
  };
  $406($0);
  global$0 = $1_1 + 16 | 0;
 }
 
 function $2229($0) {
  $2428($0, HEAP32[$0 >> 2]);
 }
 
 function $2230($0, $1_1) {
  $2425($0);
  $133($0);
 }
 
 function $2231($0) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  $1_1 = global$0 - 32 | 0;
  global$0 = $1_1;
  HEAP32[$1_1 + 12 >> 2] = 0;
  HEAP32[$1_1 + 8 >> 2] = 141;
  $2_1 = HEAP32[$1_1 + 12 >> 2];
  HEAP32[$1_1 >> 2] = HEAP32[$1_1 + 8 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $2_1;
  $3_1 = HEAP32[$1_1 + 4 >> 2];
  $2_1 = $1_1 + 16 | 0;
  HEAP32[$2_1 + 4 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$2_1 + 8 >> 2] = $3_1;
  HEAP32[$2_1 >> 2] = $0;
  $2289($0, $2_1);
  global$0 = $1_1 + 32 | 0;
  return HEAP32[$0 + 4 >> 2] + -1 | 0;
 }
 
 function $2232($0, $1_1) {
  var $2_1 = 0, $3_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $2261($0);
  $0 = $2265($2_1 + 8 | 0, $0);
  if ($133(24704) >>> 0 <= $1_1 >>> 0) {
   $2268($1_1 + 1 | 0)
  }
  if (HEAP32[$530(24704, $1_1) >> 2]) {
   $2269(HEAP32[$530(24704, $1_1) >> 2])
  }
  $3_1 = $300($0);
  (wasm2js_i32$0 = $530(24704, $1_1), wasm2js_i32$1 = $3_1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  $1_1 = HEAP32[$0 >> 2];
  HEAP32[$0 >> 2] = 0;
  if ($1_1) {
   $2269($1_1)
  }
  global$0 = $2_1 + 16 | 0;
 }
 
 function $2235() {
  $2166(24384);
  HEAP8[24396] = 0;
  HEAP32[6098] = 0;
  HEAP32[6096] = 11524;
  HEAP32[6098] = HEAP32[1834];
 }
 
 function $2260() {
  label$1 : {
   if (HEAP8[23084] & 1) {
    break label$1
   }
   if (!$2540(23084)) {
    break label$1
   }
   $2165();
   HEAP32[5769] = 24688;
   HEAP32[5770] = 23076;
   $2546(23084);
  }
  return HEAP32[5770];
 }
 
 function $2261($0) {
  $0 = $0 + 4 | 0;
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
 }
 
 function $2265($0, $1_1) {
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 + 12 >> 2] = $1_1;
  $175($0, $2_1 + 12 | 0);
  global$0 = $2_1 + 16 | 0;
  return $0;
 }
 
 function $2268($0) {
  var $1_1 = 0;
  $1_1 = $133(24704);
  if ($1_1 >>> 0 < $0 >>> 0) {
   $2278($0 - $1_1 | 0);
   return;
  }
  if ($1_1 >>> 0 > $0 >>> 0) {
   $0 = HEAP32[6176] + ($0 << 2) | 0;
   $1_1 = $133(24704);
   $2428(24704, $0);
   $2230(24704, $1_1);
  }
 }
 
 function $2269($0) {
  if (($2274($0 + 4 | 0) | 0) == -1) {
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0)
  }
 }
 
 function $2272($0) {
  $0 = $0 | 0;
  var $1_1 = 0, $2_1 = 0;
  HEAP32[$0 >> 2] = 11504;
  $1_1 = $0 + 16 | 0;
  while (1) {
   if ($2_1 >>> 0 < $133($1_1) >>> 0) {
    if (HEAP32[$530($1_1, $2_1) >> 2]) {
     $2269(HEAP32[$530($1_1, $2_1) >> 2])
    }
    $2_1 = $2_1 + 1 | 0;
    continue;
   }
   break;
  };
  $2512($0 + 176 | 0);
  $2275($1_1);
  if (HEAP32[$1_1 >> 2]) {
   $2229($1_1);
   $2427($2413($1_1), HEAP32[$1_1 >> 2], $2425($1_1));
  }
  return $0 | 0;
 }
 
 function $2274($0) {
  var $1_1 = 0;
  $1_1 = $0;
  $0 = HEAP32[$0 >> 2] + -1 | 0;
  HEAP32[$1_1 >> 2] = $0;
  return $0;
 }
 
 function $2275($0) {
  $2425($0);
  $133($0);
  $2425($0);
 }
 
 function $2277($0) {
  $0 = $0 | 0;
  $2583($2272($0));
 }
 
 function $2278($0) {
  var $1_1 = 0, $2_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  label$1 : {
   if (HEAP32[$531(24704) >> 2] - HEAP32[6177] >> 2 >>> 0 >= $0 >>> 0) {
    $2228($0);
    break label$1;
   }
   $1_1 = $2413(24704);
   $1_1 = $2435($2_1 + 8 | 0, $2433($133(24704) + $0 | 0), $133(24704), $1_1);
   $2436($1_1, $0);
   $2437($1_1);
   $2446($1_1, HEAP32[$1_1 + 4 >> 2]);
   if (HEAP32[$1_1 >> 2]) {
    $2427($416($1_1), HEAP32[$1_1 >> 2], $648($1_1))
   }
  }
  global$0 = $2_1 + 32 | 0;
 }
 
 function $2280($0, $1_1) {
  $0 = $0 + 16 | 0;
  if ($133($0) >>> 0 > $1_1 >>> 0) {
   $0 = HEAP32[$530($0, $1_1) >> 2] != 0
  } else {
   $0 = 0
  }
  return $0;
 }
 
 function $2283($0, $1_1) {
  var $2_1 = 0;
  $2_1 = $0;
  $0 = HEAP32[$1_1 >> 2];
  HEAP32[$2_1 >> 2] = $0;
  $2261($0);
 }
 
 function $2284() {
  label$1 : {
   if (HEAP8[23096] & 1) {
    break label$1
   }
   if (!$2540(23096)) {
    break label$1
   }
   $2283(23088, $2260());
   HEAP32[5773] = 23088;
   $2546(23096);
  }
  return HEAP32[5773];
 }
 
 function $2285($0) {
  var $1_1 = 0;
  $1_1 = $0;
  $0 = HEAP32[$2284() >> 2];
  HEAP32[$1_1 >> 2] = $0;
  $2261($0);
 }
 
 function $2287($0) {
  $0 = $0 | 0;
  var $1_1 = 0;
  $1_1 = $0;
  $0 = HEAP32[5775] + 1 | 0;
  HEAP32[5775] = $0;
  HEAP32[$1_1 + 4 >> 2] = $0;
 }
 
 function $2289($0, $1_1) {
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  if (HEAP32[$0 >> 2] != -1) {
   $3_1 = $2_1 + 8 | 0;
   $431($3_1, $1_1);
   $431($2_1, $3_1);
   $2492($0, $2_1);
  }
  global$0 = $2_1 + 16 | 0;
 }
 
 function $2291($0) {
  $0 = $0 | 0;
  if ($0) {
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0)
  }
 }
 
 function $2293($0) {
  $0 = $0 | 0;
  $2451(HEAP32[HEAP32[$0 >> 2] >> 2]);
 }
 
 function $2296($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return ($2_1 >>> 0 <= 127 ? (HEAPU16[HEAP32[1834] + ($2_1 << 1) >> 1] & $1_1) != 0 : 0) | 0;
 }
 
 function $2298($0, $1_1, $2_1, $3_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  while (1) {
   if (($1_1 | 0) != ($2_1 | 0)) {
    HEAP16[$3_1 >> 1] = HEAPU32[$1_1 >> 2] <= 127 ? HEAPU16[HEAP32[1834] + (HEAP32[$1_1 >> 2] << 1) >> 1] : 0;
    $3_1 = $3_1 + 2 | 0;
    $1_1 = $1_1 + 4 | 0;
    continue;
   }
   break;
  };
  return $2_1 | 0;
 }
 
 function $2299($0, $1_1, $2_1, $3_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  while (1) {
   label$2 : {
    if (($2_1 | 0) != ($3_1 | 0)) {
     if (!(HEAPU16[HEAP32[1834] + (HEAP32[$2_1 >> 2] << 1) >> 1] & $1_1) | HEAPU32[$2_1 >> 2] > 127) {
      break label$2
     }
    } else {
     $2_1 = $3_1
    }
    return $2_1 | 0;
   }
   $2_1 = $2_1 + 4 | 0;
   continue;
  };
 }
 
 function $2300($0, $1_1, $2_1, $3_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  label$1 : {
   while (1) {
    if (($2_1 | 0) == ($3_1 | 0)) {
     break label$1
    }
    if (!(!(HEAPU16[HEAP32[1834] + (HEAP32[$2_1 >> 2] << 1) >> 1] & $1_1) | HEAPU32[$2_1 >> 2] > 127)) {
     $2_1 = $2_1 + 4 | 0;
     continue;
    }
    break;
   };
   $3_1 = $2_1;
  }
  return $3_1 | 0;
 }
 
 function $2301($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  return ($1_1 >>> 0 <= 127 ? HEAP32[HEAP32[2028] + ($1_1 << 2) >> 2] : $1_1) | 0;
 }
 
 function $2303($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  while (1) {
   if (($1_1 | 0) != ($2_1 | 0)) {
    $3_1 = $1_1;
    $0 = HEAP32[$1_1 >> 2];
    if ($0 >>> 0 <= 127) {
     $0 = HEAP32[HEAP32[2028] + (HEAP32[$1_1 >> 2] << 2) >> 2]
    }
    HEAP32[$3_1 >> 2] = $0;
    $1_1 = $1_1 + 4 | 0;
    continue;
   }
   break;
  };
  return $2_1 | 0;
 }
 
 function $2304($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  return ($1_1 >>> 0 <= 127 ? HEAP32[HEAP32[2416] + ($1_1 << 2) >> 2] : $1_1) | 0;
 }
 
 function $2306($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  while (1) {
   if (($1_1 | 0) != ($2_1 | 0)) {
    $3_1 = $1_1;
    $0 = HEAP32[$1_1 >> 2];
    if ($0 >>> 0 <= 127) {
     $0 = HEAP32[HEAP32[2416] + (HEAP32[$1_1 >> 2] << 2) >> 2]
    }
    HEAP32[$3_1 >> 2] = $0;
    $1_1 = $1_1 + 4 | 0;
    continue;
   }
   break;
  };
  return $2_1 | 0;
 }
 
 function $2307($0, $1_1, $2_1, $3_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  while (1) {
   if (($1_1 | 0) != ($2_1 | 0)) {
    HEAP32[$3_1 >> 2] = HEAP8[$1_1 | 0];
    $3_1 = $3_1 + 4 | 0;
    $1_1 = $1_1 + 1 | 0;
    continue;
   }
   break;
  };
  return $2_1 | 0;
 }
 
 function $2308($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return ($1_1 >>> 0 < 128 ? $1_1 : $2_1) << 24 >> 24;
 }
 
 function $2309($0, $1_1, $2_1, $3_1, $4_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  while (1) {
   if (($1_1 | 0) != ($2_1 | 0)) {
    $0 = HEAP32[$1_1 >> 2];
    HEAP8[$4_1 | 0] = $0 >>> 0 < 128 ? $0 : $3_1;
    $4_1 = $4_1 + 1 | 0;
    $1_1 = $1_1 + 4 | 0;
    continue;
   }
   break;
  };
  return $2_1 | 0;
 }
 
 function $2310($0) {
  $0 = $0 | 0;
  var $1_1 = 0;
  HEAP32[$0 >> 2] = 11524;
  $1_1 = HEAP32[$0 + 8 >> 2];
  if (!(!$1_1 | !HEAPU8[$0 + 12 | 0])) {
   $2583($1_1)
  }
  return $0 | 0;
 }
 
 function $2311($0) {
  $0 = $0 | 0;
  $2583($2310($0));
 }
 
 function $2312($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  return (($1_1 | 0) >= 0 ? HEAP32[HEAP32[2028] + (($1_1 & 255) << 2) >> 2] : $1_1) << 24 >> 24;
 }
 
 function $2313($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  while (1) {
   if (($1_1 | 0) != ($2_1 | 0)) {
    $3_1 = $1_1;
    $0 = HEAP8[$1_1 | 0];
    if (($0 | 0) >= 0) {
     $0 = HEAP32[HEAP32[2028] + (HEAP8[$1_1 | 0] << 2) >> 2]
    }
    HEAP8[$3_1 | 0] = $0;
    $1_1 = $1_1 + 1 | 0;
    continue;
   }
   break;
  };
  return $2_1 | 0;
 }
 
 function $2314($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  return (($1_1 | 0) >= 0 ? HEAP32[HEAP32[2416] + (($1_1 & 255) << 2) >> 2] : $1_1) << 24 >> 24;
 }
 
 function $2315($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  while (1) {
   if (($1_1 | 0) != ($2_1 | 0)) {
    $3_1 = $1_1;
    $0 = HEAP8[$1_1 | 0];
    if (($0 | 0) >= 0) {
     $0 = HEAP32[HEAP32[2416] + (HEAP8[$1_1 | 0] << 2) >> 2]
    }
    HEAP8[$3_1 | 0] = $0;
    $1_1 = $1_1 + 1 | 0;
    continue;
   }
   break;
  };
  return $2_1 | 0;
 }
 
 function $2316($0, $1_1, $2_1, $3_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  while (1) {
   if (($1_1 | 0) != ($2_1 | 0)) {
    HEAP8[$3_1 | 0] = HEAPU8[$1_1 | 0];
    $3_1 = $3_1 + 1 | 0;
    $1_1 = $1_1 + 1 | 0;
    continue;
   }
   break;
  };
  return $2_1 | 0;
 }
 
 function $2317($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return (($1_1 | 0) > -1 ? $1_1 : $2_1) | 0;
 }
 
 function $2318($0, $1_1, $2_1, $3_1, $4_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  while (1) {
   if (($1_1 | 0) != ($2_1 | 0)) {
    $0 = HEAP8[$1_1 | 0];
    HEAP8[$4_1 | 0] = ($0 | 0) > -1 ? $0 : $3_1;
    $4_1 = $4_1 + 1 | 0;
    $1_1 = $1_1 + 1 | 0;
    continue;
   }
   break;
  };
  return $2_1 | 0;
 }
 
 function $2319($0, $1_1, $2_1, $3_1, $4_1, $5_1, $6, $7) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  HEAP32[$4_1 >> 2] = $2_1;
  HEAP32[$7 >> 2] = $5_1;
  return 3;
 }
 
 function $2320($0, $1_1, $2_1, $3_1, $4_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  HEAP32[$4_1 >> 2] = $2_1;
  return 3;
 }
 
 function $2321($0) {
  $0 = $0 | 0;
  return 1;
 }
 
 function $2322($0, $1_1, $2_1, $3_1, $4_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $0 = global$0 - 16 | 0;
  global$0 = $0;
  HEAP32[$0 + 12 >> 2] = $4_1;
  HEAP32[$0 + 8 >> 2] = $3_1 - $2_1;
  $1_1 = HEAP32[$124($0 + 12 | 0, $0 + 8 | 0) >> 2];
  global$0 = $0 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $2323($0) {
  $0 = $0 | 0;
  $2583($2164($0));
 }
 
 function $2324($0, $1_1, $2_1, $3_1, $4_1, $5_1, $6, $7) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  var $8 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0;
  $10_1 = global$0 - 16 | 0;
  global$0 = $10_1;
  $8 = $2_1;
  while (1) {
   label$2 : {
    if (($3_1 | 0) == ($8 | 0)) {
     $8 = $3_1;
     break label$2;
    }
    if (!HEAP32[$8 >> 2]) {
     break label$2
    }
    $8 = $8 + 4 | 0;
    continue;
   }
   break;
  };
  HEAP32[$7 >> 2] = $5_1;
  HEAP32[$4_1 >> 2] = $2_1;
  while (1) {
   label$5 : {
    label$6 : {
     if (!(($5_1 | 0) == ($6 | 0) | ($2_1 | 0) == ($3_1 | 0))) {
      $9_1 = HEAP32[$1_1 + 4 >> 2];
      HEAP32[$10_1 + 8 >> 2] = HEAP32[$1_1 >> 2];
      HEAP32[$10_1 + 12 >> 2] = $9_1;
      $9_1 = 1;
      label$8 : {
       label$9 : {
        label$10 : {
         label$11 : {
          label$12 : {
           $11_1 = $2325($5_1, $4_1, $8 - $2_1 >> 2, $6 - $5_1 | 0, HEAP32[$0 + 8 >> 2]);
           switch ($11_1 + 1 | 0) {
           case 0:
            break label$12;
           case 1:
            break label$6;
           default:
            break label$11;
           };
          }
          HEAP32[$7 >> 2] = $5_1;
          while (1) {
           label$14 : {
            if (HEAP32[$4_1 >> 2] == ($2_1 | 0)) {
             break label$14
            }
            $1_1 = $2326($5_1, HEAP32[$2_1 >> 2], HEAP32[$0 + 8 >> 2]);
            if (($1_1 | 0) == -1) {
             break label$14
            }
            $5_1 = $1_1 + HEAP32[$7 >> 2] | 0;
            HEAP32[$7 >> 2] = $5_1;
            $2_1 = $2_1 + 4 | 0;
            continue;
           }
           break;
          };
          HEAP32[$4_1 >> 2] = $2_1;
          break label$10;
         }
         $5_1 = HEAP32[$7 >> 2] + $11_1 | 0;
         HEAP32[$7 >> 2] = $5_1;
         if (($5_1 | 0) == ($6 | 0)) {
          break label$8
         }
         if (($3_1 | 0) == ($8 | 0)) {
          $2_1 = HEAP32[$4_1 >> 2];
          $8 = $3_1;
          continue;
         }
         $8 = $2326($10_1 + 4 | 0, 0, HEAP32[$0 + 8 >> 2]);
         if (($8 | 0) != -1) {
          break label$9
         }
        }
        $9_1 = 2;
        break label$6;
       }
       $2_1 = $10_1 + 4 | 0;
       if ($8 >>> 0 > $6 - HEAP32[$7 >> 2] >>> 0) {
        break label$6
       }
       while (1) {
        if ($8) {
         $5_1 = HEAPU8[$2_1 | 0];
         $9_1 = HEAP32[$7 >> 2];
         HEAP32[$7 >> 2] = $9_1 + 1;
         HEAP8[$9_1 | 0] = $5_1;
         $8 = $8 + -1 | 0;
         $2_1 = $2_1 + 1 | 0;
         continue;
        }
        break;
       };
       $2_1 = HEAP32[$4_1 >> 2] + 4 | 0;
       HEAP32[$4_1 >> 2] = $2_1;
       $8 = $2_1;
       while (1) {
        if (($3_1 | 0) == ($8 | 0)) {
         $8 = $3_1;
         break label$5;
        }
        if (!HEAP32[$8 >> 2]) {
         break label$5
        }
        $8 = $8 + 4 | 0;
        continue;
       };
      }
      $2_1 = HEAP32[$4_1 >> 2];
     }
     $9_1 = ($2_1 | 0) != ($3_1 | 0);
    }
    global$0 = $10_1 + 16 | 0;
    return $9_1 | 0;
   }
   $5_1 = HEAP32[$7 >> 2];
   continue;
  };
 }
 
 function $2325($0, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[$5_1 + 12 >> 2] = $4_1;
  $4_1 = $1907($5_1 + 8 | 0, $5_1 + 12 | 0);
  $0 = $1829($0, $1_1, $2_1, $3_1);
  $1908($4_1);
  global$0 = $5_1 + 16 | 0;
  return $0;
 }
 
 function $2326($0, $1_1, $2_1) {
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[$3_1 + 12 >> 2] = $2_1;
  $2_1 = $1907($3_1 + 8 | 0, $3_1 + 12 | 0);
  $0 = $1798($0, $1_1);
  $1908($2_1);
  global$0 = $3_1 + 16 | 0;
  return $0;
 }
 
 function $2327($0, $1_1, $2_1, $3_1, $4_1, $5_1, $6, $7) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  var $8 = 0, $9_1 = 0, $10_1 = 0;
  $9_1 = global$0 - 16 | 0;
  global$0 = $9_1;
  $8 = $2_1;
  while (1) {
   label$2 : {
    if (($3_1 | 0) == ($8 | 0)) {
     $8 = $3_1;
     break label$2;
    }
    if (!HEAPU8[$8 | 0]) {
     break label$2
    }
    $8 = $8 + 1 | 0;
    continue;
   }
   break;
  };
  HEAP32[$7 >> 2] = $5_1;
  HEAP32[$4_1 >> 2] = $2_1;
  while (1) {
   label$5 : {
    label$6 : {
     label$7 : {
      if (($5_1 | 0) == ($6 | 0) | ($2_1 | 0) == ($3_1 | 0)) {
       break label$7
      }
      $10_1 = HEAP32[$1_1 + 4 >> 2];
      HEAP32[$9_1 + 8 >> 2] = HEAP32[$1_1 >> 2];
      HEAP32[$9_1 + 12 >> 2] = $10_1;
      label$8 : {
       label$9 : {
        label$10 : {
         $10_1 = $2328($5_1, $4_1, $8 - $2_1 | 0, $6 - $5_1 >> 2, $1_1, HEAP32[$0 + 8 >> 2]);
         label$11 : {
          if (($10_1 | 0) == -1) {
           while (1) {
            label$14 : {
             HEAP32[$7 >> 2] = $5_1;
             if (HEAP32[$4_1 >> 2] == ($2_1 | 0)) {
              break label$14
             }
             $6 = 1;
             label$15 : {
              label$16 : {
               label$17 : {
                $1_1 = $2329($5_1, $2_1, $8 - $2_1 | 0, $9_1 + 8 | 0, HEAP32[$0 + 8 >> 2]);
                switch ($1_1 + 2 | 0) {
                case 2:
                 break label$15;
                case 1:
                 break label$17;
                case 0:
                 break label$9;
                default:
                 break label$16;
                };
               }
               HEAP32[$4_1 >> 2] = $2_1;
               break label$11;
              }
              $6 = $1_1;
             }
             $2_1 = $2_1 + $6 | 0;
             $5_1 = HEAP32[$7 >> 2] + 4 | 0;
             continue;
            }
            break;
           };
           HEAP32[$4_1 >> 2] = $2_1;
           break label$7;
          }
          $5_1 = HEAP32[$7 >> 2] + ($10_1 << 2) | 0;
          HEAP32[$7 >> 2] = $5_1;
          if (($5_1 | 0) == ($6 | 0)) {
           break label$8
          }
          $2_1 = HEAP32[$4_1 >> 2];
          if (($3_1 | 0) == ($8 | 0)) {
           $8 = $3_1;
           continue;
          }
          if (!$2329($5_1, $2_1, 1, $1_1, HEAP32[$0 + 8 >> 2])) {
           break label$10
          }
         }
         $0 = 2;
         break label$6;
        }
        HEAP32[$7 >> 2] = HEAP32[$7 >> 2] + 4;
        $2_1 = HEAP32[$4_1 >> 2] + 1 | 0;
        HEAP32[$4_1 >> 2] = $2_1;
        $8 = $2_1;
        while (1) {
         if (($3_1 | 0) == ($8 | 0)) {
          $8 = $3_1;
          break label$5;
         }
         if (!HEAPU8[$8 | 0]) {
          break label$5
         }
         $8 = $8 + 1 | 0;
         continue;
        };
       }
       HEAP32[$4_1 >> 2] = $2_1;
       $0 = 1;
       break label$6;
      }
      $2_1 = HEAP32[$4_1 >> 2];
     }
     $0 = ($2_1 | 0) != ($3_1 | 0);
    }
    global$0 = $9_1 + 16 | 0;
    return $0 | 0;
   }
   $5_1 = HEAP32[$7 >> 2];
   continue;
  };
 }
 
 function $2328($0, $1_1, $2_1, $3_1, $4_1, $5_1) {
  var $6 = 0;
  $6 = global$0 - 16 | 0;
  global$0 = $6;
  HEAP32[$6 + 12 >> 2] = $5_1;
  $5_1 = $1907($6 + 8 | 0, $6 + 12 | 0);
  $0 = $1831($0, $1_1, $2_1, $3_1, $4_1);
  $1908($5_1);
  global$0 = $6 + 16 | 0;
  return $0;
 }
 
 function $2329($0, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[$5_1 + 12 >> 2] = $4_1;
  $4_1 = $1907($5_1 + 8 | 0, $5_1 + 12 | 0);
  $0 = $1780($0, $1_1, $2_1, $3_1);
  $1908($4_1);
  global$0 = $5_1 + 16 | 0;
  return $0;
 }
 
 function $2330($0, $1_1, $2_1, $3_1, $4_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[$4_1 >> 2] = $2_1;
  $0 = $2326($5_1 + 12 | 0, 0, HEAP32[$0 + 8 >> 2]);
  $2_1 = 2;
  label$1 : {
   if ($0 + 1 >>> 0 < 2) {
    break label$1
   }
   $1_1 = $0 + -1 | 0;
   $2_1 = 1;
   if ($1_1 >>> 0 > $3_1 - HEAP32[$4_1 >> 2] >>> 0) {
    break label$1
   }
   $2_1 = $5_1 + 12 | 0;
   while (1) {
    if ($1_1) {
     $0 = HEAPU8[$2_1 | 0];
     $3_1 = HEAP32[$4_1 >> 2];
     HEAP32[$4_1 >> 2] = $3_1 + 1;
     HEAP8[$3_1 | 0] = $0;
     $1_1 = $1_1 + -1 | 0;
     $2_1 = $2_1 + 1 | 0;
     continue;
    }
    break;
   };
   $2_1 = 0;
  }
  global$0 = $5_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $2331($0) {
  $0 = $0 | 0;
  label$1 : {
   if ($2332(HEAP32[$0 + 8 >> 2])) {
    $0 = -1
   } else {
    $0 = HEAP32[$0 + 8 >> 2];
    if ($0) {
     break label$1
    }
    $0 = 1;
   }
   return $0 | 0;
  }
  return ($2333($0) | 0) == 1 | 0;
 }
 
 function $2332($0) {
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[$1_1 + 12 >> 2] = $0;
  $0 = $1907($1_1 + 8 | 0, $1_1 + 12 | 0);
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  global$0 = $2_1 + 16 | 0;
  $2_1 = 0;
  $1908($0);
  global$0 = $1_1 + 16 | 0;
  return $2_1;
 }
 
 function $2333($0) {
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[$1_1 + 12 >> 2] = $0;
  $0 = $1907($1_1 + 8 | 0, $1_1 + 12 | 0);
  $2_1 = HEAP32[HEAP32[4694] >> 2] ? 4 : 1;
  $1908($0);
  global$0 = $1_1 + 16 | 0;
  return $2_1;
 }
 
 function $2334($0, $1_1, $2_1, $3_1, $4_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6 = 0, $7 = 0, $8 = 0;
  while (1) {
   label$2 : {
    if (($2_1 | 0) == ($3_1 | 0) | $6 >>> 0 >= $4_1 >>> 0) {
     break label$2
    }
    $5_1 = 1;
    label$3 : {
     label$4 : {
      $7 = $2335($2_1, $3_1 - $2_1 | 0, $1_1, HEAP32[$0 + 8 >> 2]);
      switch ($7 + 2 | 0) {
      case 0:
      case 1:
       break label$2;
      case 2:
       break label$3;
      default:
       break label$4;
      };
     }
     $5_1 = $7;
    }
    $6 = $6 + 1 | 0;
    $8 = $8 + $5_1 | 0;
    $2_1 = $2_1 + $5_1 | 0;
    continue;
   }
   break;
  };
  return $8 | 0;
 }
 
 function $2335($0, $1_1, $2_1, $3_1) {
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[$4_1 + 12 >> 2] = $3_1;
  $3_1 = $1907($4_1 + 8 | 0, $4_1 + 12 | 0);
  $0 = $1780(0, $0, $1_1, $2_1 ? $2_1 : 22904);
  $1908($3_1);
  global$0 = $4_1 + 16 | 0;
  return $0;
 }
 
 function $2336($0) {
  $0 = $0 | 0;
  $0 = HEAP32[$0 + 8 >> 2];
  if (!$0) {
   return 1
  }
  return $2333($0) | 0;
 }
 
 function $2337($0, $1_1, $2_1, $3_1, $4_1, $5_1, $6, $7) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  $0 = global$0 - 16 | 0;
  global$0 = $0;
  HEAP32[$0 + 12 >> 2] = $2_1;
  HEAP32[$0 + 8 >> 2] = $5_1;
  $1_1 = $2338($2_1, $3_1, $0 + 12 | 0, $5_1, $6, $0 + 8 | 0);
  HEAP32[$4_1 >> 2] = HEAP32[$0 + 12 >> 2];
  HEAP32[$7 >> 2] = HEAP32[$0 + 8 >> 2];
  global$0 = $0 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $2338($0, $1_1, $2_1, $3_1, $4_1, $5_1) {
  var $6 = 0, $7 = 0;
  HEAP32[$2_1 >> 2] = $0;
  HEAP32[$5_1 >> 2] = $3_1;
  $6 = HEAP32[$2_1 >> 2];
  label$1 : {
   label$3 : {
    while (1) {
     if ($6 >>> 0 >= $1_1 >>> 0) {
      $0 = 0;
      break label$1;
     }
     $0 = 2;
     $3_1 = HEAPU16[$6 >> 1];
     if ($3_1 >>> 0 > 1114111) {
      break label$1
     }
     label$6 : {
      label$7 : {
       if ($3_1 >>> 0 <= 127) {
        $0 = 1;
        $6 = HEAP32[$5_1 >> 2];
        if (($4_1 - $6 | 0) < 1) {
         break label$1
        }
        HEAP32[$5_1 >> 2] = $6 + 1;
        HEAP8[$6 | 0] = $3_1;
        break label$7;
       }
       if ($3_1 >>> 0 <= 2047) {
        $0 = HEAP32[$5_1 >> 2];
        if (($4_1 - $0 | 0) < 2) {
         break label$3
        }
        HEAP32[$5_1 >> 2] = $0 + 1;
        HEAP8[$0 | 0] = $3_1 >>> 6 | 192;
        $0 = HEAP32[$5_1 >> 2];
        HEAP32[$5_1 >> 2] = $0 + 1;
        HEAP8[$0 | 0] = $3_1 & 63 | 128;
        break label$7;
       }
       if ($3_1 >>> 0 <= 55295) {
        $0 = HEAP32[$5_1 >> 2];
        if (($4_1 - $0 | 0) < 3) {
         break label$3
        }
        HEAP32[$5_1 >> 2] = $0 + 1;
        HEAP8[$0 | 0] = $3_1 >>> 12 | 224;
        $0 = HEAP32[$5_1 >> 2];
        HEAP32[$5_1 >> 2] = $0 + 1;
        HEAP8[$0 | 0] = $3_1 >>> 6 & 63 | 128;
        $0 = HEAP32[$5_1 >> 2];
        HEAP32[$5_1 >> 2] = $0 + 1;
        HEAP8[$0 | 0] = $3_1 & 63 | 128;
        break label$7;
       }
       if ($3_1 >>> 0 <= 56319) {
        $0 = 1;
        if (($1_1 - $6 | 0) < 4) {
         break label$1
        }
        $7 = HEAPU16[$6 + 2 >> 1];
        if (($7 & 64512) != 56320) {
         break label$6
        }
        if (($4_1 - HEAP32[$5_1 >> 2] | 0) < 4) {
         break label$1
        }
        $0 = $3_1 & 960;
        if (($7 & 1023 | ($3_1 << 10 & 64512 | $0 << 10)) + 65536 >>> 0 > 1114111) {
         break label$6
        }
        HEAP32[$2_1 >> 2] = $6 + 2;
        $6 = HEAP32[$5_1 >> 2];
        HEAP32[$5_1 >> 2] = $6 + 1;
        $0 = ($0 >>> 6 | 0) + 1 | 0;
        HEAP8[$6 | 0] = $0 >>> 2 | 240;
        $6 = HEAP32[$5_1 >> 2];
        HEAP32[$5_1 >> 2] = $6 + 1;
        HEAP8[$6 | 0] = $0 << 4 & 48 | $3_1 >>> 2 & 15 | 128;
        $0 = HEAP32[$5_1 >> 2];
        HEAP32[$5_1 >> 2] = $0 + 1;
        HEAP8[$0 | 0] = $7 >>> 6 & 15 | $3_1 << 4 & 48 | 128;
        $0 = HEAP32[$5_1 >> 2];
        HEAP32[$5_1 >> 2] = $0 + 1;
        HEAP8[$0 | 0] = $7 & 63 | 128;
        break label$7;
       }
       if ($3_1 >>> 0 < 57344) {
        break label$1
       }
       $0 = HEAP32[$5_1 >> 2];
       if (($4_1 - $0 | 0) < 3) {
        break label$3
       }
       HEAP32[$5_1 >> 2] = $0 + 1;
       HEAP8[$0 | 0] = $3_1 >>> 12 | 224;
       $0 = HEAP32[$5_1 >> 2];
       HEAP32[$5_1 >> 2] = $0 + 1;
       HEAP8[$0 | 0] = $3_1 >>> 6 & 63 | 128;
       $0 = HEAP32[$5_1 >> 2];
       HEAP32[$5_1 >> 2] = $0 + 1;
       HEAP8[$0 | 0] = $3_1 & 63 | 128;
      }
      $6 = HEAP32[$2_1 >> 2] + 2 | 0;
      HEAP32[$2_1 >> 2] = $6;
      continue;
     }
     break;
    };
    return 2;
   }
   return 1;
  }
  return $0;
 }
 
 function $2339($0, $1_1, $2_1, $3_1, $4_1, $5_1, $6, $7) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  $0 = global$0 - 16 | 0;
  global$0 = $0;
  HEAP32[$0 + 12 >> 2] = $2_1;
  HEAP32[$0 + 8 >> 2] = $5_1;
  $1_1 = $2340($2_1, $3_1, $0 + 12 | 0, $5_1, $6, $0 + 8 | 0);
  HEAP32[$4_1 >> 2] = HEAP32[$0 + 12 >> 2];
  HEAP32[$7 >> 2] = HEAP32[$0 + 8 >> 2];
  global$0 = $0 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $2340($0, $1_1, $2_1, $3_1, $4_1, $5_1) {
  var $6 = 0, $7 = 0, $8 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0;
  HEAP32[$2_1 >> 2] = $0;
  HEAP32[$5_1 >> 2] = $3_1;
  label$2 : {
   while (1) {
    $0 = HEAP32[$2_1 >> 2];
    if ($0 >>> 0 >= $1_1 >>> 0) {
     $7 = 0;
     break label$2;
    }
    $7 = 1;
    $8 = HEAP32[$5_1 >> 2];
    if ($8 >>> 0 >= $4_1 >>> 0) {
     break label$2
    }
    label$5 : {
     $3_1 = HEAPU8[$0 | 0];
     if ($3_1 >>> 0 > 1114111) {
      break label$5
     }
     $11_1 = $2_1;
     label$6 : {
      if ($3_1 << 24 >> 24 >= 0) {
       HEAP16[$8 >> 1] = $3_1;
       $0 = $0 + 1 | 0;
       break label$6;
      }
      if ($3_1 >>> 0 < 194) {
       break label$5
      }
      if ($3_1 >>> 0 <= 223) {
       if (($1_1 - $0 | 0) < 2) {
        break label$2
       }
       $6 = HEAPU8[$0 + 1 | 0];
       if (($6 & 192) != 128) {
        break label$5
       }
       $7 = 2;
       $3_1 = $6 & 63 | $3_1 << 6 & 1984;
       if ($3_1 >>> 0 > 1114111) {
        break label$2
       }
       HEAP16[$8 >> 1] = $3_1;
       $0 = $0 + 2 | 0;
       break label$6;
      }
      if ($3_1 >>> 0 <= 239) {
       if (($1_1 - $0 | 0) < 3) {
        break label$2
       }
       $9_1 = HEAPU8[$0 + 2 | 0];
       $6 = HEAPU8[$0 + 1 | 0];
       label$10 : {
        label$11 : {
         if (($3_1 | 0) != 237) {
          if (($3_1 | 0) != 224) {
           break label$11
          }
          if (($6 & 224) != 160) {
           break label$5
          }
          break label$10;
         }
         if (($6 & 224) != 128) {
          break label$5
         }
         break label$10;
        }
        if (($6 & 192) != 128) {
         break label$5
        }
       }
       if (($9_1 & 192) != 128) {
        break label$5
       }
       $7 = 2;
       $3_1 = $9_1 & 63 | (($6 & 63) << 6 | $3_1 << 12);
       if (($3_1 & 65535) >>> 0 > 1114111) {
        break label$2
       }
       HEAP16[$8 >> 1] = $3_1;
       $0 = $0 + 3 | 0;
       break label$6;
      }
      if ($3_1 >>> 0 > 244) {
       break label$5
      }
      if (($1_1 - $0 | 0) < 4) {
       break label$2
      }
      $9_1 = HEAPU8[$0 + 2 | 0];
      $6 = HEAPU8[$0 + 1 | 0];
      label$13 : {
       label$14 : {
        switch ($3_1 + -240 | 0) {
        case 0:
         if (($6 + 112 & 255) >>> 0 >= 48) {
          break label$5
         }
         break label$13;
        case 4:
         if (($6 & 240) != 128) {
          break label$5
         }
         break label$13;
        default:
         break label$14;
        };
       }
       if (($6 & 192) != 128) {
        break label$5
       }
      }
      if (($9_1 & 192) != 128) {
       break label$5
      }
      $0 = HEAPU8[$0 + 3 | 0];
      if (($0 & 192) != 128) {
       break label$5
      }
      if (($4_1 - $8 | 0) < 4) {
       break label$2
      }
      $7 = 2;
      $0 = $0 & 63;
      $10_1 = $9_1 << 6;
      $3_1 = $3_1 & 7;
      if (($0 | ($10_1 & 4032 | ($6 << 12 & 258048 | $3_1 << 18))) >>> 0 > 1114111) {
       break label$2
      }
      $7 = $6 << 2;
      HEAP16[$8 >> 1] = ($7 & 192 | $3_1 << 8 | ($9_1 >>> 4 & 3 | $7 & 60)) + 16320 | 55296;
      HEAP32[$5_1 >> 2] = $8 + 2;
      HEAP16[$8 + 2 >> 1] = $0 | $10_1 & 960 | 56320;
      $0 = HEAP32[$2_1 >> 2] + 4 | 0;
     }
     HEAP32[$11_1 >> 2] = $0;
     HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] + 2;
     continue;
    }
    break;
   };
   return 2;
  }
  return $7;
 }
 
 function $2341($0, $1_1, $2_1, $3_1, $4_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  return $2342($2_1, $3_1, $4_1) | 0;
 }
 
 function $2342($0, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6 = 0, $7 = 0, $8 = 0;
  $4_1 = $0;
  while (1) {
   label$3 : {
    if ($6 >>> 0 >= $2_1 >>> 0 | $4_1 >>> 0 >= $1_1 >>> 0) {
     break label$3
    }
    $5_1 = HEAPU8[$4_1 | 0];
    if ($5_1 >>> 0 > 1114111) {
     break label$3
    }
    $3_1 = $4_1 + 1 | 0;
    label$4 : {
     if ($5_1 << 24 >> 24 >= 0) {
      break label$4
     }
     if ($5_1 >>> 0 < 194) {
      break label$3
     }
     if ($5_1 >>> 0 <= 223) {
      if (($1_1 - $4_1 | 0) < 2) {
       break label$3
      }
      $3_1 = HEAPU8[$4_1 + 1 | 0];
      if (($3_1 & 192) != 128 | ($3_1 & 63 | $5_1 << 6 & 1984) >>> 0 > 1114111) {
       break label$3
      }
      $3_1 = $4_1 + 2 | 0;
      break label$4;
     }
     label$6 : {
      label$7 : {
       if ($5_1 >>> 0 <= 239) {
        if (($1_1 - $4_1 | 0) < 3) {
         break label$3
        }
        $7 = HEAPU8[$4_1 + 2 | 0];
        $3_1 = HEAPU8[$4_1 + 1 | 0];
        if (($5_1 | 0) == 237) {
         break label$7
        }
        if (($5_1 | 0) == 224) {
         if (($3_1 & 224) == 160) {
          break label$6
         }
         break label$3;
        }
        if (($3_1 & 192) != 128) {
         break label$3
        }
        break label$6;
       }
       if ($2_1 - $6 >>> 0 < 2 | $5_1 >>> 0 > 244 | ($1_1 - $4_1 | 0) < 4) {
        break label$3
       }
       $7 = HEAPU8[$4_1 + 2 | 0];
       $3_1 = HEAPU8[$4_1 + 1 | 0];
       label$10 : {
        label$11 : {
         switch ($5_1 + -240 | 0) {
         case 0:
          if (($3_1 + 112 & 255) >>> 0 < 48) {
           break label$10
          }
          break label$3;
         case 4:
          if (($3_1 & 240) == 128) {
           break label$10
          }
          break label$3;
         default:
          break label$11;
         };
        }
        if (($3_1 & 192) != 128) {
         break label$3
        }
       }
       if (($7 & 192) != 128) {
        break label$3
       }
       $8 = HEAPU8[$4_1 + 3 | 0];
       if (($8 & 192) != 128 | ($8 & 63 | ($7 << 6 & 4032 | ($5_1 << 18 & 1835008 | ($3_1 & 63) << 12))) >>> 0 > 1114111) {
        break label$3
       }
       $6 = $6 + 1 | 0;
       $3_1 = $4_1 + 4 | 0;
       break label$4;
      }
      if (($3_1 & 224) != 128) {
       break label$3
      }
     }
     if (($7 & 192) != 128 | ($7 & 63 | ($5_1 << 12 & 61440 | ($3_1 & 63) << 6)) >>> 0 > 1114111) {
      break label$3
     }
     $3_1 = $4_1 + 3 | 0;
    }
    $4_1 = $3_1;
    $6 = $6 + 1 | 0;
    continue;
   }
   break;
  };
  return $4_1 - $0 | 0;
 }
 
 function $2343($0) {
  $0 = $0 | 0;
  return 4;
 }
 
 function $2344($0, $1_1, $2_1, $3_1, $4_1, $5_1, $6, $7) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  $0 = global$0 - 16 | 0;
  global$0 = $0;
  HEAP32[$0 + 12 >> 2] = $2_1;
  HEAP32[$0 + 8 >> 2] = $5_1;
  $1_1 = $2345($2_1, $3_1, $0 + 12 | 0, $5_1, $6, $0 + 8 | 0);
  HEAP32[$4_1 >> 2] = HEAP32[$0 + 12 >> 2];
  HEAP32[$7 >> 2] = HEAP32[$0 + 8 >> 2];
  global$0 = $0 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $2345($0, $1_1, $2_1, $3_1, $4_1, $5_1) {
  var $6 = 0;
  HEAP32[$2_1 >> 2] = $0;
  HEAP32[$5_1 >> 2] = $3_1;
  $3_1 = HEAP32[$2_1 >> 2];
  label$1 : {
   while (1) {
    if ($3_1 >>> 0 >= $1_1 >>> 0) {
     $6 = 0;
     break label$1;
    }
    $6 = 2;
    $0 = HEAP32[$3_1 >> 2];
    if ($0 >>> 0 > 1114111 | ($0 & -2048) == 55296) {
     break label$1
    }
    label$5 : {
     label$6 : {
      if ($0 >>> 0 <= 127) {
       $6 = 1;
       $3_1 = HEAP32[$5_1 >> 2];
       if (($4_1 - $3_1 | 0) < 1) {
        break label$1
       }
       HEAP32[$5_1 >> 2] = $3_1 + 1;
       HEAP8[$3_1 | 0] = $0;
       break label$6;
      }
      if ($0 >>> 0 <= 2047) {
       $3_1 = HEAP32[$5_1 >> 2];
       if (($4_1 - $3_1 | 0) < 2) {
        break label$5
       }
       HEAP32[$5_1 >> 2] = $3_1 + 1;
       HEAP8[$3_1 | 0] = $0 >>> 6 | 192;
       $3_1 = HEAP32[$5_1 >> 2];
       HEAP32[$5_1 >> 2] = $3_1 + 1;
       HEAP8[$3_1 | 0] = $0 & 63 | 128;
       break label$6;
      }
      $3_1 = HEAP32[$5_1 >> 2];
      $6 = $4_1 - $3_1 | 0;
      if ($0 >>> 0 <= 65535) {
       if (($6 | 0) < 3) {
        break label$5
       }
       HEAP32[$5_1 >> 2] = $3_1 + 1;
       HEAP8[$3_1 | 0] = $0 >>> 12 | 224;
       $3_1 = HEAP32[$5_1 >> 2];
       HEAP32[$5_1 >> 2] = $3_1 + 1;
       HEAP8[$3_1 | 0] = $0 >>> 6 & 63 | 128;
       $3_1 = HEAP32[$5_1 >> 2];
       HEAP32[$5_1 >> 2] = $3_1 + 1;
       HEAP8[$3_1 | 0] = $0 & 63 | 128;
       break label$6;
      }
      if (($6 | 0) < 4) {
       break label$5
      }
      HEAP32[$5_1 >> 2] = $3_1 + 1;
      HEAP8[$3_1 | 0] = $0 >>> 18 | 240;
      $3_1 = HEAP32[$5_1 >> 2];
      HEAP32[$5_1 >> 2] = $3_1 + 1;
      HEAP8[$3_1 | 0] = $0 >>> 12 & 63 | 128;
      $3_1 = HEAP32[$5_1 >> 2];
      HEAP32[$5_1 >> 2] = $3_1 + 1;
      HEAP8[$3_1 | 0] = $0 >>> 6 & 63 | 128;
      $3_1 = HEAP32[$5_1 >> 2];
      HEAP32[$5_1 >> 2] = $3_1 + 1;
      HEAP8[$3_1 | 0] = $0 & 63 | 128;
     }
     $3_1 = HEAP32[$2_1 >> 2] + 4 | 0;
     HEAP32[$2_1 >> 2] = $3_1;
     continue;
    }
    break;
   };
   return 1;
  }
  return $6;
 }
 
 function $2346($0, $1_1, $2_1, $3_1, $4_1, $5_1, $6, $7) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  $0 = global$0 - 16 | 0;
  global$0 = $0;
  HEAP32[$0 + 12 >> 2] = $2_1;
  HEAP32[$0 + 8 >> 2] = $5_1;
  $1_1 = $2347($2_1, $3_1, $0 + 12 | 0, $5_1, $6, $0 + 8 | 0);
  HEAP32[$4_1 >> 2] = HEAP32[$0 + 12 >> 2];
  HEAP32[$7 >> 2] = HEAP32[$0 + 8 >> 2];
  global$0 = $0 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $2347($0, $1_1, $2_1, $3_1, $4_1, $5_1) {
  var $6 = 0, $7 = 0, $8 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0;
  HEAP32[$2_1 >> 2] = $0;
  HEAP32[$5_1 >> 2] = $3_1;
  while (1) {
   $6 = HEAP32[$2_1 >> 2];
   if ($6 >>> 0 >= $1_1 >>> 0) {
    return 0
   }
   $9_1 = 1;
   label$4 : {
    label$5 : {
     $10_1 = HEAP32[$5_1 >> 2];
     label$6 : {
      if ($10_1 >>> 0 >= $4_1 >>> 0) {
       break label$6
      }
      $0 = HEAP8[$6 | 0];
      $3_1 = $0 & 255;
      if (($0 | 0) >= 0) {
       if ($3_1 >>> 0 > 1114111) {
        break label$4
       }
       $0 = 1;
       break label$5;
      }
      if ($3_1 >>> 0 < 194) {
       break label$4
      }
      if ($3_1 >>> 0 <= 223) {
       if (($1_1 - $6 | 0) < 2) {
        break label$6
       }
       $9_1 = 2;
       $7 = HEAPU8[$6 + 1 | 0];
       if (($7 & 192) != 128) {
        break label$6
       }
       $0 = 2;
       $3_1 = $7 & 63 | $3_1 << 6 & 1984;
       if ($3_1 >>> 0 <= 1114111) {
        break label$5
       }
       break label$6;
      }
      label$9 : {
       if ($3_1 >>> 0 <= 239) {
        if (($1_1 - $6 | 0) < 3) {
         break label$6
        }
        $8 = HEAPU8[$6 + 2 | 0];
        $7 = HEAPU8[$6 + 1 | 0];
        label$11 : {
         label$12 : {
          if (($3_1 | 0) != 237) {
           if (($3_1 | 0) != 224) {
            break label$12
           }
           if (($7 & 224) == 160) {
            break label$11
           }
           break label$4;
          }
          if (($7 & 224) == 128) {
           break label$11
          }
          break label$4;
         }
         if (($7 & 192) != 128) {
          break label$4
         }
        }
        if (($8 & 192) == 128) {
         break label$9
        }
        break label$4;
       }
       if ($3_1 >>> 0 > 244) {
        break label$4
       }
       if (($1_1 - $6 | 0) < 4) {
        break label$6
       }
       $8 = HEAPU8[$6 + 2 | 0];
       $7 = HEAPU8[$6 + 1 | 0];
       label$14 : {
        label$15 : {
         switch ($3_1 + -240 | 0) {
         case 0:
          if (($7 + 112 & 255) >>> 0 >= 48) {
           break label$4
          }
          break label$14;
         case 4:
          if (($7 & 240) != 128) {
           break label$4
          }
          break label$14;
         default:
          break label$15;
         };
        }
        if (($7 & 192) != 128) {
         break label$4
        }
       }
       if (($8 & 192) != 128) {
        break label$4
       }
       $11_1 = HEAPU8[$6 + 3 | 0];
       if (($11_1 & 192) != 128) {
        break label$4
       }
       $0 = 4;
       $9_1 = 2;
       $3_1 = $11_1 & 63 | ($8 << 6 & 4032 | ($3_1 << 18 & 1835008 | ($7 & 63) << 12));
       if ($3_1 >>> 0 > 1114111) {
        break label$6
       }
       break label$5;
      }
      $0 = 3;
      $9_1 = 2;
      $3_1 = $8 & 63 | ($3_1 << 12 & 61440 | ($7 & 63) << 6);
      if ($3_1 >>> 0 <= 1114111) {
       break label$5
      }
     }
     return $9_1;
    }
    HEAP32[$10_1 >> 2] = $3_1;
    HEAP32[$2_1 >> 2] = $0 + $6;
    HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] + 4;
    continue;
   }
   break;
  };
  return 2;
 }
 
 function $2348($0, $1_1, $2_1, $3_1, $4_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  return $2349($2_1, $3_1, $4_1) | 0;
 }
 
 function $2349($0, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6 = 0, $7 = 0, $8 = 0;
  $3_1 = $0;
  while (1) {
   label$3 : {
    if ($7 >>> 0 >= $2_1 >>> 0 | $3_1 >>> 0 >= $1_1 >>> 0) {
     break label$3
    }
    $4_1 = HEAP8[$3_1 | 0];
    $5_1 = $4_1 & 255;
    label$4 : {
     if (($4_1 | 0) >= 0) {
      if ($5_1 >>> 0 > 1114111) {
       break label$3
      }
      $3_1 = $3_1 + 1 | 0;
      break label$4;
     }
     if ($5_1 >>> 0 < 194) {
      break label$3
     }
     if ($5_1 >>> 0 <= 223) {
      if (($1_1 - $3_1 | 0) < 2) {
       break label$3
      }
      $4_1 = HEAPU8[$3_1 + 1 | 0];
      if (($4_1 & 192) != 128 | ($4_1 & 63 | $5_1 << 6 & 1984) >>> 0 > 1114111) {
       break label$3
      }
      $3_1 = $3_1 + 2 | 0;
      break label$4;
     }
     label$7 : {
      label$8 : {
       if ($5_1 >>> 0 <= 239) {
        if (($1_1 - $3_1 | 0) < 3) {
         break label$3
        }
        $6 = HEAPU8[$3_1 + 2 | 0];
        $4_1 = HEAPU8[$3_1 + 1 | 0];
        if (($5_1 | 0) == 237) {
         break label$8
        }
        if (($5_1 | 0) == 224) {
         if (($4_1 & 224) == 160) {
          break label$7
         }
         break label$3;
        }
        if (($4_1 & 192) != 128) {
         break label$3
        }
        break label$7;
       }
       if (($1_1 - $3_1 | 0) < 4 | $5_1 >>> 0 > 244) {
        break label$3
       }
       $6 = HEAPU8[$3_1 + 2 | 0];
       $4_1 = HEAPU8[$3_1 + 1 | 0];
       label$11 : {
        label$12 : {
         switch ($5_1 + -240 | 0) {
         case 0:
          if (($4_1 + 112 & 255) >>> 0 < 48) {
           break label$11
          }
          break label$3;
         case 4:
          if (($4_1 & 240) == 128) {
           break label$11
          }
          break label$3;
         default:
          break label$12;
         };
        }
        if (($4_1 & 192) != 128) {
         break label$3
        }
       }
       if (($6 & 192) != 128) {
        break label$3
       }
       $8 = HEAPU8[$3_1 + 3 | 0];
       if (($8 & 192) != 128 | ($8 & 63 | ($6 << 6 & 4032 | ($5_1 << 18 & 1835008 | ($4_1 & 63) << 12))) >>> 0 > 1114111) {
        break label$3
       }
       $3_1 = $3_1 + 4 | 0;
       break label$4;
      }
      if (($4_1 & 224) != 128) {
       break label$3
      }
     }
     if (($6 & 192) != 128 | ($6 & 63 | ($5_1 << 12 & 61440 | ($4_1 & 63) << 6)) >>> 0 > 1114111) {
      break label$3
     }
     $3_1 = $3_1 + 3 | 0;
    }
    $7 = $7 + 1 | 0;
    continue;
   }
   break;
  };
  return $3_1 - $0 | 0;
 }
 
 function $2350($0) {
  $0 = $0 | 0;
  HEAP32[$0 >> 2] = 11624;
  $2512($0 + 12 | 0);
  return $0 | 0;
 }
 
 function $2351($0) {
  $0 = $0 | 0;
  $2583($2350($0));
 }
 
 function $2352($0) {
  $0 = $0 | 0;
  HEAP32[$0 >> 2] = 11664;
  $2512($0 + 16 | 0);
  return $0 | 0;
 }
 
 function $2353($0) {
  $0 = $0 | 0;
  $2583($2352($0));
 }
 
 function $2354($0) {
  $0 = $0 | 0;
  return HEAP8[$0 + 8 | 0];
 }
 
 function $2355($0) {
  $0 = $0 | 0;
  return HEAP8[$0 + 9 | 0];
 }
 
 function $2356($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2508($0, $1_1 + 12 | 0);
 }
 
 function $2357($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2508($0, $1_1 + 16 | 0);
 }
 
 function $2358($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $3($0, 11696);
 }
 
 function $2359($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2360($0, 11704);
 }
 
 function $2360($0, $1_1) {
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $2527($0, $1_1, $1824($1_1));
  global$0 = $2_1 + 16 | 0;
 }
 
 function $2362($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $3($0, 11724);
 }
 
 function $2363($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2360($0, 11732);
 }
 
 function $2364($0, $1_1) {
  $2514($0, $1_1, $2597($1_1));
 }
 
 function $2366($0) {
  $0 = $0 | 0;
  label$1 : {
   if (HEAP8[23172] & 1) {
    break label$1
   }
   if (!$2540(23172)) {
    break label$1
   }
   $2367();
   HEAP32[5792] = 23344;
   $2546(23172);
  }
  return HEAP32[5792];
 }
 
 function $2367() {
  var $0 = 0;
  label$1 : {
   if (HEAP8[23512] & 1) {
    break label$1
   }
   if (!$2540(23512)) {
    break label$1
   }
   $0 = 23344;
   while (1) {
    $0 = $189($0) + 12 | 0;
    if (($0 | 0) != 23512) {
     continue
    }
    break;
   };
   $2546(23512);
  }
  $2364(23344, 16184);
  $2364(23356, 16191);
  $2364(23368, 16198);
  $2364(23380, 16206);
  $2364(23392, 16216);
  $2364(23404, 16225);
  $2364(23416, 16232);
  $2364(23428, 16241);
  $2364(23440, 16245);
  $2364(23452, 16249);
  $2364(23464, 16253);
  $2364(23476, 16257);
  $2364(23488, 16261);
  $2364(23500, 16265);
 }
 
 function $2368($0) {
  $0 = $0 | 0;
  $0 = 23512;
  while (1) {
   $0 = $2512($0 + -12 | 0);
   if (($0 | 0) != 23344) {
    continue
   }
   break;
  };
 }
 
 function $2369($0) {
  $0 = $0 | 0;
  label$1 : {
   if (HEAP8[23180] & 1) {
    break label$1
   }
   if (!$2540(23180)) {
    break label$1
   }
   $2370();
   HEAP32[5794] = 23520;
   $2546(23180);
  }
  return HEAP32[5794];
 }
 
 function $2370() {
  var $0 = 0;
  label$1 : {
   if (HEAP8[23688] & 1) {
    break label$1
   }
   if (!$2540(23688)) {
    break label$1
   }
   $0 = 23520;
   while (1) {
    $0 = $2063($0) + 12 | 0;
    if (($0 | 0) != 23688) {
     continue
    }
    break;
   };
   $2546(23688);
  }
  $2372(23520, 16272);
  $2372(23532, 16300);
  $2372(23544, 16328);
  $2372(23556, 16360);
  $2372(23568, 16400);
  $2372(23580, 16436);
  $2372(23592, 16464);
  $2372(23604, 16500);
  $2372(23616, 16516);
  $2372(23628, 16532);
  $2372(23640, 16548);
  $2372(23652, 16564);
  $2372(23664, 16580);
  $2372(23676, 16596);
 }
 
 function $2371($0) {
  $0 = $0 | 0;
  $0 = 23688;
  while (1) {
   $0 = $2512($0 + -12 | 0);
   if (($0 | 0) != 23520) {
    continue
   }
   break;
  };
 }
 
 function $2372($0, $1_1) {
  $2529($0, $1_1, $1824($1_1));
 }
 
 function $2373($0) {
  $0 = $0 | 0;
  label$1 : {
   if (HEAP8[23188] & 1) {
    break label$1
   }
   if (!$2540(23188)) {
    break label$1
   }
   $2374();
   HEAP32[5796] = 23696;
   $2546(23188);
  }
  return HEAP32[5796];
 }
 
 function $2374() {
  var $0 = 0;
  label$1 : {
   if (HEAP8[23984] & 1) {
    break label$1
   }
   if (!$2540(23984)) {
    break label$1
   }
   $0 = 23696;
   while (1) {
    $0 = $189($0) + 12 | 0;
    if (($0 | 0) != 23984) {
     continue
    }
    break;
   };
   $2546(23984);
  }
  $2364(23696, 16612);
  $2364(23708, 16620);
  $2364(23720, 16629);
  $2364(23732, 16635);
  $2364(23744, 16641);
  $2364(23756, 16645);
  $2364(23768, 16650);
  $2364(23780, 16655);
  $2364(23792, 16662);
  $2364(23804, 16672);
  $2364(23816, 16680);
  $2364(23828, 16689);
  $2364(23840, 16698);
  $2364(23852, 16702);
  $2364(23864, 16706);
  $2364(23876, 16710);
  $2364(23888, 16641);
  $2364(23900, 16714);
  $2364(23912, 16718);
  $2364(23924, 16722);
  $2364(23936, 16726);
  $2364(23948, 16730);
  $2364(23960, 16734);
  $2364(23972, 16738);
 }
 
 function $2375($0) {
  $0 = $0 | 0;
  $0 = 23984;
  while (1) {
   $0 = $2512($0 + -12 | 0);
   if (($0 | 0) != 23696) {
    continue
   }
   break;
  };
 }
 
 function $2376($0) {
  $0 = $0 | 0;
  label$1 : {
   if (HEAP8[23196] & 1) {
    break label$1
   }
   if (!$2540(23196)) {
    break label$1
   }
   $2377();
   HEAP32[5798] = 24e3;
   $2546(23196);
  }
  return HEAP32[5798];
 }
 
 function $2377() {
  var $0 = 0;
  label$1 : {
   if (HEAP8[24288] & 1) {
    break label$1
   }
   if (!$2540(24288)) {
    break label$1
   }
   $0 = 24e3;
   while (1) {
    $0 = $2063($0) + 12 | 0;
    if (($0 | 0) != 24288) {
     continue
    }
    break;
   };
   $2546(24288);
  }
  $2372(24e3, 16744);
  $2372(24012, 16776);
  $2372(24024, 16812);
  $2372(24036, 16836);
  $2372(24048, 16860);
  $2372(24060, 16876);
  $2372(24072, 16896);
  $2372(24084, 16916);
  $2372(24096, 16944);
  $2372(24108, 16984);
  $2372(24120, 17016);
  $2372(24132, 17052);
  $2372(24144, 17088);
  $2372(24156, 17104);
  $2372(24168, 17120);
  $2372(24180, 17136);
  $2372(24192, 16860);
  $2372(24204, 17152);
  $2372(24216, 17168);
  $2372(24228, 17184);
  $2372(24240, 17200);
  $2372(24252, 17216);
  $2372(24264, 17232);
  $2372(24276, 17248);
 }
 
 function $2378($0) {
  $0 = $0 | 0;
  $0 = 24288;
  while (1) {
   $0 = $2512($0 + -12 | 0);
   if (($0 | 0) != 24e3) {
    continue
   }
   break;
  };
 }
 
 function $2379($0) {
  $0 = $0 | 0;
  label$1 : {
   if (HEAP8[23204] & 1) {
    break label$1
   }
   if (!$2540(23204)) {
    break label$1
   }
   $2380();
   HEAP32[5800] = 24304;
   $2546(23204);
  }
  return HEAP32[5800];
 }
 
 function $2380() {
  var $0 = 0;
  label$1 : {
   if (HEAP8[24328] & 1) {
    break label$1
   }
   if (!$2540(24328)) {
    break label$1
   }
   $0 = 24304;
   while (1) {
    $0 = $189($0) + 12 | 0;
    if (($0 | 0) != 24328) {
     continue
    }
    break;
   };
   $2546(24328);
  }
  $2364(24304, 17264);
  $2364(24316, 17267);
 }
 
 function $2381($0) {
  $0 = $0 | 0;
  $0 = 24328;
  while (1) {
   $0 = $2512($0 + -12 | 0);
   if (($0 | 0) != 24304) {
    continue
   }
   break;
  };
 }
 
 function $2382($0) {
  $0 = $0 | 0;
  label$1 : {
   if (HEAP8[23212] & 1) {
    break label$1
   }
   if (!$2540(23212)) {
    break label$1
   }
   $2383();
   HEAP32[5802] = 24336;
   $2546(23212);
  }
  return HEAP32[5802];
 }
 
 function $2383() {
  var $0 = 0;
  label$1 : {
   if (HEAP8[24360] & 1) {
    break label$1
   }
   if (!$2540(24360)) {
    break label$1
   }
   $0 = 24336;
   while (1) {
    $0 = $2063($0) + 12 | 0;
    if (($0 | 0) != 24360) {
     continue
    }
    break;
   };
   $2546(24360);
  }
  $2372(24336, 17272);
  $2372(24348, 17284);
 }
 
 function $2384($0) {
  $0 = $0 | 0;
  $0 = 24360;
  while (1) {
   $0 = $2512($0 + -12 | 0);
   if (($0 | 0) != 24336) {
    continue
   }
   break;
  };
 }
 
 function $2385($0) {
  $0 = $0 | 0;
  label$1 : {
   if (HEAP8[23228] & 1) {
    break label$1
   }
   if (!$2540(23228)) {
    break label$1
   }
   $3(23216, 11756);
   $2546(23228);
  }
  return 23216;
 }
 
 function $2386($0) {
  $0 = $0 | 0;
  $2512(23216);
 }
 
 function $2387($0) {
  $0 = $0 | 0;
  label$1 : {
   if (HEAP8[23244] & 1) {
    break label$1
   }
   if (!$2540(23244)) {
    break label$1
   }
   $2360(23232, 11768);
   $2546(23244);
  }
  return 23232;
 }
 
 function $2388($0) {
  $0 = $0 | 0;
  $2512(23232);
 }
 
 function $2389($0) {
  $0 = $0 | 0;
  label$1 : {
   if (HEAP8[23260] & 1) {
    break label$1
   }
   if (!$2540(23260)) {
    break label$1
   }
   $3(23248, 11804);
   $2546(23260);
  }
  return 23248;
 }
 
 function $2390($0) {
  $0 = $0 | 0;
  $2512(23248);
 }
 
 function $2391($0) {
  $0 = $0 | 0;
  label$1 : {
   if (HEAP8[23276] & 1) {
    break label$1
   }
   if (!$2540(23276)) {
    break label$1
   }
   $2360(23264, 11816);
   $2546(23276);
  }
  return 23264;
 }
 
 function $2392($0) {
  $0 = $0 | 0;
  $2512(23264);
 }
 
 function $2393($0) {
  $0 = $0 | 0;
  label$1 : {
   if (HEAP8[23292] & 1) {
    break label$1
   }
   if (!$2540(23292)) {
    break label$1
   }
   $3(23280, 11852);
   $2546(23292);
  }
  return 23280;
 }
 
 function $2394($0) {
  $0 = $0 | 0;
  $2512(23280);
 }
 
 function $2395($0) {
  $0 = $0 | 0;
  label$1 : {
   if (HEAP8[23308] & 1) {
    break label$1
   }
   if (!$2540(23308)) {
    break label$1
   }
   $2360(23296, 11876);
   $2546(23308);
  }
  return 23296;
 }
 
 function $2396($0) {
  $0 = $0 | 0;
  $2512(23296);
 }
 
 function $2397($0) {
  $0 = $0 | 0;
  label$1 : {
   if (HEAP8[23324] & 1) {
    break label$1
   }
   if (!$2540(23324)) {
    break label$1
   }
   $3(23312, 11960);
   $2546(23324);
  }
  return 23312;
 }
 
 function $2398($0) {
  $0 = $0 | 0;
  $2512(23312);
 }
 
 function $2399($0) {
  $0 = $0 | 0;
  label$1 : {
   if (HEAP8[23340] & 1) {
    break label$1
   }
   if (!$2540(23340)) {
    break label$1
   }
   $2360(23328, 11972);
   $2546(23340);
  }
  return 23328;
 }
 
 function $2400($0) {
  $0 = $0 | 0;
  $2512(23328);
 }
 
 function $2401($0) {
  if ($207($0)) {
   $0 = $362($0) + -1 | 0
  } else {
   $0 = 1
  }
  return $0;
 }
 
 function $2402($0, $1_1) {
  if ($207($0)) {
   $333($0, $1_1);
   return;
  }
  $324($0, $1_1);
 }
 
 function $2407($0) {
  $0 = $0 | 0;
  $2583($2408($0));
 }
 
 function $2408($0) {
  $0 = $0 | 0;
  var $1_1 = 0;
  $1_1 = $0 + 8 | 0;
  if (HEAP32[$1_1 >> 2] != ($1904() | 0)) {
   $1823(HEAP32[$1_1 >> 2])
  }
  return $0 | 0;
 }
 
 function $2412() {
  var $0 = 0, $1_1 = 0;
  $0 = global$0 - 16 | 0;
  global$0 = $0;
  $2413(24704);
  HEAP32[$0 + 12 >> 2] = 1073741823;
  HEAP32[$0 + 8 >> 2] = 2147483647;
  $1_1 = HEAP32[$124($0 + 12 | 0, $0 + 8 | 0) >> 2];
  global$0 = $0 + 16 | 0;
  return $1_1;
 }
 
 function $2413($0) {
  return $0 + 32 | 0;
 }
 
 function $2414($0, $1_1) {
  return $2422($0, $1_1);
 }
 
 function $2416($0) {
  $2425(24704);
  $2425(24704);
 }
 
 function $2417($0, $1_1) {
  var $2_1 = 0;
  HEAP32[$0 >> 2] = 24704;
  $2_1 = HEAP32[6177];
  HEAP32[$0 + 4 >> 2] = $2_1;
  HEAP32[$0 + 8 >> 2] = $2_1 + ($1_1 << 2);
  return $0;
 }
 
 function $2422($0, $1_1) {
  if (!(HEAPU8[$0 + 112 | 0] | $1_1 >>> 0 > 28)) {
   HEAP8[$0 + 112 | 0] = 1;
   return $0;
  }
  return $2497($1_1 << 2);
 }
 
 function $2425($0) {
  return HEAP32[$531($0) >> 2] - HEAP32[$0 >> 2] >> 2;
 }
 
 function $2427($0, $1_1, $2_1) {
  __inlined_func$2429 : {
   if (($0 | 0) == ($1_1 | 0)) {
    HEAP8[$0 + 112 | 0] = 0;
    break __inlined_func$2429;
   }
   $2583($1_1);
  }
 }
 
 function $2428($0, $1_1) {
  var $2_1 = 0;
  $2_1 = HEAP32[$0 + 4 >> 2];
  while (1) {
   if (($1_1 | 0) != ($2_1 | 0)) {
    $2413($0);
    $2_1 = $2_1 + -4 | 0;
    continue;
   }
   break;
  };
  HEAP32[$0 + 4 >> 2] = $1_1;
 }
 
 function $2432($0) {
  var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  (wasm2js_i32$0 = $0, wasm2js_i32$1 = $1904()), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 }
 
 function $2433($0) {
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[$1_1 + 12 >> 2] = $0;
  $2_1 = $2412();
  if ($2_1 >>> 0 >= $0 >>> 0) {
   $0 = $2425(24704);
   if ($0 >>> 0 < $2_1 >>> 1 >>> 0) {
    HEAP32[$1_1 + 8 >> 2] = $0 << 1;
    $2_1 = HEAP32[$360($1_1 + 8 | 0, $1_1 + 12 | 0) >> 2];
   }
   global$0 = $1_1 + 16 | 0;
   return $2_1;
  }
  $2538();
  abort();
 }
 
 function $2435($0, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[$4_1 + 12 >> 2] = 0;
  $415($0 + 12 | 0, $4_1 + 12 | 0, $3_1);
  if ($1_1) {
   $5_1 = $2414($416($0), $1_1)
  }
  HEAP32[$0 >> 2] = $5_1;
  $2_1 = ($2_1 << 2) + $5_1 | 0;
  HEAP32[$0 + 8 >> 2] = $2_1;
  HEAP32[$0 + 4 >> 2] = $2_1;
  (wasm2js_i32$0 = $418($0), wasm2js_i32$1 = ($1_1 << 2) + $5_1 | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  global$0 = $4_1 + 16 | 0;
  return $0;
 }
 
 function $2436($0, $1_1) {
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $1_1 = $1235($2_1, $0 + 8 | 0, $1_1);
  $3_1 = HEAP32[$1_1 >> 2];
  while (1) {
   if (($3_1 | 0) != HEAP32[$1_1 + 4 >> 2]) {
    $416($0);
    $1198(HEAP32[$1_1 >> 2]);
    $3_1 = HEAP32[$1_1 >> 2] + 4 | 0;
    HEAP32[$1_1 >> 2] = $3_1;
    continue;
   }
   break;
  };
  $1007($1_1);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $2437($0) {
  var $1_1 = 0;
  $2275(24704);
  $1_1 = $0 + 4 | 0;
  $645($2413(24704), HEAP32[6176], HEAP32[6177], $1_1);
  $420(24704, $1_1);
  $420(24708, $0 + 8 | 0);
  $420($531(24704), $418($0));
  HEAP32[$0 >> 2] = HEAP32[$0 + 4 >> 2];
  $2416($133(24704));
 }
 
 function $2446($0, $1_1) {
  while (1) {
   if (($1_1 | 0) != HEAP32[$0 + 8 >> 2]) {
    $416($0);
    HEAP32[$0 + 8 >> 2] = HEAP32[$0 + 8 >> 2] + -4;
    continue;
   }
   break;
  };
 }
 
 function $2451($0) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  $2_1 = HEAP32[$0 + 4 >> 2];
  $1_1 = HEAP32[$0 >> 2];
  $0 = HEAP32[$0 + 8 >> 2];
  $1_1 = $1_1 + ($0 >> 1) | 0;
  $3_1 = $1_1;
  if ($0 & 1) {
   $2_1 = HEAP32[$2_1 + HEAP32[$1_1 >> 2] >> 2]
  }
  FUNCTION_TABLE[$2_1]($3_1);
 }
 
 function $2453($0) {
  var $1_1 = 0;
  if ($0 >>> 0 >= 2) {
   $1_1 = $0 + 4 & -4;
   $0 = $1_1 + -1 | 0;
   $0 = ($0 | 0) == 2 ? $1_1 : $0;
  } else {
   $0 = 1
  }
  return $0;
 }
 
 function $2460($0) {
  if (1073741823 < $0 >>> 0) {
   $338(17296);
   abort();
  }
  return $2497($0 << 2);
 }
 
 function $2468() {
  i64toi32_i32$HIGH_BITS = -2147483648;
  return 0;
 }
 
 function $2469() {
  i64toi32_i32$HIGH_BITS = 2147483647;
  return -1;
 }
 
 function $2474() {
  i64toi32_i32$HIGH_BITS = -1;
  return -1;
 }
 
 function $2478($0, $1_1, $2_1) {
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $1615($3_1, $1_1, $2_1, $1904());
  $1_1 = HEAP32[$3_1 + 4 >> 2];
  HEAP32[$0 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$0 + 4 >> 2] = $1_1;
  $1_1 = HEAP32[$3_1 + 12 >> 2];
  HEAP32[$0 + 8 >> 2] = HEAP32[$3_1 + 8 >> 2];
  HEAP32[$0 + 12 >> 2] = $1_1;
  global$0 = $3_1 + 16 | 0;
 }
 
 function $2483($0, $1_1, $2_1) {
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[$3_1 + 8 >> 2] = $2_1;
  while (1) {
   if (($0 | 0) != ($1_1 | 0)) {
    $1724($3_1 + 8 | 0, HEAP8[$0 | 0]);
    $0 = $0 + 1 | 0;
    continue;
   }
   break;
  };
  global$0 = $3_1 + 16 | 0;
  return HEAP32[$3_1 + 8 >> 2];
 }
 
 function $2484($0, $1_1, $2_1) {
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[$3_1 + 8 >> 2] = $2_1;
  while (1) {
   if (($0 | 0) != ($1_1 | 0)) {
    $1730($3_1 + 8 | 0, HEAP32[$0 >> 2]);
    $0 = $0 + 4 | 0;
    continue;
   }
   break;
  };
  global$0 = $3_1 + 16 | 0;
  return HEAP32[$3_1 + 8 >> 2];
 }
 
 function $2485($0, $1_1, $2_1) {
  return $0 >>> 0 < $2_1 >>> 0 & $1_1 >>> 0 <= $0 >>> 0;
 }
 
 function $2492($0, $1_1) {
  while (1) {
   if (HEAP32[$0 >> 2] == 1) {
    continue
   }
   break;
  };
  if (!HEAP32[$0 >> 2]) {
   HEAP32[$0 >> 2] = 1;
   FUNCTION_TABLE[142]($1_1);
   HEAP32[$0 >> 2] = -1;
  }
 }
 
 function $2497($0) {
  var $1_1 = 0;
  $0 = $0 ? $0 : 1;
  label$1 : {
   while (1) {
    $1_1 = $2582($0);
    if ($1_1) {
     break label$1
    }
    $1_1 = HEAP32[6239];
    if ($1_1) {
     FUNCTION_TABLE[$1_1]();
     continue;
    }
    break;
   };
   fimport$9();
   abort();
  }
  return $1_1;
 }
 
 function $2500($0) {
  HEAP32[$0 >> 2] = 17620;
 }
 
 function $2501($0, $1_1) {
  var $2_1 = 0, $3_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $2_1 = $2597($1_1);
  $3_1 = $2497($2_1 + 13 | 0);
  HEAP32[$3_1 + 8 >> 2] = 0;
  HEAP32[$3_1 + 4 >> 2] = $2_1;
  HEAP32[$3_1 >> 2] = $2_1;
  (wasm2js_i32$0 = $0, wasm2js_i32$1 = $2591($3_1 + 12 | 0, $1_1, $2_1 + 1 | 0)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 }
 
 function $2504($0, $1_1, $2_1) {
  if ($2_1) {
   while (1) {
    HEAP32[$0 >> 2] = $1_1;
    $0 = $0 + 4 | 0;
    $2_1 = $2_1 + -1 | 0;
    if ($2_1) {
     continue
    }
    break;
   }
  }
 }
 
 function $2505($0, $1_1, $2_1) {
  var $3_1 = 0;
  label$1 : {
   if ($0 - $1_1 >> 2 >>> 0 < $2_1 >>> 0) {
    while (1) {
     $2_1 = $2_1 + -1 | 0;
     $3_1 = $2_1 << 2;
     HEAP32[$3_1 + $0 >> 2] = HEAP32[$1_1 + $3_1 >> 2];
     if ($2_1) {
      continue
     }
     break label$1;
    }
   }
   if (!$2_1) {
    break label$1
   }
   while (1) {
    HEAP32[$0 >> 2] = HEAP32[$1_1 >> 2];
    $0 = $0 + 4 | 0;
    $1_1 = $1_1 + 4 | 0;
    $2_1 = $2_1 + -1 | 0;
    if ($2_1) {
     continue
    }
    break;
   };
  }
 }
 
 function $2506() {
  $338(17492);
  abort();
 }
 
 function $2507() {
  $1643();
  abort();
 }
 
 function $2508($0, $1_1) {
  var $2_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $2_1 = $0;
  label$1 : {
   if (!$207($1_1)) {
    HEAP32[$2_1 + 8 >> 2] = HEAP32[$1_1 + 8 >> 2];
    $0 = HEAP32[$1_1 + 4 >> 2];
    HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2];
    HEAP32[$2_1 + 4 >> 2] = $0;
    break label$1;
   }
   $2510($0, HEAP32[$1_1 >> 2], HEAP32[$1_1 + 4 >> 2]);
  }
  global$0 = $3_1 + 16 | 0;
 }
 
 function $2510($0, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  if (4294967279 >= $2_1 >>> 0) {
   label$2 : {
    if ($2_1 >>> 0 <= 10) {
     $324($0, $2_1);
     $4_1 = $0;
     break label$2;
    }
    $5_1 = $326($2_1) + 1 | 0;
    $4_1 = $328($0, $5_1);
    $331($0, $4_1);
    $332($0, $5_1);
    $333($0, $2_1);
   }
   $1563($4_1, $1_1, $2_1);
   HEAP8[$3_1 + 15 | 0] = 0;
   $335($2_1 + $4_1 | 0, $3_1 + 15 | 0);
   global$0 = $3_1 + 16 | 0;
   return;
  }
  $2506();
  abort();
 }
 
 function $2511($0, $1_1, $2_1, $3_1, $4_1) {
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[$4_1 + 12 >> 2] = $3_1;
  $3_1 = $100($1_1);
  if ($3_1 >>> 0 < $2_1 >>> 0) {
   $2507();
   abort();
  }
  $1_1 = $320($1_1);
  HEAP32[$4_1 + 4 >> 2] = $3_1 - $2_1;
  $2510($0, $1_1 + $2_1 | 0, HEAP32[$124($4_1 + 12 | 0, $4_1 + 4 | 0) >> 2]);
  global$0 = $4_1 + 16 | 0;
 }
 
 function $2512($0) {
  var $1_1 = 0;
  if ($207($0)) {
   $1_1 = HEAP32[$0 >> 2];
   $362($0);
   $2583($1_1);
  }
  return $0;
 }
 
 function $2513($0, $1_1) {
  if (($0 | 0) != ($1_1 | 0)) {
   $2514($0, $320($1_1), $100($1_1))
  }
 }
 
 function $2514($0, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $3_1 = $358($0);
  label$1 : {
   if ($3_1 >>> 0 >= $2_1 >>> 0) {
    $3_1 = $320($0);
    $2515($3_1, $1_1, $2_1);
    HEAP8[$4_1 + 15 | 0] = 0;
    $335($2_1 + $3_1 | 0, $4_1 + 15 | 0);
    $2402($0, $2_1);
    break label$1;
   }
   $5_1 = $0;
   $0 = $100($0);
   $2516($5_1, $3_1, $2_1 - $3_1 | 0, $0, 0, $0, $2_1, $1_1);
  }
  global$0 = $4_1 + 16 | 0;
 }
 
 function $2515($0, $1_1, $2_1) {
  if ($2_1) {
   $2593($0, $1_1, $2_1)
  }
 }
 
 function $2516($0, $1_1, $2_1, $3_1, $4_1, $5_1, $6, $7) {
  var $8 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0;
  $8 = global$0 - 16 | 0;
  global$0 = $8;
  $9_1 = -17;
  if ($9_1 + ($1_1 ^ -1) >>> 0 >= $2_1 >>> 0) {
   $10_1 = $320($0);
   $11_1 = $0;
   label$2 : {
    if (($9_1 >>> 1 | 0) + -16 >>> 0 > $1_1 >>> 0) {
     HEAP32[$8 + 8 >> 2] = $1_1 << 1;
     HEAP32[$8 + 12 >> 2] = $1_1 + $2_1;
     $2_1 = $326(HEAP32[$360($8 + 12 | 0, $8 + 8 | 0) >> 2]);
     break label$2;
    }
    $2_1 = $9_1 + -1 | 0;
   }
   $9_1 = $2_1 + 1 | 0;
   $2_1 = $328($11_1, $9_1);
   if ($4_1) {
    $1563($2_1, $10_1, $4_1)
   }
   if ($6) {
    $1563($2_1 + $4_1 | 0, $7, $6)
   }
   $3_1 = $3_1 - $5_1 | 0;
   $7 = $3_1 - $4_1 | 0;
   if ($7) {
    $1563(($2_1 + $4_1 | 0) + $6 | 0, ($4_1 + $10_1 | 0) + $5_1 | 0, $7)
   }
   if (($1_1 | 0) != 10) {
    $2583($10_1)
   }
   $331($0, $2_1);
   $332($0, $9_1);
   $1_1 = $0;
   $0 = $3_1 + $6 | 0;
   $333($1_1, $0);
   HEAP8[$8 + 7 | 0] = 0;
   $335($0 + $2_1 | 0, $8 + 7 | 0);
   global$0 = $8 + 16 | 0;
   return;
  }
  $2506();
  abort();
 }
 
 function $2517($0, $1_1) {
  var $2_1 = 0;
  $2_1 = $100($0);
  if ($2_1 >>> 0 < $1_1 >>> 0) {
   $2518($0, $1_1 - $2_1 | 0);
   return;
  }
  $2519($0, $1_1);
 }
 
 function $2518($0, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  if ($1_1) {
   $2_1 = $358($0);
   $3_1 = $100($0);
   $5_1 = $3_1 + $1_1 | 0;
   if ($2_1 - $3_1 >>> 0 < $1_1 >>> 0) {
    $2520($0, $2_1, $5_1 - $2_1 | 0, $3_1, $3_1)
   }
   $2_1 = $320($0);
   $334($3_1 + $2_1 | 0, $1_1, 0);
   $2402($0, $5_1);
   HEAP8[$4_1 + 15 | 0] = 0;
   $335($2_1 + $5_1 | 0, $4_1 + 15 | 0);
  }
  global$0 = $4_1 + 16 | 0;
 }
 
 function $2519($0, $1_1) {
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   if ($207($0)) {
    $3_1 = HEAP32[$0 >> 2];
    HEAP8[$2_1 + 15 | 0] = 0;
    $335($1_1 + $3_1 | 0, $2_1 + 15 | 0);
    $333($0, $1_1);
    break label$1;
   }
   HEAP8[$2_1 + 14 | 0] = 0;
   $335($0 + $1_1 | 0, $2_1 + 14 | 0);
   $324($0, $1_1);
  }
  global$0 = $2_1 + 16 | 0;
 }
 
 function $2520($0, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = 0, $6 = 0, $7 = 0, $8 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  $6 = -17;
  if ($6 - $1_1 >>> 0 >= $2_1 >>> 0) {
   $7 = $320($0);
   $8 = $0;
   label$2 : {
    if (($6 >>> 1 | 0) + -16 >>> 0 > $1_1 >>> 0) {
     HEAP32[$5_1 + 8 >> 2] = $1_1 << 1;
     HEAP32[$5_1 + 12 >> 2] = $1_1 + $2_1;
     $2_1 = $326(HEAP32[$360($5_1 + 12 | 0, $5_1 + 8 | 0) >> 2]);
     break label$2;
    }
    $2_1 = $6 + -1 | 0;
   }
   $6 = $2_1 + 1 | 0;
   $2_1 = $328($8, $6);
   if ($4_1) {
    $1563($2_1, $7, $4_1)
   }
   $3_1 = $3_1 - $4_1 | 0;
   if ($3_1) {
    $1563($2_1 + $4_1 | 0, $4_1 + $7 | 0, $3_1)
   }
   if (($1_1 | 0) != 10) {
    $2583($7)
   }
   $331($0, $2_1);
   $332($0, $6);
   global$0 = $5_1 + 16 | 0;
   return;
  }
  $2506();
  abort();
 }
 
 function $2521($0, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  $3_1 = $358($0);
  $4_1 = $100($0);
  label$1 : {
   if ($3_1 - $4_1 >>> 0 >= $2_1 >>> 0) {
    if (!$2_1) {
     break label$1
    }
    $3_1 = $320($0);
    $1563($3_1 + $4_1 | 0, $1_1, $2_1);
    $1_1 = $0;
    $0 = $2_1 + $4_1 | 0;
    $2402($1_1, $0);
    HEAP8[$5_1 + 15 | 0] = 0;
    $335($0 + $3_1 | 0, $5_1 + 15 | 0);
    break label$1;
   }
   $2516($0, $3_1, ($2_1 + $4_1 | 0) - $3_1 | 0, $4_1, $4_1, 0, $2_1, $1_1);
  }
  global$0 = $5_1 + 16 | 0;
 }
 
 function $2522($0, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP8[$3_1 + 15 | 0] = $1_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if ($207($0)) {
       $2_1 = $362($0) + -1 | 0;
       $4_1 = HEAP32[$0 + 4 >> 2];
       if (($2_1 | 0) == ($4_1 | 0)) {
        break label$4
       }
       break label$2;
      }
      $4_1 = 10;
      $2_1 = 10;
      $1_1 = HEAPU8[$0 + 11 | 0];
      if (($1_1 | 0) != 10) {
       break label$3
      }
     }
     $2520($0, $2_1, 1, $2_1, $2_1);
     $1_1 = $4_1;
     if ($207($0)) {
      break label$2
     }
    }
    $2_1 = $0;
    $324($0, $1_1 + 1 | 0);
    break label$1;
   }
   $2_1 = HEAP32[$0 >> 2];
   $333($0, $4_1 + 1 | 0);
   $1_1 = $4_1;
  }
  $0 = $1_1 + $2_1 | 0;
  $335($0, $3_1 + 15 | 0);
  HEAP8[$3_1 + 14 | 0] = 0;
  $335($0 + 1 | 0, $3_1 + 14 | 0);
  global$0 = $3_1 + 16 | 0;
 }
 
 function $2524($0, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6 = 0, $7 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[$3_1 + 12 >> 2] = $2_1;
  $4_1 = $100($0);
  if ($4_1 >>> 0 >= $1_1 >>> 0) {
   if ($2_1) {
    $5_1 = $320($0);
    $6 = $4_1 - $1_1 | 0;
    HEAP32[$3_1 + 8 >> 2] = $6;
    $2_1 = HEAP32[$124($3_1 + 12 | 0, $3_1 + 8 | 0) >> 2];
    HEAP32[$3_1 + 12 >> 2] = $2_1;
    $7 = $0;
    $0 = $6 - $2_1 | 0;
    if ($0) {
     $1_1 = $1_1 + $5_1 | 0;
     $2515($1_1, $1_1 + $2_1 | 0, $0);
     $2_1 = HEAP32[$3_1 + 12 >> 2];
    }
    $0 = $4_1 - $2_1 | 0;
    $2402($7, $0);
    HEAP8[$3_1 + 7 | 0] = 0;
    $335($0 + $5_1 | 0, $3_1 + 7 | 0);
   }
   global$0 = $3_1 + 16 | 0;
   return;
  }
  $2507();
  abort();
 }
 
 function $2525($0, $1_1, $2_1, $3_1) {
  var $4_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[$4_1 + 8 >> 2] = $3_1;
  HEAP32[$4_1 + 12 >> 2] = $1_1;
  $1_1 = $100($0);
  if (!(($3_1 | 0) == -1 | $1_1 >>> 0 < 0)) {
   HEAP32[$4_1 >> 2] = $1_1;
   (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = HEAP32[$124($4_1 + 12 | 0, $4_1) >> 2]), HEAP32[wasm2js_i32$0 + 4 >> 2] = wasm2js_i32$1;
   $0 = $1324($320($0), $2_1, HEAP32[$124($4_1 + 4 | 0, $4_1 + 8 | 0) >> 2]);
   label$2 : {
    if ($0) {
     break label$2
    }
    $0 = -1;
    $1_1 = HEAP32[$4_1 + 4 >> 2];
    $2_1 = HEAP32[$4_1 + 8 >> 2];
    if ($1_1 >>> 0 < $2_1 >>> 0) {
     break label$2
    }
    $0 = $1_1 >>> 0 > $2_1 >>> 0;
   }
   global$0 = $4_1 + 16 | 0;
   return $0;
  }
  $2507();
  abort();
 }
 
 function $2526($0, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  if (4294967279 >= $1_1 >>> 0) {
   label$2 : {
    if ($1_1 >>> 0 <= 10) {
     $324($0, $1_1);
     $4_1 = $0;
     break label$2;
    }
    $5_1 = $326($1_1) + 1 | 0;
    $4_1 = $328($0, $5_1);
    $331($0, $4_1);
    $332($0, $5_1);
    $333($0, $1_1);
   }
   $334($4_1, $1_1, $2_1);
   HEAP8[$3_1 + 15 | 0] = 0;
   $335($1_1 + $4_1 | 0, $3_1 + 15 | 0);
   global$0 = $3_1 + 16 | 0;
   return;
  }
  $2506();
  abort();
 }
 
 function $2527($0, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  if (1073741807 >= $2_1 >>> 0) {
   label$2 : {
    if ($2_1 >>> 0 <= 1) {
     $324($0, $2_1);
     $4_1 = $0;
     break label$2;
    }
    $5_1 = $2453($2_1) + 1 | 0;
    $4_1 = $2460($5_1);
    $331($0, $4_1);
    $332($0, $5_1);
    $333($0, $2_1);
   }
   $1675($4_1, $1_1, $2_1);
   HEAP32[$3_1 + 12 >> 2] = 0;
   $175(($2_1 << 2) + $4_1 | 0, $3_1 + 12 | 0);
   global$0 = $3_1 + 16 | 0;
   return;
  }
  $2506();
  abort();
 }
 
 function $2529($0, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $3_1 = $2401($0);
  label$1 : {
   if ($3_1 >>> 0 >= $2_1 >>> 0) {
    $5_1 = $320($0);
    $6 = $5_1;
    $3_1 = $2_1;
    if ($2_1) {
     $2505($6, $1_1, $3_1)
    }
    HEAP32[$4_1 + 12 >> 2] = 0;
    $175($5_1 + ($2_1 << 2) | 0, $4_1 + 12 | 0);
    $2402($0, $2_1);
    break label$1;
   }
   $5_1 = $0;
   $0 = $100($0);
   $2531($5_1, $3_1, $2_1 - $3_1 | 0, $0, 0, $0, $2_1, $1_1);
  }
  global$0 = $4_1 + 16 | 0;
 }
 
 function $2531($0, $1_1, $2_1, $3_1, $4_1, $5_1, $6, $7) {
  var $8 = 0, $9_1 = 0, $10_1 = 0;
  $8 = global$0 - 16 | 0;
  global$0 = $8;
  $9_1 = 1073741807;
  if ($9_1 + ($1_1 ^ -1) >>> 0 >= $2_1 >>> 0) {
   $10_1 = $320($0);
   label$2 : {
    if (($9_1 >>> 1 | 0) + -16 >>> 0 > $1_1 >>> 0) {
     HEAP32[$8 + 8 >> 2] = $1_1 << 1;
     HEAP32[$8 + 12 >> 2] = $1_1 + $2_1;
     $2_1 = $2453(HEAP32[$360($8 + 12 | 0, $8 + 8 | 0) >> 2]);
     break label$2;
    }
    $2_1 = $9_1 + -1 | 0;
   }
   $9_1 = $2_1 + 1 | 0;
   $2_1 = $2460($9_1);
   if ($4_1) {
    $1675($2_1, $10_1, $4_1)
   }
   if ($6) {
    $1675(($4_1 << 2) + $2_1 | 0, $7, $6)
   }
   $3_1 = $3_1 - $5_1 | 0;
   $7 = $3_1 - $4_1 | 0;
   if ($7) {
    $4_1 = $4_1 << 2;
    $1675(($4_1 + $2_1 | 0) + ($6 << 2) | 0, ($4_1 + $10_1 | 0) + ($5_1 << 2) | 0, $7);
   }
   if (($1_1 | 0) != 1) {
    $2583($10_1)
   }
   $331($0, $2_1);
   $332($0, $9_1);
   $1_1 = $0;
   $0 = $3_1 + $6 | 0;
   $333($1_1, $0);
   HEAP32[$8 + 4 >> 2] = 0;
   $175($2_1 + ($0 << 2) | 0, $8 + 4 | 0);
   global$0 = $8 + 16 | 0;
   return;
  }
  $2506();
  abort();
 }
 
 function $2532($0, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = 0, $6 = 0, $7 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  $6 = 1073741807;
  if ($6 - $1_1 >>> 0 >= $2_1 >>> 0) {
   $7 = $320($0);
   label$2 : {
    if (($6 >>> 1 | 0) + -16 >>> 0 > $1_1 >>> 0) {
     HEAP32[$5_1 + 8 >> 2] = $1_1 << 1;
     HEAP32[$5_1 + 12 >> 2] = $1_1 + $2_1;
     $2_1 = $2453(HEAP32[$360($5_1 + 12 | 0, $5_1 + 8 | 0) >> 2]);
     break label$2;
    }
    $2_1 = $6 + -1 | 0;
   }
   $6 = $2_1 + 1 | 0;
   $2_1 = $2460($6);
   if ($4_1) {
    $1675($2_1, $7, $4_1)
   }
   $3_1 = $3_1 - $4_1 | 0;
   if ($3_1) {
    $4_1 = $4_1 << 2;
    $1675($4_1 + $2_1 | 0, $4_1 + $7 | 0, $3_1);
   }
   if (($1_1 | 0) != 1) {
    $2583($7)
   }
   $331($0, $2_1);
   $332($0, $6);
   global$0 = $5_1 + 16 | 0;
   return;
  }
  $2506();
  abort();
 }
 
 function $2534($0, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  $3_1 = $2401($0);
  $4_1 = $100($0);
  label$1 : {
   if ($3_1 - $4_1 >>> 0 >= $2_1 >>> 0) {
    if (!$2_1) {
     break label$1
    }
    $3_1 = $320($0);
    $1675($3_1 + ($4_1 << 2) | 0, $1_1, $2_1);
    $1_1 = $0;
    $0 = $2_1 + $4_1 | 0;
    $2402($1_1, $0);
    HEAP32[$5_1 + 12 >> 2] = 0;
    $175($3_1 + ($0 << 2) | 0, $5_1 + 12 | 0);
    break label$1;
   }
   $2531($0, $3_1, ($2_1 + $4_1 | 0) - $3_1 | 0, $4_1, $4_1, 0, $2_1, $1_1);
  }
  global$0 = $5_1 + 16 | 0;
 }
 
 function $2535($0, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[$3_1 + 12 >> 2] = $1_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if ($207($0)) {
       $2_1 = $362($0) + -1 | 0;
       $4_1 = HEAP32[$0 + 4 >> 2];
       if (($2_1 | 0) == ($4_1 | 0)) {
        break label$4
       }
       break label$2;
      }
      $4_1 = 1;
      $2_1 = 1;
      $1_1 = HEAPU8[$0 + 11 | 0];
      if (($1_1 | 0) != 1) {
       break label$3
      }
     }
     $2532($0, $2_1, 1, $2_1, $2_1);
     $1_1 = $4_1;
     if ($207($0)) {
      break label$2
     }
    }
    $2_1 = $0;
    $324($0, $1_1 + 1 | 0);
    break label$1;
   }
   $2_1 = HEAP32[$0 >> 2];
   $333($0, $4_1 + 1 | 0);
   $1_1 = $4_1;
  }
  $0 = ($1_1 << 2) + $2_1 | 0;
  $175($0, $3_1 + 12 | 0);
  HEAP32[$3_1 + 8 >> 2] = 0;
  $175($0 + 4 | 0, $3_1 + 8 | 0);
  global$0 = $3_1 + 16 | 0;
 }
 
 function $2537($0, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  if (1073741807 >= $1_1 >>> 0) {
   label$2 : {
    if ($1_1 >>> 0 <= 1) {
     $324($0, $1_1);
     $4_1 = $0;
     break label$2;
    }
    $5_1 = $2453($1_1) + 1 | 0;
    $4_1 = $2460($5_1);
    $331($0, $4_1);
    $332($0, $5_1);
    $333($0, $1_1);
   }
   $5_1 = $4_1;
   $0 = $1_1;
   if ($1_1) {
    $2504($5_1, $2_1, $0)
   }
   HEAP32[$3_1 + 12 >> 2] = 0;
   $175(($1_1 << 2) + $4_1 | 0, $3_1 + 12 | 0);
   global$0 = $3_1 + 16 | 0;
   return;
  }
  $2506();
  abort();
 }
 
 function $2538() {
  $338(17505);
  abort();
 }
 
 function $2540($0) {
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $0 = $2542($2541($1_1, $0));
  global$0 = $1_1 + 16 | 0;
  return $0;
 }
 
 function $2541($0, $1_1) {
  HEAP32[$0 + 12 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = $1_1;
  HEAP32[$0 >> 2] = $1_1;
  HEAP32[$0 + 8 >> 2] = $1_1 + 1;
  return $0;
 }
 
 function $2542($0) {
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  if (!HEAPU8[HEAP32[$431($1_1 + 8 | 0, HEAP32[$0 + 4 >> 2]) >> 2]]) {
   $2_1 = $2545($0)
  }
  global$0 = $1_1 + 16 | 0;
  return $2_1;
 }
 
 function $2545($0) {
  var $1_1 = 0;
  label$1 : {
   $0 = HEAP32[$0 + 8 >> 2];
   $1_1 = HEAPU8[$0 | 0];
   if (($1_1 | 0) != 1) {
    if ($1_1 & 2) {
     break label$1
    }
    HEAP8[$0 | 0] = 2;
    $0 = 1;
   } else {
    $0 = 0
   }
   return $0;
  }
  abort();
 }
 
 function $2546($0) {
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2547($2541($1_1, $0));
  global$0 = $1_1 + 16 | 0;
 }
 
 function $2547($0) {
  var $1_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  (wasm2js_i32$0 = HEAP32[$431($1_1 + 8 | 0, HEAP32[$0 + 4 >> 2]) >> 2], wasm2js_i32$1 = 1), HEAP8[wasm2js_i32$0 | 0] = wasm2js_i32$1;
  HEAP8[HEAP32[$0 + 8 >> 2]] = 1;
  global$0 = $1_1 + 16 | 0;
 }
 
 function $2552() {
  abort();
 }
 
 function $2553($0) {
  $0 = $0 | 0;
  return 17596;
 }
 
 function $2554($0) {
  $0 = $0 | 0;
  var $1_1 = 0;
  HEAP32[$0 >> 2] = 17664;
  $1_1 = HEAP32[$0 + 4 >> 2] + -12 | 0;
  if (($2274($1_1 + 8 | 0) | 0) <= -1) {
   $2583($1_1)
  }
  return $0 | 0;
 }
 
 function $2557($0) {
  $0 = $0 | 0;
  $2583($2554($0));
 }
 
 function $2558($0) {
  $0 = $0 | 0;
  $2554($0);
  $2583($0);
 }
 
 function $2561($0) {
  $0 = $0 | 0;
  return 17776;
 }
 
 function $2563($0, $1_1, $2_1) {
  if (!$2_1) {
   return $889($0, $1_1)
  }
  if (($0 | 0) == ($1_1 | 0)) {
   return 1
  }
  return !$1790(HEAP32[$0 + 4 >> 2], HEAP32[$1_1 + 4 >> 2]);
 }
 
 function $2564($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 + -64 | 0;
  global$0 = $3_1;
  $4_1 = 1;
  label$1 : {
   if ($2563($0, $1_1, 0)) {
    break label$1
   }
   $4_1 = 0;
   if (!$1_1) {
    break label$1
   }
   $1_1 = $2565($1_1);
   $4_1 = 0;
   if (!$1_1) {
    break label$1
   }
   HEAP32[$3_1 + 20 >> 2] = -1;
   HEAP32[$3_1 + 16 >> 2] = $0;
   HEAP32[$3_1 + 12 >> 2] = 0;
   HEAP32[$3_1 + 8 >> 2] = $1_1;
   $2592($3_1 + 24 | 0, 0, 39);
   HEAP32[$3_1 + 56 >> 2] = 1;
   FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 28 >> 2]]($1_1, $3_1 + 8 | 0, HEAP32[$2_1 >> 2], 1);
   $4_1 = 0;
   if (HEAP32[$3_1 + 32 >> 2] != 1) {
    break label$1
   }
   HEAP32[$2_1 >> 2] = HEAP32[$3_1 + 24 >> 2];
   $4_1 = 1;
  }
  global$0 = $3_1 - -64 | 0;
  return $4_1 | 0;
 }
 
 function $2565($0) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $1_1 = global$0 + -64 | 0;
  global$0 = $1_1;
  $2_1 = HEAP32[$0 >> 2];
  $3_1 = HEAP32[$2_1 + -4 >> 2];
  $4_1 = HEAP32[$2_1 + -8 >> 2];
  HEAP32[$1_1 + 20 >> 2] = 0;
  HEAP32[$1_1 + 16 >> 2] = 17872;
  HEAP32[$1_1 + 12 >> 2] = $0;
  HEAP32[$1_1 + 8 >> 2] = 17920;
  $2_1 = 0;
  $2592($1_1 + 24 | 0, 0, 39);
  $0 = $0 + $4_1 | 0;
  label$1 : {
   if ($2563($3_1, 17920, 0)) {
    HEAP32[$1_1 + 56 >> 2] = 1;
    FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 20 >> 2]]($3_1, $1_1 + 8 | 0, $0, $0, 1, 0);
    $2_1 = HEAP32[$1_1 + 32 >> 2] == 1 ? $0 : 0;
    break label$1;
   }
   FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 24 >> 2]]($3_1, $1_1 + 8 | 0, $0, 1, 0);
   label$3 : {
    switch (HEAP32[$1_1 + 44 >> 2]) {
    case 0:
     $2_1 = HEAP32[$1_1 + 48 >> 2] == 1 ? (HEAP32[$1_1 + 36 >> 2] == 1 ? (HEAP32[$1_1 + 40 >> 2] == 1 ? HEAP32[$1_1 + 28 >> 2] : 0) : 0) : 0;
     break label$1;
    case 1:
     break label$3;
    default:
     break label$1;
    };
   }
   if (HEAP32[$1_1 + 48 >> 2] | HEAP32[$1_1 + 36 >> 2] != 1 | HEAP32[$1_1 + 40 >> 2] != 1 ? HEAP32[$1_1 + 32 >> 2] != 1 : 0) {
    break label$1
   }
   $2_1 = HEAP32[$1_1 + 24 >> 2];
  }
  global$0 = $1_1 - -64 | 0;
  return $2_1;
 }
 
 function $2566($0, $1_1, $2_1) {
  var $3_1 = 0;
  $3_1 = HEAP32[$0 + 16 >> 2];
  if (!$3_1) {
   HEAP32[$0 + 36 >> 2] = 1;
   HEAP32[$0 + 24 >> 2] = $2_1;
   HEAP32[$0 + 16 >> 2] = $1_1;
   return;
  }
  label$2 : {
   if (($1_1 | 0) == ($3_1 | 0)) {
    if (HEAP32[$0 + 24 >> 2] != 2) {
     break label$2
    }
    HEAP32[$0 + 24 >> 2] = $2_1;
    return;
   }
   HEAP8[$0 + 54 | 0] = 1;
   HEAP32[$0 + 24 >> 2] = 2;
   HEAP32[$0 + 36 >> 2] = HEAP32[$0 + 36 >> 2] + 1;
  }
 }
 
 function $2567($0, $1_1, $2_1, $3_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  if ($2563($0, HEAP32[$1_1 + 8 >> 2], 0)) {
   $2566($1_1, $2_1, $3_1)
  }
 }
 
 function $2568($0, $1_1, $2_1, $3_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  if ($2563($0, HEAP32[$1_1 + 8 >> 2], 0)) {
   $2566($1_1, $2_1, $3_1);
   return;
  }
  $0 = HEAP32[$0 + 8 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0, $1_1, $2_1, $3_1);
 }
 
 function $2569($0, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = 0, $6 = 0, $7 = 0;
  $5_1 = HEAP32[$0 + 4 >> 2];
  $0 = HEAP32[$0 >> 2];
  $6 = $0;
  $7 = $1_1;
  $4_1 = 0;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   $1_1 = $5_1 >> 8;
   $4_1 = $1_1;
   if (!($5_1 & 1)) {
    break label$1
   }
   $4_1 = HEAP32[$1_1 + HEAP32[$2_1 >> 2] >> 2];
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($6, $7, $4_1 + $2_1 | 0, $5_1 & 2 ? $3_1 : 2);
 }
 
 function $2570($0, $1_1, $2_1, $3_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  if ($2563($0, HEAP32[$1_1 + 8 >> 2], 0)) {
   $2566($1_1, $2_1, $3_1);
   return;
  }
  $4_1 = HEAP32[$0 + 12 >> 2];
  $5_1 = $0 + 16 | 0;
  $2569($5_1, $1_1, $2_1, $3_1);
  label$2 : {
   if (($4_1 | 0) < 2) {
    break label$2
   }
   $4_1 = ($4_1 << 3) + $5_1 | 0;
   $0 = $0 + 24 | 0;
   while (1) {
    $2569($0, $1_1, $2_1, $3_1);
    if (HEAPU8[$1_1 + 54 | 0]) {
     break label$2
    }
    $0 = $0 + 8 | 0;
    if ($0 >>> 0 < $4_1 >>> 0) {
     continue
    }
    break;
   };
  }
 }
 
 function $2571($0, $1_1, $2_1, $3_1) {
  HEAP8[$0 + 53 | 0] = 1;
  label$1 : {
   if (HEAP32[$0 + 4 >> 2] != ($2_1 | 0)) {
    break label$1
   }
   HEAP8[$0 + 52 | 0] = 1;
   $2_1 = HEAP32[$0 + 16 >> 2];
   if (!$2_1) {
    HEAP32[$0 + 36 >> 2] = 1;
    HEAP32[$0 + 24 >> 2] = $3_1;
    HEAP32[$0 + 16 >> 2] = $1_1;
    if (($3_1 | 0) != 1 | HEAP32[$0 + 48 >> 2] != 1) {
     break label$1
    }
    HEAP8[$0 + 54 | 0] = 1;
    return;
   }
   if (($1_1 | 0) == ($2_1 | 0)) {
    $2_1 = HEAP32[$0 + 24 >> 2];
    if (($2_1 | 0) == 2) {
     HEAP32[$0 + 24 >> 2] = $3_1;
     $2_1 = $3_1;
    }
    if (HEAP32[$0 + 48 >> 2] != 1 | ($2_1 | 0) != 1) {
     break label$1
    }
    HEAP8[$0 + 54 | 0] = 1;
    return;
   }
   HEAP8[$0 + 54 | 0] = 1;
   HEAP32[$0 + 36 >> 2] = HEAP32[$0 + 36 >> 2] + 1;
  }
 }
 
 function $2572($0, $1_1, $2_1) {
  if (!(HEAP32[$0 + 28 >> 2] == 1 | HEAP32[$0 + 4 >> 2] != ($1_1 | 0))) {
   HEAP32[$0 + 28 >> 2] = $2_1
  }
 }
 
 function $2573($0, $1_1, $2_1, $3_1, $4_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6 = 0, $7 = 0, $8 = 0, $9_1 = 0;
  if ($2563($0, HEAP32[$1_1 + 8 >> 2], $4_1)) {
   $2572($1_1, $2_1, $3_1);
   return;
  }
  label$2 : {
   if ($2563($0, HEAP32[$1_1 >> 2], $4_1)) {
    if (!(HEAP32[$1_1 + 20 >> 2] != ($2_1 | 0) ? HEAP32[$1_1 + 16 >> 2] != ($2_1 | 0) : 0)) {
     if (($3_1 | 0) != 1) {
      break label$2
     }
     HEAP32[$1_1 + 32 >> 2] = 1;
     return;
    }
    HEAP32[$1_1 + 32 >> 2] = $3_1;
    if (HEAP32[$1_1 + 44 >> 2] != 4) {
     $5_1 = $0 + 16 | 0;
     $8 = $5_1 + (HEAP32[$0 + 12 >> 2] << 3) | 0;
     $9_1 = $1_1;
     label$7 : {
      label$8 : {
       while (1) {
        label$10 : {
         if ($5_1 >>> 0 >= $8 >>> 0) {
          break label$10
         }
         HEAP16[$1_1 + 52 >> 1] = 0;
         $2574($5_1, $1_1, $2_1, $2_1, 1, $4_1);
         if (HEAPU8[$1_1 + 54 | 0]) {
          break label$10
         }
         label$11 : {
          if (!HEAPU8[$1_1 + 53 | 0]) {
           break label$11
          }
          if (HEAPU8[$1_1 + 52 | 0]) {
           $3_1 = 1;
           if (HEAP32[$1_1 + 24 >> 2] == 1) {
            break label$8
           }
           $7 = 1;
           $6 = 1;
           if (HEAPU8[$0 + 8 | 0] & 2) {
            break label$11
           }
           break label$8;
          }
          $7 = 1;
          $3_1 = $6;
          if (!(HEAP8[$0 + 8 | 0] & 1)) {
           break label$8
          }
         }
         $5_1 = $5_1 + 8 | 0;
         continue;
        }
        break;
       };
       $3_1 = $6;
       $0 = 4;
       if (!$7) {
        break label$7
       }
      }
      $0 = 3;
     }
     HEAP32[$9_1 + 44 >> 2] = $0;
     if ($3_1 & 1) {
      break label$2
     }
    }
    HEAP32[$1_1 + 20 >> 2] = $2_1;
    HEAP32[$1_1 + 40 >> 2] = HEAP32[$1_1 + 40 >> 2] + 1;
    if (HEAP32[$1_1 + 36 >> 2] != 1 | HEAP32[$1_1 + 24 >> 2] != 2) {
     break label$2
    }
    HEAP8[$1_1 + 54 | 0] = 1;
    return;
   }
   $6 = HEAP32[$0 + 12 >> 2];
   $5_1 = $0 + 16 | 0;
   $2575($5_1, $1_1, $2_1, $3_1, $4_1);
   if (($6 | 0) < 2) {
    break label$2
   }
   $6 = $5_1 + ($6 << 3) | 0;
   $5_1 = $0 + 24 | 0;
   $0 = HEAP32[$0 + 8 >> 2];
   if (!(HEAP32[$1_1 + 36 >> 2] != 1 ? !($0 & 2) : 0)) {
    while (1) {
     if (HEAPU8[$1_1 + 54 | 0]) {
      break label$2
     }
     $2575($5_1, $1_1, $2_1, $3_1, $4_1);
     $5_1 = $5_1 + 8 | 0;
     if ($5_1 >>> 0 < $6 >>> 0) {
      continue
     }
     break;
    };
    break label$2;
   }
   if (!($0 & 1)) {
    while (1) {
     if (HEAPU8[$1_1 + 54 | 0] | HEAP32[$1_1 + 36 >> 2] == 1) {
      break label$2
     }
     $2575($5_1, $1_1, $2_1, $3_1, $4_1);
     $5_1 = $5_1 + 8 | 0;
     if ($5_1 >>> 0 < $6 >>> 0) {
      continue
     }
     break label$2;
    }
   }
   while (1) {
    if (HEAPU8[$1_1 + 54 | 0] | (HEAP32[$1_1 + 24 >> 2] == 1 ? HEAP32[$1_1 + 36 >> 2] == 1 : 0)) {
     break label$2
    }
    $2575($5_1, $1_1, $2_1, $3_1, $4_1);
    $5_1 = $5_1 + 8 | 0;
    if ($5_1 >>> 0 < $6 >>> 0) {
     continue
    }
    break;
   };
  }
 }
 
 function $2574($0, $1_1, $2_1, $3_1, $4_1, $5_1) {
  var $6 = 0, $7 = 0, $8 = 0;
  $6 = HEAP32[$0 + 4 >> 2];
  $7 = $6 >> 8;
  $0 = HEAP32[$0 >> 2];
  $8 = $0;
  if ($6 & 1) {
   $7 = HEAP32[HEAP32[$3_1 >> 2] + $7 >> 2]
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($8, $1_1, $2_1, $3_1 + $7 | 0, $6 & 2 ? $4_1 : 2, $5_1);
 }
 
 function $2575($0, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = 0, $6 = 0, $7 = 0;
  $5_1 = HEAP32[$0 + 4 >> 2];
  $6 = $5_1 >> 8;
  $0 = HEAP32[$0 >> 2];
  $7 = $0;
  if ($5_1 & 1) {
   $6 = HEAP32[HEAP32[$2_1 >> 2] + $6 >> 2]
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($7, $1_1, $2_1 + $6 | 0, $5_1 & 2 ? $3_1 : 2, $4_1);
 }
 
 function $2576($0, $1_1, $2_1, $3_1, $4_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  if ($2563($0, HEAP32[$1_1 + 8 >> 2], $4_1)) {
   $2572($1_1, $2_1, $3_1);
   return;
  }
  label$2 : {
   if ($2563($0, HEAP32[$1_1 >> 2], $4_1)) {
    if (!(HEAP32[$1_1 + 20 >> 2] != ($2_1 | 0) ? HEAP32[$1_1 + 16 >> 2] != ($2_1 | 0) : 0)) {
     if (($3_1 | 0) != 1) {
      break label$2
     }
     HEAP32[$1_1 + 32 >> 2] = 1;
     return;
    }
    HEAP32[$1_1 + 32 >> 2] = $3_1;
    label$6 : {
     if (HEAP32[$1_1 + 44 >> 2] == 4) {
      break label$6
     }
     HEAP16[$1_1 + 52 >> 1] = 0;
     $0 = HEAP32[$0 + 8 >> 2];
     FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, $1_1, $2_1, $2_1, 1, $4_1);
     if (HEAPU8[$1_1 + 53 | 0]) {
      HEAP32[$1_1 + 44 >> 2] = 3;
      if (!HEAPU8[$1_1 + 52 | 0]) {
       break label$6
      }
      break label$2;
     }
     HEAP32[$1_1 + 44 >> 2] = 4;
    }
    HEAP32[$1_1 + 20 >> 2] = $2_1;
    HEAP32[$1_1 + 40 >> 2] = HEAP32[$1_1 + 40 >> 2] + 1;
    if (HEAP32[$1_1 + 36 >> 2] != 1 | HEAP32[$1_1 + 24 >> 2] != 2) {
     break label$2
    }
    HEAP8[$1_1 + 54 | 0] = 1;
    return;
   }
   $0 = HEAP32[$0 + 8 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0, $1_1, $2_1, $3_1, $4_1);
  }
 }
 
 function $2577($0, $1_1, $2_1, $3_1, $4_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  if ($2563($0, HEAP32[$1_1 + 8 >> 2], $4_1)) {
   $2572($1_1, $2_1, $3_1);
   return;
  }
  label$2 : {
   if (!$2563($0, HEAP32[$1_1 >> 2], $4_1)) {
    break label$2
   }
   if (!(HEAP32[$1_1 + 20 >> 2] != ($2_1 | 0) ? HEAP32[$1_1 + 16 >> 2] != ($2_1 | 0) : 0)) {
    if (($3_1 | 0) != 1) {
     break label$2
    }
    HEAP32[$1_1 + 32 >> 2] = 1;
    return;
   }
   HEAP32[$1_1 + 20 >> 2] = $2_1;
   HEAP32[$1_1 + 32 >> 2] = $3_1;
   HEAP32[$1_1 + 40 >> 2] = HEAP32[$1_1 + 40 >> 2] + 1;
   if (!(HEAP32[$1_1 + 36 >> 2] != 1 | HEAP32[$1_1 + 24 >> 2] != 2)) {
    HEAP8[$1_1 + 54 | 0] = 1
   }
   HEAP32[$1_1 + 44 >> 2] = 4;
  }
 }
 
 function $2578($0, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6 = 0, $7 = 0, $8 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0;
  if ($2563($0, HEAP32[$1_1 + 8 >> 2], $5_1)) {
   $2571($1_1, $2_1, $3_1, $4_1);
   return;
  }
  $7 = HEAPU8[$1_1 + 53 | 0];
  $6 = HEAP32[$0 + 12 >> 2];
  HEAP8[$1_1 + 53 | 0] = 0;
  $8 = HEAPU8[$1_1 + 52 | 0];
  HEAP8[$1_1 + 52 | 0] = 0;
  $9_1 = $0 + 16 | 0;
  $2574($9_1, $1_1, $2_1, $3_1, $4_1, $5_1);
  $10_1 = HEAPU8[$1_1 + 53 | 0];
  $7 = $7 | $10_1;
  $11_1 = HEAPU8[$1_1 + 52 | 0];
  $8 = $8 | $11_1;
  label$2 : {
   if (($6 | 0) < 2) {
    break label$2
   }
   $9_1 = $9_1 + ($6 << 3) | 0;
   $6 = $0 + 24 | 0;
   while (1) {
    if (HEAPU8[$1_1 + 54 | 0]) {
     break label$2
    }
    label$4 : {
     if ($11_1) {
      if (HEAP32[$1_1 + 24 >> 2] == 1) {
       break label$2
      }
      if (HEAPU8[$0 + 8 | 0] & 2) {
       break label$4
      }
      break label$2;
     }
     if (!$10_1) {
      break label$4
     }
     if (!(HEAP8[$0 + 8 | 0] & 1)) {
      break label$2
     }
    }
    HEAP16[$1_1 + 52 >> 1] = 0;
    $2574($6, $1_1, $2_1, $3_1, $4_1, $5_1);
    $10_1 = HEAPU8[$1_1 + 53 | 0];
    $7 = $10_1 | $7;
    $11_1 = HEAPU8[$1_1 + 52 | 0];
    $8 = $11_1 | $8;
    $6 = $6 + 8 | 0;
    if ($6 >>> 0 < $9_1 >>> 0) {
     continue
    }
    break;
   };
  }
  HEAP8[$1_1 + 53 | 0] = ($7 & 255) != 0;
  HEAP8[$1_1 + 52 | 0] = ($8 & 255) != 0;
 }
 
 function $2579($0, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  if ($2563($0, HEAP32[$1_1 + 8 >> 2], $5_1)) {
   $2571($1_1, $2_1, $3_1, $4_1);
   return;
  }
  $0 = HEAP32[$0 + 8 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, $1_1, $2_1, $3_1, $4_1, $5_1);
 }
 
 function $2580($0, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  if ($2563($0, HEAP32[$1_1 + 8 >> 2], $5_1)) {
   $2571($1_1, $2_1, $3_1, $4_1)
  }
 }
 
 function $2582($0) {
  $0 = $0 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6 = 0, $7 = 0, $8 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $11_1 = global$0 - 16 | 0;
  global$0 = $11_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            label$11 : {
             if ($0 >>> 0 <= 244) {
              $6 = HEAP32[6240];
              $5_1 = $0 >>> 0 < 11 ? 16 : $0 + 11 & -8;
              $0 = $5_1 >>> 3 | 0;
              $1_1 = $6 >>> $0 | 0;
              if ($1_1 & 3) {
               $2_1 = $0 + (($1_1 ^ -1) & 1) | 0;
               $5_1 = $2_1 << 3;
               $1_1 = HEAP32[$5_1 + 25008 >> 2];
               $0 = $1_1 + 8 | 0;
               $3_1 = HEAP32[$1_1 + 8 >> 2];
               $5_1 = $5_1 + 25e3 | 0;
               label$14 : {
                if (($3_1 | 0) == ($5_1 | 0)) {
                 (wasm2js_i32$0 = 24960, wasm2js_i32$1 = __wasm_rotl_i32(-2, $2_1) & $6), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
                 break label$14;
                }
                HEAP32[$3_1 + 12 >> 2] = $5_1;
                HEAP32[$5_1 + 8 >> 2] = $3_1;
               }
               $2_1 = $2_1 << 3;
               HEAP32[$1_1 + 4 >> 2] = $2_1 | 3;
               $1_1 = $1_1 + $2_1 | 0;
               HEAP32[$1_1 + 4 >> 2] = HEAP32[$1_1 + 4 >> 2] | 1;
               break label$1;
              }
              $7 = HEAP32[6242];
              if ($5_1 >>> 0 <= $7 >>> 0) {
               break label$11
              }
              if ($1_1) {
               $2_1 = 2 << $0;
               $0 = (0 - $2_1 | $2_1) & $1_1 << $0;
               $0 = (0 - $0 & $0) + -1 | 0;
               $1_1 = $0 >>> 12 & 16;
               $2_1 = $1_1;
               $0 = $0 >>> $1_1 | 0;
               $1_1 = $0 >>> 5 & 8;
               $2_1 = $2_1 | $1_1;
               $0 = $0 >>> $1_1 | 0;
               $1_1 = $0 >>> 2 & 4;
               $2_1 = $2_1 | $1_1;
               $0 = $0 >>> $1_1 | 0;
               $1_1 = $0 >>> 1 & 2;
               $2_1 = $2_1 | $1_1;
               $0 = $0 >>> $1_1 | 0;
               $1_1 = $0 >>> 1 & 1;
               $2_1 = ($2_1 | $1_1) + ($0 >>> $1_1 | 0) | 0;
               $3_1 = $2_1 << 3;
               $1_1 = HEAP32[$3_1 + 25008 >> 2];
               $0 = HEAP32[$1_1 + 8 >> 2];
               $3_1 = $3_1 + 25e3 | 0;
               label$17 : {
                if (($0 | 0) == ($3_1 | 0)) {
                 $6 = __wasm_rotl_i32(-2, $2_1) & $6;
                 HEAP32[6240] = $6;
                 break label$17;
                }
                HEAP32[$0 + 12 >> 2] = $3_1;
                HEAP32[$3_1 + 8 >> 2] = $0;
               }
               $0 = $1_1 + 8 | 0;
               HEAP32[$1_1 + 4 >> 2] = $5_1 | 3;
               $4_1 = $1_1 + $5_1 | 0;
               $2_1 = $2_1 << 3;
               $3_1 = $2_1 - $5_1 | 0;
               HEAP32[$4_1 + 4 >> 2] = $3_1 | 1;
               HEAP32[$1_1 + $2_1 >> 2] = $3_1;
               if ($7) {
                $5_1 = $7 >>> 3 | 0;
                $1_1 = ($5_1 << 3) + 25e3 | 0;
                $2_1 = HEAP32[6245];
                $5_1 = 1 << $5_1;
                label$20 : {
                 if (!($5_1 & $6)) {
                  HEAP32[6240] = $5_1 | $6;
                  $5_1 = $1_1;
                  break label$20;
                 }
                 $5_1 = HEAP32[$1_1 + 8 >> 2];
                }
                HEAP32[$1_1 + 8 >> 2] = $2_1;
                HEAP32[$5_1 + 12 >> 2] = $2_1;
                HEAP32[$2_1 + 12 >> 2] = $1_1;
                HEAP32[$2_1 + 8 >> 2] = $5_1;
               }
               HEAP32[6245] = $4_1;
               HEAP32[6242] = $3_1;
               break label$1;
              }
              $10_1 = HEAP32[6241];
              if (!$10_1) {
               break label$11
              }
              $0 = ($10_1 & 0 - $10_1) + -1 | 0;
              $1_1 = $0 >>> 12 & 16;
              $2_1 = $1_1;
              $0 = $0 >>> $1_1 | 0;
              $1_1 = $0 >>> 5 & 8;
              $2_1 = $2_1 | $1_1;
              $0 = $0 >>> $1_1 | 0;
              $1_1 = $0 >>> 2 & 4;
              $2_1 = $2_1 | $1_1;
              $0 = $0 >>> $1_1 | 0;
              $1_1 = $0 >>> 1 & 2;
              $2_1 = $2_1 | $1_1;
              $0 = $0 >>> $1_1 | 0;
              $1_1 = $0 >>> 1 & 1;
              $1_1 = HEAP32[(($2_1 | $1_1) + ($0 >>> $1_1 | 0) << 2) + 25264 >> 2];
              $3_1 = (HEAP32[$1_1 + 4 >> 2] & -8) - $5_1 | 0;
              $2_1 = $1_1;
              while (1) {
               label$23 : {
                $0 = HEAP32[$2_1 + 16 >> 2];
                if (!$0) {
                 $0 = HEAP32[$2_1 + 20 >> 2];
                 if (!$0) {
                  break label$23
                 }
                }
                $4_1 = (HEAP32[$0 + 4 >> 2] & -8) - $5_1 | 0;
                $2_1 = $4_1 >>> 0 < $3_1 >>> 0;
                $3_1 = $2_1 ? $4_1 : $3_1;
                $1_1 = $2_1 ? $0 : $1_1;
                $2_1 = $0;
                continue;
               }
               break;
              };
              $9_1 = HEAP32[$1_1 + 24 >> 2];
              $4_1 = HEAP32[$1_1 + 12 >> 2];
              if (($4_1 | 0) != ($1_1 | 0)) {
               $0 = HEAP32[$1_1 + 8 >> 2];
               HEAP32[$0 + 12 >> 2] = $4_1;
               HEAP32[$4_1 + 8 >> 2] = $0;
               break label$2;
              }
              $2_1 = $1_1 + 20 | 0;
              $0 = HEAP32[$2_1 >> 2];
              if (!$0) {
               $0 = HEAP32[$1_1 + 16 >> 2];
               if (!$0) {
                break label$10
               }
               $2_1 = $1_1 + 16 | 0;
              }
              while (1) {
               $8 = $2_1;
               $4_1 = $0;
               $2_1 = $0 + 20 | 0;
               $0 = HEAP32[$2_1 >> 2];
               if ($0) {
                continue
               }
               $2_1 = $4_1 + 16 | 0;
               $0 = HEAP32[$4_1 + 16 >> 2];
               if ($0) {
                continue
               }
               break;
              };
              HEAP32[$8 >> 2] = 0;
              break label$2;
             }
             $5_1 = -1;
             if ($0 >>> 0 > 4294967231) {
              break label$11
             }
             $0 = $0 + 11 | 0;
             $5_1 = $0 & -8;
             $8 = HEAP32[6241];
             if (!$8) {
              break label$11
             }
             $2_1 = 0 - $5_1 | 0;
             $0 = $0 >>> 8 | 0;
             $7 = 0;
             label$29 : {
              if (!$0) {
               break label$29
              }
              $7 = 31;
              if ($5_1 >>> 0 > 16777215) {
               break label$29
              }
              $3_1 = $0 + 1048320 >>> 16 & 8;
              $1_1 = $0 << $3_1;
              $0 = $1_1 + 520192 >>> 16 & 4;
              $6 = $1_1 << $0;
              $1_1 = $6 + 245760 >>> 16 & 2;
              $0 = ($6 << $1_1 >>> 15 | 0) - ($1_1 | ($0 | $3_1)) | 0;
              $7 = ($0 << 1 | $5_1 >>> $0 + 21 & 1) + 28 | 0;
             }
             $3_1 = HEAP32[($7 << 2) + 25264 >> 2];
             label$30 : {
              label$31 : {
               label$32 : {
                if (!$3_1) {
                 $0 = 0;
                 break label$32;
                }
                $1_1 = $5_1 << (($7 | 0) == 31 ? 0 : 25 - ($7 >>> 1 | 0) | 0);
                $0 = 0;
                while (1) {
                 label$35 : {
                  $6 = (HEAP32[$3_1 + 4 >> 2] & -8) - $5_1 | 0;
                  if ($6 >>> 0 >= $2_1 >>> 0) {
                   break label$35
                  }
                  $4_1 = $3_1;
                  $2_1 = $6;
                  if ($2_1) {
                   break label$35
                  }
                  $2_1 = 0;
                  $0 = $3_1;
                  break label$31;
                 }
                 $6 = HEAP32[$3_1 + 20 >> 2];
                 $3_1 = HEAP32[(($1_1 >>> 29 & 4) + $3_1 | 0) + 16 >> 2];
                 $0 = $6 ? (($6 | 0) == ($3_1 | 0) ? $0 : $6) : $0;
                 $1_1 = $1_1 << (($3_1 | 0) != 0);
                 if ($3_1) {
                  continue
                 }
                 break;
                };
               }
               if (!($0 | $4_1)) {
                $0 = 2 << $7;
                $0 = (0 - $0 | $0) & $8;
                if (!$0) {
                 break label$11
                }
                $0 = ($0 & 0 - $0) + -1 | 0;
                $1_1 = $0 >>> 12 & 16;
                $3_1 = $1_1;
                $0 = $0 >>> $1_1 | 0;
                $1_1 = $0 >>> 5 & 8;
                $3_1 = $3_1 | $1_1;
                $0 = $0 >>> $1_1 | 0;
                $1_1 = $0 >>> 2 & 4;
                $3_1 = $3_1 | $1_1;
                $0 = $0 >>> $1_1 | 0;
                $1_1 = $0 >>> 1 & 2;
                $3_1 = $3_1 | $1_1;
                $0 = $0 >>> $1_1 | 0;
                $1_1 = $0 >>> 1 & 1;
                $0 = HEAP32[(($3_1 | $1_1) + ($0 >>> $1_1 | 0) << 2) + 25264 >> 2];
               }
               if (!$0) {
                break label$30
               }
              }
              while (1) {
               $3_1 = (HEAP32[$0 + 4 >> 2] & -8) - $5_1 | 0;
               $1_1 = $3_1 >>> 0 < $2_1 >>> 0;
               $2_1 = $1_1 ? $3_1 : $2_1;
               $4_1 = $1_1 ? $0 : $4_1;
               $1_1 = HEAP32[$0 + 16 >> 2];
               if ($1_1) {
                $0 = $1_1
               } else {
                $0 = HEAP32[$0 + 20 >> 2]
               }
               if ($0) {
                continue
               }
               break;
              };
             }
             if (!$4_1 | $2_1 >>> 0 >= HEAP32[6242] - $5_1 >>> 0) {
              break label$11
             }
             $7 = HEAP32[$4_1 + 24 >> 2];
             $1_1 = HEAP32[$4_1 + 12 >> 2];
             if (($4_1 | 0) != ($1_1 | 0)) {
              $0 = HEAP32[$4_1 + 8 >> 2];
              HEAP32[$0 + 12 >> 2] = $1_1;
              HEAP32[$1_1 + 8 >> 2] = $0;
              break label$3;
             }
             $3_1 = $4_1 + 20 | 0;
             $0 = HEAP32[$3_1 >> 2];
             if (!$0) {
              $0 = HEAP32[$4_1 + 16 >> 2];
              if (!$0) {
               break label$9
              }
              $3_1 = $4_1 + 16 | 0;
             }
             while (1) {
              $6 = $3_1;
              $1_1 = $0;
              $3_1 = $0 + 20 | 0;
              $0 = HEAP32[$3_1 >> 2];
              if ($0) {
               continue
              }
              $3_1 = $1_1 + 16 | 0;
              $0 = HEAP32[$1_1 + 16 >> 2];
              if ($0) {
               continue
              }
              break;
             };
             HEAP32[$6 >> 2] = 0;
             break label$3;
            }
            $1_1 = HEAP32[6242];
            if ($1_1 >>> 0 >= $5_1 >>> 0) {
             $0 = HEAP32[6245];
             $2_1 = $1_1 - $5_1 | 0;
             label$45 : {
              if ($2_1 >>> 0 >= 16) {
               HEAP32[6242] = $2_1;
               $3_1 = $0 + $5_1 | 0;
               HEAP32[6245] = $3_1;
               HEAP32[$3_1 + 4 >> 2] = $2_1 | 1;
               HEAP32[$0 + $1_1 >> 2] = $2_1;
               HEAP32[$0 + 4 >> 2] = $5_1 | 3;
               break label$45;
              }
              HEAP32[6245] = 0;
              HEAP32[6242] = 0;
              HEAP32[$0 + 4 >> 2] = $1_1 | 3;
              $1_1 = $0 + $1_1 | 0;
              HEAP32[$1_1 + 4 >> 2] = HEAP32[$1_1 + 4 >> 2] | 1;
             }
             $0 = $0 + 8 | 0;
             break label$1;
            }
            $1_1 = HEAP32[6243];
            if ($1_1 >>> 0 > $5_1 >>> 0) {
             $1_1 = $1_1 - $5_1 | 0;
             HEAP32[6243] = $1_1;
             $0 = HEAP32[6246];
             $2_1 = $0 + $5_1 | 0;
             HEAP32[6246] = $2_1;
             HEAP32[$2_1 + 4 >> 2] = $1_1 | 1;
             HEAP32[$0 + 4 >> 2] = $5_1 | 3;
             $0 = $0 + 8 | 0;
             break label$1;
            }
            $0 = 0;
            $4_1 = $5_1 + 47 | 0;
            $3_1 = $4_1;
            if (HEAP32[6358]) {
             $2_1 = HEAP32[6360]
            } else {
             HEAP32[6361] = -1;
             HEAP32[6362] = -1;
             HEAP32[6359] = 4096;
             HEAP32[6360] = 4096;
             HEAP32[6358] = $11_1 + 12 & -16 ^ 1431655768;
             HEAP32[6363] = 0;
             HEAP32[6351] = 0;
             $2_1 = 4096;
            }
            $6 = $3_1 + $2_1 | 0;
            $8 = 0 - $2_1 | 0;
            $2_1 = $6 & $8;
            if ($2_1 >>> 0 <= $5_1 >>> 0) {
             break label$1
            }
            $3_1 = HEAP32[6350];
            if ($3_1) {
             $7 = HEAP32[6348];
             $9_1 = $7 + $2_1 | 0;
             if ($9_1 >>> 0 <= $7 >>> 0 | $9_1 >>> 0 > $3_1 >>> 0) {
              break label$1
             }
            }
            if (HEAPU8[25404] & 4) {
             break label$6
            }
            label$51 : {
             label$52 : {
              $3_1 = HEAP32[6246];
              if ($3_1) {
               $0 = 25408;
               while (1) {
                $7 = HEAP32[$0 >> 2];
                if ($7 + HEAP32[$0 + 4 >> 2] >>> 0 > $3_1 >>> 0 ? $7 >>> 0 <= $3_1 >>> 0 : 0) {
                 break label$52
                }
                $0 = HEAP32[$0 + 8 >> 2];
                if ($0) {
                 continue
                }
                break;
               };
              }
              $1_1 = $2587(0);
              if (($1_1 | 0) == -1) {
               break label$7
              }
              $6 = $2_1;
              $0 = HEAP32[6359];
              $3_1 = $0 + -1 | 0;
              if ($3_1 & $1_1) {
               $6 = ($2_1 - $1_1 | 0) + ($1_1 + $3_1 & 0 - $0) | 0
              }
              if ($6 >>> 0 <= $5_1 >>> 0 | $6 >>> 0 > 2147483646) {
               break label$7
              }
              $0 = HEAP32[6350];
              if ($0) {
               $3_1 = HEAP32[6348];
               $8 = $3_1 + $6 | 0;
               if ($8 >>> 0 <= $3_1 >>> 0 | $8 >>> 0 > $0 >>> 0) {
                break label$7
               }
              }
              $0 = $2587($6);
              if (($1_1 | 0) != ($0 | 0)) {
               break label$51
              }
              break label$5;
             }
             $6 = $8 & $6 - $1_1;
             if ($6 >>> 0 > 2147483646) {
              break label$7
             }
             $1_1 = $2587($6);
             if (($1_1 | 0) == (HEAP32[$0 >> 2] + HEAP32[$0 + 4 >> 2] | 0)) {
              break label$8
             }
             $0 = $1_1;
            }
            if (!(($0 | 0) == -1 | $5_1 + 48 >>> 0 <= $6 >>> 0)) {
             $1_1 = HEAP32[6360];
             $1_1 = $1_1 + ($4_1 - $6 | 0) & 0 - $1_1;
             if ($1_1 >>> 0 > 2147483646) {
              $1_1 = $0;
              break label$5;
             }
             if (($2587($1_1) | 0) != -1) {
              $6 = $1_1 + $6 | 0;
              $1_1 = $0;
              break label$5;
             }
             $2587(0 - $6 | 0);
             break label$7;
            }
            $1_1 = $0;
            if (($0 | 0) != -1) {
             break label$5
            }
            break label$7;
           }
           $4_1 = 0;
           break label$2;
          }
          $1_1 = 0;
          break label$3;
         }
         if (($1_1 | 0) != -1) {
          break label$5
         }
        }
        HEAP32[6351] = HEAP32[6351] | 4;
       }
       if ($2_1 >>> 0 > 2147483646) {
        break label$4
       }
       $1_1 = $2587($2_1);
       $0 = $2587(0);
       if ($1_1 >>> 0 >= $0 >>> 0 | ($1_1 | 0) == -1 | ($0 | 0) == -1) {
        break label$4
       }
       $6 = $0 - $1_1 | 0;
       if ($6 >>> 0 <= $5_1 + 40 >>> 0) {
        break label$4
       }
      }
      $0 = HEAP32[6348] + $6 | 0;
      HEAP32[6348] = $0;
      if ($0 >>> 0 > HEAPU32[6349]) {
       HEAP32[6349] = $0
      }
      label$62 : {
       label$63 : {
        label$64 : {
         $3_1 = HEAP32[6246];
         if ($3_1) {
          $0 = 25408;
          while (1) {
           $2_1 = HEAP32[$0 >> 2];
           $4_1 = HEAP32[$0 + 4 >> 2];
           if (($2_1 + $4_1 | 0) == ($1_1 | 0)) {
            break label$64
           }
           $0 = HEAP32[$0 + 8 >> 2];
           if ($0) {
            continue
           }
           break;
          };
          break label$63;
         }
         $0 = HEAP32[6244];
         if (!($1_1 >>> 0 >= $0 >>> 0 ? $0 : 0)) {
          HEAP32[6244] = $1_1
         }
         $0 = 0;
         HEAP32[6353] = $6;
         HEAP32[6352] = $1_1;
         HEAP32[6248] = -1;
         HEAP32[6249] = HEAP32[6358];
         HEAP32[6355] = 0;
         while (1) {
          $2_1 = $0 << 3;
          $3_1 = $2_1 + 25e3 | 0;
          HEAP32[$2_1 + 25008 >> 2] = $3_1;
          HEAP32[$2_1 + 25012 >> 2] = $3_1;
          $0 = $0 + 1 | 0;
          if (($0 | 0) != 32) {
           continue
          }
          break;
         };
         $0 = $6 + -40 | 0;
         $2_1 = $1_1 + 8 & 7 ? -8 - $1_1 & 7 : 0;
         $3_1 = $0 - $2_1 | 0;
         HEAP32[6243] = $3_1;
         $2_1 = $1_1 + $2_1 | 0;
         HEAP32[6246] = $2_1;
         HEAP32[$2_1 + 4 >> 2] = $3_1 | 1;
         HEAP32[($0 + $1_1 | 0) + 4 >> 2] = 40;
         HEAP32[6247] = HEAP32[6362];
         break label$62;
        }
        if (HEAPU8[$0 + 12 | 0] & 8 | $1_1 >>> 0 <= $3_1 >>> 0 | $2_1 >>> 0 > $3_1 >>> 0) {
         break label$63
        }
        HEAP32[$0 + 4 >> 2] = $4_1 + $6;
        $0 = $3_1 + 8 & 7 ? -8 - $3_1 & 7 : 0;
        $1_1 = $0 + $3_1 | 0;
        HEAP32[6246] = $1_1;
        $2_1 = HEAP32[6243] + $6 | 0;
        $0 = $2_1 - $0 | 0;
        HEAP32[6243] = $0;
        HEAP32[$1_1 + 4 >> 2] = $0 | 1;
        HEAP32[($2_1 + $3_1 | 0) + 4 >> 2] = 40;
        HEAP32[6247] = HEAP32[6362];
        break label$62;
       }
       $0 = HEAP32[6244];
       if ($1_1 >>> 0 < $0 >>> 0) {
        HEAP32[6244] = $1_1;
        $0 = 0;
       }
       $2_1 = $1_1 + $6 | 0;
       $0 = 25408;
       label$70 : {
        label$71 : {
         label$72 : {
          label$73 : {
           label$74 : {
            label$75 : {
             while (1) {
              if (($2_1 | 0) != HEAP32[$0 >> 2]) {
               $0 = HEAP32[$0 + 8 >> 2];
               if ($0) {
                continue
               }
               break label$75;
              }
              break;
             };
             if (!(HEAPU8[$0 + 12 | 0] & 8)) {
              break label$74
             }
            }
            $0 = 25408;
            while (1) {
             $2_1 = HEAP32[$0 >> 2];
             if ($2_1 >>> 0 <= $3_1 >>> 0) {
              $4_1 = $2_1 + HEAP32[$0 + 4 >> 2] | 0;
              if ($4_1 >>> 0 > $3_1 >>> 0) {
               break label$73
              }
             }
             $0 = HEAP32[$0 + 8 >> 2];
             continue;
            };
           }
           HEAP32[$0 >> 2] = $1_1;
           HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + $6;
           $7 = ($1_1 + 8 & 7 ? -8 - $1_1 & 7 : 0) + $1_1 | 0;
           HEAP32[$7 + 4 >> 2] = $5_1 | 3;
           $1_1 = $2_1 + ($2_1 + 8 & 7 ? -8 - $2_1 & 7 : 0) | 0;
           $0 = ($1_1 - $7 | 0) - $5_1 | 0;
           $4_1 = $5_1 + $7 | 0;
           if (($1_1 | 0) == ($3_1 | 0)) {
            HEAP32[6246] = $4_1;
            $0 = HEAP32[6243] + $0 | 0;
            HEAP32[6243] = $0;
            HEAP32[$4_1 + 4 >> 2] = $0 | 1;
            break label$71;
           }
           if (HEAP32[6245] == ($1_1 | 0)) {
            HEAP32[6245] = $4_1;
            $0 = HEAP32[6242] + $0 | 0;
            HEAP32[6242] = $0;
            HEAP32[$4_1 + 4 >> 2] = $0 | 1;
            HEAP32[$0 + $4_1 >> 2] = $0;
            break label$71;
           }
           $2_1 = HEAP32[$1_1 + 4 >> 2];
           if (($2_1 & 3) == 1) {
            $9_1 = $2_1 & -8;
            label$83 : {
             if ($2_1 >>> 0 <= 255) {
              $3_1 = HEAP32[$1_1 + 8 >> 2];
              $5_1 = $2_1 >>> 3 | 0;
              $2_1 = HEAP32[$1_1 + 12 >> 2];
              if (($2_1 | 0) == ($3_1 | 0)) {
               (wasm2js_i32$0 = 24960, wasm2js_i32$1 = HEAP32[6240] & __wasm_rotl_i32(-2, $5_1)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
               break label$83;
              }
              HEAP32[$3_1 + 12 >> 2] = $2_1;
              HEAP32[$2_1 + 8 >> 2] = $3_1;
              break label$83;
             }
             $8 = HEAP32[$1_1 + 24 >> 2];
             $6 = HEAP32[$1_1 + 12 >> 2];
             label$86 : {
              if (($6 | 0) != ($1_1 | 0)) {
               $2_1 = HEAP32[$1_1 + 8 >> 2];
               HEAP32[$2_1 + 12 >> 2] = $6;
               HEAP32[$6 + 8 >> 2] = $2_1;
               break label$86;
              }
              label$89 : {
               $3_1 = $1_1 + 20 | 0;
               $5_1 = HEAP32[$3_1 >> 2];
               if ($5_1) {
                break label$89
               }
               $3_1 = $1_1 + 16 | 0;
               $5_1 = HEAP32[$3_1 >> 2];
               if ($5_1) {
                break label$89
               }
               $6 = 0;
               break label$86;
              }
              while (1) {
               $2_1 = $3_1;
               $6 = $5_1;
               $3_1 = $5_1 + 20 | 0;
               $5_1 = HEAP32[$3_1 >> 2];
               if ($5_1) {
                continue
               }
               $3_1 = $6 + 16 | 0;
               $5_1 = HEAP32[$6 + 16 >> 2];
               if ($5_1) {
                continue
               }
               break;
              };
              HEAP32[$2_1 >> 2] = 0;
             }
             if (!$8) {
              break label$83
             }
             $2_1 = HEAP32[$1_1 + 28 >> 2];
             $3_1 = ($2_1 << 2) + 25264 | 0;
             label$91 : {
              if (HEAP32[$3_1 >> 2] == ($1_1 | 0)) {
               HEAP32[$3_1 >> 2] = $6;
               if ($6) {
                break label$91
               }
               (wasm2js_i32$0 = 24964, wasm2js_i32$1 = HEAP32[6241] & __wasm_rotl_i32(-2, $2_1)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
               break label$83;
              }
              HEAP32[$8 + (HEAP32[$8 + 16 >> 2] == ($1_1 | 0) ? 16 : 20) >> 2] = $6;
              if (!$6) {
               break label$83
              }
             }
             HEAP32[$6 + 24 >> 2] = $8;
             $2_1 = HEAP32[$1_1 + 16 >> 2];
             if ($2_1) {
              HEAP32[$6 + 16 >> 2] = $2_1;
              HEAP32[$2_1 + 24 >> 2] = $6;
             }
             $2_1 = HEAP32[$1_1 + 20 >> 2];
             if (!$2_1) {
              break label$83
             }
             HEAP32[$6 + 20 >> 2] = $2_1;
             HEAP32[$2_1 + 24 >> 2] = $6;
            }
            $1_1 = $1_1 + $9_1 | 0;
            $0 = $0 + $9_1 | 0;
           }
           HEAP32[$1_1 + 4 >> 2] = HEAP32[$1_1 + 4 >> 2] & -2;
           HEAP32[$4_1 + 4 >> 2] = $0 | 1;
           HEAP32[$0 + $4_1 >> 2] = $0;
           if ($0 >>> 0 <= 255) {
            $1_1 = $0 >>> 3 | 0;
            $0 = ($1_1 << 3) + 25e3 | 0;
            $2_1 = HEAP32[6240];
            $1_1 = 1 << $1_1;
            label$95 : {
             if (!($2_1 & $1_1)) {
              HEAP32[6240] = $1_1 | $2_1;
              $1_1 = $0;
              break label$95;
             }
             $1_1 = HEAP32[$0 + 8 >> 2];
            }
            HEAP32[$0 + 8 >> 2] = $4_1;
            HEAP32[$1_1 + 12 >> 2] = $4_1;
            HEAP32[$4_1 + 12 >> 2] = $0;
            HEAP32[$4_1 + 8 >> 2] = $1_1;
            break label$71;
           }
           $6 = $4_1;
           $1_1 = $0 >>> 8 | 0;
           $2_1 = 0;
           label$97 : {
            if (!$1_1) {
             break label$97
            }
            $2_1 = 31;
            if ($0 >>> 0 > 16777215) {
             break label$97
            }
            $3_1 = $1_1 + 1048320 >>> 16 & 8;
            $2_1 = $1_1 << $3_1;
            $1_1 = $2_1 + 520192 >>> 16 & 4;
            $5_1 = $2_1 << $1_1;
            $2_1 = $5_1 + 245760 >>> 16 & 2;
            $1_1 = ($5_1 << $2_1 >>> 15 | 0) - ($2_1 | ($1_1 | $3_1)) | 0;
            $2_1 = ($1_1 << 1 | $0 >>> $1_1 + 21 & 1) + 28 | 0;
           }
           $1_1 = $2_1;
           HEAP32[$6 + 28 >> 2] = $1_1;
           HEAP32[$4_1 + 16 >> 2] = 0;
           HEAP32[$4_1 + 20 >> 2] = 0;
           $2_1 = ($1_1 << 2) + 25264 | 0;
           $3_1 = HEAP32[6241];
           $5_1 = 1 << $1_1;
           label$98 : {
            if (!($3_1 & $5_1)) {
             HEAP32[6241] = $3_1 | $5_1;
             HEAP32[$2_1 >> 2] = $4_1;
             break label$98;
            }
            $3_1 = $0 << (($1_1 | 0) == 31 ? 0 : 25 - ($1_1 >>> 1 | 0) | 0);
            $1_1 = HEAP32[$2_1 >> 2];
            while (1) {
             $2_1 = $1_1;
             if ((HEAP32[$1_1 + 4 >> 2] & -8) == ($0 | 0)) {
              break label$72
             }
             $1_1 = $3_1 >>> 29 | 0;
             $3_1 = $3_1 << 1;
             $5_1 = ($2_1 + ($1_1 & 4) | 0) + 16 | 0;
             $1_1 = HEAP32[$5_1 >> 2];
             if ($1_1) {
              continue
             }
             break;
            };
            HEAP32[$5_1 >> 2] = $4_1;
           }
           HEAP32[$4_1 + 24 >> 2] = $2_1;
           HEAP32[$4_1 + 12 >> 2] = $4_1;
           HEAP32[$4_1 + 8 >> 2] = $4_1;
           break label$71;
          }
          $0 = $6 + -40 | 0;
          $2_1 = $1_1 + 8 & 7 ? -8 - $1_1 & 7 : 0;
          $8 = $0 - $2_1 | 0;
          HEAP32[6243] = $8;
          $2_1 = $1_1 + $2_1 | 0;
          HEAP32[6246] = $2_1;
          HEAP32[$2_1 + 4 >> 2] = $8 | 1;
          HEAP32[($0 + $1_1 | 0) + 4 >> 2] = 40;
          HEAP32[6247] = HEAP32[6362];
          $0 = ($4_1 + ($4_1 + -39 & 7 ? 39 - $4_1 & 7 : 0) | 0) + -47 | 0;
          $2_1 = $0 >>> 0 < $3_1 + 16 >>> 0 ? $3_1 : $0;
          HEAP32[$2_1 + 4 >> 2] = 27;
          $0 = HEAP32[6355];
          HEAP32[$2_1 + 16 >> 2] = HEAP32[6354];
          HEAP32[$2_1 + 20 >> 2] = $0;
          $0 = HEAP32[6353];
          HEAP32[$2_1 + 8 >> 2] = HEAP32[6352];
          HEAP32[$2_1 + 12 >> 2] = $0;
          HEAP32[6354] = $2_1 + 8;
          HEAP32[6353] = $6;
          HEAP32[6352] = $1_1;
          HEAP32[6355] = 0;
          $0 = $2_1 + 24 | 0;
          while (1) {
           HEAP32[$0 + 4 >> 2] = 7;
           $1_1 = $0 + 8 | 0;
           $0 = $0 + 4 | 0;
           if ($4_1 >>> 0 > $1_1 >>> 0) {
            continue
           }
           break;
          };
          if (($2_1 | 0) == ($3_1 | 0)) {
           break label$62
          }
          HEAP32[$2_1 + 4 >> 2] = HEAP32[$2_1 + 4 >> 2] & -2;
          $6 = $2_1 - $3_1 | 0;
          HEAP32[$3_1 + 4 >> 2] = $6 | 1;
          HEAP32[$2_1 >> 2] = $6;
          if ($6 >>> 0 <= 255) {
           $1_1 = $6 >>> 3 | 0;
           $0 = ($1_1 << 3) + 25e3 | 0;
           $2_1 = HEAP32[6240];
           $1_1 = 1 << $1_1;
           label$103 : {
            if (!($2_1 & $1_1)) {
             HEAP32[6240] = $1_1 | $2_1;
             $1_1 = $0;
             break label$103;
            }
            $1_1 = HEAP32[$0 + 8 >> 2];
           }
           HEAP32[$0 + 8 >> 2] = $3_1;
           HEAP32[$1_1 + 12 >> 2] = $3_1;
           HEAP32[$3_1 + 12 >> 2] = $0;
           HEAP32[$3_1 + 8 >> 2] = $1_1;
           break label$62;
          }
          HEAP32[$3_1 + 16 >> 2] = 0;
          HEAP32[$3_1 + 20 >> 2] = 0;
          $7 = $3_1;
          $0 = $6 >>> 8 | 0;
          $1_1 = 0;
          label$105 : {
           if (!$0) {
            break label$105
           }
           $1_1 = 31;
           if ($6 >>> 0 > 16777215) {
            break label$105
           }
           $2_1 = $0 + 1048320 >>> 16 & 8;
           $1_1 = $0 << $2_1;
           $0 = $1_1 + 520192 >>> 16 & 4;
           $4_1 = $1_1 << $0;
           $1_1 = $4_1 + 245760 >>> 16 & 2;
           $0 = ($4_1 << $1_1 >>> 15 | 0) - ($1_1 | ($0 | $2_1)) | 0;
           $1_1 = ($0 << 1 | $6 >>> $0 + 21 & 1) + 28 | 0;
          }
          $0 = $1_1;
          HEAP32[$7 + 28 >> 2] = $0;
          $1_1 = ($0 << 2) + 25264 | 0;
          $2_1 = HEAP32[6241];
          $4_1 = 1 << $0;
          label$106 : {
           if (!($2_1 & $4_1)) {
            HEAP32[6241] = $2_1 | $4_1;
            HEAP32[$1_1 >> 2] = $3_1;
            HEAP32[$3_1 + 24 >> 2] = $1_1;
            break label$106;
           }
           $0 = $6 << (($0 | 0) == 31 ? 0 : 25 - ($0 >>> 1 | 0) | 0);
           $1_1 = HEAP32[$1_1 >> 2];
           while (1) {
            $2_1 = $1_1;
            if (($6 | 0) == (HEAP32[$1_1 + 4 >> 2] & -8)) {
             break label$70
            }
            $1_1 = $0 >>> 29 | 0;
            $0 = $0 << 1;
            $4_1 = ($2_1 + ($1_1 & 4) | 0) + 16 | 0;
            $1_1 = HEAP32[$4_1 >> 2];
            if ($1_1) {
             continue
            }
            break;
           };
           HEAP32[$4_1 >> 2] = $3_1;
           HEAP32[$3_1 + 24 >> 2] = $2_1;
          }
          HEAP32[$3_1 + 12 >> 2] = $3_1;
          HEAP32[$3_1 + 8 >> 2] = $3_1;
          break label$62;
         }
         $0 = HEAP32[$2_1 + 8 >> 2];
         HEAP32[$0 + 12 >> 2] = $4_1;
         HEAP32[$2_1 + 8 >> 2] = $4_1;
         HEAP32[$4_1 + 24 >> 2] = 0;
         HEAP32[$4_1 + 12 >> 2] = $2_1;
         HEAP32[$4_1 + 8 >> 2] = $0;
        }
        $0 = $7 + 8 | 0;
        break label$1;
       }
       $0 = HEAP32[$2_1 + 8 >> 2];
       HEAP32[$0 + 12 >> 2] = $3_1;
       HEAP32[$2_1 + 8 >> 2] = $3_1;
       HEAP32[$3_1 + 24 >> 2] = 0;
       HEAP32[$3_1 + 12 >> 2] = $2_1;
       HEAP32[$3_1 + 8 >> 2] = $0;
      }
      $0 = HEAP32[6243];
      if ($0 >>> 0 <= $5_1 >>> 0) {
       break label$4
      }
      $1_1 = $0 - $5_1 | 0;
      HEAP32[6243] = $1_1;
      $0 = HEAP32[6246];
      $2_1 = $0 + $5_1 | 0;
      HEAP32[6246] = $2_1;
      HEAP32[$2_1 + 4 >> 2] = $1_1 | 1;
      HEAP32[$0 + 4 >> 2] = $5_1 | 3;
      $0 = $0 + 8 | 0;
      break label$1;
     }
     HEAP32[4914] = 48;
     $0 = 0;
     break label$1;
    }
    label$109 : {
     if (!$7) {
      break label$109
     }
     $0 = HEAP32[$4_1 + 28 >> 2];
     $3_1 = ($0 << 2) + 25264 | 0;
     label$110 : {
      if (HEAP32[$3_1 >> 2] == ($4_1 | 0)) {
       HEAP32[$3_1 >> 2] = $1_1;
       if ($1_1) {
        break label$110
       }
       $8 = __wasm_rotl_i32(-2, $0) & $8;
       HEAP32[6241] = $8;
       break label$109;
      }
      HEAP32[$7 + (HEAP32[$7 + 16 >> 2] == ($4_1 | 0) ? 16 : 20) >> 2] = $1_1;
      if (!$1_1) {
       break label$109
      }
     }
     HEAP32[$1_1 + 24 >> 2] = $7;
     $0 = HEAP32[$4_1 + 16 >> 2];
     if ($0) {
      HEAP32[$1_1 + 16 >> 2] = $0;
      HEAP32[$0 + 24 >> 2] = $1_1;
     }
     $0 = HEAP32[$4_1 + 20 >> 2];
     if (!$0) {
      break label$109
     }
     HEAP32[$1_1 + 20 >> 2] = $0;
     HEAP32[$0 + 24 >> 2] = $1_1;
    }
    label$113 : {
     if ($2_1 >>> 0 <= 15) {
      $0 = $2_1 + $5_1 | 0;
      HEAP32[$4_1 + 4 >> 2] = $0 | 3;
      $0 = $0 + $4_1 | 0;
      HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] | 1;
      break label$113;
     }
     HEAP32[$4_1 + 4 >> 2] = $5_1 | 3;
     $1_1 = $4_1 + $5_1 | 0;
     HEAP32[$1_1 + 4 >> 2] = $2_1 | 1;
     HEAP32[$1_1 + $2_1 >> 2] = $2_1;
     if ($2_1 >>> 0 <= 255) {
      $2_1 = $2_1 >>> 3 | 0;
      $0 = ($2_1 << 3) + 25e3 | 0;
      $3_1 = HEAP32[6240];
      $2_1 = 1 << $2_1;
      label$116 : {
       if (!($3_1 & $2_1)) {
        HEAP32[6240] = $2_1 | $3_1;
        $2_1 = $0;
        break label$116;
       }
       $2_1 = HEAP32[$0 + 8 >> 2];
      }
      HEAP32[$0 + 8 >> 2] = $1_1;
      HEAP32[$2_1 + 12 >> 2] = $1_1;
      HEAP32[$1_1 + 12 >> 2] = $0;
      HEAP32[$1_1 + 8 >> 2] = $2_1;
      break label$113;
     }
     $7 = $1_1;
     $0 = $2_1 >>> 8 | 0;
     $3_1 = 0;
     label$118 : {
      if (!$0) {
       break label$118
      }
      $3_1 = 31;
      if ($2_1 >>> 0 > 16777215) {
       break label$118
      }
      $5_1 = $0 + 1048320 >>> 16 & 8;
      $3_1 = $0 << $5_1;
      $0 = $3_1 + 520192 >>> 16 & 4;
      $6 = $3_1 << $0;
      $3_1 = $6 + 245760 >>> 16 & 2;
      $0 = ($6 << $3_1 >>> 15 | 0) - ($3_1 | ($0 | $5_1)) | 0;
      $3_1 = ($0 << 1 | $2_1 >>> $0 + 21 & 1) + 28 | 0;
     }
     $0 = $3_1;
     HEAP32[$7 + 28 >> 2] = $0;
     HEAP32[$1_1 + 16 >> 2] = 0;
     HEAP32[$1_1 + 20 >> 2] = 0;
     $3_1 = ($0 << 2) + 25264 | 0;
     label$119 : {
      $5_1 = 1 << $0;
      label$120 : {
       if (!($5_1 & $8)) {
        HEAP32[6241] = $5_1 | $8;
        HEAP32[$3_1 >> 2] = $1_1;
        break label$120;
       }
       $0 = $2_1 << (($0 | 0) == 31 ? 0 : 25 - ($0 >>> 1 | 0) | 0);
       $5_1 = HEAP32[$3_1 >> 2];
       while (1) {
        $3_1 = $5_1;
        if ((HEAP32[$3_1 + 4 >> 2] & -8) == ($2_1 | 0)) {
         break label$119
        }
        $5_1 = $0 >>> 29 | 0;
        $0 = $0 << 1;
        $6 = ($3_1 + ($5_1 & 4) | 0) + 16 | 0;
        $5_1 = HEAP32[$6 >> 2];
        if ($5_1) {
         continue
        }
        break;
       };
       HEAP32[$6 >> 2] = $1_1;
      }
      HEAP32[$1_1 + 24 >> 2] = $3_1;
      HEAP32[$1_1 + 12 >> 2] = $1_1;
      HEAP32[$1_1 + 8 >> 2] = $1_1;
      break label$113;
     }
     $0 = HEAP32[$3_1 + 8 >> 2];
     HEAP32[$0 + 12 >> 2] = $1_1;
     HEAP32[$3_1 + 8 >> 2] = $1_1;
     HEAP32[$1_1 + 24 >> 2] = 0;
     HEAP32[$1_1 + 12 >> 2] = $3_1;
     HEAP32[$1_1 + 8 >> 2] = $0;
    }
    $0 = $4_1 + 8 | 0;
    break label$1;
   }
   label$123 : {
    if (!$9_1) {
     break label$123
    }
    $0 = HEAP32[$1_1 + 28 >> 2];
    $2_1 = ($0 << 2) + 25264 | 0;
    label$124 : {
     if (HEAP32[$2_1 >> 2] == ($1_1 | 0)) {
      HEAP32[$2_1 >> 2] = $4_1;
      if ($4_1) {
       break label$124
      }
      (wasm2js_i32$0 = 24964, wasm2js_i32$1 = __wasm_rotl_i32(-2, $0) & $10_1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
      break label$123;
     }
     HEAP32[(HEAP32[$9_1 + 16 >> 2] == ($1_1 | 0) ? 16 : 20) + $9_1 >> 2] = $4_1;
     if (!$4_1) {
      break label$123
     }
    }
    HEAP32[$4_1 + 24 >> 2] = $9_1;
    $0 = HEAP32[$1_1 + 16 >> 2];
    if ($0) {
     HEAP32[$4_1 + 16 >> 2] = $0;
     HEAP32[$0 + 24 >> 2] = $4_1;
    }
    $0 = HEAP32[$1_1 + 20 >> 2];
    if (!$0) {
     break label$123
    }
    HEAP32[$4_1 + 20 >> 2] = $0;
    HEAP32[$0 + 24 >> 2] = $4_1;
   }
   label$127 : {
    if ($3_1 >>> 0 <= 15) {
     $0 = $3_1 + $5_1 | 0;
     HEAP32[$1_1 + 4 >> 2] = $0 | 3;
     $0 = $0 + $1_1 | 0;
     HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] | 1;
     break label$127;
    }
    HEAP32[$1_1 + 4 >> 2] = $5_1 | 3;
    $5_1 = $1_1 + $5_1 | 0;
    HEAP32[$5_1 + 4 >> 2] = $3_1 | 1;
    HEAP32[$3_1 + $5_1 >> 2] = $3_1;
    if ($7) {
     $4_1 = $7 >>> 3 | 0;
     $0 = ($4_1 << 3) + 25e3 | 0;
     $2_1 = HEAP32[6245];
     $4_1 = 1 << $4_1;
     label$130 : {
      if (!($4_1 & $6)) {
       HEAP32[6240] = $4_1 | $6;
       $6 = $0;
       break label$130;
      }
      $6 = HEAP32[$0 + 8 >> 2];
     }
     HEAP32[$0 + 8 >> 2] = $2_1;
     HEAP32[$6 + 12 >> 2] = $2_1;
     HEAP32[$2_1 + 12 >> 2] = $0;
     HEAP32[$2_1 + 8 >> 2] = $6;
    }
    HEAP32[6245] = $5_1;
    HEAP32[6242] = $3_1;
   }
   $0 = $1_1 + 8 | 0;
  }
  global$0 = $11_1 + 16 | 0;
  return $0 | 0;
 }
 
 function $2583($0) {
  $0 = $0 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6 = 0, $7 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  label$1 : {
   if (!$0) {
    break label$1
   }
   $3_1 = $0 + -8 | 0;
   $2_1 = HEAP32[$0 + -4 >> 2];
   $0 = $2_1 & -8;
   $5_1 = $3_1 + $0 | 0;
   label$2 : {
    if ($2_1 & 1) {
     break label$2
    }
    if (!($2_1 & 3)) {
     break label$1
    }
    $2_1 = HEAP32[$3_1 >> 2];
    $3_1 = $3_1 - $2_1 | 0;
    if ($3_1 >>> 0 < HEAPU32[6244]) {
     break label$1
    }
    $0 = $0 + $2_1 | 0;
    if (HEAP32[6245] != ($3_1 | 0)) {
     if ($2_1 >>> 0 <= 255) {
      $4_1 = HEAP32[$3_1 + 8 >> 2];
      $2_1 = $2_1 >>> 3 | 0;
      $1_1 = HEAP32[$3_1 + 12 >> 2];
      if (($1_1 | 0) == ($4_1 | 0)) {
       (wasm2js_i32$0 = 24960, wasm2js_i32$1 = HEAP32[6240] & __wasm_rotl_i32(-2, $2_1)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
       break label$2;
      }
      HEAP32[$4_1 + 12 >> 2] = $1_1;
      HEAP32[$1_1 + 8 >> 2] = $4_1;
      break label$2;
     }
     $7 = HEAP32[$3_1 + 24 >> 2];
     $2_1 = HEAP32[$3_1 + 12 >> 2];
     label$6 : {
      if (($2_1 | 0) != ($3_1 | 0)) {
       $1_1 = HEAP32[$3_1 + 8 >> 2];
       HEAP32[$1_1 + 12 >> 2] = $2_1;
       HEAP32[$2_1 + 8 >> 2] = $1_1;
       break label$6;
      }
      label$9 : {
       $4_1 = $3_1 + 20 | 0;
       $1_1 = HEAP32[$4_1 >> 2];
       if ($1_1) {
        break label$9
       }
       $4_1 = $3_1 + 16 | 0;
       $1_1 = HEAP32[$4_1 >> 2];
       if ($1_1) {
        break label$9
       }
       $2_1 = 0;
       break label$6;
      }
      while (1) {
       $6 = $4_1;
       $2_1 = $1_1;
       $4_1 = $2_1 + 20 | 0;
       $1_1 = HEAP32[$4_1 >> 2];
       if ($1_1) {
        continue
       }
       $4_1 = $2_1 + 16 | 0;
       $1_1 = HEAP32[$2_1 + 16 >> 2];
       if ($1_1) {
        continue
       }
       break;
      };
      HEAP32[$6 >> 2] = 0;
     }
     if (!$7) {
      break label$2
     }
     $4_1 = HEAP32[$3_1 + 28 >> 2];
     $1_1 = ($4_1 << 2) + 25264 | 0;
     label$11 : {
      if (HEAP32[$1_1 >> 2] == ($3_1 | 0)) {
       HEAP32[$1_1 >> 2] = $2_1;
       if ($2_1) {
        break label$11
       }
       (wasm2js_i32$0 = 24964, wasm2js_i32$1 = HEAP32[6241] & __wasm_rotl_i32(-2, $4_1)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
       break label$2;
      }
      HEAP32[$7 + (HEAP32[$7 + 16 >> 2] == ($3_1 | 0) ? 16 : 20) >> 2] = $2_1;
      if (!$2_1) {
       break label$2
      }
     }
     HEAP32[$2_1 + 24 >> 2] = $7;
     $1_1 = HEAP32[$3_1 + 16 >> 2];
     if ($1_1) {
      HEAP32[$2_1 + 16 >> 2] = $1_1;
      HEAP32[$1_1 + 24 >> 2] = $2_1;
     }
     $1_1 = HEAP32[$3_1 + 20 >> 2];
     if (!$1_1) {
      break label$2
     }
     HEAP32[$2_1 + 20 >> 2] = $1_1;
     HEAP32[$1_1 + 24 >> 2] = $2_1;
     break label$2;
    }
    $2_1 = HEAP32[$5_1 + 4 >> 2];
    if (($2_1 & 3) != 3) {
     break label$2
    }
    HEAP32[6242] = $0;
    HEAP32[$5_1 + 4 >> 2] = $2_1 & -2;
    HEAP32[$3_1 + 4 >> 2] = $0 | 1;
    HEAP32[$0 + $3_1 >> 2] = $0;
    return;
   }
   if ($5_1 >>> 0 <= $3_1 >>> 0) {
    break label$1
   }
   $2_1 = HEAP32[$5_1 + 4 >> 2];
   if (!($2_1 & 1)) {
    break label$1
   }
   label$14 : {
    if (!($2_1 & 2)) {
     if (($5_1 | 0) == HEAP32[6246]) {
      HEAP32[6246] = $3_1;
      $0 = HEAP32[6243] + $0 | 0;
      HEAP32[6243] = $0;
      HEAP32[$3_1 + 4 >> 2] = $0 | 1;
      if (HEAP32[6245] != ($3_1 | 0)) {
       break label$1
      }
      HEAP32[6242] = 0;
      HEAP32[6245] = 0;
      return;
     }
     if (($5_1 | 0) == HEAP32[6245]) {
      HEAP32[6245] = $3_1;
      $0 = HEAP32[6242] + $0 | 0;
      HEAP32[6242] = $0;
      HEAP32[$3_1 + 4 >> 2] = $0 | 1;
      HEAP32[$0 + $3_1 >> 2] = $0;
      return;
     }
     $0 = ($2_1 & -8) + $0 | 0;
     label$18 : {
      if ($2_1 >>> 0 <= 255) {
       $1_1 = HEAP32[$5_1 + 8 >> 2];
       $2_1 = $2_1 >>> 3 | 0;
       $4_1 = HEAP32[$5_1 + 12 >> 2];
       if (($1_1 | 0) == ($4_1 | 0)) {
        (wasm2js_i32$0 = 24960, wasm2js_i32$1 = HEAP32[6240] & __wasm_rotl_i32(-2, $2_1)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
        break label$18;
       }
       HEAP32[$1_1 + 12 >> 2] = $4_1;
       HEAP32[$4_1 + 8 >> 2] = $1_1;
       break label$18;
      }
      $7 = HEAP32[$5_1 + 24 >> 2];
      $2_1 = HEAP32[$5_1 + 12 >> 2];
      label$23 : {
       if (($5_1 | 0) != ($2_1 | 0)) {
        $1_1 = HEAP32[$5_1 + 8 >> 2];
        HEAP32[$1_1 + 12 >> 2] = $2_1;
        HEAP32[$2_1 + 8 >> 2] = $1_1;
        break label$23;
       }
       label$26 : {
        $4_1 = $5_1 + 20 | 0;
        $1_1 = HEAP32[$4_1 >> 2];
        if ($1_1) {
         break label$26
        }
        $4_1 = $5_1 + 16 | 0;
        $1_1 = HEAP32[$4_1 >> 2];
        if ($1_1) {
         break label$26
        }
        $2_1 = 0;
        break label$23;
       }
       while (1) {
        $6 = $4_1;
        $2_1 = $1_1;
        $4_1 = $2_1 + 20 | 0;
        $1_1 = HEAP32[$4_1 >> 2];
        if ($1_1) {
         continue
        }
        $4_1 = $2_1 + 16 | 0;
        $1_1 = HEAP32[$2_1 + 16 >> 2];
        if ($1_1) {
         continue
        }
        break;
       };
       HEAP32[$6 >> 2] = 0;
      }
      if (!$7) {
       break label$18
      }
      $4_1 = HEAP32[$5_1 + 28 >> 2];
      $1_1 = ($4_1 << 2) + 25264 | 0;
      label$28 : {
       if (($5_1 | 0) == HEAP32[$1_1 >> 2]) {
        HEAP32[$1_1 >> 2] = $2_1;
        if ($2_1) {
         break label$28
        }
        (wasm2js_i32$0 = 24964, wasm2js_i32$1 = HEAP32[6241] & __wasm_rotl_i32(-2, $4_1)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
        break label$18;
       }
       HEAP32[$7 + (($5_1 | 0) == HEAP32[$7 + 16 >> 2] ? 16 : 20) >> 2] = $2_1;
       if (!$2_1) {
        break label$18
       }
      }
      HEAP32[$2_1 + 24 >> 2] = $7;
      $1_1 = HEAP32[$5_1 + 16 >> 2];
      if ($1_1) {
       HEAP32[$2_1 + 16 >> 2] = $1_1;
       HEAP32[$1_1 + 24 >> 2] = $2_1;
      }
      $1_1 = HEAP32[$5_1 + 20 >> 2];
      if (!$1_1) {
       break label$18
      }
      HEAP32[$2_1 + 20 >> 2] = $1_1;
      HEAP32[$1_1 + 24 >> 2] = $2_1;
     }
     HEAP32[$3_1 + 4 >> 2] = $0 | 1;
     HEAP32[$0 + $3_1 >> 2] = $0;
     if (HEAP32[6245] != ($3_1 | 0)) {
      break label$14
     }
     HEAP32[6242] = $0;
     return;
    }
    HEAP32[$5_1 + 4 >> 2] = $2_1 & -2;
    HEAP32[$3_1 + 4 >> 2] = $0 | 1;
    HEAP32[$0 + $3_1 >> 2] = $0;
   }
   if ($0 >>> 0 <= 255) {
    $0 = $0 >>> 3 | 0;
    $2_1 = ($0 << 3) + 25e3 | 0;
    $1_1 = HEAP32[6240];
    $0 = 1 << $0;
    label$32 : {
     if (!($1_1 & $0)) {
      HEAP32[6240] = $0 | $1_1;
      $0 = $2_1;
      break label$32;
     }
     $0 = HEAP32[$2_1 + 8 >> 2];
    }
    HEAP32[$2_1 + 8 >> 2] = $3_1;
    HEAP32[$0 + 12 >> 2] = $3_1;
    HEAP32[$3_1 + 12 >> 2] = $2_1;
    HEAP32[$3_1 + 8 >> 2] = $0;
    return;
   }
   HEAP32[$3_1 + 16 >> 2] = 0;
   HEAP32[$3_1 + 20 >> 2] = 0;
   $5_1 = $3_1;
   $4_1 = $0 >>> 8 | 0;
   $1_1 = 0;
   label$34 : {
    if (!$4_1) {
     break label$34
    }
    $1_1 = 31;
    if ($0 >>> 0 > 16777215) {
     break label$34
    }
    $2_1 = $4_1;
    $4_1 = $4_1 + 1048320 >>> 16 & 8;
    $1_1 = $2_1 << $4_1;
    $7 = $1_1 + 520192 >>> 16 & 4;
    $1_1 = $1_1 << $7;
    $6 = $1_1 + 245760 >>> 16 & 2;
    $1_1 = ($1_1 << $6 >>> 15 | 0) - ($6 | ($4_1 | $7)) | 0;
    $1_1 = ($1_1 << 1 | $0 >>> $1_1 + 21 & 1) + 28 | 0;
   }
   HEAP32[$5_1 + 28 >> 2] = $1_1;
   $6 = ($1_1 << 2) + 25264 | 0;
   label$35 : {
    label$36 : {
     $4_1 = HEAP32[6241];
     $2_1 = 1 << $1_1;
     label$37 : {
      if (!($4_1 & $2_1)) {
       HEAP32[6241] = $2_1 | $4_1;
       HEAP32[$6 >> 2] = $3_1;
       HEAP32[$3_1 + 24 >> 2] = $6;
       break label$37;
      }
      $4_1 = $0 << (($1_1 | 0) == 31 ? 0 : 25 - ($1_1 >>> 1 | 0) | 0);
      $2_1 = HEAP32[$6 >> 2];
      while (1) {
       $1_1 = $2_1;
       if ((HEAP32[$2_1 + 4 >> 2] & -8) == ($0 | 0)) {
        break label$36
       }
       $2_1 = $4_1 >>> 29 | 0;
       $4_1 = $4_1 << 1;
       $6 = ($1_1 + ($2_1 & 4) | 0) + 16 | 0;
       $2_1 = HEAP32[$6 >> 2];
       if ($2_1) {
        continue
       }
       break;
      };
      HEAP32[$6 >> 2] = $3_1;
      HEAP32[$3_1 + 24 >> 2] = $1_1;
     }
     HEAP32[$3_1 + 12 >> 2] = $3_1;
     HEAP32[$3_1 + 8 >> 2] = $3_1;
     break label$35;
    }
    $0 = HEAP32[$1_1 + 8 >> 2];
    HEAP32[$0 + 12 >> 2] = $3_1;
    HEAP32[$1_1 + 8 >> 2] = $3_1;
    HEAP32[$3_1 + 24 >> 2] = 0;
    HEAP32[$3_1 + 12 >> 2] = $1_1;
    HEAP32[$3_1 + 8 >> 2] = $0;
   }
   $0 = HEAP32[6248] + -1 | 0;
   HEAP32[6248] = $0;
   if ($0) {
    break label$1
   }
   $3_1 = 25416;
   while (1) {
    $0 = HEAP32[$3_1 >> 2];
    $3_1 = $0 + 8 | 0;
    if ($0) {
     continue
    }
    break;
   };
   HEAP32[6248] = -1;
  }
 }
 
 function $2584($0, $1_1) {
  var $2_1 = 0, $3_1 = 0;
  if (!$0) {
   return $2582($1_1)
  }
  if ($1_1 >>> 0 >= 4294967232) {
   HEAP32[4914] = 48;
   return 0;
  }
  $2_1 = $2585($0 + -8 | 0, $1_1 >>> 0 < 11 ? 16 : $1_1 + 11 & -8);
  if ($2_1) {
   return $2_1 + 8 | 0
  }
  $2_1 = $2582($1_1);
  if (!$2_1) {
   return 0
  }
  $3_1 = HEAP32[$0 + -4 >> 2];
  $3_1 = ($3_1 & 3 ? -4 : -8) + ($3_1 & -8) | 0;
  $2591($2_1, $0, $3_1 >>> 0 < $1_1 >>> 0 ? $3_1 : $1_1);
  $2583($0);
  return $2_1;
 }
 
 function $2585($0, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6 = 0, $7 = 0, $8 = 0, $9_1 = 0, $10_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $7 = HEAP32[$0 + 4 >> 2];
  $2_1 = $7 & 3;
  $3_1 = $7 & -8;
  $5_1 = $3_1 + $0 | 0;
  label$2 : {
   if (!$2_1) {
    $2_1 = 0;
    if ($1_1 >>> 0 < 256) {
     break label$2
    }
    if ($3_1 >>> 0 >= $1_1 + 4 >>> 0) {
     $2_1 = $0;
     if ($3_1 - $1_1 >>> 0 <= HEAP32[6360] << 1 >>> 0) {
      break label$2
     }
    }
    return 0;
   }
   label$5 : {
    if ($3_1 >>> 0 >= $1_1 >>> 0) {
     $2_1 = $3_1 - $1_1 | 0;
     if ($2_1 >>> 0 < 16) {
      break label$5
     }
     HEAP32[$0 + 4 >> 2] = $7 & 1 | $1_1 | 2;
     $1_1 = $0 + $1_1 | 0;
     HEAP32[$1_1 + 4 >> 2] = $2_1 | 3;
     HEAP32[$5_1 + 4 >> 2] = HEAP32[$5_1 + 4 >> 2] | 1;
     $2586($1_1, $2_1);
     break label$5;
    }
    $2_1 = 0;
    if (($5_1 | 0) == HEAP32[6246]) {
     $4_1 = $3_1 + HEAP32[6243] | 0;
     if ($4_1 >>> 0 <= $1_1 >>> 0) {
      break label$2
     }
     HEAP32[$0 + 4 >> 2] = $7 & 1 | $1_1 | 2;
     $2_1 = $0 + $1_1 | 0;
     $1_1 = $4_1 - $1_1 | 0;
     HEAP32[$2_1 + 4 >> 2] = $1_1 | 1;
     HEAP32[6243] = $1_1;
     HEAP32[6246] = $2_1;
     break label$5;
    }
    if (($5_1 | 0) == HEAP32[6245]) {
     $4_1 = $3_1 + HEAP32[6242] | 0;
     if ($4_1 >>> 0 < $1_1 >>> 0) {
      break label$2
     }
     $2_1 = $4_1 - $1_1 | 0;
     label$9 : {
      if ($2_1 >>> 0 >= 16) {
       HEAP32[$0 + 4 >> 2] = $7 & 1 | $1_1 | 2;
       $1_1 = $0 + $1_1 | 0;
       HEAP32[$1_1 + 4 >> 2] = $2_1 | 1;
       $4_1 = $0 + $4_1 | 0;
       HEAP32[$4_1 >> 2] = $2_1;
       HEAP32[$4_1 + 4 >> 2] = HEAP32[$4_1 + 4 >> 2] & -2;
       break label$9;
      }
      HEAP32[$0 + 4 >> 2] = $4_1 | $7 & 1 | 2;
      $1_1 = $0 + $4_1 | 0;
      HEAP32[$1_1 + 4 >> 2] = HEAP32[$1_1 + 4 >> 2] | 1;
      $2_1 = 0;
      $1_1 = 0;
     }
     HEAP32[6245] = $1_1;
     HEAP32[6242] = $2_1;
     break label$5;
    }
    $6 = HEAP32[$5_1 + 4 >> 2];
    if ($6 & 2) {
     break label$2
    }
    $8 = $3_1 + ($6 & -8) | 0;
    if ($8 >>> 0 < $1_1 >>> 0) {
     break label$2
    }
    $10_1 = $8 - $1_1 | 0;
    label$11 : {
     if ($6 >>> 0 <= 255) {
      $2_1 = $6 >>> 3 | 0;
      $6 = HEAP32[$5_1 + 8 >> 2];
      $4_1 = HEAP32[$5_1 + 12 >> 2];
      if (($6 | 0) == ($4_1 | 0)) {
       (wasm2js_i32$0 = 24960, wasm2js_i32$1 = HEAP32[6240] & __wasm_rotl_i32(-2, $2_1)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
       break label$11;
      }
      HEAP32[$6 + 12 >> 2] = $4_1;
      HEAP32[$4_1 + 8 >> 2] = $6;
      break label$11;
     }
     $9_1 = HEAP32[$5_1 + 24 >> 2];
     $3_1 = HEAP32[$5_1 + 12 >> 2];
     label$14 : {
      if (($5_1 | 0) != ($3_1 | 0)) {
       $2_1 = HEAP32[$5_1 + 8 >> 2];
       HEAP32[$2_1 + 12 >> 2] = $3_1;
       HEAP32[$3_1 + 8 >> 2] = $2_1;
       break label$14;
      }
      label$17 : {
       $2_1 = $5_1 + 20 | 0;
       $6 = HEAP32[$2_1 >> 2];
       if ($6) {
        break label$17
       }
       $2_1 = $5_1 + 16 | 0;
       $6 = HEAP32[$2_1 >> 2];
       if ($6) {
        break label$17
       }
       $3_1 = 0;
       break label$14;
      }
      while (1) {
       $4_1 = $2_1;
       $3_1 = $6;
       $2_1 = $3_1 + 20 | 0;
       $6 = HEAP32[$2_1 >> 2];
       if ($6) {
        continue
       }
       $2_1 = $3_1 + 16 | 0;
       $6 = HEAP32[$3_1 + 16 >> 2];
       if ($6) {
        continue
       }
       break;
      };
      HEAP32[$4_1 >> 2] = 0;
     }
     if (!$9_1) {
      break label$11
     }
     $4_1 = HEAP32[$5_1 + 28 >> 2];
     $2_1 = ($4_1 << 2) + 25264 | 0;
     label$19 : {
      if (($5_1 | 0) == HEAP32[$2_1 >> 2]) {
       HEAP32[$2_1 >> 2] = $3_1;
       if ($3_1) {
        break label$19
       }
       (wasm2js_i32$0 = 24964, wasm2js_i32$1 = HEAP32[6241] & __wasm_rotl_i32(-2, $4_1)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
       break label$11;
      }
      HEAP32[(($5_1 | 0) == HEAP32[$9_1 + 16 >> 2] ? 16 : 20) + $9_1 >> 2] = $3_1;
      if (!$3_1) {
       break label$11
      }
     }
     HEAP32[$3_1 + 24 >> 2] = $9_1;
     $2_1 = HEAP32[$5_1 + 16 >> 2];
     if ($2_1) {
      HEAP32[$3_1 + 16 >> 2] = $2_1;
      HEAP32[$2_1 + 24 >> 2] = $3_1;
     }
     $2_1 = HEAP32[$5_1 + 20 >> 2];
     if (!$2_1) {
      break label$11
     }
     HEAP32[$3_1 + 20 >> 2] = $2_1;
     HEAP32[$2_1 + 24 >> 2] = $3_1;
    }
    if ($10_1 >>> 0 <= 15) {
     HEAP32[$0 + 4 >> 2] = $7 & 1 | $8 | 2;
     $1_1 = $0 + $8 | 0;
     HEAP32[$1_1 + 4 >> 2] = HEAP32[$1_1 + 4 >> 2] | 1;
     break label$5;
    }
    HEAP32[$0 + 4 >> 2] = $7 & 1 | $1_1 | 2;
    $2_1 = $0 + $1_1 | 0;
    HEAP32[$2_1 + 4 >> 2] = $10_1 | 3;
    $1_1 = $0 + $8 | 0;
    HEAP32[$1_1 + 4 >> 2] = HEAP32[$1_1 + 4 >> 2] | 1;
    $2586($2_1, $10_1);
   }
   $2_1 = $0;
  }
  return $2_1;
 }
 
 function $2586($0, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6 = 0, $7 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $5_1 = $0 + $1_1 | 0;
  label$1 : {
   label$2 : {
    $2_1 = HEAP32[$0 + 4 >> 2];
    if ($2_1 & 1) {
     break label$2
    }
    if (!($2_1 & 3)) {
     break label$1
    }
    $2_1 = HEAP32[$0 >> 2];
    $1_1 = $2_1 + $1_1 | 0;
    $0 = $0 - $2_1 | 0;
    if (($0 | 0) != HEAP32[6245]) {
     if ($2_1 >>> 0 <= 255) {
      $4_1 = $2_1 >>> 3 | 0;
      $2_1 = HEAP32[$0 + 8 >> 2];
      $3_1 = HEAP32[$0 + 12 >> 2];
      if (($3_1 | 0) == ($2_1 | 0)) {
       (wasm2js_i32$0 = 24960, wasm2js_i32$1 = HEAP32[6240] & __wasm_rotl_i32(-2, $4_1)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
       break label$2;
      }
      HEAP32[$2_1 + 12 >> 2] = $3_1;
      HEAP32[$3_1 + 8 >> 2] = $2_1;
      break label$2;
     }
     $7 = HEAP32[$0 + 24 >> 2];
     $2_1 = HEAP32[$0 + 12 >> 2];
     label$6 : {
      if (($2_1 | 0) != ($0 | 0)) {
       $3_1 = HEAP32[$0 + 8 >> 2];
       HEAP32[$3_1 + 12 >> 2] = $2_1;
       HEAP32[$2_1 + 8 >> 2] = $3_1;
       break label$6;
      }
      label$9 : {
       $3_1 = $0 + 20 | 0;
       $4_1 = HEAP32[$3_1 >> 2];
       if ($4_1) {
        break label$9
       }
       $3_1 = $0 + 16 | 0;
       $4_1 = HEAP32[$3_1 >> 2];
       if ($4_1) {
        break label$9
       }
       $2_1 = 0;
       break label$6;
      }
      while (1) {
       $6 = $3_1;
       $2_1 = $4_1;
       $3_1 = $2_1 + 20 | 0;
       $4_1 = HEAP32[$3_1 >> 2];
       if ($4_1) {
        continue
       }
       $3_1 = $2_1 + 16 | 0;
       $4_1 = HEAP32[$2_1 + 16 >> 2];
       if ($4_1) {
        continue
       }
       break;
      };
      HEAP32[$6 >> 2] = 0;
     }
     if (!$7) {
      break label$2
     }
     $3_1 = HEAP32[$0 + 28 >> 2];
     $4_1 = ($3_1 << 2) + 25264 | 0;
     label$11 : {
      if (HEAP32[$4_1 >> 2] == ($0 | 0)) {
       HEAP32[$4_1 >> 2] = $2_1;
       if ($2_1) {
        break label$11
       }
       (wasm2js_i32$0 = 24964, wasm2js_i32$1 = HEAP32[6241] & __wasm_rotl_i32(-2, $3_1)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
       break label$2;
      }
      HEAP32[$7 + (HEAP32[$7 + 16 >> 2] == ($0 | 0) ? 16 : 20) >> 2] = $2_1;
      if (!$2_1) {
       break label$2
      }
     }
     HEAP32[$2_1 + 24 >> 2] = $7;
     $3_1 = HEAP32[$0 + 16 >> 2];
     if ($3_1) {
      HEAP32[$2_1 + 16 >> 2] = $3_1;
      HEAP32[$3_1 + 24 >> 2] = $2_1;
     }
     $3_1 = HEAP32[$0 + 20 >> 2];
     if (!$3_1) {
      break label$2
     }
     HEAP32[$2_1 + 20 >> 2] = $3_1;
     HEAP32[$3_1 + 24 >> 2] = $2_1;
     break label$2;
    }
    $2_1 = HEAP32[$5_1 + 4 >> 2];
    if (($2_1 & 3) != 3) {
     break label$2
    }
    HEAP32[6242] = $1_1;
    HEAP32[$5_1 + 4 >> 2] = $2_1 & -2;
    HEAP32[$0 + 4 >> 2] = $1_1 | 1;
    HEAP32[$5_1 >> 2] = $1_1;
    return;
   }
   $2_1 = HEAP32[$5_1 + 4 >> 2];
   label$14 : {
    if (!($2_1 & 2)) {
     if (($5_1 | 0) == HEAP32[6246]) {
      HEAP32[6246] = $0;
      $1_1 = HEAP32[6243] + $1_1 | 0;
      HEAP32[6243] = $1_1;
      HEAP32[$0 + 4 >> 2] = $1_1 | 1;
      if (HEAP32[6245] != ($0 | 0)) {
       break label$1
      }
      HEAP32[6242] = 0;
      HEAP32[6245] = 0;
      return;
     }
     if (($5_1 | 0) == HEAP32[6245]) {
      HEAP32[6245] = $0;
      $1_1 = HEAP32[6242] + $1_1 | 0;
      HEAP32[6242] = $1_1;
      HEAP32[$0 + 4 >> 2] = $1_1 | 1;
      HEAP32[$0 + $1_1 >> 2] = $1_1;
      return;
     }
     $1_1 = ($2_1 & -8) + $1_1 | 0;
     label$18 : {
      if ($2_1 >>> 0 <= 255) {
       $4_1 = $2_1 >>> 3 | 0;
       $2_1 = HEAP32[$5_1 + 8 >> 2];
       $3_1 = HEAP32[$5_1 + 12 >> 2];
       if (($2_1 | 0) == ($3_1 | 0)) {
        (wasm2js_i32$0 = 24960, wasm2js_i32$1 = HEAP32[6240] & __wasm_rotl_i32(-2, $4_1)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
        break label$18;
       }
       HEAP32[$2_1 + 12 >> 2] = $3_1;
       HEAP32[$3_1 + 8 >> 2] = $2_1;
       break label$18;
      }
      $7 = HEAP32[$5_1 + 24 >> 2];
      $2_1 = HEAP32[$5_1 + 12 >> 2];
      label$21 : {
       if (($5_1 | 0) != ($2_1 | 0)) {
        $3_1 = HEAP32[$5_1 + 8 >> 2];
        HEAP32[$3_1 + 12 >> 2] = $2_1;
        HEAP32[$2_1 + 8 >> 2] = $3_1;
        break label$21;
       }
       label$24 : {
        $3_1 = $5_1 + 20 | 0;
        $4_1 = HEAP32[$3_1 >> 2];
        if ($4_1) {
         break label$24
        }
        $3_1 = $5_1 + 16 | 0;
        $4_1 = HEAP32[$3_1 >> 2];
        if ($4_1) {
         break label$24
        }
        $2_1 = 0;
        break label$21;
       }
       while (1) {
        $6 = $3_1;
        $2_1 = $4_1;
        $3_1 = $2_1 + 20 | 0;
        $4_1 = HEAP32[$3_1 >> 2];
        if ($4_1) {
         continue
        }
        $3_1 = $2_1 + 16 | 0;
        $4_1 = HEAP32[$2_1 + 16 >> 2];
        if ($4_1) {
         continue
        }
        break;
       };
       HEAP32[$6 >> 2] = 0;
      }
      if (!$7) {
       break label$18
      }
      $3_1 = HEAP32[$5_1 + 28 >> 2];
      $4_1 = ($3_1 << 2) + 25264 | 0;
      label$26 : {
       if (($5_1 | 0) == HEAP32[$4_1 >> 2]) {
        HEAP32[$4_1 >> 2] = $2_1;
        if ($2_1) {
         break label$26
        }
        (wasm2js_i32$0 = 24964, wasm2js_i32$1 = HEAP32[6241] & __wasm_rotl_i32(-2, $3_1)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
        break label$18;
       }
       HEAP32[$7 + (($5_1 | 0) == HEAP32[$7 + 16 >> 2] ? 16 : 20) >> 2] = $2_1;
       if (!$2_1) {
        break label$18
       }
      }
      HEAP32[$2_1 + 24 >> 2] = $7;
      $3_1 = HEAP32[$5_1 + 16 >> 2];
      if ($3_1) {
       HEAP32[$2_1 + 16 >> 2] = $3_1;
       HEAP32[$3_1 + 24 >> 2] = $2_1;
      }
      $3_1 = HEAP32[$5_1 + 20 >> 2];
      if (!$3_1) {
       break label$18
      }
      HEAP32[$2_1 + 20 >> 2] = $3_1;
      HEAP32[$3_1 + 24 >> 2] = $2_1;
     }
     HEAP32[$0 + 4 >> 2] = $1_1 | 1;
     HEAP32[$0 + $1_1 >> 2] = $1_1;
     if (HEAP32[6245] != ($0 | 0)) {
      break label$14
     }
     HEAP32[6242] = $1_1;
     return;
    }
    HEAP32[$5_1 + 4 >> 2] = $2_1 & -2;
    HEAP32[$0 + 4 >> 2] = $1_1 | 1;
    HEAP32[$0 + $1_1 >> 2] = $1_1;
   }
   if ($1_1 >>> 0 <= 255) {
    $2_1 = $1_1 >>> 3 | 0;
    $1_1 = ($2_1 << 3) + 25e3 | 0;
    $3_1 = HEAP32[6240];
    $2_1 = 1 << $2_1;
    label$30 : {
     if (!($3_1 & $2_1)) {
      HEAP32[6240] = $2_1 | $3_1;
      $2_1 = $1_1;
      break label$30;
     }
     $2_1 = HEAP32[$1_1 + 8 >> 2];
    }
    HEAP32[$1_1 + 8 >> 2] = $0;
    HEAP32[$2_1 + 12 >> 2] = $0;
    HEAP32[$0 + 12 >> 2] = $1_1;
    HEAP32[$0 + 8 >> 2] = $2_1;
    return;
   }
   HEAP32[$0 + 16 >> 2] = 0;
   HEAP32[$0 + 20 >> 2] = 0;
   $3_1 = $0;
   $4_1 = $1_1 >>> 8 | 0;
   $2_1 = 0;
   label$32 : {
    if (!$4_1) {
     break label$32
    }
    $2_1 = 31;
    if ($1_1 >>> 0 > 16777215) {
     break label$32
    }
    $6 = $4_1 + 1048320 >>> 16 & 8;
    $4_1 = $4_1 << $6;
    $2_1 = $4_1 + 520192 >>> 16 & 4;
    $5_1 = $4_1 << $2_1;
    $4_1 = $5_1 + 245760 >>> 16 & 2;
    $2_1 = ($5_1 << $4_1 >>> 15 | 0) - ($4_1 | ($2_1 | $6)) | 0;
    $2_1 = ($2_1 << 1 | $1_1 >>> $2_1 + 21 & 1) + 28 | 0;
   }
   HEAP32[$3_1 + 28 >> 2] = $2_1;
   $4_1 = ($2_1 << 2) + 25264 | 0;
   label$33 : {
    $3_1 = HEAP32[6241];
    $6 = 1 << $2_1;
    label$34 : {
     if (!($3_1 & $6)) {
      HEAP32[6241] = $3_1 | $6;
      HEAP32[$4_1 >> 2] = $0;
      break label$34;
     }
     $3_1 = $1_1 << (($2_1 | 0) == 31 ? 0 : 25 - ($2_1 >>> 1 | 0) | 0);
     $2_1 = HEAP32[$4_1 >> 2];
     while (1) {
      $4_1 = $2_1;
      if ((HEAP32[$2_1 + 4 >> 2] & -8) == ($1_1 | 0)) {
       break label$33
      }
      $2_1 = $3_1 >>> 29 | 0;
      $3_1 = $3_1 << 1;
      $6 = ($4_1 + ($2_1 & 4) | 0) + 16 | 0;
      $2_1 = HEAP32[$6 >> 2];
      if ($2_1) {
       continue
      }
      break;
     };
     HEAP32[$6 >> 2] = $0;
    }
    HEAP32[$0 + 24 >> 2] = $4_1;
    HEAP32[$0 + 12 >> 2] = $0;
    HEAP32[$0 + 8 >> 2] = $0;
    return;
   }
   $1_1 = HEAP32[$4_1 + 8 >> 2];
   HEAP32[$1_1 + 12 >> 2] = $0;
   HEAP32[$4_1 + 8 >> 2] = $0;
   HEAP32[$0 + 24 >> 2] = 0;
   HEAP32[$0 + 12 >> 2] = $4_1;
   HEAP32[$0 + 8 >> 2] = $1_1;
  }
 }
 
 function $2587($0) {
  var $1_1 = 0, $2_1 = 0;
  $1_1 = HEAP32[6368];
  $2_1 = $0 + 3 & -4;
  $0 = $1_1 + $2_1 | 0;
  label$1 : {
   if ($0 >>> 0 <= $1_1 >>> 0 ? ($2_1 | 0) >= 1 : 0) {
    break label$1
   }
   if ($0 >>> 0 > __wasm_memory_size() << 16 >>> 0) {
    if (!fimport$23($0 | 0)) {
     break label$1
    }
   }
   HEAP32[6368] = $0;
   return $1_1;
  }
  HEAP32[4914] = 48;
  return -1;
 }
 
 function $2588($0, $1_1, $2_1, $3_1, $4_1, $5_1, $6, $7, $8) {
  var $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14 = 0, $15 = 0, $16_1 = 0, $17 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0;
  $9_1 = global$0 - 128 | 0;
  global$0 = $9_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if (!$1625($5_1, $6, $7, $8, 0, 0, 0, 0)) {
      break label$3
     }
     $11_1 = $2590($5_1, $6, $7, $8);
     $19_1 = $4_1 >>> 16 | 0;
     $14 = $19_1 & 32767;
     if (($14 | 0) == 32767) {
      break label$3
     }
     if ($11_1) {
      break label$2
     }
    }
    $1633($9_1 + 16 | 0, $1_1, $2_1, $3_1, $4_1, $5_1, $6, $7, $8);
    $4_1 = HEAP32[$9_1 + 16 >> 2];
    $3_1 = HEAP32[$9_1 + 20 >> 2];
    $2_1 = HEAP32[$9_1 + 24 >> 2];
    $1_1 = HEAP32[$9_1 + 28 >> 2];
    $1627($9_1, $4_1, $3_1, $2_1, $1_1, $4_1, $3_1, $2_1, $1_1);
    $3_1 = HEAP32[$9_1 + 8 >> 2];
    $4_1 = HEAP32[$9_1 + 12 >> 2];
    $7 = HEAP32[$9_1 >> 2];
    $8 = HEAP32[$9_1 + 4 >> 2];
    break label$1;
   }
   $10_1 = $4_1 & 65535 | $14 << 16;
   $13_1 = $10_1;
   $12_1 = $3_1;
   $15 = $7;
   $18_1 = $8 >>> 16 & 32767;
   $11_1 = $8 & 65535 | $18_1 << 16;
   if (($1625($1_1, $2_1, $12_1, $10_1, $5_1, $6, $7, $11_1) | 0) <= 0) {
    if ($1625($1_1, $2_1, $12_1, $13_1, $5_1, $6, $15, $11_1)) {
     $7 = $1_1;
     $8 = $2_1;
     break label$1;
    }
    $1633($9_1 + 112 | 0, $1_1, $2_1, $3_1, $4_1, 0, 0, 0, 0);
    $3_1 = HEAP32[$9_1 + 120 >> 2];
    $4_1 = HEAP32[$9_1 + 124 >> 2];
    $7 = HEAP32[$9_1 + 112 >> 2];
    $8 = HEAP32[$9_1 + 116 >> 2];
    break label$1;
   }
   if ($14) {
    $8 = $2_1;
    $7 = $1_1;
   } else {
    $1633($9_1 + 96 | 0, $1_1, $2_1, $12_1, $13_1, 0, 0, 0, 1081540608);
    $7 = HEAP32[$9_1 + 108 >> 2];
    $13_1 = $7;
    $12_1 = HEAP32[$9_1 + 104 >> 2];
    $14 = ($7 >>> 16 | 0) + -120 | 0;
    $8 = HEAP32[$9_1 + 100 >> 2];
    $7 = HEAP32[$9_1 + 96 >> 2];
   }
   if (!$18_1) {
    $1633($9_1 + 80 | 0, $5_1, $6, $15, $11_1, 0, 0, 0, 1081540608);
    $5_1 = HEAP32[$9_1 + 92 >> 2];
    $11_1 = $5_1;
    $15 = HEAP32[$9_1 + 88 >> 2];
    $18_1 = ($11_1 >>> 16 | 0) + -120 | 0;
    $6 = HEAP32[$9_1 + 84 >> 2];
    $5_1 = HEAP32[$9_1 + 80 >> 2];
   }
   $21_1 = $15;
   $10_1 = $15;
   $15 = $12_1 - $10_1 | 0;
   $13_1 = $13_1 & 65535 | 65536;
   $20_1 = $11_1 & 65535 | 65536;
   $11_1 = ($6 | 0) == ($8 | 0) & $7 >>> 0 < $5_1 >>> 0 | $8 >>> 0 < $6 >>> 0;
   $10_1 = ($13_1 - ($20_1 + ($12_1 >>> 0 < $10_1 >>> 0) | 0) | 0) - ($15 >>> 0 < $11_1 >>> 0) | 0;
   $16_1 = $15 - $11_1 | 0;
   $17 = ($10_1 | 0) > -1 ? 1 : ($10_1 | 0) >= -1 ? ($16_1 >>> 0 <= 4294967295 ? 0 : 1) : 0;
   $15 = $7 - $5_1 | 0;
   $11_1 = $8 - (($7 >>> 0 < $5_1 >>> 0) + $6 | 0) | 0;
   if (($14 | 0) > ($18_1 | 0)) {
    while (1) {
     label$11 : {
      if ($17 & 1) {
       if (!($15 | $16_1 | ($10_1 | $11_1))) {
        $1633($9_1 + 32 | 0, $1_1, $2_1, $3_1, $4_1, 0, 0, 0, 0);
        $3_1 = HEAP32[$9_1 + 40 >> 2];
        $4_1 = HEAP32[$9_1 + 44 >> 2];
        $7 = HEAP32[$9_1 + 32 >> 2];
        $8 = HEAP32[$9_1 + 36 >> 2];
        break label$1;
       }
       $7 = $16_1;
       $17 = $10_1 << 1 | $7 >>> 31;
       $16_1 = $7 << 1;
       $10_1 = $17;
       $17 = 0;
       $7 = $11_1 >>> 31 | 0;
       break label$11;
      }
      $10_1 = 0;
      $11_1 = $8;
      $16_1 = $8 >>> 31 | 0;
      $15 = $7;
      $7 = $12_1;
      $17 = $13_1 << 1 | $7 >>> 31;
      $7 = $7 << 1;
     }
     $12_1 = $7 | $16_1;
     $8 = $12_1;
     $7 = $21_1;
     $16_1 = $8 - $7 | 0;
     $13_1 = $10_1 | $17;
     $10_1 = $13_1 - (($8 >>> 0 < $7 >>> 0) + $20_1 | 0) | 0;
     $7 = $15;
     $17 = $11_1 << 1 | $7 >>> 31;
     $7 = $7 << 1;
     $8 = $17;
     $11_1 = ($6 | 0) == ($8 | 0) & $7 >>> 0 < $5_1 >>> 0 | $8 >>> 0 < $6 >>> 0;
     $10_1 = $10_1 - ($16_1 >>> 0 < $11_1 >>> 0) | 0;
     $16_1 = $16_1 - $11_1 | 0;
     $17 = ($10_1 | 0) > -1 ? 1 : ($10_1 | 0) >= -1 ? ($16_1 >>> 0 <= 4294967295 ? 0 : 1) : 0;
     $15 = $7 - $5_1 | 0;
     $11_1 = $8 - (($7 >>> 0 < $5_1 >>> 0) + $6 | 0) | 0;
     $14 = $14 + -1 | 0;
     if (($14 | 0) > ($18_1 | 0)) {
      continue
     }
     break;
    };
    $14 = $18_1;
   }
   label$14 : {
    if (!$17) {
     break label$14
    }
    $7 = $15;
    $12_1 = $16_1;
    $8 = $11_1;
    $13_1 = $10_1;
    if ($7 | $12_1 | ($8 | $10_1)) {
     break label$14
    }
    $1633($9_1 + 48 | 0, $1_1, $2_1, $3_1, $4_1, 0, 0, 0, 0);
    $3_1 = HEAP32[$9_1 + 56 >> 2];
    $4_1 = HEAP32[$9_1 + 60 >> 2];
    $7 = HEAP32[$9_1 + 48 >> 2];
    $8 = HEAP32[$9_1 + 52 >> 2];
    break label$1;
   }
   if (($13_1 | 0) == 65535 & $12_1 >>> 0 <= 4294967295 | $13_1 >>> 0 < 65535) {
    while (1) {
     $3_1 = $8 >>> 31 | 0;
     $1_1 = 0;
     $14 = $14 + -1 | 0;
     $10_1 = $8 << 1 | $7 >>> 31;
     $7 = $7 << 1;
     $8 = $10_1;
     $17 = $13_1 << 1 | $12_1 >>> 31;
     $12_1 = $12_1 << 1 | $3_1;
     $1_1 = $1_1 | $17;
     $13_1 = $1_1;
     if (($1_1 | 0) == 65536 & $12_1 >>> 0 < 0 | $1_1 >>> 0 < 65536) {
      continue
     }
     break;
    }
   }
   $1_1 = $19_1 & 32768;
   if (($14 | 0) <= 0) {
    $1633($9_1 - -64 | 0, $7, $8, $12_1, $13_1 & 65535 | ($1_1 | $14 + 120) << 16, 0, 0, 0, 1065811968);
    $3_1 = HEAP32[$9_1 + 72 >> 2];
    $4_1 = HEAP32[$9_1 + 76 >> 2];
    $7 = HEAP32[$9_1 + 64 >> 2];
    $8 = HEAP32[$9_1 + 68 >> 2];
    break label$1;
   }
   $3_1 = $12_1;
   $4_1 = $13_1 & 65535 | ($1_1 | $14) << 16;
  }
  HEAP32[$0 >> 2] = $7;
  HEAP32[$0 + 4 >> 2] = $8;
  HEAP32[$0 + 8 >> 2] = $3_1;
  HEAP32[$0 + 12 >> 2] = $4_1;
  global$0 = $9_1 + 128 | 0;
 }
 
 function $2589($0) {
  var $1_1 = 0.0;
  $1_1 = 1.0;
  label$1 : {
   if (($0 | 0) >= 1024) {
    $1_1 = 8988465674311579538646525.0e283;
    if (($0 | 0) < 2047) {
     $0 = $0 + -1023 | 0;
     break label$1;
    }
    $1_1 = infinity;
    $0 = (($0 | 0) < 3069 ? $0 : 3069) + -2046 | 0;
    break label$1;
   }
   if (($0 | 0) > -1023) {
    break label$1
   }
   $1_1 = 2.2250738585072014e-308;
   if (($0 | 0) > -2045) {
    $0 = $0 + 1022 | 0;
    break label$1;
   }
   $1_1 = 0.0;
   $0 = (($0 | 0) > -3066 ? $0 : -3066) + 2044 | 0;
  }
  wasm2js_scratch_store_i32(0, 0);
  wasm2js_scratch_store_i32(1, $0 + 1023 << 20);
  return $1_1 * +wasm2js_scratch_load_f64();
 }
 
 function $2590($0, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = 0;
  $5_1 = $3_1 & 65535;
  $3_1 = $3_1 >>> 16 & 32767;
  label$1 : {
   if (($3_1 | 0) != 32767) {
    $4_1 = 4;
    if ($3_1) {
     break label$1
    }
    return $0 | $2_1 | ($1_1 | $5_1) ? 3 : 2;
   }
   $4_1 = !($0 | $2_1 | ($1_1 | $5_1));
  }
  return $4_1;
 }
 
 function $2591($0, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  if ($2_1 >>> 0 >= 512) {
   fimport$24($0 | 0, $1_1 | 0, $2_1 | 0) | 0;
   return $0;
  }
  $4_1 = $0 + $2_1 | 0;
  label$2 : {
   if (!(($0 ^ $1_1) & 3)) {
    label$4 : {
     if (($2_1 | 0) < 1) {
      $2_1 = $0;
      break label$4;
     }
     if (!($0 & 3)) {
      $2_1 = $0;
      break label$4;
     }
     $2_1 = $0;
     while (1) {
      HEAP8[$2_1 | 0] = HEAPU8[$1_1 | 0];
      $1_1 = $1_1 + 1 | 0;
      $2_1 = $2_1 + 1 | 0;
      if ($2_1 >>> 0 >= $4_1 >>> 0) {
       break label$4
      }
      if ($2_1 & 3) {
       continue
      }
      break;
     };
    }
    $3_1 = $4_1 & -4;
    label$8 : {
     if ($3_1 >>> 0 < 64) {
      break label$8
     }
     $5_1 = $3_1 + -64 | 0;
     if ($2_1 >>> 0 > $5_1 >>> 0) {
      break label$8
     }
     while (1) {
      HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2];
      HEAP32[$2_1 + 4 >> 2] = HEAP32[$1_1 + 4 >> 2];
      HEAP32[$2_1 + 8 >> 2] = HEAP32[$1_1 + 8 >> 2];
      HEAP32[$2_1 + 12 >> 2] = HEAP32[$1_1 + 12 >> 2];
      HEAP32[$2_1 + 16 >> 2] = HEAP32[$1_1 + 16 >> 2];
      HEAP32[$2_1 + 20 >> 2] = HEAP32[$1_1 + 20 >> 2];
      HEAP32[$2_1 + 24 >> 2] = HEAP32[$1_1 + 24 >> 2];
      HEAP32[$2_1 + 28 >> 2] = HEAP32[$1_1 + 28 >> 2];
      HEAP32[$2_1 + 32 >> 2] = HEAP32[$1_1 + 32 >> 2];
      HEAP32[$2_1 + 36 >> 2] = HEAP32[$1_1 + 36 >> 2];
      HEAP32[$2_1 + 40 >> 2] = HEAP32[$1_1 + 40 >> 2];
      HEAP32[$2_1 + 44 >> 2] = HEAP32[$1_1 + 44 >> 2];
      HEAP32[$2_1 + 48 >> 2] = HEAP32[$1_1 + 48 >> 2];
      HEAP32[$2_1 + 52 >> 2] = HEAP32[$1_1 + 52 >> 2];
      HEAP32[$2_1 + 56 >> 2] = HEAP32[$1_1 + 56 >> 2];
      HEAP32[$2_1 + 60 >> 2] = HEAP32[$1_1 + 60 >> 2];
      $1_1 = $1_1 - -64 | 0;
      $2_1 = $2_1 - -64 | 0;
      if ($2_1 >>> 0 <= $5_1 >>> 0) {
       continue
      }
      break;
     };
    }
    if ($2_1 >>> 0 >= $3_1 >>> 0) {
     break label$2
    }
    while (1) {
     HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2];
     $1_1 = $1_1 + 4 | 0;
     $2_1 = $2_1 + 4 | 0;
     if ($2_1 >>> 0 < $3_1 >>> 0) {
      continue
     }
     break;
    };
    break label$2;
   }
   if ($4_1 >>> 0 < 4) {
    $2_1 = $0;
    break label$2;
   }
   $3_1 = $4_1 + -4 | 0;
   if ($3_1 >>> 0 < $0 >>> 0) {
    $2_1 = $0;
    break label$2;
   }
   $2_1 = $0;
   while (1) {
    HEAP8[$2_1 | 0] = HEAPU8[$1_1 | 0];
    HEAP8[$2_1 + 1 | 0] = HEAPU8[$1_1 + 1 | 0];
    HEAP8[$2_1 + 2 | 0] = HEAPU8[$1_1 + 2 | 0];
    HEAP8[$2_1 + 3 | 0] = HEAPU8[$1_1 + 3 | 0];
    $1_1 = $1_1 + 4 | 0;
    $2_1 = $2_1 + 4 | 0;
    if ($2_1 >>> 0 <= $3_1 >>> 0) {
     continue
    }
    break;
   };
  }
  if ($2_1 >>> 0 < $4_1 >>> 0) {
   while (1) {
    HEAP8[$2_1 | 0] = HEAPU8[$1_1 | 0];
    $1_1 = $1_1 + 1 | 0;
    $2_1 = $2_1 + 1 | 0;
    if (($4_1 | 0) != ($2_1 | 0)) {
     continue
    }
    break;
   }
  }
  return $0;
 }
 
 function $2592($0, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6 = 0;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   $3_1 = $0 + $2_1 | 0;
   HEAP8[$3_1 + -1 | 0] = $1_1;
   HEAP8[$0 | 0] = $1_1;
   if ($2_1 >>> 0 < 3) {
    break label$1
   }
   HEAP8[$3_1 + -2 | 0] = $1_1;
   HEAP8[$0 + 1 | 0] = $1_1;
   HEAP8[$3_1 + -3 | 0] = $1_1;
   HEAP8[$0 + 2 | 0] = $1_1;
   if ($2_1 >>> 0 < 7) {
    break label$1
   }
   HEAP8[$3_1 + -4 | 0] = $1_1;
   HEAP8[$0 + 3 | 0] = $1_1;
   if ($2_1 >>> 0 < 9) {
    break label$1
   }
   $3_1 = 0 - $0 & 3;
   $4_1 = $3_1 + $0 | 0;
   $1_1 = Math_imul($1_1 & 255, 16843009);
   HEAP32[$4_1 >> 2] = $1_1;
   $2_1 = $2_1 - $3_1 & -4;
   $3_1 = $2_1 + $4_1 | 0;
   HEAP32[$3_1 + -4 >> 2] = $1_1;
   if ($2_1 >>> 0 < 9) {
    break label$1
   }
   HEAP32[$4_1 + 8 >> 2] = $1_1;
   HEAP32[$4_1 + 4 >> 2] = $1_1;
   HEAP32[$3_1 + -8 >> 2] = $1_1;
   HEAP32[$3_1 + -12 >> 2] = $1_1;
   if ($2_1 >>> 0 < 25) {
    break label$1
   }
   HEAP32[$4_1 + 24 >> 2] = $1_1;
   HEAP32[$4_1 + 20 >> 2] = $1_1;
   HEAP32[$4_1 + 16 >> 2] = $1_1;
   HEAP32[$4_1 + 12 >> 2] = $1_1;
   HEAP32[$3_1 + -16 >> 2] = $1_1;
   HEAP32[$3_1 + -20 >> 2] = $1_1;
   HEAP32[$3_1 + -24 >> 2] = $1_1;
   HEAP32[$3_1 + -28 >> 2] = $1_1;
   $6 = $4_1 & 4 | 24;
   $2_1 = $2_1 - $6 | 0;
   if ($2_1 >>> 0 < 32) {
    break label$1
   }
   $3_1 = $1_1;
   $5_1 = $1_1;
   $1_1 = $4_1 + $6 | 0;
   while (1) {
    HEAP32[$1_1 + 24 >> 2] = $5_1;
    HEAP32[$1_1 + 28 >> 2] = $3_1;
    HEAP32[$1_1 + 16 >> 2] = $5_1;
    HEAP32[$1_1 + 20 >> 2] = $3_1;
    HEAP32[$1_1 + 8 >> 2] = $5_1;
    HEAP32[$1_1 + 12 >> 2] = $3_1;
    HEAP32[$1_1 >> 2] = $5_1;
    HEAP32[$1_1 + 4 >> 2] = $3_1;
    $1_1 = $1_1 + 32 | 0;
    $2_1 = $2_1 + -32 | 0;
    if ($2_1 >>> 0 > 31) {
     continue
    }
    break;
   };
  }
  return $0;
 }
 
 function $2593($0, $1_1, $2_1) {
  var $3_1 = 0;
  label$1 : {
   if (($0 | 0) == ($1_1 | 0)) {
    break label$1
   }
   if (($1_1 - $0 | 0) - $2_1 >>> 0 <= 0 - ($2_1 << 1) >>> 0) {
    $2591($0, $1_1, $2_1);
    return;
   }
   $3_1 = ($0 ^ $1_1) & 3;
   label$3 : {
    label$4 : {
     if ($0 >>> 0 < $1_1 >>> 0) {
      if ($3_1) {
       break label$3
      }
      if (!($0 & 3)) {
       break label$4
      }
      while (1) {
       if (!$2_1) {
        break label$1
       }
       HEAP8[$0 | 0] = HEAPU8[$1_1 | 0];
       $1_1 = $1_1 + 1 | 0;
       $2_1 = $2_1 + -1 | 0;
       $0 = $0 + 1 | 0;
       if ($0 & 3) {
        continue
       }
       break;
      };
      break label$4;
     }
     label$9 : {
      if ($3_1) {
       break label$9
      }
      if ($0 + $2_1 & 3) {
       while (1) {
        if (!$2_1) {
         break label$1
        }
        $2_1 = $2_1 + -1 | 0;
        $3_1 = $2_1 + $0 | 0;
        HEAP8[$3_1 | 0] = HEAPU8[$1_1 + $2_1 | 0];
        if ($3_1 & 3) {
         continue
        }
        break;
       }
      }
      if ($2_1 >>> 0 <= 3) {
       break label$9
      }
      while (1) {
       $2_1 = $2_1 + -4 | 0;
       HEAP32[$2_1 + $0 >> 2] = HEAP32[$1_1 + $2_1 >> 2];
       if ($2_1 >>> 0 > 3) {
        continue
       }
       break;
      };
     }
     if (!$2_1) {
      break label$1
     }
     while (1) {
      $2_1 = $2_1 + -1 | 0;
      HEAP8[$2_1 + $0 | 0] = HEAPU8[$1_1 + $2_1 | 0];
      if ($2_1) {
       continue
      }
      break;
     };
     break label$1;
    }
    if ($2_1 >>> 0 <= 3) {
     break label$3
    }
    while (1) {
     HEAP32[$0 >> 2] = HEAP32[$1_1 >> 2];
     $1_1 = $1_1 + 4 | 0;
     $0 = $0 + 4 | 0;
     $2_1 = $2_1 + -4 | 0;
     if ($2_1 >>> 0 > 3) {
      continue
     }
     break;
    };
   }
   if (!$2_1) {
    break label$1
   }
   while (1) {
    HEAP8[$0 | 0] = HEAPU8[$1_1 | 0];
    $0 = $0 + 1 | 0;
    $1_1 = $1_1 + 1 | 0;
    $2_1 = $2_1 + -1 | 0;
    if ($2_1) {
     continue
    }
    break;
   };
  }
 }
 
 function $2594($0) {
  var $1_1 = 0;
  $1_1 = HEAPU8[$0 + 74 | 0];
  HEAP8[$0 + 74 | 0] = $1_1 + -1 | $1_1;
  $1_1 = HEAP32[$0 >> 2];
  if ($1_1 & 8) {
   HEAP32[$0 >> 2] = $1_1 | 32;
   return -1;
  }
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = 0;
  $1_1 = HEAP32[$0 + 44 >> 2];
  HEAP32[$0 + 28 >> 2] = $1_1;
  HEAP32[$0 + 20 >> 2] = $1_1;
  HEAP32[$0 + 16 >> 2] = $1_1 + HEAP32[$0 + 48 >> 2];
  return 0;
 }
 
 function $2595($0, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6 = 0;
  $3_1 = HEAP32[$2_1 + 16 >> 2];
  label$1 : {
   if (!$3_1) {
    if ($2594($2_1)) {
     break label$1
    }
    $3_1 = HEAP32[$2_1 + 16 >> 2];
   }
   $5_1 = HEAP32[$2_1 + 20 >> 2];
   if ($3_1 - $5_1 >>> 0 < $1_1 >>> 0) {
    return FUNCTION_TABLE[HEAP32[$2_1 + 36 >> 2]]($2_1, $0, $1_1) | 0
   }
   label$5 : {
    if (HEAP8[$2_1 + 75 | 0] < 0) {
     break label$5
    }
    $4_1 = $1_1;
    while (1) {
     $3_1 = $4_1;
     if (!$3_1) {
      break label$5
     }
     $4_1 = $3_1 + -1 | 0;
     if (HEAPU8[$4_1 + $0 | 0] != 10) {
      continue
     }
     break;
    };
    $4_1 = FUNCTION_TABLE[HEAP32[$2_1 + 36 >> 2]]($2_1, $0, $3_1) | 0;
    if ($4_1 >>> 0 < $3_1 >>> 0) {
     break label$1
    }
    $1_1 = $1_1 - $3_1 | 0;
    $0 = $0 + $3_1 | 0;
    $5_1 = HEAP32[$2_1 + 20 >> 2];
    $6 = $3_1;
   }
   $2591($5_1, $0, $1_1);
   HEAP32[$2_1 + 20 >> 2] = HEAP32[$2_1 + 20 >> 2] + $1_1;
   $4_1 = $1_1 + $6 | 0;
  }
  return $4_1;
 }
 
 function $2596($0, $1_1, $2_1, $3_1) {
  var $4_1 = 0;
  $4_1 = Math_imul($1_1, $2_1);
  label$1 : {
   if (HEAP32[$3_1 + 76 >> 2] <= -1) {
    $0 = $2595($0, $4_1, $3_1);
    break label$1;
   }
   $0 = $2595($0, $4_1, $3_1);
  }
  if (($0 | 0) == ($4_1 | 0)) {
   return $1_1 ? $2_1 : 0
  }
  return ($0 >>> 0) / ($1_1 >>> 0) | 0;
 }
 
 function $2597($0) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  label$1 : {
   label$2 : {
    $1_1 = $0;
    if (!($1_1 & 3)) {
     break label$2
    }
    if (!HEAPU8[$0 | 0]) {
     return 0
    }
    while (1) {
     $1_1 = $1_1 + 1 | 0;
     if (!($1_1 & 3)) {
      break label$2
     }
     if (HEAPU8[$1_1 | 0]) {
      continue
     }
     break;
    };
    break label$1;
   }
   while (1) {
    $2_1 = $1_1;
    $1_1 = $1_1 + 4 | 0;
    $3_1 = HEAP32[$2_1 >> 2];
    if (!(($3_1 ^ -1) & $3_1 + -16843009 & -2139062144)) {
     continue
    }
    break;
   };
   if (!($3_1 & 255)) {
    return $2_1 - $0 | 0
   }
   while (1) {
    $3_1 = HEAPU8[$2_1 + 1 | 0];
    $1_1 = $2_1 + 1 | 0;
    $2_1 = $1_1;
    if ($3_1) {
     continue
    }
    break;
   };
  }
  return $1_1 - $0 | 0;
 }
 
 function $2598() {
  return global$0 | 0;
 }
 
 function $2599($0) {
  $0 = $0 | 0;
  global$0 = $0;
 }
 
 function $2600($0) {
  $0 = $0 | 0;
  $0 = global$0 - $0 & -16;
  global$0 = $0;
  return $0 | 0;
 }
 
 function $2601($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  if (!HEAP32[6364]) {
   HEAP32[6365] = $1_1;
   HEAP32[6364] = $0;
  }
 }
 
 function $2602($0) {
  $0 = $0 | 0;
  return __wasm_memory_grow($0 | 0) | 0;
 }
 
 function $2603($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[$0]($1_1);
 }
 
 function $2604($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return FUNCTION_TABLE[$0]($1_1, $2_1) | 0;
 }
 
 function $2605($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  return FUNCTION_TABLE[$0]($1_1) | 0;
 }
 
 function $2606($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  FUNCTION_TABLE[$0]($1_1, $2_1);
 }
 
 function $2607($0, $1_1, $2_1, $3_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  return FUNCTION_TABLE[$0]($1_1, $2_1, $3_1) | 0;
 }
 
 function $2609($0, $1_1, $2_1, $3_1, $4_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  FUNCTION_TABLE[$0]($1_1, $2_1, $3_1, $4_1);
 }
 
 function $2610($0, $1_1, $2_1, $3_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  FUNCTION_TABLE[$0]($1_1, $2_1, $3_1);
 }
 
 function $2611($0) {
  $0 = $0 | 0;
  FUNCTION_TABLE[$0]();
 }
 
 function $2613($0, $1_1, $2_1, $3_1, $4_1, $5_1, $6) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = +$2_1;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6 = $6 | 0;
  return FUNCTION_TABLE[$0]($1_1, $2_1, $3_1, $4_1, $5_1, $6) | 0;
 }
 
 function $2614($0, $1_1, $2_1, $3_1, $4_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  return FUNCTION_TABLE[$0]($1_1, $2_1, $3_1, $4_1) | 0;
 }
 
 function $2615($0, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return FUNCTION_TABLE[$0]($1_1, $2_1, $3_1, $4_1, $5_1) | 0;
 }
 
 function $2616($0, $1_1, $2_1, $3_1, $4_1, $5_1, $6, $7, $8) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  $8 = $8 | 0;
  return FUNCTION_TABLE[$0]($1_1, $2_1, $3_1, $4_1, $5_1, $6, $7, $8) | 0;
 }
 
 function $2617($0, $1_1, $2_1, $3_1, $4_1, $5_1, $6) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6 = $6 | 0;
  return FUNCTION_TABLE[$0]($1_1, $2_1, $3_1, $4_1, $5_1, $6) | 0;
 }
 
 function $2619($0, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = +$5_1;
  return FUNCTION_TABLE[$0]($1_1, $2_1, $3_1, $4_1, $5_1) | 0;
 }
 
 function $2621($0, $1_1, $2_1, $3_1, $4_1, $5_1, $6, $7) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  return FUNCTION_TABLE[$0]($1_1, $2_1, $3_1, $4_1, $5_1, $6, $7) | 0;
 }
 
 function $2623($0, $1_1, $2_1, $3_1, $4_1, $5_1, $6) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6 = $6 | 0;
  FUNCTION_TABLE[$0]($1_1, $2_1, $3_1, $4_1, $5_1, $6);
 }
 
 function $2624($0, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  FUNCTION_TABLE[$0]($1_1, $2_1, $3_1, $4_1, $5_1);
 }
 
 function $2626($0, $1_1, $2_1, $3_1, $4_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $0 = FUNCTION_TABLE[$0]($1_1, $2_1, $3_1, $4_1) | 0;
  fimport$25(i64toi32_i32$HIGH_BITS | 0);
  return $0 | 0;
 }
 
 function $2629($0, $1_1, $2_1, $3_1, $4_1, $5_1, $6, $7, $8, $9_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  $8 = $8 | 0;
  $9_1 = $9_1 | 0;
  return FUNCTION_TABLE[$0]($1_1, $2_1, $3_1, $4_1, $5_1, $6, $7, $8, $9_1) | 0;
 }
 
 function legalfunc$wasm2js_scratch_store_i64($0, $1_1) {
  legalimport$wasm2js_scratch_store_i64($0 | 0, $1_1 | 0);
 }
 
 function _ZN17compiler_builtins3int3mul3Mul3mul17h070e9a1c69faec5bE($0, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = 0, $6 = 0, $7 = 0, $8 = 0, $9_1 = 0;
  $4_1 = $2_1 >>> 16 | 0;
  $5_1 = $0 >>> 16 | 0;
  $9_1 = Math_imul($4_1, $5_1);
  $6 = $2_1 & 65535;
  $7 = $0 & 65535;
  $8 = Math_imul($6, $7);
  $5_1 = ($8 >>> 16 | 0) + Math_imul($5_1, $6) | 0;
  $4_1 = ($5_1 & 65535) + Math_imul($4_1, $7) | 0;
  $0 = (Math_imul($1_1, $2_1) + $9_1 | 0) + Math_imul($0, $3_1) + ($5_1 >>> 16) + ($4_1 >>> 16) | 0;
  $1_1 = $8 & 65535 | $4_1 << 16;
  i64toi32_i32$HIGH_BITS = $0;
  return $1_1;
 }
 
 function _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E($0, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6 = 0, $7 = 0, $8 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$9 : {
          label$11 : {
           $4_1 = $1_1;
           if ($4_1) {
            $3_1 = $2_1;
            if (!$3_1) {
             break label$11
            }
            break label$9;
           }
           $1_1 = $0;
           $0 = ($0 >>> 0) / ($2_1 >>> 0) | 0;
           legalfunc$wasm2js_scratch_store_i64($1_1 - Math_imul($0, $2_1) | 0, 0);
           i64toi32_i32$HIGH_BITS = 0;
           return $0;
          }
          if (!$0) {
           break label$7
          }
          break label$6;
         }
         $6 = $3_1 + -1 | 0;
         if (!($6 & $3_1)) {
          break label$5
         }
         $6 = (Math_clz32($3_1) + 33 | 0) - Math_clz32($4_1) | 0;
         $7 = 0 - $6 | 0;
         break label$3;
        }
        $0 = ($4_1 >>> 0) / 0 | 0;
        legalfunc$wasm2js_scratch_store_i64(0, $4_1 - Math_imul($0, 0) | 0);
        i64toi32_i32$HIGH_BITS = 0;
        return $0;
       }
       $3_1 = 32 - Math_clz32($4_1) | 0;
       if ($3_1 >>> 0 < 31) {
        break label$4
       }
       break label$2;
      }
      legalfunc$wasm2js_scratch_store_i64($0 & $6, 0);
      if (($3_1 | 0) == 1) {
       break label$1
      }
      if ($3_1) {
       $3_1 = 31 - Math_clz32($3_1 + -1 ^ $3_1) | 0
      } else {
       $3_1 = 32
      }
      $2_1 = $3_1 & 31;
      if (32 <= ($3_1 & 63) >>> 0) {
       $4_1 = 0;
       $0 = $1_1 >>> $2_1 | 0;
      } else {
       $4_1 = $1_1 >>> $2_1 | 0;
       $0 = ((1 << $2_1) - 1 & $1_1) << 32 - $2_1 | $0 >>> $2_1;
      }
      i64toi32_i32$HIGH_BITS = $4_1;
      return $0;
     }
     $6 = $3_1 + 1 | 0;
     $7 = 63 - $3_1 | 0;
    }
    $3_1 = $1_1;
    $4_1 = $6 & 63;
    $5_1 = $4_1 & 31;
    if (32 <= $4_1 >>> 0) {
     $4_1 = 0;
     $5_1 = $3_1 >>> $5_1 | 0;
    } else {
     $4_1 = $3_1 >>> $5_1 | 0;
     $5_1 = ((1 << $5_1) - 1 & $3_1) << 32 - $5_1 | $0 >>> $5_1;
    }
    $7 = $7 & 63;
    $3_1 = $7 & 31;
    if (32 <= $7 >>> 0) {
     $1_1 = $0 << $3_1;
     $0 = 0;
    } else {
     $1_1 = (1 << $3_1) - 1 & $0 >>> 32 - $3_1 | $1_1 << $3_1;
     $0 = $0 << $3_1;
    }
    if ($6) {
     $3_1 = -1;
     $7 = $2_1 + -1 | 0;
     if ($7 >>> 0 < 4294967295) {
      $3_1 = 0
     }
     while (1) {
      $8 = $5_1 << 1 | $1_1 >>> 31;
      $9_1 = $8;
      $4_1 = $4_1 << 1 | $5_1 >>> 31;
      $8 = $3_1 - ($4_1 + ($7 >>> 0 < $8 >>> 0) | 0) >> 31;
      $10_1 = $2_1 & $8;
      $5_1 = $9_1 - $10_1 | 0;
      $4_1 = $4_1 - ($9_1 >>> 0 < $10_1 >>> 0) | 0;
      $1_1 = $1_1 << 1 | $0 >>> 31;
      $0 = $11_1 | $0 << 1;
      $8 = $8 & 1;
      $11_1 = $8;
      $6 = $6 + -1 | 0;
      if ($6) {
       continue
      }
      break;
     };
    }
    legalfunc$wasm2js_scratch_store_i64($5_1, $4_1);
    i64toi32_i32$HIGH_BITS = $1_1 << 1 | $0 >>> 31;
    return $8 | $0 << 1;
   }
   legalfunc$wasm2js_scratch_store_i64($0, $1_1);
   $0 = 0;
   $1_1 = 0;
  }
  i64toi32_i32$HIGH_BITS = $1_1;
  return $0;
 }
 
 function __wasm_i64_mul($0, $1_1, $2_1, $3_1) {
  $0 = _ZN17compiler_builtins3int3mul3Mul3mul17h070e9a1c69faec5bE($0, $1_1, $2_1, $3_1);
  return $0;
 }
 
 function __wasm_i64_udiv($0, $1_1, $2_1) {
  return _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E($0, $1_1, $2_1);
 }
 
 function __wasm_rotl_i32($0, $1_1) {
  var $2_1 = 0, $3_1 = 0;
  $2_1 = $1_1 & 31;
  $3_1 = (-1 >>> $2_1 & $0) << $2_1;
  $2_1 = $0;
  $0 = 0 - $1_1 & 31;
  return $3_1 | ($2_1 & -1 << $0) >>> $0;
 }
 
 // EMSCRIPTEN_END_FUNCS
;
 FUNCTION_TABLE[1] = $5;
 FUNCTION_TABLE[2] = $126;
 FUNCTION_TABLE[3] = $230;
 FUNCTION_TABLE[4] = $204;
 FUNCTION_TABLE[5] = $1573;
 FUNCTION_TABLE[6] = $40;
 FUNCTION_TABLE[7] = $2554;
 FUNCTION_TABLE[8] = $290;
 FUNCTION_TABLE[9] = $782;
 FUNCTION_TABLE[10] = $197;
 FUNCTION_TABLE[11] = $257;
 FUNCTION_TABLE[12] = $258;
 FUNCTION_TABLE[13] = $259;
 FUNCTION_TABLE[14] = $1680;
 FUNCTION_TABLE[15] = $1682;
 FUNCTION_TABLE[16] = $1681;
 FUNCTION_TABLE[17] = $1683;
 FUNCTION_TABLE[18] = $261;
 FUNCTION_TABLE[19] = $263;
 FUNCTION_TABLE[20] = $264;
 FUNCTION_TABLE[21] = $267;
 FUNCTION_TABLE[22] = $269;
 FUNCTION_TABLE[23] = $274;
 FUNCTION_TABLE[24] = $277;
 FUNCTION_TABLE[25] = $1663;
 FUNCTION_TABLE[26] = $1664;
 FUNCTION_TABLE[27] = $285;
 FUNCTION_TABLE[28] = $1668;
 FUNCTION_TABLE[29] = $289;
 FUNCTION_TABLE[30] = $1670;
 FUNCTION_TABLE[31] = $294;
 FUNCTION_TABLE[32] = $232;
 FUNCTION_TABLE[33] = $348;
 FUNCTION_TABLE[34] = $349;
 FUNCTION_TABLE[35] = $350;
 FUNCTION_TABLE[36] = $1715;
 FUNCTION_TABLE[37] = $1717;
 FUNCTION_TABLE[38] = $1716;
 FUNCTION_TABLE[39] = $1718;
 FUNCTION_TABLE[40] = $351;
 FUNCTION_TABLE[41] = $352;
 FUNCTION_TABLE[42] = $572;
 FUNCTION_TABLE[43] = $1660;
 FUNCTION_TABLE[44] = $353;
 FUNCTION_TABLE[45] = $354;
 FUNCTION_TABLE[46] = $1663;
 FUNCTION_TABLE[47] = $355;
 FUNCTION_TABLE[48] = $356;
 FUNCTION_TABLE[49] = $357;
 FUNCTION_TABLE[50] = $22;
 FUNCTION_TABLE[51] = $845;
 FUNCTION_TABLE[52] = $846;
 FUNCTION_TABLE[53] = $75;
 FUNCTION_TABLE[54] = $278;
 FUNCTION_TABLE[55] = $844;
 FUNCTION_TABLE[56] = $852;
 FUNCTION_TABLE[57] = $2552;
 FUNCTION_TABLE[58] = $852;
 FUNCTION_TABLE[59] = $21;
 FUNCTION_TABLE[60] = $1144;
 FUNCTION_TABLE[61] = $1145;
 FUNCTION_TABLE[62] = $20;
 FUNCTION_TABLE[63] = $1254;
 FUNCTION_TABLE[64] = $96;
 FUNCTION_TABLE[65] = $75;
 FUNCTION_TABLE[66] = $1255;
 FUNCTION_TABLE[67] = $19;
 FUNCTION_TABLE[68] = $1262;
 FUNCTION_TABLE[69] = $47;
 FUNCTION_TABLE[70] = $18;
 FUNCTION_TABLE[71] = $1266;
 FUNCTION_TABLE[72] = $1267;
 FUNCTION_TABLE[73] = $1579;
 FUNCTION_TABLE[74] = $1580;
 FUNCTION_TABLE[75] = $1581;
 FUNCTION_TABLE[76] = $1582;
 FUNCTION_TABLE[77] = $1657;
 FUNCTION_TABLE[78] = $1658;
 FUNCTION_TABLE[79] = $1661;
 FUNCTION_TABLE[80] = $1662;
 FUNCTION_TABLE[81] = $1667;
 FUNCTION_TABLE[82] = $1669;
 FUNCTION_TABLE[83] = $1669;
 FUNCTION_TABLE[84] = $1671;
 FUNCTION_TABLE[85] = $1672;
 FUNCTION_TABLE[86] = $572;
 FUNCTION_TABLE[87] = $1660;
 FUNCTION_TABLE[88] = $1661;
 FUNCTION_TABLE[89] = $1662;
 FUNCTION_TABLE[90] = $1663;
 FUNCTION_TABLE[91] = $1663;
 FUNCTION_TABLE[92] = $1674;
 FUNCTION_TABLE[93] = $1667;
 FUNCTION_TABLE[94] = $1677;
 FUNCTION_TABLE[95] = $1669;
 FUNCTION_TABLE[96] = $1678;
 FUNCTION_TABLE[97] = $1669;
 FUNCTION_TABLE[98] = $1680;
 FUNCTION_TABLE[99] = $1682;
 FUNCTION_TABLE[100] = $1681;
 FUNCTION_TABLE[101] = $1683;
 FUNCTION_TABLE[102] = $1715;
 FUNCTION_TABLE[103] = $1717;
 FUNCTION_TABLE[104] = $1716;
 FUNCTION_TABLE[105] = $1718;
 FUNCTION_TABLE[106] = $1654;
 FUNCTION_TABLE[107] = $1731;
 FUNCTION_TABLE[108] = $1653;
 FUNCTION_TABLE[109] = $1656;
 FUNCTION_TABLE[110] = $1653;
 FUNCTION_TABLE[111] = $1656;
 FUNCTION_TABLE[112] = $1663;
 FUNCTION_TABLE[113] = $1736;
 FUNCTION_TABLE[114] = $1756;
 FUNCTION_TABLE[115] = $1757;
 FUNCTION_TABLE[116] = $1758;
 FUNCTION_TABLE[117] = $1759;
 FUNCTION_TABLE[118] = $1761;
 FUNCTION_TABLE[119] = $1762;
 FUNCTION_TABLE[120] = $1764;
 FUNCTION_TABLE[121] = $1765;
 FUNCTION_TABLE[122] = $1766;
 FUNCTION_TABLE[123] = $1768;
 FUNCTION_TABLE[124] = $1769;
 FUNCTION_TABLE[125] = $1757;
 FUNCTION_TABLE[126] = $1770;
 FUNCTION_TABLE[127] = $1771;
 FUNCTION_TABLE[128] = $1772;
 FUNCTION_TABLE[129] = $1773;
 FUNCTION_TABLE[130] = $1764;
 FUNCTION_TABLE[131] = $1774;
 FUNCTION_TABLE[132] = $1771;
 FUNCTION_TABLE[133] = $1775;
 FUNCTION_TABLE[134] = $1776;
 FUNCTION_TABLE[135] = $1789;
 FUNCTION_TABLE[136] = $1811;
 FUNCTION_TABLE[137] = $1812;
 FUNCTION_TABLE[138] = $1815;
 FUNCTION_TABLE[139] = $2583;
 FUNCTION_TABLE[140] = $376;
 FUNCTION_TABLE[141] = $2287;
 FUNCTION_TABLE[142] = $2293;
 FUNCTION_TABLE[143] = $2368;
 FUNCTION_TABLE[144] = $2371;
 FUNCTION_TABLE[145] = $2375;
 FUNCTION_TABLE[146] = $2378;
 FUNCTION_TABLE[147] = $2381;
 FUNCTION_TABLE[148] = $2384;
 FUNCTION_TABLE[149] = $2386;
 FUNCTION_TABLE[150] = $2388;
 FUNCTION_TABLE[151] = $2390;
 FUNCTION_TABLE[152] = $2392;
 FUNCTION_TABLE[153] = $2394;
 FUNCTION_TABLE[154] = $2396;
 FUNCTION_TABLE[155] = $2398;
 FUNCTION_TABLE[156] = $2400;
 FUNCTION_TABLE[157] = $2272;
 FUNCTION_TABLE[158] = $2277;
 FUNCTION_TABLE[159] = $2291;
 FUNCTION_TABLE[160] = $2310;
 FUNCTION_TABLE[161] = $2311;
 FUNCTION_TABLE[162] = $2312;
 FUNCTION_TABLE[163] = $2313;
 FUNCTION_TABLE[164] = $2314;
 FUNCTION_TABLE[165] = $2315;
 FUNCTION_TABLE[166] = $527;
 FUNCTION_TABLE[167] = $2316;
 FUNCTION_TABLE[168] = $2317;
 FUNCTION_TABLE[169] = $2318;
 FUNCTION_TABLE[170] = $2164;
 FUNCTION_TABLE[171] = $2323;
 FUNCTION_TABLE[172] = $2324;
 FUNCTION_TABLE[173] = $2327;
 FUNCTION_TABLE[174] = $2330;
 FUNCTION_TABLE[175] = $2331;
 FUNCTION_TABLE[176] = $1663;
 FUNCTION_TABLE[177] = $2334;
 FUNCTION_TABLE[178] = $2336;
 FUNCTION_TABLE[179] = $2350;
 FUNCTION_TABLE[180] = $2351;
 FUNCTION_TABLE[181] = $2354;
 FUNCTION_TABLE[182] = $2355;
 FUNCTION_TABLE[183] = $2356;
 FUNCTION_TABLE[184] = $2358;
 FUNCTION_TABLE[185] = $2362;
 FUNCTION_TABLE[186] = $2352;
 FUNCTION_TABLE[187] = $2353;
 FUNCTION_TABLE[188] = $283;
 FUNCTION_TABLE[189] = $282;
 FUNCTION_TABLE[190] = $2357;
 FUNCTION_TABLE[191] = $2359;
 FUNCTION_TABLE[192] = $2363;
 FUNCTION_TABLE[193] = $40;
 FUNCTION_TABLE[194] = $403;
 FUNCTION_TABLE[195] = $403;
 FUNCTION_TABLE[196] = $2296;
 FUNCTION_TABLE[197] = $2298;
 FUNCTION_TABLE[198] = $2299;
 FUNCTION_TABLE[199] = $2300;
 FUNCTION_TABLE[200] = $2301;
 FUNCTION_TABLE[201] = $2303;
 FUNCTION_TABLE[202] = $2304;
 FUNCTION_TABLE[203] = $2306;
 FUNCTION_TABLE[204] = $527;
 FUNCTION_TABLE[205] = $2307;
 FUNCTION_TABLE[206] = $2308;
 FUNCTION_TABLE[207] = $2309;
 FUNCTION_TABLE[208] = $403;
 FUNCTION_TABLE[209] = $2319;
 FUNCTION_TABLE[210] = $2319;
 FUNCTION_TABLE[211] = $2320;
 FUNCTION_TABLE[212] = $2321;
 FUNCTION_TABLE[213] = $2321;
 FUNCTION_TABLE[214] = $2322;
 FUNCTION_TABLE[215] = $2321;
 FUNCTION_TABLE[216] = $403;
 FUNCTION_TABLE[217] = $2337;
 FUNCTION_TABLE[218] = $2339;
 FUNCTION_TABLE[219] = $2320;
 FUNCTION_TABLE[220] = $1663;
 FUNCTION_TABLE[221] = $1663;
 FUNCTION_TABLE[222] = $2341;
 FUNCTION_TABLE[223] = $2343;
 FUNCTION_TABLE[224] = $403;
 FUNCTION_TABLE[225] = $2344;
 FUNCTION_TABLE[226] = $2346;
 FUNCTION_TABLE[227] = $2320;
 FUNCTION_TABLE[228] = $1663;
 FUNCTION_TABLE[229] = $1663;
 FUNCTION_TABLE[230] = $2348;
 FUNCTION_TABLE[231] = $2343;
 FUNCTION_TABLE[232] = $403;
 FUNCTION_TABLE[233] = $403;
 FUNCTION_TABLE[234] = $40;
 FUNCTION_TABLE[235] = $403;
 FUNCTION_TABLE[236] = $1843;
 FUNCTION_TABLE[237] = $1844;
 FUNCTION_TABLE[238] = $1847;
 FUNCTION_TABLE[239] = $40;
 FUNCTION_TABLE[240] = $403;
 FUNCTION_TABLE[241] = $1848;
 FUNCTION_TABLE[242] = $1849;
 FUNCTION_TABLE[243] = $1853;
 FUNCTION_TABLE[244] = $403;
 FUNCTION_TABLE[245] = $1854;
 FUNCTION_TABLE[246] = $1867;
 FUNCTION_TABLE[247] = $1876;
 FUNCTION_TABLE[248] = $1879;
 FUNCTION_TABLE[249] = $1882;
 FUNCTION_TABLE[250] = $1882;
 FUNCTION_TABLE[251] = $1888;
 FUNCTION_TABLE[252] = $1891;
 FUNCTION_TABLE[253] = $1896;
 FUNCTION_TABLE[254] = $1899;
 FUNCTION_TABLE[255] = $1902;
 FUNCTION_TABLE[256] = $403;
 FUNCTION_TABLE[257] = $1909;
 FUNCTION_TABLE[258] = $1915;
 FUNCTION_TABLE[259] = $1920;
 FUNCTION_TABLE[260] = $1922;
 FUNCTION_TABLE[261] = $1924;
 FUNCTION_TABLE[262] = $1924;
 FUNCTION_TABLE[263] = $1928;
 FUNCTION_TABLE[264] = $1930;
 FUNCTION_TABLE[265] = $1934;
 FUNCTION_TABLE[266] = $1936;
 FUNCTION_TABLE[267] = $1938;
 FUNCTION_TABLE[268] = $403;
 FUNCTION_TABLE[269] = $1946;
 FUNCTION_TABLE[270] = $1947;
 FUNCTION_TABLE[271] = $1954;
 FUNCTION_TABLE[272] = $1955;
 FUNCTION_TABLE[273] = $1956;
 FUNCTION_TABLE[274] = $1957;
 FUNCTION_TABLE[275] = $1965;
 FUNCTION_TABLE[276] = $1966;
 FUNCTION_TABLE[277] = $403;
 FUNCTION_TABLE[278] = $1967;
 FUNCTION_TABLE[279] = $1972;
 FUNCTION_TABLE[280] = $1978;
 FUNCTION_TABLE[281] = $1979;
 FUNCTION_TABLE[282] = $1980;
 FUNCTION_TABLE[283] = $1981;
 FUNCTION_TABLE[284] = $1987;
 FUNCTION_TABLE[285] = $1988;
 FUNCTION_TABLE[286] = $40;
 FUNCTION_TABLE[287] = $403;
 FUNCTION_TABLE[288] = $1993;
 FUNCTION_TABLE[289] = $1994;
 FUNCTION_TABLE[290] = $1995;
 FUNCTION_TABLE[291] = $1996;
 FUNCTION_TABLE[292] = $1998;
 FUNCTION_TABLE[293] = $2000;
 FUNCTION_TABLE[294] = $2003;
 FUNCTION_TABLE[295] = $2366;
 FUNCTION_TABLE[296] = $2373;
 FUNCTION_TABLE[297] = $2379;
 FUNCTION_TABLE[298] = $2393;
 FUNCTION_TABLE[299] = $2397;
 FUNCTION_TABLE[300] = $2385;
 FUNCTION_TABLE[301] = $2389;
 FUNCTION_TABLE[302] = $40;
 FUNCTION_TABLE[303] = $403;
 FUNCTION_TABLE[304] = $1993;
 FUNCTION_TABLE[305] = $2018;
 FUNCTION_TABLE[306] = $2019;
 FUNCTION_TABLE[307] = $2025;
 FUNCTION_TABLE[308] = $2027;
 FUNCTION_TABLE[309] = $2029;
 FUNCTION_TABLE[310] = $2032;
 FUNCTION_TABLE[311] = $2369;
 FUNCTION_TABLE[312] = $2376;
 FUNCTION_TABLE[313] = $2382;
 FUNCTION_TABLE[314] = $2395;
 FUNCTION_TABLE[315] = $2399;
 FUNCTION_TABLE[316] = $2387;
 FUNCTION_TABLE[317] = $2391;
 FUNCTION_TABLE[318] = $2408;
 FUNCTION_TABLE[319] = $2407;
 FUNCTION_TABLE[320] = $2045;
 FUNCTION_TABLE[321] = $2408;
 FUNCTION_TABLE[322] = $2407;
 FUNCTION_TABLE[323] = $2050;
 FUNCTION_TABLE[324] = $403;
 FUNCTION_TABLE[325] = $2055;
 FUNCTION_TABLE[326] = $2055;
 FUNCTION_TABLE[327] = $2058;
 FUNCTION_TABLE[328] = $2058;
 FUNCTION_TABLE[329] = $2058;
 FUNCTION_TABLE[330] = $2059;
 FUNCTION_TABLE[331] = $1663;
 FUNCTION_TABLE[332] = $2060;
 FUNCTION_TABLE[333] = $2060;
 FUNCTION_TABLE[334] = $403;
 FUNCTION_TABLE[335] = $2055;
 FUNCTION_TABLE[336] = $2055;
 FUNCTION_TABLE[337] = $2058;
 FUNCTION_TABLE[338] = $2058;
 FUNCTION_TABLE[339] = $2058;
 FUNCTION_TABLE[340] = $2059;
 FUNCTION_TABLE[341] = $1663;
 FUNCTION_TABLE[342] = $2060;
 FUNCTION_TABLE[343] = $2060;
 FUNCTION_TABLE[344] = $403;
 FUNCTION_TABLE[345] = $2061;
 FUNCTION_TABLE[346] = $2061;
 FUNCTION_TABLE[347] = $2058;
 FUNCTION_TABLE[348] = $2062;
 FUNCTION_TABLE[349] = $2062;
 FUNCTION_TABLE[350] = $2065;
 FUNCTION_TABLE[351] = $1663;
 FUNCTION_TABLE[352] = $2060;
 FUNCTION_TABLE[353] = $2060;
 FUNCTION_TABLE[354] = $403;
 FUNCTION_TABLE[355] = $2061;
 FUNCTION_TABLE[356] = $2061;
 FUNCTION_TABLE[357] = $2058;
 FUNCTION_TABLE[358] = $2062;
 FUNCTION_TABLE[359] = $2062;
 FUNCTION_TABLE[360] = $2065;
 FUNCTION_TABLE[361] = $1663;
 FUNCTION_TABLE[362] = $2060;
 FUNCTION_TABLE[363] = $2060;
 FUNCTION_TABLE[364] = $403;
 FUNCTION_TABLE[365] = $2066;
 FUNCTION_TABLE[366] = $2081;
 FUNCTION_TABLE[367] = $403;
 FUNCTION_TABLE[368] = $2100;
 FUNCTION_TABLE[369] = $2111;
 FUNCTION_TABLE[370] = $403;
 FUNCTION_TABLE[371] = $2128;
 FUNCTION_TABLE[372] = $2137;
 FUNCTION_TABLE[373] = $403;
 FUNCTION_TABLE[374] = $2138;
 FUNCTION_TABLE[375] = $2146;
 FUNCTION_TABLE[376] = $403;
 FUNCTION_TABLE[377] = $2149;
 FUNCTION_TABLE[378] = $2150;
 FUNCTION_TABLE[379] = $572;
 FUNCTION_TABLE[380] = $403;
 FUNCTION_TABLE[381] = $2149;
 FUNCTION_TABLE[382] = $2155;
 FUNCTION_TABLE[383] = $572;
 FUNCTION_TABLE[384] = $40;
 FUNCTION_TABLE[385] = $852;
 FUNCTION_TABLE[386] = $40;
 FUNCTION_TABLE[387] = $403;
 FUNCTION_TABLE[388] = $2553;
 FUNCTION_TABLE[389] = $2557;
 FUNCTION_TABLE[390] = $433;
 FUNCTION_TABLE[391] = $2558;
 FUNCTION_TABLE[392] = $403;
 FUNCTION_TABLE[393] = $2561;
 FUNCTION_TABLE[394] = $40;
 FUNCTION_TABLE[395] = $403;
 FUNCTION_TABLE[396] = $376;
 FUNCTION_TABLE[397] = $376;
 FUNCTION_TABLE[398] = $2564;
 FUNCTION_TABLE[399] = $2580;
 FUNCTION_TABLE[400] = $2577;
 FUNCTION_TABLE[401] = $2567;
 FUNCTION_TABLE[402] = $403;
 FUNCTION_TABLE[403] = $2579;
 FUNCTION_TABLE[404] = $2576;
 FUNCTION_TABLE[405] = $2568;
 FUNCTION_TABLE[406] = $403;
 FUNCTION_TABLE[407] = $2578;
 FUNCTION_TABLE[408] = $2573;
 FUNCTION_TABLE[409] = $2570;
 function __wasm_memory_size() {
  return buffer.byteLength / 65536 | 0;
 }
 
 function __wasm_memory_grow(pagesToAdd) {
  pagesToAdd = pagesToAdd | 0;
  var oldPages = __wasm_memory_size() | 0;
  var newPages = oldPages + pagesToAdd | 0;
  if ((oldPages < newPages) && (newPages < 65536)) {
   var newBuffer = new ArrayBuffer(Math_imul(newPages, 65536));
   var newHEAP8 = new global.Int8Array(newBuffer);
   newHEAP8.set(HEAP8);
   HEAP8 = newHEAP8;
   HEAP8 = new global.Int8Array(newBuffer);
   HEAP16 = new global.Int16Array(newBuffer);
   HEAP32 = new global.Int32Array(newBuffer);
   HEAPU8 = new global.Uint8Array(newBuffer);
   HEAPU16 = new global.Uint16Array(newBuffer);
   HEAPU32 = new global.Uint32Array(newBuffer);
   HEAPF32 = new global.Float32Array(newBuffer);
   HEAPF64 = new global.Float64Array(newBuffer);
   buffer = newBuffer;
   memory.buffer = newBuffer;
  }
  return oldPages;
 }
 
 return {
  "__wasm_call_ctors": $1, 
  "Cut": $25, 
  "CutAll": $45, 
  "CutForSearch": $48, 
  "CutForSearchWithOffset": $51, 
  "InsertUserWord": $64, 
  "Tag": $67, 
  "Extract": $85, 
  "LookupTag": $141, 
  "main": $144, 
  "free": $2583, 
  "malloc": $2582, 
  "__errno_location": $1576, 
  "_get_tzname": $1619, 
  "_get_daylight": $1620, 
  "_get_timezone": $1621, 
  "setThrew": $2601, 
  "stackSave": $2598, 
  "stackRestore": $2599, 
  "stackAlloc": $2600, 
  "__growWasmMemory": $2602, 
  "dynCall_vi": $2603, 
  "dynCall_iii": $2604, 
  "dynCall_ii": $2605, 
  "dynCall_vii": $2606, 
  "dynCall_iiii": $2607, 
  "dynCall_viijii": $2623, 
  "dynCall_viiii": $2609, 
  "dynCall_viii": $2610, 
  "dynCall_v": $2611, 
  "dynCall_jiji": $2626, 
  "dynCall_iidiiii": $2613, 
  "dynCall_iiiii": $2614, 
  "dynCall_iiiiii": $2615, 
  "dynCall_iiiiiiiii": $2616, 
  "dynCall_iiiiiii": $2617, 
  "dynCall_iiiiij": $2617, 
  "dynCall_iiiiid": $2619, 
  "dynCall_iiiiijj": $2616, 
  "dynCall_iiiiiiii": $2621, 
  "dynCall_iiiiiijj": $2629, 
  "dynCall_viiiiii": $2623, 
  "dynCall_viiiii": $2624
 };
}

for (var base64ReverseLookup = new Uint8Array(123/*'z'+1*/), i = 25; i >= 0; --i) {
    base64ReverseLookup[48+i] = 52+i; // '0-9'
    base64ReverseLookup[65+i] = i; // 'A-Z'
    base64ReverseLookup[97+i] = 26+i; // 'a-z'
  }
  base64ReverseLookup[43] = 62; // '+'
  base64ReverseLookup[47] = 63; // '/'
  /** @noinline Inlining this function would mean expanding the base64 string 4x times in the source code, which Closure seems to be happy to do. */
  function base64DecodeToExistingUint8Array(uint8Array, offset, b64) {
    var b1, b2, i = 0, j = offset, bLength = b64.length, end = offset + (bLength*3>>2) - (b64[bLength-2] == '=') - (b64[bLength-1] == '=');
    for (; i < bLength; i += 4) {
      b1 = base64ReverseLookup[b64.charCodeAt(i+1)];
      b2 = base64ReverseLookup[b64.charCodeAt(i+2)];
      uint8Array[j++] = base64ReverseLookup[b64.charCodeAt(i)] << 2 | b1 >> 4;
      if (j < end) uint8Array[j++] = b1 << 4 | b2 >> 2;
      if (j < end) uint8Array[j++] = b2 << 6 | base64ReverseLookup[b64.charCodeAt(i+3)];
    }
  }
var bufferView = new Uint8Array(wasmMemory.buffer);
base64DecodeToExistingUint8Array(bufferView, 1024, "L2ppZWJhLmRpY3QudXRmOAAvaG1tX21vZGVsLnV0ZjgAL3VzZXIuZGljdC51dGY4AC9pZGYudXRmOAAvc3RvcF93b3Jkcy51dGY4AAAuL2NwcGppZWJhL2luY2x1ZGUvY3BwamllYmEvRGljdFRyaWUuaHBwAGV4cDogW2lmcy5pc19vcGVuKCkAXSBmYWxzZS4gAG9wZW4gACBmYWlsZWQuACAAZXhwOiBbYnVmLnNpemUoKSA9PSBESUNUX0NPTFVNTl9OVU0Ac3BsaXQgcmVzdWx0IGlsbGVnYWwsIGxpbmU6AAAAAGwAAAAAAAAAeAUAAAoAAAALAAAAlP///5T///94BQAADAAAAA0AAAD0BAAALAUAAEAFAAAIBQAAbAAAAAAAAAB8FAAADgAAAA8AAACU////lP///3wUAAAQAAAAEQAAAE5TdDNfXzIxNGJhc2ljX2lmc3RyZWFtSWNOU18xMWNoYXJfdHJhaXRzSWNFRUVFADxGAABIBQAAfBQAAAAAAAD0BQAAEgAAABMAAAAUAAAAFQAAABYAAAAXAAAAGAAAABkAAAAaAAAAGwAAABwAAAAdAAAAHgAAAB8AAABOU3QzX18yMTNiYXNpY19maWxlYnVmSWNOU18xMWNoYXJfdHJhaXRzSWNFRUVFAAA8RgAAxAUAAAgUAAB3AGEAcgByKwB3KwBhKwB3YgBhYgByYgByK2IAdytiAGErYgBhbGxvY2F0b3I8VD46OmFsbG9jYXRlKHNpemVfdCBuKSAnbicgZXhjZWVkcyBtYXhpbXVtIHN1cHBvcnRlZCBzaXplAGxldmVsXyA8PSBzaXplb2YoTE9HX0xFVkVMX0FSUkFZKS9zaXplb2YoKkxPR19MRVZFTF9BUlJBWSkALi9jcHBqaWViYS9kZXBzL2xpbW9ucC9Mb2dnaW5nLmhwcABMb2dnZXIAOgAAOggAAEAIAABFCAAASggAAFAIAAA4AAAAAAAAAIwHAAAgAAAAIQAAAMj////I////jAcAACIAAAAjAAAA8AYAACgHAAA8BwAABAcAADgAAAAAAAAADBUAACQAAAAlAAAAyP///8j///8MFQAAJgAAACcAAABOU3QzX18yMTliYXNpY19vc3RyaW5nc3RyZWFtSWNOU18xMWNoYXJfdHJhaXRzSWNFRU5TXzlhbGxvY2F0b3JJY0VFRUUAAAA8RgAARAcAAAwVAAAAAAAAHAgAACgAAAApAAAAKgAAACsAAAAsAAAALQAAAC4AAAAZAAAAGgAAAC8AAAAcAAAAMAAAAB4AAAAxAAAATlN0M19fMjE1YmFzaWNfc3RyaW5nYnVmSWNOU18xMWNoYXJfdHJhaXRzSWNFRU5TXzlhbGxvY2F0b3JJY0VFRUUAAAA8RgAA2AcAAAgUAAAlWS0lbS0lZCAlSDolTTolUwBERUJVRwBJTkZPAFdBUk4ARVJST1IARkFUQUwARGVjb2RlIABuZXh0AC4vY3BwamllYmEvZGVwcy9saW1vbnAvTG9jYWxWZWN0b3IuaHBwAHJlc2VydmUAY2FwYWNpdHlfAHB1c2hfYmFjawBwdHJfAG9wZXJhdG9yPQBzdW0gPiAwLjAAQ2FsY3VsYXRlV2VpZ2h0AG5vZGVfaW5mby53ZWlnaHQgPiAwLjAAZXhwOiBbIXN0YXRpY19ub2RlX2luZm9zXy5lbXB0eSgpAHw7ACBmYWlsZWQAZnJlcV9zdW1fID4gMC4wAEluc2VyVXNlckRpY3ROb2RlAGRpY3RVbml0cy5zaXplKCkAQ3JlYXRlVHJpZQBrZXlzLnNpemUoKSA9PSB2YWx1ZVBvaW50ZXJzLnNpemUoKQAuL2NwcGppZWJhL2luY2x1ZGUvY3BwamllYmEvVHJpZS5ocHAAcHROb2RlICE9IE5VTEwASW5zZXJ0Tm9kZQAuL2NwcGppZWJhL2luY2x1ZGUvY3BwamllYmEvSE1NTW9kZWwuaHBwAGV4cDogW2lmaWxlLmlzX29wZW4oKQBleHA6IFtHZXRMaW5lKGlmaWxlLCBsaW5lKQBleHA6IFt0bXAuc2l6ZSgpID09IFNUQVRVU19TVU0AZXhwOiBbTG9hZEVtaXRQcm9iKGxpbmUsIGVtaXRQcm9iQikAZXhwOiBbTG9hZEVtaXRQcm9iKGxpbmUsIGVtaXRQcm9iRSkAZXhwOiBbTG9hZEVtaXRQcm9iKGxpbmUsIGVtaXRQcm9iTSkAZXhwOiBbTG9hZEVtaXRQcm9iKGxpbmUsIGVtaXRQcm9iUykAIwAsAGVtaXRQcm9iIGlsbGVnYWwuAFRyYW5zQ29kZSBmYWlsZWQuAAAAAAAAAACgCwAAMgAAADMAAAA0AAAANQAAADYAAABkaWN0VHJpZV8ALi9jcHBqaWViYS9pbmNsdWRlL2NwcGppZWJhL01QU2VnbWVudC5ocHAATVBTZWdtZW50AE44Y3BwamllYmE5TVBTZWdtZW50RQBOOGNwcGppZWJhMTNTZWdtZW50VGFnZ2VkRQBOOGNwcGppZWJhMTFTZWdtZW50QmFzZUUAFEYAAHMLAAA8RgAAWAsAAIwLAAA8RgAAQgsAAJQLAAAAAAAAlAsAADcAAAA4AAAAOQAAADkAAAA5AAAAAAAAAIwLAAA3AAAAOgAAADkAAAAgCQrvvIzjgIIALi9jcHBqaWViYS9pbmNsdWRlL2NwcGppZWJhL1NlZ21lbnRCYXNlLmhwcABleHA6IFtSZXNldFNlcGFyYXRvcnMoU1BFQ0lBTF9TRVBBUkFUT1JTKQBkZWNvZGUgACBhbHJlYWR5IGV4aXN0cwAuL2NwcGppZWJhL2luY2x1ZGUvY3BwamllYmEvUHJlRmlsdGVyLmhwcABkZWNvZGUgZmFpbGVkLiAAcm9vdF8gIT0gTlVMTABGaW5kACFyaXQtPm5leHRzLmVtcHR5KCkAQ2FsY0RQAHAtPndvcmQuc2l6ZSgpID49IDEAQ3V0QnlEYWcAcmlnaHQtPm9mZnNldCA+PSBsZWZ0LT5vZmZzZXQALi9jcHBqaWViYS9pbmNsdWRlL2NwcGppZWJhL1VuaWNvZGUuaHBwAEdldFdvcmRGcm9tUnVuZXMAZGljdCAhPSBOVUxMAC4vY3BwamllYmEvaW5jbHVkZS9jcHBqaWViYS9Qb3NUYWdnZXIuaHBwAExvb2t1cFRhZwBEZWNvZGUgZmFpbGVkLgB4AG0AZW5nAAAAAAC0DQAAOwAAADwAAAA9AAAATjhjcHBqaWViYTEwSE1NU2VnbWVudEUAPEYAAJwNAACMCwAAAAAAAPQNAAA+AAAAPwAAAEAAAABBAAAAQgAAAE44Y3BwamllYmExME1peFNlZ21lbnRFADxGAADcDQAAlAsAAGVuZCA+PSBiZWdpbgAuL2NwcGppZWJhL2luY2x1ZGUvY3BwamllYmEvTWl4U2VnbWVudC5ocHAAQ3V0AGogLSAxID49IGkAAAAAAACwDgAAQwAAAEQAAABFAAAALi9jcHBqaWViYS9pbmNsdWRlL2NwcGppZWJhL0Z1bGxTZWdtZW50LmhwcABGdWxsU2VnbWVudABOOGNwcGppZWJhMTFGdWxsU2VnbWVudEUAAAAAPEYAAJQOAACMCwAAbmV4dG9mZnNldCA8IGRhZ3Muc2l6ZSgpAAAAAAAAAAAIDwAARgAAAEcAAABIAAAATjhjcHBqaWViYTEyUXVlcnlTZWdtZW50RQAAADxGAADsDgAAjAsAAC4vY3BwamllYmEvaW5jbHVkZS9jcHBqaWViYS9LZXl3b3JkRXh0cmFjdG9yLmhwcABsaW5lbm86IAAgZW1wdHkuIHNraXBwZWQuAGxpbmU6IAAsIGxpbmVubzogAGxpbmVubwBMb2FkSWRmRGljdABpZGZBdmVyYWdlXyA+IDAuMABzdG9wV29yZHNfLnNpemUoKQBMb2FkU3RvcFdvcmREaWN0AHdvcmRzIGlsbGVnYWwAcndhAHJ3YQBpbmZpbml0eQBuYW4AAAAAANF0ngBXnb0qgHBSD///PicKAAAAZAAAAOgDAAAQJwAAoIYBAEBCDwCAlpgAAOH1BRgAAAA1AAAAcQAAAGv////O+///kr///w==");
base64DecodeToExistingUint8Array(bufferView, 4148, "AgAAAAMAAAAFAAAABwAAAAsAAAANAAAAEQAAABMAAAAXAAAAHQAAAB8AAAAlAAAAKQAAACsAAAAvAAAANQAAADsAAAA9AAAAQwAAAEcAAABJAAAATwAAAFMAAABZAAAAYQAAAGUAAABnAAAAawAAAG0AAABxAAAAfwAAAIMAAACJAAAAiwAAAJUAAACXAAAAnQAAAKMAAACnAAAArQAAALMAAAC1AAAAvwAAAMEAAADFAAAAxwAAANMAAAABAAAACwAAAA0AAAARAAAAEwAAABcAAAAdAAAAHwAAACUAAAApAAAAKwAAAC8AAAA1AAAAOwAAAD0AAABDAAAARwAAAEkAAABPAAAAUwAAAFkAAABhAAAAZQAAAGcAAABrAAAAbQAAAHEAAAB5AAAAfwAAAIMAAACJAAAAiwAAAI8AAACVAAAAlwAAAJ0AAACjAAAApwAAAKkAAACtAAAAswAAALUAAAC7AAAAvwAAAMEAAADFAAAAxwAAANEAAABfX25leHRfcHJpbWUgb3ZlcmZsb3cAAAAAAAAACBQAAE0AAABOAAAAKgAAACsAAABPAAAAUAAAAC4AAAAZAAAAGgAAAFEAAAAcAAAAUgAAAB4AAABTAAAAAAAAAEQUAABUAAAAVQAAAFYAAABXAAAAWAAAAFkAAABaAAAAWwAAAFwAAABdAAAAXgAAAF8AAABgAAAAYQAAAAgAAAAAAAAAfBQAAA4AAAAPAAAA+P////j///98FAAAEAAAABEAAABUEgAAaBIAAAgAAAAAAAAAxBQAAGIAAABjAAAA+P////j////EFAAAZAAAAGUAAACEEgAAmBIAAAQAAAAAAAAADBUAACQAAAAlAAAA/P////z///8MFQAAJgAAACcAAAC0EgAAyBIAAAQAAAAAAAAAVBUAAGYAAABnAAAA/P////z///9UFQAAaAAAAGkAAADkEgAA+BIAAAAAAAA8EwAAagAAAGsAAABpb3NfYmFzZTo6Y2xlYXIATlN0M19fMjhpb3NfYmFzZUUAAAAURgAAKBMAAAAAAACAEwAAbAAAAG0AAABOU3QzX18yOWJhc2ljX2lvc0ljTlNfMTFjaGFyX3RyYWl0c0ljRUVFRQAAADxGAABUEwAAPBMAAAAAAADIEwAAbgAAAG8AAABOU3QzX18yOWJhc2ljX2lvc0l3TlNfMTFjaGFyX3RyYWl0c0l3RUVFRQAAADxGAACcEwAAPBMAAE5TdDNfXzIxNWJhc2ljX3N0cmVhbWJ1ZkljTlNfMTFjaGFyX3RyYWl0c0ljRUVFRQAAAAAURgAA1BMAAE5TdDNfXzIxNWJhc2ljX3N0cmVhbWJ1Zkl3TlNfMTFjaGFyX3RyYWl0c0l3RUVFRQAAAAAURgAAEBQAAE5TdDNfXzIxM2Jhc2ljX2lzdHJlYW1JY05TXzExY2hhcl90cmFpdHNJY0VFRUUAAJhGAABMFAAAAAAAAAEAAACAEwAAA/T//05TdDNfXzIxM2Jhc2ljX2lzdHJlYW1Jd05TXzExY2hhcl90cmFpdHNJd0VFRUUAAJhGAACUFAAAAAAAAAEAAADIEwAAA/T//05TdDNfXzIxM2Jhc2ljX29zdHJlYW1JY05TXzExY2hhcl90cmFpdHNJY0VFRUUAAJhGAADcFAAAAAAAAAEAAACAEwAAA/T//05TdDNfXzIxM2Jhc2ljX29zdHJlYW1Jd05TXzExY2hhcl90cmFpdHNJd0VFRUUAAJhGAAAkFQAAAAAAAAEAAADIEwAAA/T///BGAACARwAAGEgAAAAAAADQFQAATQAAAHMAAAB0AAAAKwAAAE8AAABQAAAALgAAABkAAAAaAAAAdQAAAHYAAAB3AAAAHgAAAFMAAABOU3QzX18yMTBfX3N0ZGluYnVmSWNFRQA8RgAAuBUAAAgUAAB1bnN1cHBvcnRlZCBsb2NhbGUgZm9yIHN0YW5kYXJkIGlucHV0AAAAAAAAAFwWAABUAAAAeAAAAHkAAABXAAAAWAAAAFkAAABaAAAAWwAAAFwAAAB6AAAAewAAAHwAAABgAAAAYQAAAE5TdDNfXzIxMF9fc3RkaW5idWZJd0VFADxGAABEFgAARBQAAAAAAADEFgAATQAAAH0AAAB+AAAAKwAAAE8AAABQAAAAfwAAABkAAAAaAAAAUQAAABwAAABSAAAAgAAAAIEAAABOU3QzX18yMTFfX3N0ZG91dGJ1ZkljRUUAAAAAPEYAAKgWAAAIFAAAAAAAACwXAABUAAAAggAAAIMAAABXAAAAWAAAAFkAAACEAAAAWwAAAFwAAABdAAAAXgAAAF8AAACFAAAAhgAAAE5TdDNfXzIxMV9fc3Rkb3V0YnVmSXdFRQAAAAA8RgAAEBcAAEQU");
base64DecodeToExistingUint8Array(bufferView, 5952, "/////////////////////////////////////////////////////////////////wABAgMEBQYHCAn/////////CgsMDQ4PEBESExQVFhcYGRobHB0eHyAhIiP///////8KCwwNDg8QERITFBUWFxgZGhscHR4fICEiI/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////8AAQIEBwMGBQAAAAAAAAACAADAAwAAwAQAAMAFAADABgAAwAcAAMAIAADACQAAwAoAAMALAADADAAAwA0AAMAOAADADwAAwBAAAMARAADAEgAAwBMAAMAUAADAFQAAwBYAAMAXAADAGAAAwBkAAMAaAADAGwAAwBwAAMAdAADAHgAAwB8AAMAAAACzAQAAwwIAAMMDAADDBAAAwwUAAMMGAADDBwAAwwgAAMMJAADDCgAAwwsAAMMMAADDDQAA0w4AAMMPAADDAAAMuwEADMMCAAzDAwAMwwQADNMAAAAA3hIElQAAAAD///////////////8gGQAAFAAAAEMuVVRGLTg=");
base64DecodeToExistingUint8Array(bufferView, 6504, "NBk=");
base64DecodeToExistingUint8Array(bufferView, 6528, "TENfQUxM");
base64DecodeToExistingUint8Array(bufferView, 6544, "TENfQ1RZUEUAAAAATENfTlVNRVJJQwAATENfVElNRQAAAAAATENfQ09MTEFURQAATENfTU9ORVRBUlkATENfTUVTU0FHRVMATEFORwBDLlVURi04AFBPU0lYAE1VU0xfTE9DUEFUSAAALSsgICAwWDB4AChudWxsKQAAAAAAAAARAAoAERERAAAAAAUAAAAAAAAJAAAAAAsAAAAAAAAAABEADwoREREDCgcAAQAJCwsAAAkGCwAACwAGEQAAABEREQ==");
base64DecodeToExistingUint8Array(bufferView, 6753, "CwAAAAAAAAAAEQAKChEREQAKAAACAAkLAAAACQALAAAL");
base64DecodeToExistingUint8Array(bufferView, 6811, "DA==");
base64DecodeToExistingUint8Array(bufferView, 6823, "DAAAAAAMAAAAAAkMAAAAAAAMAAAM");
base64DecodeToExistingUint8Array(bufferView, 6869, "Dg==");
base64DecodeToExistingUint8Array(bufferView, 6881, "DQAAAAQNAAAAAAkOAAAAAAAOAAAO");
base64DecodeToExistingUint8Array(bufferView, 6927, "EA==");
base64DecodeToExistingUint8Array(bufferView, 6939, "DwAAAAAPAAAAAAkQAAAAAAAQAAAQAAASAAAAEhIS");
base64DecodeToExistingUint8Array(bufferView, 6994, "EgAAABISEgAAAAAAAAk=");
base64DecodeToExistingUint8Array(bufferView, 7043, "Cw==");
base64DecodeToExistingUint8Array(bufferView, 7055, "CgAAAAAKAAAAAAkLAAAAAAALAAAL");
base64DecodeToExistingUint8Array(bufferView, 7101, "DA==");
base64DecodeToExistingUint8Array(bufferView, 7113, "DAAAAAAMAAAAAAkMAAAAAAAMAAAMAAAwMTIzNDU2Nzg5QUJDREVGLTBYKzBYIDBYLTB4KzB4IDB4AGluZgBJTkYAbmFuAE5BTgAu");
base64DecodeToExistingUint8Array(bufferView, 7228, "ig==");
base64DecodeToExistingUint8Array(bufferView, 7267, "//////8=");
base64DecodeToExistingUint8Array(bufferView, 7336, "sB0=");
base64DecodeToExistingUint8Array(bufferView, 7600, "AgACAAIAAgACAAIAAgACAAIAAyACIAIgAiACIAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAFgBMAEwATABMAEwATABMAEwATABMAEwATABMAEwATACNgI2AjYCNgI2AjYCNgI2AjYCNgEwATABMAEwATABMAEwAjVCNUI1QjVCNUI1QjFCMUIxQjFCMUIxQjFCMUIxQjFCMUIxQjFCMUIxQjFCMUIxQjFCMUEwATABMAEwATABMAI1gjWCNYI1gjWCNYIxgjGCMYIxgjGCMYIxgjGCMYIxgjGCMYIxgjGCMYIxgjGCMYIxgjGBMAEwATABMAC");
base64DecodeToExistingUint8Array(bufferView, 8112, "wCE=");
base64DecodeToExistingUint8Array(bufferView, 8644, "AQAAAAIAAAADAAAABAAAAAUAAAAGAAAABwAAAAgAAAAJAAAACgAAAAsAAAAMAAAADQAAAA4AAAAPAAAAEAAAABEAAAASAAAAEwAAABQAAAAVAAAAFgAAABcAAAAYAAAAGQAAABoAAAAbAAAAHAAAAB0AAAAeAAAAHwAAACAAAAAhAAAAIgAAACMAAAAkAAAAJQAAACYAAAAnAAAAKAAAACkAAAAqAAAAKwAAACwAAAAtAAAALgAAAC8AAAAwAAAAMQAAADIAAAAzAAAANAAAADUAAAA2AAAANwAAADgAAAA5AAAAOgAAADsAAAA8AAAAPQAAAD4AAAA/AAAAQAAAAEEAAABCAAAAQwAAAEQAAABFAAAARgAAAEcAAABIAAAASQAAAEoAAABLAAAATAAAAE0AAABOAAAATwAAAFAAAABRAAAAUgAAAFMAAABUAAAAVQAAAFYAAABXAAAAWAAAAFkAAABaAAAAWwAAAFwAAABdAAAAXgAAAF8AAABgAAAAQQAAAEIAAABDAAAARAAAAEUAAABGAAAARwAAAEgAAABJAAAASgAAAEsAAABMAAAATQAAAE4AAABPAAAAUAAAAFEAAABSAAAAUwAAAFQAAABVAAAAVgAAAFcAAABYAAAAWQAAAFoAAAB7AAAAfAAAAH0AAAB+AAAAfw==");
base64DecodeToExistingUint8Array(bufferView, 9664, "0Cc=");
base64DecodeToExistingUint8Array(bufferView, 10196, "AQAAAAIAAAADAAAABAAAAAUAAAAGAAAABwAAAAgAAAAJAAAACgAAAAsAAAAMAAAADQAAAA4AAAAPAAAAEAAAABEAAAASAAAAEwAAABQAAAAVAAAAFgAAABcAAAAYAAAAGQAAABoAAAAbAAAAHAAAAB0AAAAeAAAAHwAAACAAAAAhAAAAIgAAACMAAAAkAAAAJQAAACYAAAAnAAAAKAAAACkAAAAqAAAAKwAAACwAAAAtAAAALgAAAC8AAAAwAAAAMQAAADIAAAAzAAAANAAAADUAAAA2AAAANwAAADgAAAA5AAAAOgAAADsAAAA8AAAAPQAAAD4AAAA/AAAAQAAAAGEAAABiAAAAYwAAAGQAAABlAAAAZgAAAGcAAABoAAAAaQAAAGoAAABrAAAAbAAAAG0AAABuAAAAbwAAAHAAAABxAAAAcgAAAHMAAAB0AAAAdQAAAHYAAAB3AAAAeAAAAHkAAAB6AAAAWwAAAFwAAABdAAAAXgAAAF8AAABgAAAAYQAAAGIAAABjAAAAZAAAAGUAAABmAAAAZwAAAGgAAABpAAAAagAAAGsAAABsAAAAbQAAAG4AAABvAAAAcAAAAHEAAAByAAAAcwAAAHQAAAB1AAAAdgAAAHcAAAB4AAAAeQAAAHoAAAB7AAAAfAAAAH0AAAB+AAAAfw==");
base64DecodeToExistingUint8Array(bufferView, 11216, "MDEyMzQ1Njc4OWFiY2RlZkFCQ0RFRnhYKy1wUGlJbk4AJXAAbABsbAAATAAlAAAAAAAlcAAAAAAlSTolTTolUyAlcCVIOiVNAAAAAAAAAAAlAAAAbQAAAC8AAAAlAAAAZAAAAC8AAAAlAAAAeQAAACUAAABZAAAALQAAACUAAABtAAAALQAAACUAAABkAAAAJQAAAEkAAAA6AAAAJQAAAE0AAAA6AAAAJQAAAFMAAAAgAAAAJQAAAHAAAAAAAAAAJQAAAEgAAAA6AAAAJQAAAE0=");
base64DecodeToExistingUint8Array(bufferView, 11440, "JQAAAEgAAAA6AAAAJQAAAE0AAAA6AAAAJQAAAFMAAAAlTGYAMDEyMzQ1Njc4OQAlLjBMZgBDAAAAAAAAWDIAAJ0AAACeAAAAnwAAAAAAAAC4MgAAoAAAAKEAAACfAAAAogAAAKMAAACkAAAApQAAAKYAAACnAAAAqAAAAKkAAAAAAAAAIDIAAKoAAACrAAAAnwAAAKwAAACtAAAArgAAAK8AAACwAAAAsQAAALIAAAAAAAAA8DIAALMAAAC0AAAAnwAAALUAAAC2AAAAtwAAALgAAAC5AAAAAAAAABQzAAC6AAAAuwAAAJ8AAAC8AAAAvQAAAL4AAAC/AAAAwAAAAHRydWUAAAAAdAAAAHIAAAB1AAAAZQAAAAAAAABmYWxzZQAAAGYAAABhAAAAbAAAAHMAAABlAAAAAAAAACVtLyVkLyV5AAAAACUAAABtAAAALwAAACUAAABkAAAALwAAACUAAAB5AAAAAAAAACVIOiVNOiVTAAAAACUAAABIAAAAOgAAACUAAABNAAAAOgAAACUAAABTAAAAAAAAACVhICViICVkICVIOiVNOiVTICVZAAAAACUAAABhAAAAIAAAACUAAABiAAAAIAAAACUAAABkAAAAIAAAACUAAABIAAAAOgAAACUAAABNAAAAOgAAACUAAABTAAAAIAAAACUAAABZAAAAAAAAACVJOiVNOiVTICVwACUAAABJAAAAOgAAACUAAABNAAAAOgAAACUAAABTAAAAIAAAACUAAABw");
base64DecodeToExistingUint8Array(bufferView, 12024, "IC8AAMEAAADCAAAAnwAAAE5TdDNfXzI2bG9jYWxlNWZhY2V0RQAAADxGAAAILwAATEQAAAAAAACgLwAAwQAAAMMAAACfAAAAxAAAAMUAAADGAAAAxwAAAMgAAADJAAAAygAAAMsAAADMAAAAzQAAAM4AAADPAAAATlN0M19fMjVjdHlwZUl3RUUATlN0M19fMjEwY3R5cGVfYmFzZUUAABRGAACCLwAAmEYAAHAvAAAAAAAAAgAAACAvAAACAAAAmC8AAAIAAAAAAAAANDAAAMEAAADQAAAAnwAAANEAAADSAAAA0wAAANQAAADVAAAA1gAAANcAAABOU3QzX18yN2NvZGVjdnRJY2MxMV9fbWJzdGF0ZV90RUUATlN0M19fMjEyY29kZWN2dF9iYXNlRQAAAAAURgAAEjAAAJhGAADwLwAAAAAAAAIAAAAgLwAAAgAAACwwAAACAAAAAAAAAKgwAADBAAAA2AAAAJ8AAADZAAAA2gAAANsAAADcAAAA3QAAAN4AAADfAAAATlN0M19fMjdjb2RlY3Z0SURzYzExX19tYnN0YXRlX3RFRQAAmEYAAIQwAAAAAAAAAgAAACAvAAACAAAALDAAAAIAAAAAAAAAHDEAAMEAAADgAAAAnwAAAOEAAADiAAAA4wAAAOQAAADlAAAA5gAAAOcAAABOU3QzX18yN2NvZGVjdnRJRGljMTFfX21ic3RhdGVfdEVFAACYRgAA+DAAAAAAAAACAAAAIC8AAAIAAAAsMAAAAgAAAAAAAACQMQAAwQAAAOgAAACfAAAA4QAAAOIAAADjAAAA5AAAAOUAAADmAAAA5wAAAE5TdDNfXzIxNl9fbmFycm93X3RvX3V0ZjhJTG0zMkVFRQAAADxGAABsMQAAHDEAAAAAAADwMQAAwQAAAOkAAACfAAAA4QAAAOIAAADjAAAA5AAAAOUAAADmAAAA5wAAAE5TdDNfXzIxN19fd2lkZW5fZnJvbV91dGY4SUxtMzJFRUUAADxGAADMMQAAHDEAAE5TdDNfXzI3Y29kZWN2dEl3YzExX19tYnN0YXRlX3RFRQAAAJhGAAD8MQAAAAAAAAIAAAAgLwAAAgAAACwwAAACAAAATlN0M19fMjZsb2NhbGU1X19pbXBFAAAAPEYAAEAyAAAgLwAATlN0M19fMjdjb2xsYXRlSWNFRQA8RgAAZDIAACAvAABOU3QzX18yN2NvbGxhdGVJd0VFADxGAACEMgAAIC8AAE5TdDNfXzI1Y3R5cGVJY0VFAAAAmEYAAKQyAAAAAAAAAgAAACAvAAACAAAAmC8AAAIAAABOU3QzX18yOG51bXB1bmN0SWNFRQAAAAA8RgAA2DIAACAvAABOU3QzX18yOG51bXB1bmN0SXdFRQAAAAA8RgAA/DIAACAvAAAAAAAAeDIAAOoAAADrAAAAnwAAAOwAAADtAAAA7gAAAAAAAACYMgAA7wAAAPAAAACfAAAA8QAAAPIAAADzAAAAAAAAADQ0AADBAAAA9AAAAJ8AAAD1AAAA9gAAAPcAAAD4AAAA+QAAAPoAAAD7AAAA/AAAAP0AAAD+AAAA/wAAAE5TdDNfXzI3bnVtX2dldEljTlNfMTlpc3RyZWFtYnVmX2l0ZXJhdG9ySWNOU18xMWNoYXJfdHJhaXRzSWNFRUVFRUUATlN0M19fMjlfX251bV9nZXRJY0VFAE5TdDNfXzIxNF9fbnVtX2dldF9iYXNlRQAAFEYAAPozAACYRgAA5DMAAAAAAAABAAAAFDQAAAAAAACYRgAAoDMAAAAAAAACAAAAIC8AAAIAAAAcNA==");
base64DecodeToExistingUint8Array(bufferView, 13400, "CDUAAMEAAAAAAQAAnwAAAAEBAAACAQAAAwEAAAQBAAAFAQAABgEAAAcBAAAIAQAACQEAAAoBAAALAQAATlN0M19fMjdudW1fZ2V0SXdOU18xOWlzdHJlYW1idWZfaXRlcmF0b3JJd05TXzExY2hhcl90cmFpdHNJd0VFRUVFRQBOU3QzX18yOV9fbnVtX2dldEl3RUUAAACYRgAA2DQAAAAAAAABAAAAFDQAAAAAAACYRgAAlDQAAAAAAAACAAAAIC8AAAIAAADwNA==");
base64DecodeToExistingUint8Array(bufferView, 13612, "8DUAAMEAAAAMAQAAnwAAAA0BAAAOAQAADwEAABABAAARAQAAEgEAABMBAAAUAQAATlN0M19fMjdudW1fcHV0SWNOU18xOW9zdHJlYW1idWZfaXRlcmF0b3JJY05TXzExY2hhcl90cmFpdHNJY0VFRUVFRQBOU3QzX18yOV9fbnVtX3B1dEljRUUATlN0M19fMjE0X19udW1fcHV0X2Jhc2VFAAAURgAAtjUAAJhGAACgNQAAAAAAAAEAAADQNQAAAAAAAJhGAABcNQAAAAAAAAIAAAAgLwAAAgAAANg1");
base64DecodeToExistingUint8Array(bufferView, 13844, "uDYAAMEAAAAVAQAAnwAAABYBAAAXAQAAGAEAABkBAAAaAQAAGwEAABwBAAAdAQAATlN0M19fMjdudW1fcHV0SXdOU18xOW9zdHJlYW1idWZfaXRlcmF0b3JJd05TXzExY2hhcl90cmFpdHNJd0VFRUVFRQBOU3QzX18yOV9fbnVtX3B1dEl3RUUAAACYRgAAiDYAAAAAAAABAAAA0DUAAAAAAACYRgAARDYAAAAAAAACAAAAIC8AAAIAAACgNg==");
base64DecodeToExistingUint8Array(bufferView, 14044, "uDcAAB4BAAAfAQAAnwAAACABAAAhAQAAIgEAACMBAAAkAQAAJQEAACYBAAD4////uDcAACcBAAAoAQAAKQEAACoBAAArAQAALAEAAC0BAABOU3QzX18yOHRpbWVfZ2V0SWNOU18xOWlzdHJlYW1idWZfaXRlcmF0b3JJY05TXzExY2hhcl90cmFpdHNJY0VFRUVFRQBOU3QzX18yOXRpbWVfYmFzZUUAFEYAAHE3AABOU3QzX18yMjBfX3RpbWVfZ2V0X2Nfc3RvcmFnZUljRUUAAAAURgAAjDcAAJhGAAAsNwAAAAAAAAMAAAAgLwAAAgAAAIQ3AAACAAAAsDcAAAAIAAAAAAAApDgAAC4BAAAvAQAAnwAAADABAAAxAQAAMgEAADMBAAA0AQAANQEAADYBAAD4////pDgAADcBAAA4AQAAOQEAADoBAAA7AQAAPAEAAD0BAABOU3QzX18yOHRpbWVfZ2V0SXdOU18xOWlzdHJlYW1idWZfaXRlcmF0b3JJd05TXzExY2hhcl90cmFpdHNJd0VFRUVFRQBOU3QzX18yMjBfX3RpbWVfZ2V0X2Nfc3RvcmFnZUl3RUUAABRGAAB5OAAAmEYAADQ4AAAAAAAAAwAAACAvAAACAAAAhDcAAAIAAACcOAAAAAgAAAAAAABIOQAAPgEAAD8BAACfAAAAQAEAAE5TdDNfXzI4dGltZV9wdXRJY05TXzE5b3N0cmVhbWJ1Zl9pdGVyYXRvckljTlNfMTFjaGFyX3RyYWl0c0ljRUVFRUVFAE5TdDNfXzIxMF9fdGltZV9wdXRFAAAAFEYAACk5AACYRgAA5DgAAAAAAAACAAAAIC8AAAIAAABAOQAAAAgAAAAAAADIOQAAQQEAAEIBAACfAAAAQwEAAE5TdDNfXzI4dGltZV9wdXRJd05TXzE5b3N0cmVhbWJ1Zl9pdGVyYXRvckl3TlNfMTFjaGFyX3RyYWl0c0l3RUVFRUVFAAAAAJhGAACAOQAAAAAAAAIAAAAgLwAAAgAAAEA5AAAACAAAAAAAAFw6AADBAAAARAEAAJ8AAABFAQAARgEAAEcBAABIAQAASQEAAEoBAABLAQAATAEAAE0BAABOU3QzX18yMTBtb25leXB1bmN0SWNMYjBFRUUATlN0M19fMjEwbW9uZXlfYmFzZUUAAAAAFEYAADw6AACYRgAAIDoAAAAAAAACAAAAIC8AAAIAAABUOgAAAgAAAAAAAADQOgAAwQAAAE4BAACfAAAATwEAAFABAABRAQAAUgEAAFMBAABUAQAAVQEAAFYBAABXAQAATlN0M19fMjEwbW9uZXlwdW5jdEljTGIxRUVFAJhGAAC0OgAAAAAAAAIAAAAgLwAAAgAAAFQ6AAACAAAAAAAAAEQ7AADBAAAAWAEAAJ8AAABZAQAAWgEAAFsBAABcAQAAXQEAAF4BAABfAQAAYAEAAGEBAABOU3QzX18yMTBtb25leXB1bmN0SXdMYjBFRUUAmEYAACg7AAAAAAAAAgAAACAvAAACAAAAVDoAAAIAAAAAAAAAuDsAAMEAAABiAQAAnwAAAGMBAABkAQAAZQEAAGYBAABnAQAAaAEAAGkBAABqAQAAawEAAE5TdDNfXzIxMG1vbmV5cHVuY3RJd0xiMUVFRQCYRgAAnDsAAAAAAAACAAAAIC8AAAIAAABUOgAAAgAAAAAAAABcPAAAwQAAAGwBAACfAAAAbQEAAG4BAABOU3QzX18yOW1vbmV5X2dldEljTlNfMTlpc3RyZWFtYnVmX2l0ZXJhdG9ySWNOU18xMWNoYXJfdHJhaXRzSWNFRUVFRUUATlN0M19fMjExX19tb25leV9nZXRJY0VFAAAURgAAOjwAAJhGAAD0OwAAAAAAAAIAAAAgLwAAAgAAAFQ8");
base64DecodeToExistingUint8Array(bufferView, 15489, "PQAAwQAAAG8BAACfAAAAcAEAAHEBAABOU3QzX18yOW1vbmV5X2dldEl3TlNfMTlpc3RyZWFtYnVmX2l0ZXJhdG9ySXdOU18xMWNoYXJfdHJhaXRzSXdFRUVFRUUATlN0M19fMjExX19tb25leV9nZXRJd0VFAAAURgAA3jwAAJhGAACYPAAAAAAAAAIAAAAgLwAAAgAAAPg8");
base64DecodeToExistingUint8Array(bufferView, 15652, "pD0AAMEAAAByAQAAnwAAAHMBAAB0AQAATlN0M19fMjltb25leV9wdXRJY05TXzE5b3N0cmVhbWJ1Zl9pdGVyYXRvckljTlNfMTFjaGFyX3RyYWl0c0ljRUVFRUVFAE5TdDNfXzIxMV9fbW9uZXlfcHV0SWNFRQAAFEYAAII9AACYRgAAPD0AAAAAAAACAAAAIC8AAAIAAACcPQ==");
base64DecodeToExistingUint8Array(bufferView, 15816, "SD4AAMEAAAB1AQAAnwAAAHYBAAB3AQAATlN0M19fMjltb25leV9wdXRJd05TXzE5b3N0cmVhbWJ1Zl9pdGVyYXRvckl3TlNfMTFjaGFyX3RyYWl0c0l3RUVFRUVFAE5TdDNfXzIxMV9fbW9uZXlfcHV0SXdFRQAAFEYAACY+AACYRgAA4D0AAAAAAAACAAAAIC8AAAIAAABAPg==");
base64DecodeToExistingUint8Array(bufferView, 15980, "wD4AAMEAAAB4AQAAnwAAAHkBAAB6AQAAewEAAE5TdDNfXzI4bWVzc2FnZXNJY0VFAE5TdDNfXzIxM21lc3NhZ2VzX2Jhc2VFAAAAABRGAACdPgAAmEYAAIg+AAAAAAAAAgAAACAvAAACAAAAuD4AAAIAAAAAAAAAGD8AAMEAAAB8AQAAnwAAAH0BAAB+AQAAfwEAAE5TdDNfXzI4bWVzc2FnZXNJd0VFAAAAAJhGAAAAPwAAAAAAAAIAAAAgLwAAAgAAALg+AAACAAAAU3VuZGF5AE1vbmRheQBUdWVzZGF5AFdlZG5lc2RheQBUaHVyc2RheQBGcmlkYXkAU2F0dXJkYXkAU3VuAE1vbgBUdWUAV2VkAFRodQBGcmkAU2F0AAAAAFMAAAB1AAAAbgAAAGQAAABhAAAAeQAAAAAAAABNAAAAbwAAAG4AAABkAAAAYQAAAHkAAAAAAAAAVAAAAHUAAABlAAAAcwAAAGQAAABhAAAAeQAAAAAAAABXAAAAZQAAAGQAAABuAAAAZQAAAHMAAABkAAAAYQAAAHkAAAAAAAAAVAAAAGgAAAB1AAAAcgAAAHMAAABkAAAAYQAAAHkAAAAAAAAARgAAAHIAAABpAAAAZAAAAGEAAAB5AAAAAAAAAFMAAABhAAAAdAAAAHUAAAByAAAAZAAAAGEAAAB5AAAAAAAAAFMAAAB1AAAAbgAAAAAAAABNAAAAbwAAAG4AAAAAAAAAVAAAAHUAAABlAAAAAAAAAFcAAABlAAAAZAAAAAAAAABUAAAAaAAAAHUAAAAAAAAARgAAAHIAAABpAAAAAAAAAFMAAABhAAAAdAAAAAAAAABKYW51YXJ5AEZlYnJ1YXJ5AE1hcmNoAEFwcmlsAE1heQBKdW5lAEp1bHkAQXVndXN0AFNlcHRlbWJlcgBPY3RvYmVyAE5vdmVtYmVyAERlY2VtYmVyAEphbgBGZWIATWFyAEFwcgBKdW4ASnVsAEF1ZwBTZXAAT2N0AE5vdgBEZWMAAABKAAAAYQAAAG4AAAB1AAAAYQAAAHIAAAB5AAAAAAAAAEYAAABlAAAAYgAAAHIAAAB1AAAAYQAAAHIAAAB5AAAAAAAAAE0AAABhAAAAcgAAAGMAAABoAAAAAAAAAEEAAABwAAAAcgAAAGkAAABsAAAAAAAAAE0AAABhAAAAeQAAAAAAAABKAAAAdQAAAG4AAABlAAAAAAAAAEoAAAB1AAAAbAAAAHkAAAAAAAAAQQAAAHUAAABnAAAAdQAAAHMAAAB0AAAAAAAAAFMAAABlAAAAcAAAAHQAAABlAAAAbQAAAGIAAABlAAAAcgAAAAAAAABPAAAAYwAAAHQAAABvAAAAYgAAAGUAAAByAAAAAAAAAE4AAABvAAAAdgAAAGUAAABtAAAAYgAAAGUAAAByAAAAAAAAAEQAAABlAAAAYwAAAGUAAABtAAAAYgAAAGUAAAByAAAAAAAAAEoAAABhAAAAbgAAAAAAAABGAAAAZQAAAGIAAAAAAAAATQAAAGEAAAByAAAAAAAAAEEAAABwAAAAcgAAAAAAAABKAAAAdQAAAG4AAAAAAAAASgAAAHUAAABsAAAAAAAAAEEAAAB1AAAAZwAAAAAAAABTAAAAZQAAAHAAAAAAAAAATwAAAGMAAAB0AAAAAAAAAE4AAABvAAAAdgAAAAAAAABEAAAAZQAAAGMAAAAAAAAAQU0AUE0AAABBAAAATQAAAAAAAABQAAAATQAAAAAAAABhbGxvY2F0b3I8VD46OmFsbG9jYXRlKHNpemVfdCBuKSAnbicgZXhjZWVkcyBtYXhpbXVtIHN1cHBvcnRlZCBzaXplAAAAAACwNwAAJwEAACgBAAApAQAAKgEAACsBAAAsAQAALQEAAAAAAACcOAAANwEAADgBAAA5AQAAOgEAADsBAAA8AQAAPQEAAAAAAABMRAAAgAEAAIEBAAA5AAAATlN0M19fMjE0X19zaGFyZWRfY291bnRFAAAAABRGAAAwRAAAYmFzaWNfc3RyaW5nAHZlY3RvcgBfX2N4YV9ndWFyZF9hY3F1aXJlIGRldGVjdGVkIHJlY3Vyc2l2ZSBpbml0aWFsaXphdGlvbgBQdXJlIHZpcnR1YWwgZnVuY3Rpb24gY2FsbGVkIQBzdGQ6OmV4Y2VwdGlvbgAAAAAAAPBEAACCAQAAgwEAAIQBAABTdDlleGNlcHRpb24AAAAAFEYAAOBEAAAAAAAAHEUAAAcAAACFAQAAhgEAAFN0MTFsb2dpY19lcnJvcgA8RgAADEUAAPBEAAAAAAAAUEUAAAcAAACHAQAAhgEAAFN0MTJsZW5ndGhfZXJyb3IAAAAAPEYAADxFAAAcRQAAAAAAAKBFAAAGAAAAiAEAAIkBAABzdGQ6OmJhZF9jYXN0AFN0OXR5cGVfaW5mbwAAFEYAAH5FAABTdDhiYWRfY2FzdAA8RgAAlEUAAPBEAABOMTBfX2N4eGFiaXYxMTZfX3NoaW1fdHlwZV9pbmZvRQAAAAA8RgAArEUAAIxFAABOMTBfX2N4eGFiaXYxMTdfX2NsYXNzX3R5cGVfaW5mb0UAAAA8RgAA3EUAANBFAAAAAAAAAEYAAIoBAACLAQAAjAEAAI0BAACOAQAAjwEAAJABAACRAQAAAAAAAIRGAACKAQAAkgEAAIwBAACNAQAAjgEAAJMBAACUAQAAlQEAAE4xMF9fY3h4YWJpdjEyMF9fc2lfY2xhc3NfdHlwZV9pbmZvRQAAAAA8RgAAXEYAAABGAAAAAAAA4EYAAIoBAACWAQAAjAEAAI0BAACOAQAAlwEAAJgBAACZAQAATjEwX19jeHhhYml2MTIxX192bWlfY2xhc3NfdHlwZV9pbmZvRQAAADxGAAC4RgAAAEY=");
base64DecodeToExistingUint8Array(bufferView, 18160, "CQ==");
base64DecodeToExistingUint8Array(bufferView, 18172, "TA==");
base64DecodeToExistingUint8Array(bufferView, 18192, "SwAAAAAAAABJAAAAOE0AAAAE");
base64DecodeToExistingUint8Array(bufferView, 18236, "/////w==");
base64DecodeToExistingUint8Array(bufferView, 18304, "BQ==");
base64DecodeToExistingUint8Array(bufferView, 18316, "cA==");
base64DecodeToExistingUint8Array(bufferView, 18340, "SgAAAHEAAABIUQAAAAQ=");
base64DecodeToExistingUint8Array(bufferView, 18364, "AQ==");
base64DecodeToExistingUint8Array(bufferView, 18379, "Cv////8=");
base64DecodeToExistingUint8Array(bufferView, 18448, "gEcAAAAAAAAF");
base64DecodeToExistingUint8Array(bufferView, 18468, "TA==");
base64DecodeToExistingUint8Array(bufferView, 18492, "SgAAAEkAAABQVQ==");
base64DecodeToExistingUint8Array(bufferView, 18516, "Ag==");
base64DecodeToExistingUint8Array(bufferView, 18531, "//////8=");
base64DecodeToExistingUint8Array(bufferView, 18776, "9Ew=");
return asmFunc({
    'Int8Array': Int8Array,
    'Int16Array': Int16Array,
    'Int32Array': Int32Array,
    'Uint8Array': Uint8Array,
    'Uint16Array': Uint16Array,
    'Uint32Array': Uint32Array,
    'Float32Array': Float32Array,
    'Float64Array': Float64Array,
    'NaN': NaN,
    'Infinity': Infinity,
    'Math': Math
  },
  asmLibraryArg,
  wasmMemory.buffer
)

}
)(asmLibraryArg, wasmMemory, wasmTable);
    return {
      'exports': exports
    };
  },

  instantiate: /** @suppress{checkTypes} */ function(binary, info) {
    return {
      then: function(ok) {
        ok({
          'instance': new WebAssembly.Instance(new WebAssembly.Module(binary))
        });
      }
    };
  },

  RuntimeError: Error
};

// We don't need to actually download a wasm binary, mark it as present but empty.
wasmBinary = [];



if (typeof WebAssembly !== 'object') {
  err('no native wasm support detected');
}




// In MINIMAL_RUNTIME, setValue() and getValue() are only available when building with safe heap enabled, for heap safety checking.
// In traditional runtime, setValue() and getValue() are always available (although their use is highly discouraged due to perf penalties)

/** @param {number} ptr
    @param {number} value
    @param {string} type
    @param {number|boolean=} noSafe */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

/** @param {number} ptr
    @param {string} type
    @param {number|boolean=} noSafe */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}






// Wasm globals

var wasmMemory;

// In fastcomp asm.js, we don't need a wasm Table at all.
// In the wasm backend, we polyfill the WebAssembly object,
// so this creates a (non-native-wasm) table for us.
var wasmTable = new WebAssembly.Table({
  'initial': 410,
  'maximum': 410 + 0,
  'element': 'anyfunc'
});


//========================================
// Runtime essentials
//========================================

// whether we are quitting the application. no code should run after this.
// set in exit() and abort()
var ABORT = false;

// set by exit() and abort().  Passed to 'onExit' handler.
// NOTE: This is also used as the process return code code in shell environments
// but only when noExitRuntime is false.
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

// C calling interface.
/** @param {string|null=} returnType
    @param {Array=} argTypes
    @param {Arguments|Array=} args
    @param {Object=} opts */
function ccall(ident, returnType, argTypes, args, opts) {
  // For fast lookup of conversion functions
  var toC = {
    'string': function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        var len = (str.length << 2) + 1;
        ret = stackAlloc(len);
        stringToUTF8(str, ret, len);
      }
      return ret;
    },
    'array': function(arr) {
      var ret = stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    }
  };

  function convertReturnValue(ret) {
    if (returnType === 'string') return UTF8ToString(ret);
    if (returnType === 'boolean') return Boolean(ret);
    return ret;
  }

  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);

  ret = convertReturnValue(ret);
  if (stack !== 0) stackRestore(stack);
  return ret;
}

/** @param {string=} returnType
    @param {Array=} argTypes
    @param {Object=} opts */
function cwrap(ident, returnType, argTypes, opts) {
  argTypes = argTypes || [];
  // When the function takes numbers and returns a number, we can just return
  // the original function
  var numericArgs = argTypes.every(function(type){ return type === 'number'});
  var numericRet = returnType !== 'string';
  if (numericRet && numericArgs && !opts) {
    return getCFunc(ident);
  }
  return function() {
    return ccall(ident, returnType, argTypes, arguments, opts);
  }
}

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_DYNAMIC = 2; // Cannot be freed except through sbrk
var ALLOC_NONE = 3; // Do not allocate

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc,
    stackAlloc,
    dynamicAlloc][allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var stop;
    ptr = ret;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!runtimeInitialized) return dynamicAlloc(size);
  return _malloc(size);
}




// runtime_strings.js: Strings related runtime functions that are part of both MINIMAL_RUNTIME and regular runtime.

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;

/**
 * @param {number} idx
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ArrayToString(heap, idx, maxBytesToRead) {
  var endIdx = idx + maxBytesToRead;
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  // (As a tiny code save trick, compare endPtr against endIdx using a negation, so that undefined means Infinity)
  while (heap[endPtr] && !(endPtr >= endIdx)) ++endPtr;

  if (endPtr - idx > 16 && heap.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(heap.subarray(idx, endPtr));
  } else {
    var str = '';
    // If building with TextDecoder, we have already computed the string length above, so test loop end condition against that
    while (idx < endPtr) {
      // For UTF8 byte structure, see:
      // http://en.wikipedia.org/wiki/UTF-8#Description
      // https://www.ietf.org/rfc/rfc2279.txt
      // https://tools.ietf.org/html/rfc3629
      var u0 = heap[idx++];
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      var u1 = heap[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      var u2 = heap[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | (heap[idx++] & 63);
      }

      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
  return str;
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns a
// copy of that string as a Javascript String object.
// maxBytesToRead: an optional length that specifies the maximum number of bytes to read. You can omit
//                 this parameter to scan the string until the first \0 byte. If maxBytesToRead is
//                 passed, and the string at [ptr, ptr+maxBytesToReadr[ contains a null byte in the
//                 middle, then the string will cut short at that byte index (i.e. maxBytesToRead will
//                 not produce a string of exact length [ptr, ptr+maxBytesToRead[)
//                 N.B. mixing frequent uses of UTF8ToString() with and without maxBytesToRead may
//                 throw JS JIT optimizations off, so it is worth to consider consistently using one
//                 style or the other.
/**
 * @param {number} ptr
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ToString(ptr, maxBytesToRead) {
  return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : '';
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   heap: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array.
//                    This count should include the null terminator,
//                    i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, heap, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) {
      var u1 = str.charCodeAt(++i);
      u = 0x10000 + ((u & 0x3FF) << 10) | (u1 & 0x3FF);
    }
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      heap[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      heap[outIdx++] = 0xC0 | (u >> 6);
      heap[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      heap[outIdx++] = 0xE0 | (u >> 12);
      heap[outIdx++] = 0x80 | ((u >> 6) & 63);
      heap[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 3 >= endIdx) break;
      heap[outIdx++] = 0xF0 | (u >> 18);
      heap[outIdx++] = 0x80 | ((u >> 12) & 63);
      heap[outIdx++] = 0x80 | ((u >> 6) & 63);
      heap[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  heap[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.
function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) ++len;
    else if (u <= 0x7FF) len += 2;
    else if (u <= 0xFFFF) len += 3;
    else len += 4;
  }
  return len;
}





// runtime_strings_extra.js: Strings related runtime functions that are available only in regular runtime.

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAPU8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;

function UTF16ToString(ptr, maxBytesToRead) {
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  var maxIdx = idx + maxBytesToRead / 2;
  // If maxBytesToRead is not passed explicitly, it will be undefined, and this
  // will always evaluate to true. This saves on code size.
  while (!(idx >= maxIdx) && HEAPU16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0 || i == maxBytesToRead / 2) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr, maxBytesToRead) {
  var i = 0;

  var str = '';
  // If maxBytesToRead is not passed explicitly, it will be undefined, and this
  // will always evaluate to true. This saves on code size.
  while (!(i >= maxBytesToRead / 4)) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0) break;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
  return str;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated
    @param {boolean=} dontAddNull */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  HEAP8.set(array, buffer);
}

/** @param {boolean=} dontAddNull */
function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}



// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBufferAndViews(buf) {
  buffer = buf;
  Module['HEAP8'] = HEAP8 = new Int8Array(buf);
  Module['HEAP16'] = HEAP16 = new Int16Array(buf);
  Module['HEAP32'] = HEAP32 = new Int32Array(buf);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buf);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buf);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buf);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buf);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buf);
}

var STATIC_BASE = 1024,
    STACK_BASE = 5268512,
    STACKTOP = STACK_BASE,
    STACK_MAX = 25632,
    DYNAMIC_BASE = 5268512,
    DYNAMICTOP_PTR = 25472;



var TOTAL_STACK = 5242880;

var INITIAL_INITIAL_MEMORY = Module['INITIAL_MEMORY'] || 16777216;









// In non-standalone/normal mode, we create the memory here.



// Create the main memory. (Note: this isn't used in STANDALONE_WASM mode since the wasm
// memory is created in the wasm, not in JS.)

  if (Module['wasmMemory']) {
    wasmMemory = Module['wasmMemory'];
  } else
  {
    wasmMemory = new WebAssembly.Memory({
      'initial': INITIAL_INITIAL_MEMORY / WASM_PAGE_SIZE
      ,
      'maximum': 2147483648 / WASM_PAGE_SIZE
    });
  }


if (wasmMemory) {
  buffer = wasmMemory.buffer;
}

// If the user provides an incorrect length, just use that length instead rather than providing the user to
// specifically provide the memory length with Module['INITIAL_MEMORY'].
INITIAL_INITIAL_MEMORY = buffer.byteLength;
updateGlobalBufferAndViews(buffer);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;














function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback(Module); // Pass the module as the first argument.
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the main() is called

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {

  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPRERUN__);
}

function initRuntime() {
  runtimeInitialized = true;
  if (!Module["noFSInit"] && !FS.init.initialized) FS.init();
TTY.init();
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  FS.ignorePermissions = false;
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  runtimeExited = true;
}

function postRun() {

  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

/** @param {number|boolean=} ignore */
function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
/** @param {number|boolean=} ignore */
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}




// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/imul

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/fround

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc


var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_max = Math.max;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;



// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// Module.preRun (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled

function getUniqueRunDependency(id) {
  return id;
}

function addRunDependency(id) {
  runDependencies++;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

}

function removeRunDependency(id) {
  runDependencies--;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data

/** @param {string|number=} what */
function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  what += '';
  out(what);
  err(what);

  ABORT = true;
  EXITSTATUS = 1;

  what = 'abort(' + what + '). Build with -s ASSERTIONS=1 for more info.';

  // Throw a wasm runtime error, because a JS error might be seen as a foreign
  // exception, which means we'd run destructors on it. We need the error to
  // simply make the program stop.
  throw new WebAssembly.RuntimeError(what);
}


var memoryInitializer = null;












function hasPrefix(str, prefix) {
  return String.prototype.startsWith ?
      str.startsWith(prefix) :
      str.indexOf(prefix) === 0;
}

// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return hasPrefix(filename, dataURIPrefix);
}

var fileURIPrefix = "file://";

// Indicates whether filename is delivered via file protocol (as opposed to http/https)
function isFileURI(filename) {
  return hasPrefix(filename, fileURIPrefix);
}




var wasmBinaryFile = 'jieba.emcc.wasm';
if (!isDataURI(wasmBinaryFile)) {
  wasmBinaryFile = locateFile(wasmBinaryFile);
}

function getBinary() {
  try {
    if (wasmBinary) {
      return new Uint8Array(wasmBinary);
    }

    var binary = tryParseAsDataURI(wasmBinaryFile);
    if (binary) {
      return binary;
    }
    if (readBinary) {
      return readBinary(wasmBinaryFile);
    } else {
      throw "sync fetching of the wasm failed: you can preload it to Module['wasmBinary'] manually, or emcc.py will do that for you when generating HTML (but not JS)";
    }
  }
  catch (err) {
    abort(err);
  }
}

function getBinaryPromise() {
  // If we don't have the binary yet, and have the Fetch api, use that;
  // in some environments, like Electron's render process, Fetch api may be present, but have a different context than expected, let's only use it on the Web
  if (!wasmBinary && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) && typeof fetch === 'function'
      // Let's not use fetch to get objects over file:// as it's most likely Cordova which doesn't support fetch for file://
      && !isFileURI(wasmBinaryFile)
      ) {
    return fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(function(response) {
      if (!response['ok']) {
        throw "failed to load wasm binary file at '" + wasmBinaryFile + "'";
      }
      return response['arrayBuffer']();
    }).catch(function () {
      return getBinary();
    });
  }
  // Otherwise, getBinary should be able to get it synchronously
  return new Promise(function(resolve, reject) {
    resolve(getBinary());
  });
}



// Create the wasm instance.
// Receives the wasm imports, returns the exports.
function createWasm() {
  // prepare imports
  var info = {
    'env': asmLibraryArg,
    'wasi_snapshot_preview1': asmLibraryArg
  };
  // Load the wasm module and create an instance of using native support in the JS engine.
  // handle a generated wasm instance, receiving its exports and
  // performing other necessary setup
  /** @param {WebAssembly.Module=} module*/
  function receiveInstance(instance, module) {
    var exports = instance.exports;
    Module['asm'] = exports;
    removeRunDependency('wasm-instantiate');
  }
  // we can't run yet (except in a pthread, where we have a custom sync instantiator)
  addRunDependency('wasm-instantiate');


  function receiveInstantiatedSource(output) {
    // 'output' is a WebAssemblyInstantiatedSource object which has both the module and instance.
    // receiveInstance() will swap in the exports (to Module.asm) so they can be called
    // TODO: Due to Closure regression https://github.com/google/closure-compiler/issues/3193, the above line no longer optimizes out down to the following line.
    // When the regression is fixed, can restore the above USE_PTHREADS-enabled path.
    receiveInstance(output['instance']);
  }


  function instantiateArrayBuffer(receiver) {
    return getBinaryPromise().then(function(binary) {
      return WebAssembly.instantiate(binary, info);
    }).then(receiver, function(reason) {
      err('failed to asynchronously prepare wasm: ' + reason);
      abort(reason);
    });
  }

  // Prefer streaming instantiation if available.
  function instantiateSync() {
    var instance;
    var module;
    var binary;
    try {
      binary = getBinary();
      module = new WebAssembly.Module(binary);
      instance = new WebAssembly.Instance(module, info);
    } catch (e) {
      var str = e.toString();
      err('failed to compile wasm module: ' + str);
      if (str.indexOf('imported Memory') >= 0 ||
          str.indexOf('memory import') >= 0) {
        err('Memory size incompatibility issues may be due to changing INITIAL_MEMORY at runtime to something too large. Use ALLOW_MEMORY_GROWTH to allow any size memory (and also make sure not to set INITIAL_MEMORY at runtime to something smaller than it was at compile time).');
      }
      throw e;
    }
    receiveInstance(instance, module);
  }
  // User shell pages can write their own Module.instantiateWasm = function(imports, successCallback) callback
  // to manually instantiate the Wasm module themselves. This allows pages to run the instantiation parallel
  // to any other async startup actions they are performing.
  if (Module['instantiateWasm']) {
    try {
      var exports = Module['instantiateWasm'](info, receiveInstance);
      return exports;
    } catch(e) {
      err('Module.instantiateWasm callback failed with error: ' + e);
      return false;
    }
  }

  instantiateSync();
  return Module['asm']; // exports were assigned here
}


// Globals used by JS i64 conversions
var tempDouble;
var tempI64;

// === Body ===

var ASM_CONSTS = {
  
};




// STATICTOP = STATIC_BASE + 24608;
/* global initializers */  __ATINIT__.push({ func: function() { ___wasm_call_ctors() } });




/* no memory initializer */
// {{PRE_LIBRARY}}


  function demangle(func) {
      return func;
    }

  function demangleAll(text) {
      var regex =
        /\b_Z[\w\d_]+/g;
      return text.replace(regex,
        function(x) {
          var y = demangle(x);
          return x === y ? x : (y + ' [' + x + ']');
        });
    }

  function jsStackTrace() {
      var err = new Error();
      if (!err.stack) {
        // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
        // so try that as a special-case.
        try {
          throw new Error();
        } catch(e) {
          err = e;
        }
        if (!err.stack) {
          return '(no stack trace available)';
        }
      }
      return err.stack.toString();
    }

  function stackTrace() {
      var js = jsStackTrace();
      if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
      return demangleAll(js);
    }

  function ___assert_fail(condition, filename, line, func) {
      abort('Assertion failed: ' + UTF8ToString(condition) + ', at: ' + [filename ? UTF8ToString(filename) : 'unknown filename', line, func ? UTF8ToString(func) : 'unknown function']);
    }

  function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }

  
  function _atexit(func, arg) {
      __ATEXIT__.unshift({ func: func, arg: arg });
    }function ___cxa_atexit(a0,a1
  ) {
  return _atexit(a0,a1);
  }

  
  var ___exception_infos={};
  
  var ___exception_last=0;
  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return __ZSt18uncaught_exceptionv.uncaught_exceptions > 0;
    }function ___cxa_throw(ptr, type, destructor) {
      ___exception_infos[ptr] = {
        ptr: ptr,
        adjusted: [ptr],
        type: type,
        destructor: destructor,
        refcount: 0,
        caught: false,
        rethrown: false
      };
      ___exception_last = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exceptions = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exceptions++;
      }
      throw ptr;
    }

  
  function setErrNo(value) {
      HEAP32[((___errno_location())>>2)]=value;
      return value;
    }function ___map_file(pathname, size) {
      setErrNo(63);
      return -1;
    }

  
  
  var PATH={splitPath:function(filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function(parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up; up--) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function(path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function(path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function(path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function(path) {
        return PATH.splitPath(path)[3];
      },join:function() {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function(l, r) {
        return PATH.normalize(l + '/' + r);
      }};
  
  
  var PATH_FS={resolve:function() {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function(from, to) {
        from = PATH_FS.resolve(from).substr(1);
        to = PATH_FS.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function() {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function(dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function(stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(43);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function(stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function(stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function(stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(60);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(29);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(6);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function(stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(60);
          }
          try {
            for (var i = 0; i < length; i++) {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            }
          } catch (e) {
            throw new FS.ErrnoError(29);
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function(tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = Buffer.alloc ? Buffer.alloc(BUFSIZE) : new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              try {
                bytesRead = nodeFS.readSync(process.stdin.fd, buf, 0, BUFSIZE, null);
              } catch(e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().indexOf('EOF') != -1) bytesRead = 0;
                else throw e;
              }
  
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
            } else
            if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function(tty, val) {
          if (val === null || val === 10) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function(tty) {
          if (tty.output && tty.output.length > 0) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function(tty, val) {
          if (val === null || val === 10) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function(tty) {
          if (tty.output && tty.output.length > 0) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function(mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function(parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(63);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function(node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function(node) {
        if (!node.contents) return new Uint8Array(0);
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function(node, newCapacity) {
        var prevCapacity = node.contents ? node.contents.length : 0;
        if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
        // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
        // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
        // avoid overshooting the allocation cap by a very large margin.
        var CAPACITY_DOUBLING_MAX = 1024 * 1024;
        newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) >>> 0);
        if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
        var oldContents = node.contents;
        node.contents = new Uint8Array(newCapacity); // Allocate new storage.
        if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
        return;
      },resizeFileStorage:function(node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newSize); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function(node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function(node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function(parent, name) {
          throw FS.genericErrors[44];
        },mknod:function(parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function(old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(55);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function(parent, name) {
          delete parent.contents[name];
        },rmdir:function(parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(55);
          }
          delete parent.contents[name];
        },readdir:function(node) {
          var entries = ['.', '..'];
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function(parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function(node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(28);
          }
          return node.link;
        }},stream_ops:{read:function(stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function(stream, buffer, offset, length, position, canOwn) {
          // If the buffer is located in main memory (HEAP), and if
          // memory can grow, we can't hold on to references of the
          // memory buffer, as they may get invalidated. That means we
          // need to do copy its contents.
          if (buffer.buffer === HEAP8.buffer) {
            canOwn = false;
          }
  
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = buffer.slice(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position + length);
          return length;
        },llseek:function(stream, offset, whence) {
          var position = offset;
          if (whence === 1) {
            position += stream.position;
          } else if (whence === 2) {
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(28);
          }
          return position;
        },allocate:function(stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function(stream, address, length, position, prot, flags) {
          // We don't currently support location hints for the address of the mapping
          assert(address === 0);
  
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(43);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if (!(flags & 2) && contents.buffer === buffer) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < contents.length) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(48);
            }
            HEAP8.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function(stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(43);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};var FS={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function(e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return setErrNo(e.errno);
      },lookupPath:function(path, opts) {
        path = PATH_FS.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(32);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH_FS.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(32);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function(node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function(parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function(node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function(node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function(parent, name) {
        var errCode = FS.mayLookup(parent);
        if (errCode) {
          throw new FS.ErrnoError(errCode, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function(parent, name, mode, rdev) {
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function(node) {
        FS.hashRemoveNode(node);
      },isRoot:function(node) {
        return node === node.parent;
      },isMountpoint:function(node) {
        return !!node.mounted;
      },isFile:function(mode) {
        return (mode & 61440) === 32768;
      },isDir:function(mode) {
        return (mode & 61440) === 16384;
      },isLink:function(mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function(mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function(mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function(mode) {
        return (mode & 61440) === 4096;
      },isSocket:function(mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function(str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function(flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function(node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return 2;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return 2;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return 2;
        }
        return 0;
      },mayLookup:function(dir) {
        var errCode = FS.nodePermissions(dir, 'x');
        if (errCode) return errCode;
        if (!dir.node_ops.lookup) return 2;
        return 0;
      },mayCreate:function(dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return 20;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function(dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var errCode = FS.nodePermissions(dir, 'wx');
        if (errCode) {
          return errCode;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return 54;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return 10;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return 31;
          }
        }
        return 0;
      },mayOpen:function(node, flags) {
        if (!node) {
          return 44;
        }
        if (FS.isLink(node.mode)) {
          return 32;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return 31;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function(fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(33);
      },getStream:function(fd) {
        return FS.streams[fd];
      },createStream:function(stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = /** @constructor */ function(){};
          FS.FSStream.prototype = {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          };
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function(fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function(stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function() {
          throw new FS.ErrnoError(70);
        }},major:function(dev) {
        return ((dev) >> 8);
      },minor:function(dev) {
        return ((dev) & 0xff);
      },makedev:function(ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function(dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function(dev) {
        return FS.devices[dev];
      },getMounts:function(mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function(populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          err('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(errCode) {
          FS.syncFSRequests--;
          return callback(errCode);
        }
  
        function done(errCode) {
          if (errCode) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(errCode);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function(type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(10);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(10);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(54);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(28);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        node.mount.mounts.splice(idx, 1);
      },lookup:function(parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function(path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(28);
        }
        var errCode = FS.mayCreate(parent, name);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(63);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function(path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function(path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:function(path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != 20) throw e;
          }
        }
      },mkdev:function(path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function(oldpath, newpath) {
        if (!PATH_FS.resolve(oldpath)) {
          throw new FS.ErrnoError(44);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(44);
        }
        var newname = PATH.basename(newpath);
        var errCode = FS.mayCreate(parent, newname);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(63);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function(old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(10);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(44);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(75);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH_FS.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(28);
        }
        // new path should not be an ancestor of the old path
        relative = PATH_FS.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(55);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var errCode = FS.mayDelete(old_dir, old_name, isdir);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        errCode = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(10);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          errCode = FS.nodePermissions(old_dir, 'w');
          if (errCode) {
            throw new FS.ErrnoError(errCode);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          err("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          err("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function(path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var errCode = FS.mayDelete(parent, name, true);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(10);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          err("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          err("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function(path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(54);
        }
        return node.node_ops.readdir(node);
      },unlink:function(path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var errCode = FS.mayDelete(parent, name, false);
        if (errCode) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(10);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          err("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          err("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function(path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(44);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(28);
        }
        return PATH_FS.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function(path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(44);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(63);
        }
        return node.node_ops.getattr(node);
      },lstat:function(path) {
        return FS.stat(path, true);
      },chmod:function(path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function(path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function(fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        FS.chmod(stream.node, mode);
      },chown:function(path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function(path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function(fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function(path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(28);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(28);
        }
        var errCode = FS.nodePermissions(node, 'w');
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function(fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(28);
        }
        FS.truncate(stream.node, len);
      },utime:function(path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function(path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(44);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(20);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(44);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(54);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var errCode = FS.mayOpen(node, flags);
          if (errCode) {
            throw new FS.ErrnoError(errCode);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512 | 131072);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            err("FS.trackingDelegate error on read file: " + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          err("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function(stream) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
        stream.fd = null;
      },isClosed:function(stream) {
        return stream.fd === null;
      },llseek:function(stream, offset, whence) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(70);
        }
        if (whence != 0 && whence != 1 && whence != 2) {
          throw new FS.ErrnoError(28);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function(stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(28);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(8);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(28);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(70);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function(stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(28);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(8);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(28);
        }
        if (stream.seekable && stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(70);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          err("FS.trackingDelegate['onWriteToFile']('"+stream.path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function(stream, offset, length) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(28);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(8);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(43);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(138);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function(stream, address, length, position, prot, flags) {
        // User requests writing to file (prot & PROT_WRITE != 0).
        // Checking if we have permissions to write to the file unless
        // MAP_PRIVATE flag is set. According to POSIX spec it is possible
        // to write to file opened in read-only mode with MAP_PRIVATE flag,
        // as all modifications will be visible only in the memory of
        // the current process.
        if ((prot & 2) !== 0
            && (flags & 2) === 0
            && (stream.flags & 2097155) !== 2) {
          throw new FS.ErrnoError(2);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(2);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(43);
        }
        return stream.stream_ops.mmap(stream, address, length, position, prot, flags);
      },msync:function(stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function(stream) {
        return 0;
      },ioctl:function(stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(59);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function(path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function(path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        var stream = FS.open(path, opts.flags, opts.mode);
        if (typeof data === 'string') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);
        } else if (ArrayBuffer.isView(data)) {
          FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);
        } else {
          throw new Error('Unsupported data type');
        }
        FS.close(stream);
      },cwd:function() {
        return FS.currentPath;
      },chdir:function(path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(44);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(54);
        }
        var errCode = FS.nodePermissions(lookup.node, 'x');
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function() {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function() {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto === 'object' && typeof crypto['getRandomValues'] === 'function') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else
        if (ENVIRONMENT_IS_NODE) {
          // for nodejs with or without crypto support included
          try {
            var crypto_module = require('crypto');
            // nodejs has crypto support
            random_device = function() { return crypto_module['randomBytes'](1)[0]; };
          } catch (e) {
            // nodejs doesn't have crypto support
          }
        } else
        {}
        if (!random_device) {
          // we couldn't find a proper implementation, as Math.random() is not suitable for /dev/random, see emscripten-core/emscripten/pull/7096
          random_device = function() { abort("random_device"); };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function() {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(8);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function() {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        var stdout = FS.open('/dev/stdout', 'w');
        var stderr = FS.open('/dev/stderr', 'w');
      },ensureErrnoError:function() {
        if (FS.ErrnoError) return;
        FS.ErrnoError = /** @this{Object} */ function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = /** @this{Object} */ function(errno) {
            this.errno = errno;
          };
          this.setErrno(errno);
          this.message = 'FS error';
  
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [44].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function() {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
        };
      },init:function(input, output, error) {
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function() {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function(canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function(parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function(relative, base) {
        return PATH_FS.resolve(base, relative);
      },standardizePath:function(path) {
        return PATH.normalize(path);
      },findObject:function(path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          setErrNo(ret.error);
          return null;
        }
      },analyzePath:function(path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function(parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function(parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function(parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function(parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function(parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(29);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(6);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(29);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function(parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function(obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (read_) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(read_(obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) setErrNo(29);
        return success;
      },createLazyFile:function(parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        /** @constructor */
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = /** @this{Object} */ function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        };
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        };
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(/** @type{Array<number>} */(xhr.response || []));
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            out("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        };
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: /** @this{Object} */ function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: /** @this{Object} */ function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: /** @this {FSNode} */ function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(29);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(29);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function(parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH_FS.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function() {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function() {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function(paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          out('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function(paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var SYSCALLS={mappings:{},DEFAULT_POLLMASK:5,umask:511,calculateAt:function(dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(8);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function(func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -54;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        (tempI64 = [stat.size>>>0,(tempDouble=stat.size,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((buf)+(40))>>2)]=tempI64[0],HEAP32[(((buf)+(44))>>2)]=tempI64[1]);
        HEAP32[(((buf)+(48))>>2)]=4096;
        HEAP32[(((buf)+(52))>>2)]=stat.blocks;
        HEAP32[(((buf)+(56))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(76))>>2)]=0;
        (tempI64 = [stat.ino>>>0,(tempDouble=stat.ino,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((buf)+(80))>>2)]=tempI64[0],HEAP32[(((buf)+(84))>>2)]=tempI64[1]);
        return 0;
      },doMsync:function(addr, stream, len, flags, offset) {
        var buffer = HEAPU8.slice(addr, addr + len);
        FS.msync(stream, buffer, offset, len, flags);
      },doMkdir:function(path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function(path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -28;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function(path, buf, bufsize) {
        if (bufsize <= 0) return -28;
        var ret = FS.readlink(path);
  
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;
  
        return len;
      },doAccess:function(path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -28;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        if (!node) {
          return -44;
        }
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -2;
        }
        return 0;
      },doDup:function(path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function(stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function(stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:undefined,get:function() {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function(ptr) {
        var ret = UTF8ToString(ptr);
        return ret;
      },getStreamFromFD:function(fd) {
        var stream = FS.getStream(fd);
        if (!stream) throw new FS.ErrnoError(8);
        return stream;
      },get64:function(low, high) {
        return low;
      }};function ___sys_fcntl64(fd, cmd, varargs) {SYSCALLS.varargs = varargs;
  try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -28;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        /* case 12: Currently in musl F_GETLK64 has same value as F_GETLK, so omitted to avoid duplicate case blocks. If that changes, uncomment this */ {
          
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        /* case 13: Currently in musl F_SETLK64 has same value as F_SETLK, so omitted to avoid duplicate case blocks. If that changes, uncomment this */
        /* case 14: Currently in musl F_SETLKW64 has same value as F_SETLKW, so omitted to avoid duplicate case blocks. If that changes, uncomment this */
          
          
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -28; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          setErrNo(28);
          return -1;
        default: {
          return -28;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___sys_ioctl(fd, op, varargs) {SYSCALLS.varargs = varargs;
  try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      switch (op) {
        case 21509:
        case 21505: {
          if (!stream.tty) return -59;
          return 0;
        }
        case 21510:
        case 21511:
        case 21512:
        case 21506:
        case 21507:
        case 21508: {
          if (!stream.tty) return -59;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -59;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -59;
          return -28; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        case 21523: {
          // TODO: in theory we should write to the winsize struct that gets
          // passed in, but for now musl doesn't read anything on it
          if (!stream.tty) return -59;
          return 0;
        }
        case 21524: {
          // TODO: technically, this ioctl call should change the window size.
          // but, since emscripten doesn't have any concept of a terminal window
          // yet, we'll just silently throw it away as we do TIOCGWINSZ
          if (!stream.tty) return -59;
          return 0;
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  function syscallMunmap(addr, len) {
      if ((addr | 0) === -1 || len === 0) {
        return -28;
      }
      // TODO: support unmmap'ing parts of allocations
      var info = SYSCALLS.mappings[addr];
      if (!info) return 0;
      if (len === info.len) {
        var stream = FS.getStream(info.fd);
        if (info.prot & 2) {
          SYSCALLS.doMsync(addr, stream, len, info.flags, info.offset);
        }
        FS.munmap(stream);
        SYSCALLS.mappings[addr] = null;
        if (info.allocated) {
          _free(info.malloc);
        }
      }
      return 0;
    }function ___sys_munmap(addr, len) {try {
  
      return syscallMunmap(addr, len);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___sys_open(path, flags, varargs) {SYSCALLS.varargs = varargs;
  try {
  
      var pathname = SYSCALLS.getStr(path);
      var mode = SYSCALLS.get();
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _abort() {
      abort();
    }

  function _array_push_size(v) {
      _array.push(v)
    }

  function _emscripten_get_sbrk_ptr() {
      return 25472;
    }

  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.copyWithin(dest, src, src + num);
    }

  
  function _emscripten_get_heap_size() {
      return HEAPU8.length;
    }
  
  function emscripten_realloc_buffer(size) {
      try {
        // round size grow request up to wasm page size (fixed 64KB per spec)
        wasmMemory.grow((size - buffer.byteLength + 65535) >>> 16); // .grow() takes a delta compared to the previous size
        updateGlobalBufferAndViews(wasmMemory.buffer);
        return 1 /*success*/;
      } catch(e) {
      }
    }function _emscripten_resize_heap(requestedSize) {
      requestedSize = requestedSize >>> 0;
      var oldSize = _emscripten_get_heap_size();
      // With pthreads, races can happen (another thread might increase the size in between), so return a failure, and let the caller retry.
  
  
      var PAGE_MULTIPLE = 65536;
  
      // Memory resize rules:
      // 1. When resizing, always produce a resized heap that is at least 16MB (to avoid tiny heap sizes receiving lots of repeated resizes at startup)
      // 2. Always increase heap size to at least the requested size, rounded up to next page multiple.
      // 3a. If MEMORY_GROWTH_LINEAR_STEP == -1, excessively resize the heap geometrically: increase the heap size according to 
      //                                         MEMORY_GROWTH_GEOMETRIC_STEP factor (default +20%),
      //                                         At most overreserve by MEMORY_GROWTH_GEOMETRIC_CAP bytes (default 96MB).
      // 3b. If MEMORY_GROWTH_LINEAR_STEP != -1, excessively resize the heap linearly: increase the heap size by at least MEMORY_GROWTH_LINEAR_STEP bytes.
      // 4. Max size for the heap is capped at 2048MB-PAGE_MULTIPLE, or by MAXIMUM_MEMORY, or by ASAN limit, depending on which is smallest
      // 5. If we were unable to allocate as much memory, it may be due to over-eager decision to excessively reserve due to (3) above.
      //    Hence if an allocation fails, cut down on the amount of excess growth, in an attempt to succeed to perform a smaller allocation.
  
      // A limit was set for how much we can grow. We should not exceed that
      // (the wasm binary specifies it, so if we tried, we'd fail anyhow).
      var maxHeapSize = 2147483648;
      if (requestedSize > maxHeapSize) {
        return false;
      }
  
      var minHeapSize = 16777216;
  
      // Loop through potential heap size increases. If we attempt a too eager reservation that fails, cut down on the
      // attempted size and reserve a smaller bump instead. (max 3 times, chosen somewhat arbitrarily)
      for(var cutDown = 1; cutDown <= 4; cutDown *= 2) {
        var overGrownHeapSize = oldSize * (1 + 0.2 / cutDown); // ensure geometric growth
        // but limit overreserving (default to capping at +96MB overgrowth at most)
        overGrownHeapSize = Math.min(overGrownHeapSize, requestedSize + 100663296 );
  
  
        var newSize = Math.min(maxHeapSize, alignUp(Math.max(minHeapSize, requestedSize, overGrownHeapSize), PAGE_MULTIPLE));
  
        var replacement = emscripten_realloc_buffer(newSize);
        if (replacement) {
  
          return true;
        }
      }
      return false;
    }

  
  
  var ENV={};
  
  function __getExecutableName() {
      return thisProgram || './this.program';
    }function getEnvStrings() {
      if (!getEnvStrings.strings) {
        // Default values.
        var env = {
          'USER': 'web_user',
          'LOGNAME': 'web_user',
          'PATH': '/',
          'PWD': '/',
          'HOME': '/home/web_user',
          // Browser language detection #8751
          'LANG': ((typeof navigator === 'object' && navigator.languages && navigator.languages[0]) || 'C').replace('-', '_') + '.UTF-8',
          '_': __getExecutableName()
        };
        // Apply the user-provided values, if any.
        for (var x in ENV) {
          env[x] = ENV[x];
        }
        var strings = [];
        for (var x in env) {
          strings.push(x + '=' + env[x]);
        }
        getEnvStrings.strings = strings;
      }
      return getEnvStrings.strings;
    }function _environ_get(__environ, environ_buf) {
      var bufSize = 0;
      getEnvStrings().forEach(function(string, i) {
        var ptr = environ_buf + bufSize;
        HEAP32[(((__environ)+(i * 4))>>2)]=ptr;
        writeAsciiToMemory(string, ptr);
        bufSize += string.length + 1;
      });
      return 0;
    }

  function _environ_sizes_get(penviron_count, penviron_buf_size) {
      var strings = getEnvStrings();
      HEAP32[((penviron_count)>>2)]=strings.length;
      var bufSize = 0;
      strings.forEach(function(string) {
        bufSize += string.length + 1;
      });
      HEAP32[((penviron_buf_size)>>2)]=bufSize;
      return 0;
    }

  function _fd_close(fd) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }

  function _fd_read(fd, iov, iovcnt, pnum) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      var num = SYSCALLS.doReadv(stream, iov, iovcnt);
      HEAP32[((pnum)>>2)]=num
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }

  function _fd_seek(fd, offset_low, offset_high, whence, newOffset) {try {
  
      
      var stream = SYSCALLS.getStreamFromFD(fd);
      var HIGH_OFFSET = 0x100000000; // 2^32
      // use an unsigned operator on low and shift high by 32-bits
      var offset = offset_high * HIGH_OFFSET + (offset_low >>> 0);
  
      var DOUBLE_LIMIT = 0x20000000000000; // 2^53
      // we also check for equality since DOUBLE_LIMIT + 1 == DOUBLE_LIMIT
      if (offset <= -DOUBLE_LIMIT || offset >= DOUBLE_LIMIT) {
        return -61;
      }
  
      FS.llseek(stream, offset, whence);
      (tempI64 = [stream.position>>>0,(tempDouble=stream.position,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((newOffset)>>2)]=tempI64[0],HEAP32[(((newOffset)+(4))>>2)]=tempI64[1]);
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }

  function _fd_write(fd, iov, iovcnt, pnum) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      var num = SYSCALLS.doWritev(stream, iov, iovcnt);
      HEAP32[((pnum)>>2)]=num
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }

  
  var ___tm_current=25488;
  
  
  var ___tm_timezone=(stringToUTF8("GMT", 25536, 4), 25536);
  
  function _tzset() {
      // TODO: Use (malleable) environment variables instead of system settings.
      if (_tzset.called) return;
      _tzset.called = true;
  
      // timezone is specified as seconds west of UTC ("The external variable
      // `timezone` shall be set to the difference, in seconds, between
      // Coordinated Universal Time (UTC) and local standard time."), the same
      // as returned by getTimezoneOffset().
      // See http://pubs.opengroup.org/onlinepubs/009695399/functions/tzset.html
      HEAP32[((__get_timezone())>>2)]=(new Date()).getTimezoneOffset() * 60;
  
      var currentYear = new Date().getFullYear();
      var winter = new Date(currentYear, 0, 1);
      var summer = new Date(currentYear, 6, 1);
      HEAP32[((__get_daylight())>>2)]=Number(winter.getTimezoneOffset() != summer.getTimezoneOffset());
  
      function extractZone(date) {
        var match = date.toTimeString().match(/\(([A-Za-z ]+)\)$/);
        return match ? match[1] : "GMT";
      };
      var winterName = extractZone(winter);
      var summerName = extractZone(summer);
      var winterNamePtr = allocateUTF8(winterName);
      var summerNamePtr = allocateUTF8(summerName);
      if (summer.getTimezoneOffset() < winter.getTimezoneOffset()) {
        // Northern hemisphere
        HEAP32[((__get_tzname())>>2)]=winterNamePtr;
        HEAP32[(((__get_tzname())+(4))>>2)]=summerNamePtr;
      } else {
        HEAP32[((__get_tzname())>>2)]=summerNamePtr;
        HEAP32[(((__get_tzname())+(4))>>2)]=winterNamePtr;
      }
    }function _localtime_r(time, tmPtr) {
      _tzset();
      var date = new Date(HEAP32[((time)>>2)]*1000);
      HEAP32[((tmPtr)>>2)]=date.getSeconds();
      HEAP32[(((tmPtr)+(4))>>2)]=date.getMinutes();
      HEAP32[(((tmPtr)+(8))>>2)]=date.getHours();
      HEAP32[(((tmPtr)+(12))>>2)]=date.getDate();
      HEAP32[(((tmPtr)+(16))>>2)]=date.getMonth();
      HEAP32[(((tmPtr)+(20))>>2)]=date.getFullYear()-1900;
      HEAP32[(((tmPtr)+(24))>>2)]=date.getDay();
  
      var start = new Date(date.getFullYear(), 0, 1);
      var yday = ((date.getTime() - start.getTime()) / (1000 * 60 * 60 * 24))|0;
      HEAP32[(((tmPtr)+(28))>>2)]=yday;
      HEAP32[(((tmPtr)+(36))>>2)]=-(date.getTimezoneOffset() * 60);
  
      // Attention: DST is in December in South, and some regions don't have DST at all.
      var summerOffset = new Date(date.getFullYear(), 6, 1).getTimezoneOffset();
      var winterOffset = start.getTimezoneOffset();
      var dst = (summerOffset != winterOffset && date.getTimezoneOffset() == Math.min(winterOffset, summerOffset))|0;
      HEAP32[(((tmPtr)+(32))>>2)]=dst;
  
      var zonePtr = HEAP32[(((__get_tzname())+(dst ? 4 : 0))>>2)];
      HEAP32[(((tmPtr)+(40))>>2)]=zonePtr;
  
      return tmPtr;
    }function _localtime(time) {
      return _localtime_r(time, ___tm_current);
    }

  function _result_push_keyword(word, weight) {
      _result.push({
        word: UTF8ToString(word),
        offsets: _array.splice(0),
        weight: weight
      })
    }

  function _result_push_tag(word, tag) {
      _result.push([
        UTF8ToString(word),
        UTF8ToString(tag)
      ])
    }

  function _result_push_word(word) {
      _result.push(UTF8ToString(word))
    }

  function _result_push_word_offset(word, offset, unicodeOffset) {
      _result.push({
        word: UTF8ToString(word),
        offset: offset,
        unicodeOffset: unicodeOffset
      })
    }

  function _setTempRet0($i) {
      setTempRet0(($i) | 0);
    }

  
  function __isLeapYear(year) {
        return year%4 === 0 && (year%100 !== 0 || year%400 === 0);
    }
  
  function __arraySum(array, index) {
      var sum = 0;
      for (var i = 0; i <= index; sum += array[i++]) {
        // no-op
      }
      return sum;
    }
  
  
  var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];
  
  var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];function __addDays(date, days) {
      var newDate = new Date(date.getTime());
      while(days > 0) {
        var leap = __isLeapYear(newDate.getFullYear());
        var currentMonth = newDate.getMonth();
        var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];
  
        if (days > daysInCurrentMonth-newDate.getDate()) {
          // we spill over to next month
          days -= (daysInCurrentMonth-newDate.getDate()+1);
          newDate.setDate(1);
          if (currentMonth < 11) {
            newDate.setMonth(currentMonth+1)
          } else {
            newDate.setMonth(0);
            newDate.setFullYear(newDate.getFullYear()+1);
          }
        } else {
          // we stay in current month
          newDate.setDate(newDate.getDate()+days);
          return newDate;
        }
      }
  
      return newDate;
    }function _strftime(s, maxsize, format, tm) {
      // size_t strftime(char *restrict s, size_t maxsize, const char *restrict format, const struct tm *restrict timeptr);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html
  
      var tm_zone = HEAP32[(((tm)+(40))>>2)];
  
      var date = {
        tm_sec: HEAP32[((tm)>>2)],
        tm_min: HEAP32[(((tm)+(4))>>2)],
        tm_hour: HEAP32[(((tm)+(8))>>2)],
        tm_mday: HEAP32[(((tm)+(12))>>2)],
        tm_mon: HEAP32[(((tm)+(16))>>2)],
        tm_year: HEAP32[(((tm)+(20))>>2)],
        tm_wday: HEAP32[(((tm)+(24))>>2)],
        tm_yday: HEAP32[(((tm)+(28))>>2)],
        tm_isdst: HEAP32[(((tm)+(32))>>2)],
        tm_gmtoff: HEAP32[(((tm)+(36))>>2)],
        tm_zone: tm_zone ? UTF8ToString(tm_zone) : ''
      };
  
      var pattern = UTF8ToString(format);
  
      // expand format
      var EXPANSION_RULES_1 = {
        '%c': '%a %b %d %H:%M:%S %Y',     // Replaced by the locale's appropriate date and time representation - e.g., Mon Aug  3 14:02:01 2013
        '%D': '%m/%d/%y',                 // Equivalent to %m / %d / %y
        '%F': '%Y-%m-%d',                 // Equivalent to %Y - %m - %d
        '%h': '%b',                       // Equivalent to %b
        '%r': '%I:%M:%S %p',              // Replaced by the time in a.m. and p.m. notation
        '%R': '%H:%M',                    // Replaced by the time in 24-hour notation
        '%T': '%H:%M:%S',                 // Replaced by the time
        '%x': '%m/%d/%y',                 // Replaced by the locale's appropriate date representation
        '%X': '%H:%M:%S',                 // Replaced by the locale's appropriate time representation
        // Modified Conversion Specifiers
        '%Ec': '%c',                      // Replaced by the locale's alternative appropriate date and time representation.
        '%EC': '%C',                      // Replaced by the name of the base year (period) in the locale's alternative representation.
        '%Ex': '%m/%d/%y',                // Replaced by the locale's alternative date representation.
        '%EX': '%H:%M:%S',                // Replaced by the locale's alternative time representation.
        '%Ey': '%y',                      // Replaced by the offset from %EC (year only) in the locale's alternative representation.
        '%EY': '%Y',                      // Replaced by the full alternative year representation.
        '%Od': '%d',                      // Replaced by the day of the month, using the locale's alternative numeric symbols, filled as needed with leading zeros if there is any alternative symbol for zero; otherwise, with leading <space> characters.
        '%Oe': '%e',                      // Replaced by the day of the month, using the locale's alternative numeric symbols, filled as needed with leading <space> characters.
        '%OH': '%H',                      // Replaced by the hour (24-hour clock) using the locale's alternative numeric symbols.
        '%OI': '%I',                      // Replaced by the hour (12-hour clock) using the locale's alternative numeric symbols.
        '%Om': '%m',                      // Replaced by the month using the locale's alternative numeric symbols.
        '%OM': '%M',                      // Replaced by the minutes using the locale's alternative numeric symbols.
        '%OS': '%S',                      // Replaced by the seconds using the locale's alternative numeric symbols.
        '%Ou': '%u',                      // Replaced by the weekday as a number in the locale's alternative representation (Monday=1).
        '%OU': '%U',                      // Replaced by the week number of the year (Sunday as the first day of the week, rules corresponding to %U ) using the locale's alternative numeric symbols.
        '%OV': '%V',                      // Replaced by the week number of the year (Monday as the first day of the week, rules corresponding to %V ) using the locale's alternative numeric symbols.
        '%Ow': '%w',                      // Replaced by the number of the weekday (Sunday=0) using the locale's alternative numeric symbols.
        '%OW': '%W',                      // Replaced by the week number of the year (Monday as the first day of the week) using the locale's alternative numeric symbols.
        '%Oy': '%y',                      // Replaced by the year (offset from %C ) using the locale's alternative numeric symbols.
      };
      for (var rule in EXPANSION_RULES_1) {
        pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_1[rule]);
      }
  
      var WEEKDAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
      var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
  
      function leadingSomething(value, digits, character) {
        var str = typeof value === 'number' ? value.toString() : (value || '');
        while (str.length < digits) {
          str = character[0]+str;
        }
        return str;
      }
  
      function leadingNulls(value, digits) {
        return leadingSomething(value, digits, '0');
      }
  
      function compareByDay(date1, date2) {
        function sgn(value) {
          return value < 0 ? -1 : (value > 0 ? 1 : 0);
        }
  
        var compare;
        if ((compare = sgn(date1.getFullYear()-date2.getFullYear())) === 0) {
          if ((compare = sgn(date1.getMonth()-date2.getMonth())) === 0) {
            compare = sgn(date1.getDate()-date2.getDate());
          }
        }
        return compare;
      }
  
      function getFirstWeekStartDate(janFourth) {
          switch (janFourth.getDay()) {
            case 0: // Sunday
              return new Date(janFourth.getFullYear()-1, 11, 29);
            case 1: // Monday
              return janFourth;
            case 2: // Tuesday
              return new Date(janFourth.getFullYear(), 0, 3);
            case 3: // Wednesday
              return new Date(janFourth.getFullYear(), 0, 2);
            case 4: // Thursday
              return new Date(janFourth.getFullYear(), 0, 1);
            case 5: // Friday
              return new Date(janFourth.getFullYear()-1, 11, 31);
            case 6: // Saturday
              return new Date(janFourth.getFullYear()-1, 11, 30);
          }
      }
  
      function getWeekBasedYear(date) {
          var thisDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
          var janFourthNextYear = new Date(thisDate.getFullYear()+1, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
            // this date is after the start of the first week of this year
            if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
              return thisDate.getFullYear()+1;
            } else {
              return thisDate.getFullYear();
            }
          } else {
            return thisDate.getFullYear()-1;
          }
      }
  
      var EXPANSION_RULES_2 = {
        '%a': function(date) {
          return WEEKDAYS[date.tm_wday].substring(0,3);
        },
        '%A': function(date) {
          return WEEKDAYS[date.tm_wday];
        },
        '%b': function(date) {
          return MONTHS[date.tm_mon].substring(0,3);
        },
        '%B': function(date) {
          return MONTHS[date.tm_mon];
        },
        '%C': function(date) {
          var year = date.tm_year+1900;
          return leadingNulls((year/100)|0,2);
        },
        '%d': function(date) {
          return leadingNulls(date.tm_mday, 2);
        },
        '%e': function(date) {
          return leadingSomething(date.tm_mday, 2, ' ');
        },
        '%g': function(date) {
          // %g, %G, and %V give values according to the ISO 8601:2000 standard week-based year.
          // In this system, weeks begin on a Monday and week 1 of the year is the week that includes
          // January 4th, which is also the week that includes the first Thursday of the year, and
          // is also the first week that contains at least four days in the year.
          // If the first Monday of January is the 2nd, 3rd, or 4th, the preceding days are part of
          // the last week of the preceding year; thus, for Saturday 2nd January 1999,
          // %G is replaced by 1998 and %V is replaced by 53. If December 29th, 30th,
          // or 31st is a Monday, it and any following days are part of week 1 of the following year.
          // Thus, for Tuesday 30th December 1997, %G is replaced by 1998 and %V is replaced by 01.
  
          return getWeekBasedYear(date).toString().substring(2);
        },
        '%G': function(date) {
          return getWeekBasedYear(date);
        },
        '%H': function(date) {
          return leadingNulls(date.tm_hour, 2);
        },
        '%I': function(date) {
          var twelveHour = date.tm_hour;
          if (twelveHour == 0) twelveHour = 12;
          else if (twelveHour > 12) twelveHour -= 12;
          return leadingNulls(twelveHour, 2);
        },
        '%j': function(date) {
          // Day of the year (001-366)
          return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date.tm_mon-1), 3);
        },
        '%m': function(date) {
          return leadingNulls(date.tm_mon+1, 2);
        },
        '%M': function(date) {
          return leadingNulls(date.tm_min, 2);
        },
        '%n': function() {
          return '\n';
        },
        '%p': function(date) {
          if (date.tm_hour >= 0 && date.tm_hour < 12) {
            return 'AM';
          } else {
            return 'PM';
          }
        },
        '%S': function(date) {
          return leadingNulls(date.tm_sec, 2);
        },
        '%t': function() {
          return '\t';
        },
        '%u': function(date) {
          return date.tm_wday || 7;
        },
        '%U': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53].
          // The first Sunday of January is the first day of week 1;
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year+1900, 0, 1);
          var firstSunday = janFirst.getDay() === 0 ? janFirst : __addDays(janFirst, 7-janFirst.getDay());
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
  
          // is target date after the first Sunday?
          if (compareByDay(firstSunday, endDate) < 0) {
            // calculate difference in days between first Sunday and endDate
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstSundayUntilEndJanuary = 31-firstSunday.getDate();
            var days = firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
  
          return compareByDay(firstSunday, janFirst) === 0 ? '01': '00';
        },
        '%V': function(date) {
          // Replaced by the week number of the year (Monday as the first day of the week)
          // as a decimal number [01,53]. If the week containing 1 January has four
          // or more days in the new year, then it is considered week 1.
          // Otherwise, it is the last week of the previous year, and the next week is week 1.
          // Both January 4th and the first Thursday of January are always in week 1. [ tm_year, tm_wday, tm_yday]
          var janFourthThisYear = new Date(date.tm_year+1900, 0, 4);
          var janFourthNextYear = new Date(date.tm_year+1901, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          var endDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          if (compareByDay(endDate, firstWeekStartThisYear) < 0) {
            // if given date is before this years first week, then it belongs to the 53rd week of last year
            return '53';
          }
  
          if (compareByDay(firstWeekStartNextYear, endDate) <= 0) {
            // if given date is after next years first week, then it belongs to the 01th week of next year
            return '01';
          }
  
          // given date is in between CW 01..53 of this calendar year
          var daysDifference;
          if (firstWeekStartThisYear.getFullYear() < date.tm_year+1900) {
            // first CW of this year starts last year
            daysDifference = date.tm_yday+32-firstWeekStartThisYear.getDate()
          } else {
            // first CW of this year starts this year
            daysDifference = date.tm_yday+1-firstWeekStartThisYear.getDate();
          }
          return leadingNulls(Math.ceil(daysDifference/7), 2);
        },
        '%w': function(date) {
          return date.tm_wday;
        },
        '%W': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53].
          // The first Monday of January is the first day of week 1;
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year, 0, 1);
          var firstMonday = janFirst.getDay() === 1 ? janFirst : __addDays(janFirst, janFirst.getDay() === 0 ? 1 : 7-janFirst.getDay()+1);
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
  
          // is target date after the first Monday?
          if (compareByDay(firstMonday, endDate) < 0) {
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstMondayUntilEndJanuary = 31-firstMonday.getDate();
            var days = firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
          return compareByDay(firstMonday, janFirst) === 0 ? '01': '00';
        },
        '%y': function(date) {
          // Replaced by the last two digits of the year as a decimal number [00,99]. [ tm_year]
          return (date.tm_year+1900).toString().substring(2);
        },
        '%Y': function(date) {
          // Replaced by the year as a decimal number (for example, 1997). [ tm_year]
          return date.tm_year+1900;
        },
        '%z': function(date) {
          // Replaced by the offset from UTC in the ISO 8601:2000 standard format ( +hhmm or -hhmm ).
          // For example, "-0430" means 4 hours 30 minutes behind UTC (west of Greenwich).
          var off = date.tm_gmtoff;
          var ahead = off >= 0;
          off = Math.abs(off) / 60;
          // convert from minutes into hhmm format (which means 60 minutes = 100 units)
          off = (off / 60)*100 + (off % 60);
          return (ahead ? '+' : '-') + String("0000" + off).slice(-4);
        },
        '%Z': function(date) {
          return date.tm_zone;
        },
        '%%': function() {
          return '%';
        }
      };
      for (var rule in EXPANSION_RULES_2) {
        if (pattern.indexOf(rule) >= 0) {
          pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_2[rule](date));
        }
      }
  
      var bytes = intArrayFromString(pattern, false);
      if (bytes.length > maxsize) {
        return 0;
      }
  
      writeArrayToMemory(bytes, s);
      return bytes.length-1;
    }

  function _strftime_l(s, maxsize, format, tm) {
      return _strftime(s, maxsize, format, tm); // no locale support yet
    }

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

var FSNode = /** @constructor */ function(parent, name, mode, rdev) {
    if (!parent) {
      parent = this;  // root node sets parent to itself
    }
    this.parent = parent;
    this.mount = parent.mount;
    this.mounted = null;
    this.id = FS.nextInode++;
    this.name = name;
    this.mode = mode;
    this.node_ops = {};
    this.stream_ops = {};
    this.rdev = rdev;
  };
  var readMode = 292/*292*/ | 73/*73*/;
  var writeMode = 146/*146*/;
  Object.defineProperties(FSNode.prototype, {
   read: {
    get: /** @this{FSNode} */function() {
     return (this.mode & readMode) === readMode;
    },
    set: /** @this{FSNode} */function(val) {
     val ? this.mode |= readMode : this.mode &= ~readMode;
    }
   },
   write: {
    get: /** @this{FSNode} */function() {
     return (this.mode & writeMode) === writeMode;
    },
    set: /** @this{FSNode} */function(val) {
     val ? this.mode |= writeMode : this.mode &= ~writeMode;
    }
   },
   isFolder: {
    get: /** @this{FSNode} */function() {
     return FS.isDir(this.mode);
    }
   },
   isDevice: {
    get: /** @this{FSNode} */function() {
     return FS.isChrdev(this.mode);
    }
   }
  });
  FS.FSNode = FSNode;
  FS.staticInit();Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;Module["FS_unlink"] = FS.unlink;;
var ASSERTIONS = false;



/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}


// Copied from https://github.com/strophe/strophejs/blob/e06d027/src/polyfills.js#L149

// This code was written by Tyler Akins and has been placed in the
// public domain.  It would be nice if you left this header intact.
// Base64 code from Tyler Akins -- http://rumkin.com

/**
 * Decodes a base64 string.
 * @param {string} input The string to decode.
 */
var decodeBase64 = typeof atob === 'function' ? atob : function (input) {
  var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

  var output = '';
  var chr1, chr2, chr3;
  var enc1, enc2, enc3, enc4;
  var i = 0;
  // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
  input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');
  do {
    enc1 = keyStr.indexOf(input.charAt(i++));
    enc2 = keyStr.indexOf(input.charAt(i++));
    enc3 = keyStr.indexOf(input.charAt(i++));
    enc4 = keyStr.indexOf(input.charAt(i++));

    chr1 = (enc1 << 2) | (enc2 >> 4);
    chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
    chr3 = ((enc3 & 3) << 6) | enc4;

    output = output + String.fromCharCode(chr1);

    if (enc3 !== 64) {
      output = output + String.fromCharCode(chr2);
    }
    if (enc4 !== 64) {
      output = output + String.fromCharCode(chr3);
    }
  } while (i < input.length);
  return output;
};

// Converts a string of base64 into a byte array.
// Throws error on invalid input.
function intArrayFromBase64(s) {
  if (typeof ENVIRONMENT_IS_NODE === 'boolean' && ENVIRONMENT_IS_NODE) {
    var buf;
    try {
      // TODO: Update Node.js externs, Closure does not recognize the following Buffer.from()
      /**@suppress{checkTypes}*/
      buf = Buffer.from(s, 'base64');
    } catch (_) {
      buf = new Buffer(s, 'base64');
    }
    return new Uint8Array(buf['buffer'], buf['byteOffset'], buf['byteLength']);
  }

  try {
    var decoded = decodeBase64(s);
    var bytes = new Uint8Array(decoded.length);
    for (var i = 0 ; i < decoded.length ; ++i) {
      bytes[i] = decoded.charCodeAt(i);
    }
    return bytes;
  } catch (_) {
    throw new Error('Converting base64 string to bytes failed.');
  }
}

// If filename is a base64 data URI, parses and returns data (Buffer on node,
// Uint8Array otherwise). If filename is not a base64 data URI, returns undefined.
function tryParseAsDataURI(filename) {
  if (!isDataURI(filename)) {
    return;
  }

  return intArrayFromBase64(filename.slice(dataURIPrefix.length));
}


var asmGlobalArg = {};
var asmLibraryArg = { "__assert_fail": ___assert_fail, "__cxa_allocate_exception": ___cxa_allocate_exception, "__cxa_atexit": ___cxa_atexit, "__cxa_throw": ___cxa_throw, "__map_file": ___map_file, "__sys_fcntl64": ___sys_fcntl64, "__sys_ioctl": ___sys_ioctl, "__sys_munmap": ___sys_munmap, "__sys_open": ___sys_open, "abort": _abort, "array_push_size": _array_push_size, "emscripten_get_sbrk_ptr": _emscripten_get_sbrk_ptr, "emscripten_memcpy_big": _emscripten_memcpy_big, "emscripten_resize_heap": _emscripten_resize_heap, "environ_get": _environ_get, "environ_sizes_get": _environ_sizes_get, "fd_close": _fd_close, "fd_read": _fd_read, "fd_seek": _fd_seek, "fd_write": _fd_write, "getTempRet0": getTempRet0, "localtime": _localtime, "memory": wasmMemory, "result_push_keyword": _result_push_keyword, "result_push_tag": _result_push_tag, "result_push_word": _result_push_word, "result_push_word_offset": _result_push_word_offset, "setTempRet0": setTempRet0, "strftime": _strftime, "strftime_l": _strftime_l, "table": wasmTable, "time": _time };
var asm = createWasm();
/** @type {function(...*):?} */
var ___wasm_call_ctors = Module["___wasm_call_ctors"] = asm["__wasm_call_ctors"]

/** @type {function(...*):?} */
var _Cut = Module["_Cut"] = asm["Cut"]

/** @type {function(...*):?} */
var _CutAll = Module["_CutAll"] = asm["CutAll"]

/** @type {function(...*):?} */
var _CutForSearch = Module["_CutForSearch"] = asm["CutForSearch"]

/** @type {function(...*):?} */
var _CutForSearchWithOffset = Module["_CutForSearchWithOffset"] = asm["CutForSearchWithOffset"]

/** @type {function(...*):?} */
var _InsertUserWord = Module["_InsertUserWord"] = asm["InsertUserWord"]

/** @type {function(...*):?} */
var _Tag = Module["_Tag"] = asm["Tag"]

/** @type {function(...*):?} */
var _Extract = Module["_Extract"] = asm["Extract"]

/** @type {function(...*):?} */
var _LookupTag = Module["_LookupTag"] = asm["LookupTag"]

/** @type {function(...*):?} */
var _main = Module["_main"] = asm["main"]

/** @type {function(...*):?} */
var _free = Module["_free"] = asm["free"]

/** @type {function(...*):?} */
var _malloc = Module["_malloc"] = asm["malloc"]

/** @type {function(...*):?} */
var ___errno_location = Module["___errno_location"] = asm["__errno_location"]

/** @type {function(...*):?} */
var __get_tzname = Module["__get_tzname"] = asm["_get_tzname"]

/** @type {function(...*):?} */
var __get_daylight = Module["__get_daylight"] = asm["_get_daylight"]

/** @type {function(...*):?} */
var __get_timezone = Module["__get_timezone"] = asm["_get_timezone"]

/** @type {function(...*):?} */
var _setThrew = Module["_setThrew"] = asm["setThrew"]

/** @type {function(...*):?} */
var stackSave = Module["stackSave"] = asm["stackSave"]

/** @type {function(...*):?} */
var stackRestore = Module["stackRestore"] = asm["stackRestore"]

/** @type {function(...*):?} */
var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"]

/** @type {function(...*):?} */
var __growWasmMemory = Module["__growWasmMemory"] = asm["__growWasmMemory"]

/** @type {function(...*):?} */
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"]

/** @type {function(...*):?} */
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"]

/** @type {function(...*):?} */
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"]

/** @type {function(...*):?} */
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"]

/** @type {function(...*):?} */
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"]

/** @type {function(...*):?} */
var dynCall_viijii = Module["dynCall_viijii"] = asm["dynCall_viijii"]

/** @type {function(...*):?} */
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"]

/** @type {function(...*):?} */
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"]

/** @type {function(...*):?} */
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"]

/** @type {function(...*):?} */
var dynCall_jiji = Module["dynCall_jiji"] = asm["dynCall_jiji"]

/** @type {function(...*):?} */
var dynCall_iidiiii = Module["dynCall_iidiiii"] = asm["dynCall_iidiiii"]

/** @type {function(...*):?} */
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"]

/** @type {function(...*):?} */
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"]

/** @type {function(...*):?} */
var dynCall_iiiiiiiii = Module["dynCall_iiiiiiiii"] = asm["dynCall_iiiiiiiii"]

/** @type {function(...*):?} */
var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = asm["dynCall_iiiiiii"]

/** @type {function(...*):?} */
var dynCall_iiiiij = Module["dynCall_iiiiij"] = asm["dynCall_iiiiij"]

/** @type {function(...*):?} */
var dynCall_iiiiid = Module["dynCall_iiiiid"] = asm["dynCall_iiiiid"]

/** @type {function(...*):?} */
var dynCall_iiiiijj = Module["dynCall_iiiiijj"] = asm["dynCall_iiiiijj"]

/** @type {function(...*):?} */
var dynCall_iiiiiiii = Module["dynCall_iiiiiiii"] = asm["dynCall_iiiiiiii"]

/** @type {function(...*):?} */
var dynCall_iiiiiijj = Module["dynCall_iiiiiijj"] = asm["dynCall_iiiiiijj"]

/** @type {function(...*):?} */
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"]

/** @type {function(...*):?} */
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"]





// === Auto-generated postamble setup entry stuff ===




Module["ccall"] = ccall;




Module["getMemory"] = getMemory;














Module["addRunDependency"] = addRunDependency;
Module["removeRunDependency"] = removeRunDependency;
Module["FS_createFolder"] = FS.createFolder;
Module["FS_createPath"] = FS.createPath;
Module["FS_createDataFile"] = FS.createDataFile;
Module["FS_createPreloadedFile"] = FS.createPreloadedFile;
Module["FS_createLazyFile"] = FS.createLazyFile;
Module["FS_createLink"] = FS.createLink;
Module["FS_createDevice"] = FS.createDevice;
Module["FS_unlink"] = FS.unlink;









































































































var calledRun;

/**
 * @constructor
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
}

var calledMain = false;


dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!calledRun) run();
  if (!calledRun) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
};

function callMain(args) {

  var entryFunction = Module['_main'];


  args = args || [];

  var argc = args.length+1;
  var argv = stackAlloc((argc + 1) * 4);
  HEAP32[argv >> 2] = allocateUTF8OnStack(thisProgram);
  for (var i = 1; i < argc; i++) {
    HEAP32[(argv >> 2) + i] = allocateUTF8OnStack(args[i - 1]);
  }
  HEAP32[(argv >> 2) + argc] = 0;

  try {


    var ret = entryFunction(argc, argv);


    // In PROXY_TO_PTHREAD builds, we should never exit the runtime below, as execution is asynchronously handed
    // off to a pthread.
    // if we're not running an evented main loop, it's time to exit
      exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'unwind') {
      // running an evented main loop, don't immediately exit
      noExitRuntime = true;
      return;
    } else {
      var toLog = e;
      if (e && typeof e === 'object' && e.stack) {
        toLog = [e, e.stack];
      }
      err('exception thrown: ' + toLog);
      quit_(1, e);
    }
  } finally {
    calledMain = true;
  }
}




/** @type {function(Array=)} */
function run(args) {
  args = args || arguments_;

  if (runDependencies > 0) {
    return;
  }


  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later

  function doRun() {
    // run may have just been called through dependencies being fulfilled just in this very frame,
    // or while the async setStatus time below was happening
    if (calledRun) return;
    calledRun = true;
    Module['calledRun'] = true;

    if (ABORT) return;

    initRuntime();

    preMain();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (shouldRunNow) callMain(args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else
  {
    doRun();
  }
}
Module['run'] = run;


/** @param {boolean|number=} implicit */
function exit(status, implicit) {

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && noExitRuntime && status === 0) {
    return;
  }

  if (noExitRuntime) {
  } else {

    ABORT = true;
    EXITSTATUS = status;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  quit_(status, new ExitStatus(status));
}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;

if (Module['noInitialRun']) shouldRunNow = false;


  noExitRuntime = true;

run();






// {{MODULE_ADDITIONS}}



/* global Module */
/* global _result _array */
/* eslint-disable */

/** in pre.js */
// module.exports = function() {
/** ... */
  return {
    cut: function(sentence, useHMM) {
      if(typeof useHMM ==='undefined') {
        useHMM = true
      }
      Module.ccall('Cut', 'number',
        ['string', 'boolean'],
        [sentence, useHMM]
      )
      return _result.splice(0)
    },
    cutAll: function(sentence) {
      Module.ccall('CutAll', 'number',
        ['string'],
        [sentence]
      )
      return _result.splice(0)
    },
    cutForSearch: function(sentence, useHMM) {
      if(typeof useHMM ==='undefined') {
        useHMM = true
      }
      Module.ccall('CutForSearch', 'number',
        ['string', 'boolean'],
        [sentence, useHMM]
      )
      return _result.splice(0)
    },
    cutForSearchWithOffset: function(sentence, useHMM) {
      if(typeof useHMM ==='undefined') {
        useHMM = true
      }
      Module.ccall('CutForSearchWithOffset', 'number',
        ['string', 'boolean'],
        [sentence, useHMM]
      )
      return _result.splice(0)
    },
    insertUserWord: function(word) {
      Module.ccall('InsertUserWord', 'number',
        ['string'],
        [word]
      )
    },
    tag: function(sentence) {
      Module.ccall('Tag', 'number',
        ['string'],
        [sentence]
      )
      return _result.splice(0)
    },
    extract: function(sentence, topk) {
      Module.ccall('Extract', 'number',
        ['string', 'number'],
        [sentence, topk]
      )
      return _result.splice(0)
    },
    lookupTag: function(sentence) {
      Module.ccall('LookupTag', 'number',
        ['string'],
        [sentence]
      )
      return _result.splice(0).pop()
    }
  }
}
